// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<GArray> g_array_new(
    int zero_terminated,
    int clear_,
    int element_size,
  ) {
    return _g_array_new(
      zero_terminated,
      clear_,
      element_size,
    );
  }

  late final _g_array_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              gboolean, gboolean, guint)>>('g_array_new');
  late final _g_array_new =
      _g_array_newPtr.asFunction<ffi.Pointer<GArray> Function(int, int, int)>();

  gpointer g_array_steal(
    ffi.Pointer<GArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_array_steal(
      array,
      len,
    );
  }

  late final _g_array_stealPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GArray>, ffi.Pointer<gsize>)>>('g_array_steal');
  late final _g_array_steal = _g_array_stealPtr
      .asFunction<gpointer Function(ffi.Pointer<GArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GArray> g_array_sized_new(
    int zero_terminated,
    int clear_,
    int element_size,
    int reserved_size,
  ) {
    return _g_array_sized_new(
      zero_terminated,
      clear_,
      element_size,
      reserved_size,
    );
  }

  late final _g_array_sized_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              gboolean, gboolean, guint, guint)>>('g_array_sized_new');
  late final _g_array_sized_new = _g_array_sized_newPtr
      .asFunction<ffi.Pointer<GArray> Function(int, int, int, int)>();

  ffi.Pointer<GArray> g_array_copy(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_copy(
      array,
    );
  }

  late final _g_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>>('g_array_copy');
  late final _g_array_copy = _g_array_copyPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>();

  ffi.Pointer<gchar> g_array_free(
    ffi.Pointer<GArray> array,
    int free_segment,
  ) {
    return _g_array_free(
      array,
      free_segment,
    );
  }

  late final _g_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GArray>, gboolean)>>('g_array_free');
  late final _g_array_free = _g_array_freePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_ref(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_ref(
      array,
    );
  }

  late final _g_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>>('g_array_ref');
  late final _g_array_ref = _g_array_refPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>();

  void g_array_unref(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_unref(
      array,
    );
  }

  late final _g_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GArray>)>>(
          'g_array_unref');
  late final _g_array_unref =
      _g_array_unrefPtr.asFunction<void Function(ffi.Pointer<GArray>)>();

  int g_array_get_element_size(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_get_element_size(
      array,
    );
  }

  late final _g_array_get_element_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GArray>)>>(
          'g_array_get_element_size');
  late final _g_array_get_element_size = _g_array_get_element_sizePtr
      .asFunction<int Function(ffi.Pointer<GArray>)>();

  ffi.Pointer<GArray> g_array_append_vals(
    ffi.Pointer<GArray> array,
    gconstpointer data,
    int len,
  ) {
    return _g_array_append_vals(
      array,
      data,
      len,
    );
  }

  late final _g_array_append_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer,
              guint)>>('g_array_append_vals');
  late final _g_array_append_vals = _g_array_append_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_prepend_vals(
    ffi.Pointer<GArray> array,
    gconstpointer data,
    int len,
  ) {
    return _g_array_prepend_vals(
      array,
      data,
      len,
    );
  }

  late final _g_array_prepend_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer,
              guint)>>('g_array_prepend_vals');
  late final _g_array_prepend_vals = _g_array_prepend_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_insert_vals(
    ffi.Pointer<GArray> array,
    int index_,
    gconstpointer data,
    int len,
  ) {
    return _g_array_insert_vals(
      array,
      index_,
      data,
      len,
    );
  }

  late final _g_array_insert_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, guint,
              gconstpointer, guint)>>('g_array_insert_vals');
  late final _g_array_insert_vals = _g_array_insert_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(
          ffi.Pointer<GArray>, int, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_set_size(
    ffi.Pointer<GArray> array,
    int length,
  ) {
    return _g_array_set_size(
      array,
      length,
    );
  }

  late final _g_array_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_set_size');
  late final _g_array_set_size = _g_array_set_sizePtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_index(
    ffi.Pointer<GArray> array,
    int index_,
  ) {
    return _g_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_array_remove_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_remove_index');
  late final _g_array_remove_index = _g_array_remove_indexPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_index_fast(
    ffi.Pointer<GArray> array,
    int index_,
  ) {
    return _g_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_array_remove_index_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_remove_index_fast');
  late final _g_array_remove_index_fast = _g_array_remove_index_fastPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_range(
    ffi.Pointer<GArray> array,
    int index_,
    int length,
  ) {
    return _g_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint, guint)>>('g_array_remove_range');
  late final _g_array_remove_range = _g_array_remove_rangePtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int, int)>();

  void g_array_sort(
    ffi.Pointer<GArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GArray>, GCompareFunc)>>('g_array_sort');
  late final _g_array_sort = _g_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GArray>, GCompareFunc)>();

  void g_array_sort_with_data(
    ffi.Pointer<GArray> array,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GArray>, GCompareDataFunc,
              gpointer)>>('g_array_sort_with_data');
  late final _g_array_sort_with_data = _g_array_sort_with_dataPtr.asFunction<
      void Function(ffi.Pointer<GArray>, GCompareDataFunc, gpointer)>();

  int g_array_binary_search(
    ffi.Pointer<GArray> array,
    gconstpointer target,
    GCompareFunc compare_func,
    ffi.Pointer<guint> out_match_index,
  ) {
    return _g_array_binary_search(
      array,
      target,
      compare_func,
      out_match_index,
    );
  }

  late final _g_array_binary_searchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GArray>, gconstpointer, GCompareFunc,
              ffi.Pointer<guint>)>>('g_array_binary_search');
  late final _g_array_binary_search = _g_array_binary_searchPtr.asFunction<
      int Function(ffi.Pointer<GArray>, gconstpointer, GCompareFunc,
          ffi.Pointer<guint>)>();

  void g_array_set_clear_func(
    ffi.Pointer<GArray> array,
    GDestroyNotify clear_func,
  ) {
    return _g_array_set_clear_func(
      array,
      clear_func,
    );
  }

  late final _g_array_set_clear_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GArray>, GDestroyNotify)>>('g_array_set_clear_func');
  late final _g_array_set_clear_func = _g_array_set_clear_funcPtr
      .asFunction<void Function(ffi.Pointer<GArray>, GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new() {
    return _g_ptr_array_new();
  }

  late final _g_ptr_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPtrArray> Function()>>(
          'g_ptr_array_new');
  late final _g_ptr_array_new =
      _g_ptr_array_newPtr.asFunction<ffi.Pointer<GPtrArray> Function()>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_with_free_func(
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_with_free_func(
      element_free_func,
    );
  }

  late final _g_ptr_array_new_with_free_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GPtrArray> Function(GDestroyNotify)>>(
      'g_ptr_array_new_with_free_func');
  late final _g_ptr_array_new_with_free_func =
      _g_ptr_array_new_with_free_funcPtr
          .asFunction<ffi.Pointer<GPtrArray> Function(GDestroyNotify)>();

  ffi.Pointer<gpointer> g_ptr_array_steal(
    ffi.Pointer<GPtrArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_ptr_array_steal(
      array,
      len,
    );
  }

  late final _g_ptr_array_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gpointer> Function(ffi.Pointer<GPtrArray>,
              ffi.Pointer<gsize>)>>('g_ptr_array_steal');
  late final _g_ptr_array_steal = _g_ptr_array_stealPtr.asFunction<
      ffi.Pointer<gpointer> Function(
          ffi.Pointer<GPtrArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GPtrArray> g_ptr_array_copy(
    ffi.Pointer<GPtrArray> array,
    GCopyFunc func,
    gpointer user_data,
  ) {
    return _g_ptr_array_copy(
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, GCopyFunc,
              gpointer)>>('g_ptr_array_copy');
  late final _g_ptr_array_copy = _g_ptr_array_copyPtr.asFunction<
      ffi.Pointer<GPtrArray> Function(
          ffi.Pointer<GPtrArray>, GCopyFunc, gpointer)>();

  ffi.Pointer<GPtrArray> g_ptr_array_sized_new(
    int reserved_size,
  ) {
    return _g_ptr_array_sized_new(
      reserved_size,
    );
  }

  late final _g_ptr_array_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPtrArray> Function(guint)>>(
          'g_ptr_array_sized_new');
  late final _g_ptr_array_sized_new = _g_ptr_array_sized_newPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(int)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_full(
    int reserved_size,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_full(
      reserved_size,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              guint, GDestroyNotify)>>('g_ptr_array_new_full');
  late final _g_ptr_array_new_full = _g_ptr_array_new_fullPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(int, GDestroyNotify)>();

  ffi.Pointer<gpointer> g_ptr_array_free(
    ffi.Pointer<GPtrArray> array,
    int free_seg,
  ) {
    return _g_ptr_array_free(
      array,
      free_seg,
    );
  }

  late final _g_ptr_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gpointer> Function(
              ffi.Pointer<GPtrArray>, gboolean)>>('g_ptr_array_free');
  late final _g_ptr_array_free = _g_ptr_array_freePtr.asFunction<
      ffi.Pointer<gpointer> Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer<GPtrArray> g_ptr_array_ref(
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_ref(
      array,
    );
  }

  late final _g_ptr_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<GPtrArray>)>>('g_ptr_array_ref');
  late final _g_ptr_array_ref = _g_ptr_array_refPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_unref(
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_unref(
      array,
    );
  }

  late final _g_ptr_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPtrArray>)>>(
          'g_ptr_array_unref');
  late final _g_ptr_array_unref =
      _g_ptr_array_unrefPtr.asFunction<void Function(ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_set_free_func(
    ffi.Pointer<GPtrArray> array,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_set_free_func(
      array,
      element_free_func,
    );
  }

  late final _g_ptr_array_set_free_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>,
              GDestroyNotify)>>('g_ptr_array_set_free_func');
  late final _g_ptr_array_set_free_func = _g_ptr_array_set_free_funcPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GDestroyNotify)>();

  void g_ptr_array_set_size(
    ffi.Pointer<GPtrArray> array,
    int length,
  ) {
    return _g_ptr_array_set_size(
      array,
      length,
    );
  }

  late final _g_ptr_array_set_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPtrArray>, gint)>>(
      'g_ptr_array_set_size');
  late final _g_ptr_array_set_size = _g_ptr_array_set_sizePtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, int)>();

  gpointer g_ptr_array_remove_index(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_ptr_array_remove_indexPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_remove_index');
  late final _g_ptr_array_remove_index = _g_ptr_array_remove_indexPtr
      .asFunction<gpointer Function(ffi.Pointer<GPtrArray>, int)>();

  gpointer g_ptr_array_remove_index_fast(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_ptr_array_remove_index_fastPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_remove_index_fast');
  late final _g_ptr_array_remove_index_fast = _g_ptr_array_remove_index_fastPtr
      .asFunction<gpointer Function(ffi.Pointer<GPtrArray>, int)>();

  gpointer g_ptr_array_steal_index(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_steal_index(
      array,
      index_,
    );
  }

  late final _g_ptr_array_steal_indexPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_steal_index');
  late final _g_ptr_array_steal_index = _g_ptr_array_steal_indexPtr
      .asFunction<gpointer Function(ffi.Pointer<GPtrArray>, int)>();

  gpointer g_ptr_array_steal_index_fast(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_steal_index_fast(
      array,
      index_,
    );
  }

  late final _g_ptr_array_steal_index_fastPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_steal_index_fast');
  late final _g_ptr_array_steal_index_fast = _g_ptr_array_steal_index_fastPtr
      .asFunction<gpointer Function(ffi.Pointer<GPtrArray>, int)>();

  int g_ptr_array_remove(
    ffi.Pointer<GPtrArray> array,
    gpointer data,
  ) {
    return _g_ptr_array_remove(
      array,
      data,
    );
  }

  late final _g_ptr_array_removePtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GPtrArray>, gpointer)>>(
      'g_ptr_array_remove');
  late final _g_ptr_array_remove = _g_ptr_array_removePtr
      .asFunction<int Function(ffi.Pointer<GPtrArray>, gpointer)>();

  int g_ptr_array_remove_fast(
    ffi.Pointer<GPtrArray> array,
    gpointer data,
  ) {
    return _g_ptr_array_remove_fast(
      array,
      data,
    );
  }

  late final _g_ptr_array_remove_fastPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GPtrArray>, gpointer)>>(
      'g_ptr_array_remove_fast');
  late final _g_ptr_array_remove_fast = _g_ptr_array_remove_fastPtr
      .asFunction<int Function(ffi.Pointer<GPtrArray>, gpointer)>();

  ffi.Pointer<GPtrArray> g_ptr_array_remove_range(
    ffi.Pointer<GPtrArray> array,
    int index_,
    int length,
  ) {
    return _g_ptr_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_ptr_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, guint,
              guint)>>('g_ptr_array_remove_range');
  late final _g_ptr_array_remove_range =
      _g_ptr_array_remove_rangePtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, int, int)>();

  void g_ptr_array_add(
    ffi.Pointer<GPtrArray> array,
    gpointer data,
  ) {
    return _g_ptr_array_add(
      array,
      data,
    );
  }

  late final _g_ptr_array_addPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GPtrArray>, gpointer)>>(
      'g_ptr_array_add');
  late final _g_ptr_array_add = _g_ptr_array_addPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, gpointer)>();

  void g_ptr_array_extend(
    ffi.Pointer<GPtrArray> array_to_extend,
    ffi.Pointer<GPtrArray> array,
    GCopyFunc func,
    gpointer user_data,
  ) {
    return _g_ptr_array_extend(
      array_to_extend,
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>,
              GCopyFunc, gpointer)>>('g_ptr_array_extend');
  late final _g_ptr_array_extend = _g_ptr_array_extendPtr.asFunction<
      void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>, GCopyFunc,
          gpointer)>();

  void g_ptr_array_extend_and_steal(
    ffi.Pointer<GPtrArray> array_to_extend,
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_extend_and_steal(
      array_to_extend,
      array,
    );
  }

  late final _g_ptr_array_extend_and_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>,
              ffi.Pointer<GPtrArray>)>>('g_ptr_array_extend_and_steal');
  late final _g_ptr_array_extend_and_steal =
      _g_ptr_array_extend_and_stealPtr.asFunction<
          void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_insert(
    ffi.Pointer<GPtrArray> array,
    int index_,
    gpointer data,
  ) {
    return _g_ptr_array_insert(
      array,
      index_,
      data,
    );
  }

  late final _g_ptr_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPtrArray>, gint, gpointer)>>('g_ptr_array_insert');
  late final _g_ptr_array_insert = _g_ptr_array_insertPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, int, gpointer)>();

  void g_ptr_array_sort(
    ffi.Pointer<GPtrArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_ptr_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_ptr_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPtrArray>, GCompareFunc)>>('g_ptr_array_sort');
  late final _g_ptr_array_sort = _g_ptr_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GCompareFunc)>();

  void g_ptr_array_sort_with_data(
    ffi.Pointer<GPtrArray> array,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_ptr_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_ptr_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, GCompareDataFunc,
              gpointer)>>('g_ptr_array_sort_with_data');
  late final _g_ptr_array_sort_with_data =
      _g_ptr_array_sort_with_dataPtr.asFunction<
          void Function(ffi.Pointer<GPtrArray>, GCompareDataFunc, gpointer)>();

  void g_ptr_array_foreach(
    ffi.Pointer<GPtrArray> array,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_ptr_array_foreach(
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPtrArray>, GFunc, gpointer)>>('g_ptr_array_foreach');
  late final _g_ptr_array_foreach = _g_ptr_array_foreachPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GFunc, gpointer)>();

  int g_ptr_array_find(
    ffi.Pointer<GPtrArray> haystack,
    gconstpointer needle,
    ffi.Pointer<guint> index_,
  ) {
    return _g_ptr_array_find(
      haystack,
      needle,
      index_,
    );
  }

  late final _g_ptr_array_findPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPtrArray>, gconstpointer,
              ffi.Pointer<guint>)>>('g_ptr_array_find');
  late final _g_ptr_array_find = _g_ptr_array_findPtr.asFunction<
      int Function(
          ffi.Pointer<GPtrArray>, gconstpointer, ffi.Pointer<guint>)>();

  int g_ptr_array_find_with_equal_func(
    ffi.Pointer<GPtrArray> haystack,
    gconstpointer needle,
    GEqualFunc equal_func,
    ffi.Pointer<guint> index_,
  ) {
    return _g_ptr_array_find_with_equal_func(
      haystack,
      needle,
      equal_func,
      index_,
    );
  }

  late final _g_ptr_array_find_with_equal_funcPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPtrArray>, gconstpointer, GEqualFunc,
              ffi.Pointer<guint>)>>('g_ptr_array_find_with_equal_func');
  late final _g_ptr_array_find_with_equal_func =
      _g_ptr_array_find_with_equal_funcPtr.asFunction<
          int Function(ffi.Pointer<GPtrArray>, gconstpointer, GEqualFunc,
              ffi.Pointer<guint>)>();

  ffi.Pointer<GByteArray> g_byte_array_new() {
    return _g_byte_array_new();
  }

  late final _g_byte_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GByteArray> Function()>>(
          'g_byte_array_new');
  late final _g_byte_array_new =
      _g_byte_array_newPtr.asFunction<ffi.Pointer<GByteArray> Function()>();

  ffi.Pointer<GByteArray> g_byte_array_new_take(
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_new_take(
      data,
      len,
    );
  }

  late final _g_byte_array_new_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<guint8>, gsize)>>('g_byte_array_new_take');
  late final _g_byte_array_new_take = _g_byte_array_new_takePtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<guint8>, int)>();

  ffi.Pointer<guint8> g_byte_array_steal(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_byte_array_steal(
      array,
      len,
    );
  }

  late final _g_byte_array_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<gsize>)>>('g_byte_array_steal');
  late final _g_byte_array_steal = _g_byte_array_stealPtr.asFunction<
      ffi.Pointer<guint8> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GByteArray> g_byte_array_sized_new(
    int reserved_size,
  ) {
    return _g_byte_array_sized_new(
      reserved_size,
    );
  }

  late final _g_byte_array_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GByteArray> Function(guint)>>(
          'g_byte_array_sized_new');
  late final _g_byte_array_sized_new = _g_byte_array_sized_newPtr
      .asFunction<ffi.Pointer<GByteArray> Function(int)>();

  ffi.Pointer<guint8> g_byte_array_free(
    ffi.Pointer<GByteArray> array,
    int free_segment,
  ) {
    return _g_byte_array_free(
      array,
      free_segment,
    );
  }

  late final _g_byte_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(
              ffi.Pointer<GByteArray>, gboolean)>>('g_byte_array_free');
  late final _g_byte_array_free = _g_byte_array_freePtr
      .asFunction<ffi.Pointer<guint8> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GBytes> g_byte_array_free_to_bytes(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_free_to_bytes(
      array,
    );
  }

  late final _g_byte_array_free_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GByteArray>)>>('g_byte_array_free_to_bytes');
  late final _g_byte_array_free_to_bytes = _g_byte_array_free_to_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GByteArray>)>();

  ffi.Pointer<GByteArray> g_byte_array_ref(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_ref(
      array,
    );
  }

  late final _g_byte_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>)>>('g_byte_array_ref');
  late final _g_byte_array_ref = _g_byte_array_refPtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>)>();

  void g_byte_array_unref(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_unref(
      array,
    );
  }

  late final _g_byte_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GByteArray>)>>(
          'g_byte_array_unref');
  late final _g_byte_array_unref = _g_byte_array_unrefPtr
      .asFunction<void Function(ffi.Pointer<GByteArray>)>();

  ffi.Pointer<GByteArray> g_byte_array_append(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_append(
      array,
      data,
      len,
    );
  }

  late final _g_byte_array_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<guint8>, guint)>>('g_byte_array_append');
  late final _g_byte_array_append = _g_byte_array_appendPtr.asFunction<
      ffi.Pointer<GByteArray> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<guint8>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_prepend(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_prepend(
      array,
      data,
      len,
    );
  }

  late final _g_byte_array_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<guint8>, guint)>>('g_byte_array_prepend');
  late final _g_byte_array_prepend = _g_byte_array_prependPtr.asFunction<
      ffi.Pointer<GByteArray> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<guint8>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_set_size(
    ffi.Pointer<GByteArray> array,
    int length,
  ) {
    return _g_byte_array_set_size(
      array,
      length,
    );
  }

  late final _g_byte_array_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, guint)>>('g_byte_array_set_size');
  late final _g_byte_array_set_size = _g_byte_array_set_sizePtr.asFunction<
      ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_index(
    ffi.Pointer<GByteArray> array,
    int index_,
  ) {
    return _g_byte_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_byte_array_remove_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, guint)>>('g_byte_array_remove_index');
  late final _g_byte_array_remove_index =
      _g_byte_array_remove_indexPtr.asFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_index_fast(
    ffi.Pointer<GByteArray> array,
    int index_,
  ) {
    return _g_byte_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_byte_array_remove_index_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              guint)>>('g_byte_array_remove_index_fast');
  late final _g_byte_array_remove_index_fast =
      _g_byte_array_remove_index_fastPtr.asFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_range(
    ffi.Pointer<GByteArray> array,
    int index_,
    int length,
  ) {
    return _g_byte_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_byte_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, guint,
              guint)>>('g_byte_array_remove_range');
  late final _g_byte_array_remove_range =
      _g_byte_array_remove_rangePtr.asFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, int, int)>();

  void g_byte_array_sort(
    ffi.Pointer<GByteArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_byte_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_byte_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GByteArray>, GCompareFunc)>>('g_byte_array_sort');
  late final _g_byte_array_sort = _g_byte_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GByteArray>, GCompareFunc)>();

  void g_byte_array_sort_with_data(
    ffi.Pointer<GByteArray> array,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_byte_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_byte_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GByteArray>, GCompareDataFunc,
              gpointer)>>('g_byte_array_sort_with_data');
  late final _g_byte_array_sort_with_data =
      _g_byte_array_sort_with_dataPtr.asFunction<
          void Function(ffi.Pointer<GByteArray>, GCompareDataFunc, gpointer)>();

  int g_atomic_int_get(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_get(
      atomic,
    );
  }

  late final _g_atomic_int_getPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_get');
  late final _g_atomic_int_get =
      _g_atomic_int_getPtr.asFunction<int Function(ffi.Pointer<gint>)>();

  void g_atomic_int_set(
    ffi.Pointer<gint> atomic,
    int newval,
  ) {
    return _g_atomic_int_set(
      atomic,
      newval,
    );
  }

  late final _g_atomic_int_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_set');
  late final _g_atomic_int_set =
      _g_atomic_int_setPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  void g_atomic_int_inc(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_inc(
      atomic,
    );
  }

  late final _g_atomic_int_incPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_inc');
  late final _g_atomic_int_inc =
      _g_atomic_int_incPtr.asFunction<void Function(ffi.Pointer<gint>)>();

  int g_atomic_int_dec_and_test(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_dec_and_test(
      atomic,
    );
  }

  late final _g_atomic_int_dec_and_testPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_dec_and_test');
  late final _g_atomic_int_dec_and_test = _g_atomic_int_dec_and_testPtr
      .asFunction<int Function(ffi.Pointer<gint>)>();

  int g_atomic_int_compare_and_exchange(
    ffi.Pointer<gint> atomic,
    int oldval,
    int newval,
  ) {
    return _g_atomic_int_compare_and_exchange(
      atomic,
      oldval,
      newval,
    );
  }

  late final _g_atomic_int_compare_and_exchangePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>, gint, gint)>>(
      'g_atomic_int_compare_and_exchange');
  late final _g_atomic_int_compare_and_exchange =
      _g_atomic_int_compare_and_exchangePtr
          .asFunction<int Function(ffi.Pointer<gint>, int, int)>();

  int g_atomic_int_add(
    ffi.Pointer<gint> atomic,
    int val,
  ) {
    return _g_atomic_int_add(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_addPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_add');
  late final _g_atomic_int_add =
      _g_atomic_int_addPtr.asFunction<int Function(ffi.Pointer<gint>, int)>();

  int g_atomic_int_and(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_and(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_andPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_and');
  late final _g_atomic_int_and =
      _g_atomic_int_andPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_int_or(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_or(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_orPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_or');
  late final _g_atomic_int_or =
      _g_atomic_int_orPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_int_xor(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_xor(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_xorPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_xor');
  late final _g_atomic_int_xor =
      _g_atomic_int_xorPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_int_exchange_and_add(
    ffi.Pointer<gint> atomic,
    int val,
  ) {
    return _g_atomic_int_exchange_and_add(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_exchange_and_addPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_exchange_and_add');
  late final _g_atomic_int_exchange_and_add = _g_atomic_int_exchange_and_addPtr
      .asFunction<int Function(ffi.Pointer<gint>, int)>();

  int g_quark_try_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_quark_try_string(
      string,
    );
  }

  late final _g_quark_try_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<gchar>)>>(
          'g_quark_try_string');
  late final _g_quark_try_string =
      _g_quark_try_stringPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_quark_from_static_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_quark_from_static_string(
      string,
    );
  }

  late final _g_quark_from_static_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<gchar>)>>(
          'g_quark_from_static_string');
  late final _g_quark_from_static_string = _g_quark_from_static_stringPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_quark_from_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_quark_from_string(
      string,
    );
  }

  late final _g_quark_from_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<gchar>)>>(
          'g_quark_from_string');
  late final _g_quark_from_string =
      _g_quark_from_stringPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_quark_to_string(
    int quark,
  ) {
    return _g_quark_to_string(
      quark,
    );
  }

  late final _g_quark_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GQuark)>>(
          'g_quark_to_string');
  late final _g_quark_to_string =
      _g_quark_to_stringPtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  ffi.Pointer<gchar> g_intern_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_intern_string(
      string,
    );
  }

  late final _g_intern_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_intern_string');
  late final _g_intern_string = _g_intern_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_intern_static_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_intern_static_string(
      string,
    );
  }

  late final _g_intern_static_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_intern_static_string');
  late final _g_intern_static_string = _g_intern_static_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_error_domain_register_static(
    ffi.Pointer<ffi.Char> error_type_name,
    int error_type_private_size,
    GErrorInitFunc error_type_init,
    GErrorCopyFunc error_type_copy,
    GErrorClearFunc error_type_clear,
  ) {
    return _g_error_domain_register_static(
      error_type_name,
      error_type_private_size,
      error_type_init,
      error_type_copy,
      error_type_clear,
    );
  }

  late final _g_error_domain_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GQuark Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              GErrorInitFunc,
              GErrorCopyFunc,
              GErrorClearFunc)>>('g_error_domain_register_static');
  late final _g_error_domain_register_static =
      _g_error_domain_register_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, GErrorInitFunc,
              GErrorCopyFunc, GErrorClearFunc)>();

  int g_error_domain_register(
    ffi.Pointer<ffi.Char> error_type_name,
    int error_type_private_size,
    GErrorInitFunc error_type_init,
    GErrorCopyFunc error_type_copy,
    GErrorClearFunc error_type_clear,
  ) {
    return _g_error_domain_register(
      error_type_name,
      error_type_private_size,
      error_type_init,
      error_type_copy,
      error_type_clear,
    );
  }

  late final _g_error_domain_registerPtr = _lookup<
      ffi.NativeFunction<
          GQuark Function(ffi.Pointer<ffi.Char>, gsize, GErrorInitFunc,
              GErrorCopyFunc, GErrorClearFunc)>>('g_error_domain_register');
  late final _g_error_domain_register = _g_error_domain_registerPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, GErrorInitFunc, GErrorCopyFunc,
          GErrorClearFunc)>();

  ffi.Pointer<GError> g_error_new(
    int domain,
    int code,
    ffi.Pointer<gchar> format,
  ) {
    return _g_error_new(
      domain,
      code,
      format,
    );
  }

  late final _g_error_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(
              GQuark, gint, ffi.Pointer<gchar>)>>('g_error_new');
  late final _g_error_new = _g_error_newPtr
      .asFunction<ffi.Pointer<GError> Function(int, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GError> g_error_new_literal(
    int domain,
    int code,
    ffi.Pointer<gchar> message,
  ) {
    return _g_error_new_literal(
      domain,
      code,
      message,
    );
  }

  late final _g_error_new_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(
              GQuark, gint, ffi.Pointer<gchar>)>>('g_error_new_literal');
  late final _g_error_new_literal = _g_error_new_literalPtr
      .asFunction<ffi.Pointer<GError> Function(int, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GError> g_error_new_valist(
    int domain,
    int code,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_error_new_valist(
      domain,
      code,
      format,
      args,
    );
  }

  late final _g_error_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(GQuark, gint, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_error_new_valist');
  late final _g_error_new_valist = _g_error_new_valistPtr.asFunction<
      ffi.Pointer<GError> Function(
          int, int, ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  void g_error_free(
    ffi.Pointer<GError> error,
  ) {
    return _g_error_free(
      error,
    );
  }

  late final _g_error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GError>)>>(
          'g_error_free');
  late final _g_error_free =
      _g_error_freePtr.asFunction<void Function(ffi.Pointer<GError>)>();

  ffi.Pointer<GError> g_error_copy(
    ffi.Pointer<GError> error,
  ) {
    return _g_error_copy(
      error,
    );
  }

  late final _g_error_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(ffi.Pointer<GError>)>>('g_error_copy');
  late final _g_error_copy = _g_error_copyPtr
      .asFunction<ffi.Pointer<GError> Function(ffi.Pointer<GError>)>();

  int g_error_matches(
    ffi.Pointer<GError> error,
    int domain,
    int code,
  ) {
    return _g_error_matches(
      error,
      domain,
      code,
    );
  }

  late final _g_error_matchesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GError>, GQuark, gint)>>('g_error_matches');
  late final _g_error_matches = _g_error_matchesPtr
      .asFunction<int Function(ffi.Pointer<GError>, int, int)>();

  void g_set_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
    int domain,
    int code,
    ffi.Pointer<gchar> format,
  ) {
    return _g_set_error(
      err,
      domain,
      code,
      format,
    );
  }

  late final _g_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>, GQuark, gint,
              ffi.Pointer<gchar>)>>('g_set_error');
  late final _g_set_error = _g_set_errorPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GError>>, int, int, ffi.Pointer<gchar>)>();

  void g_set_error_literal(
    ffi.Pointer<ffi.Pointer<GError>> err,
    int domain,
    int code,
    ffi.Pointer<gchar> message,
  ) {
    return _g_set_error_literal(
      err,
      domain,
      code,
      message,
    );
  }

  late final _g_set_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>, GQuark, gint,
              ffi.Pointer<gchar>)>>('g_set_error_literal');
  late final _g_set_error_literal = _g_set_error_literalPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GError>>, int, int, ffi.Pointer<gchar>)>();

  void g_propagate_error(
    ffi.Pointer<ffi.Pointer<GError>> dest,
    ffi.Pointer<GError> src,
  ) {
    return _g_propagate_error(
      dest,
      src,
    );
  }

  late final _g_propagate_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<GError>)>>('g_propagate_error');
  late final _g_propagate_error = _g_propagate_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<GError>)>();

  void g_clear_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _g_clear_error(
      err,
    );
  }

  late final _g_clear_errorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_clear_error');
  late final _g_clear_error = _g_clear_errorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_prefix_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
    ffi.Pointer<gchar> format,
  ) {
    return _g_prefix_error(
      err,
      format,
    );
  }

  late final _g_prefix_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_prefix_error');
  late final _g_prefix_error = _g_prefix_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>)>();

  void g_prefix_error_literal(
    ffi.Pointer<ffi.Pointer<GError>> err,
    ffi.Pointer<gchar> prefix,
  ) {
    return _g_prefix_error_literal(
      err,
      prefix,
    );
  }

  late final _g_prefix_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_prefix_error_literal');
  late final _g_prefix_error_literal = _g_prefix_error_literalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>)>();

  void g_propagate_prefixed_error(
    ffi.Pointer<ffi.Pointer<GError>> dest,
    ffi.Pointer<GError> src,
    ffi.Pointer<gchar> format,
  ) {
    return _g_propagate_prefixed_error(
      dest,
      src,
      format,
    );
  }

  late final _g_propagate_prefixed_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<GError>,
              ffi.Pointer<gchar>)>>('g_propagate_prefixed_error');
  late final _g_propagate_prefixed_error =
      _g_propagate_prefixed_errorPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<GError>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_get_user_name() {
    return _g_get_user_name();
  }

  late final _g_get_user_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_name');
  late final _g_get_user_name =
      _g_get_user_namePtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_real_name() {
    return _g_get_real_name();
  }

  late final _g_get_real_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_real_name');
  late final _g_get_real_name =
      _g_get_real_namePtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_home_dir() {
    return _g_get_home_dir();
  }

  late final _g_get_home_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_home_dir');
  late final _g_get_home_dir =
      _g_get_home_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_tmp_dir() {
    return _g_get_tmp_dir();
  }

  late final _g_get_tmp_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_tmp_dir');
  late final _g_get_tmp_dir =
      _g_get_tmp_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_host_name() {
    return _g_get_host_name();
  }

  late final _g_get_host_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_host_name');
  late final _g_get_host_name =
      _g_get_host_namePtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_prgname() {
    return _g_get_prgname();
  }

  late final _g_get_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_prgname');
  late final _g_get_prgname =
      _g_get_prgnamePtr.asFunction<ffi.Pointer<gchar> Function()>();

  void g_set_prgname(
    ffi.Pointer<gchar> prgname,
  ) {
    return _g_set_prgname(
      prgname,
    );
  }

  late final _g_set_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_set_prgname');
  late final _g_set_prgname =
      _g_set_prgnamePtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_get_application_name() {
    return _g_get_application_name();
  }

  late final _g_get_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_application_name');
  late final _g_get_application_name =
      _g_get_application_namePtr.asFunction<ffi.Pointer<gchar> Function()>();

  void g_set_application_name(
    ffi.Pointer<gchar> application_name,
  ) {
    return _g_set_application_name(
      application_name,
    );
  }

  late final _g_set_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_set_application_name');
  late final _g_set_application_name = _g_set_application_namePtr
      .asFunction<void Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_get_os_info(
    ffi.Pointer<gchar> key_name,
  ) {
    return _g_get_os_info(
      key_name,
    );
  }

  late final _g_get_os_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_get_os_info');
  late final _g_get_os_info = _g_get_os_infoPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  void g_reload_user_special_dirs_cache() {
    return _g_reload_user_special_dirs_cache();
  }

  late final _g_reload_user_special_dirs_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_reload_user_special_dirs_cache');
  late final _g_reload_user_special_dirs_cache =
      _g_reload_user_special_dirs_cachePtr.asFunction<void Function()>();

  ffi.Pointer<gchar> g_get_user_data_dir() {
    return _g_get_user_data_dir();
  }

  late final _g_get_user_data_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_data_dir');
  late final _g_get_user_data_dir =
      _g_get_user_data_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_user_config_dir() {
    return _g_get_user_config_dir();
  }

  late final _g_get_user_config_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_config_dir');
  late final _g_get_user_config_dir =
      _g_get_user_config_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_user_cache_dir() {
    return _g_get_user_cache_dir();
  }

  late final _g_get_user_cache_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_cache_dir');
  late final _g_get_user_cache_dir =
      _g_get_user_cache_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_user_state_dir() {
    return _g_get_user_state_dir();
  }

  late final _g_get_user_state_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_state_dir');
  late final _g_get_user_state_dir =
      _g_get_user_state_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_system_data_dirs() {
    return _g_get_system_data_dirs();
  }

  late final _g_get_system_data_dirsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_get_system_data_dirs');
  late final _g_get_system_data_dirs = _g_get_system_data_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_system_config_dirs() {
    return _g_get_system_config_dirs();
  }

  late final _g_get_system_config_dirsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_get_system_config_dirs');
  late final _g_get_system_config_dirs = _g_get_system_config_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<gchar> g_get_user_runtime_dir() {
    return _g_get_user_runtime_dir();
  }

  late final _g_get_user_runtime_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_user_runtime_dir');
  late final _g_get_user_runtime_dir =
      _g_get_user_runtime_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_get_user_special_dir(
    int directory,
  ) {
    return _g_get_user_special_dir(
      directory,
    );
  }

  late final _g_get_user_special_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Int32)>>(
          'g_get_user_special_dir');
  late final _g_get_user_special_dir =
      _g_get_user_special_dirPtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  int g_parse_debug_string(
    ffi.Pointer<gchar> string,
    ffi.Pointer<GDebugKey> keys,
    int nkeys,
  ) {
    return _g_parse_debug_string(
      string,
      keys,
      nkeys,
    );
  }

  late final _g_parse_debug_stringPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<gchar>, ffi.Pointer<GDebugKey>,
              guint)>>('g_parse_debug_string');
  late final _g_parse_debug_string = _g_parse_debug_stringPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<GDebugKey>, int)>();

  int g_snprintf(
    ffi.Pointer<gchar> string,
    int n,
    ffi.Pointer<gchar> format,
  ) {
    return _g_snprintf(
      string,
      n,
      format,
    );
  }

  late final _g_snprintfPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<gchar>, gulong, ffi.Pointer<gchar>)>>('g_snprintf');
  late final _g_snprintf = _g_snprintfPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>)>();

  int g_vsnprintf(
    ffi.Pointer<gchar> string,
    int n,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_vsnprintf(
      string,
      n,
      format,
      args,
    );
  }

  late final _g_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<gchar>, gulong, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_vsnprintf');
  late final _g_vsnprintf = _g_vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_nullify_pointer(
    ffi.Pointer<gpointer> nullify_location,
  ) {
    return _g_nullify_pointer(
      nullify_location,
    );
  }

  late final _g_nullify_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gpointer>)>>(
          'g_nullify_pointer');
  late final _g_nullify_pointer =
      _g_nullify_pointerPtr.asFunction<void Function(ffi.Pointer<gpointer>)>();

  ffi.Pointer<gchar> g_format_size_full(
    int size,
    int flags,
  ) {
    return _g_format_size_full(
      size,
      flags,
    );
  }

  late final _g_format_size_fullPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(guint64, ffi.Int32)>>(
      'g_format_size_full');
  late final _g_format_size_full = _g_format_size_fullPtr
      .asFunction<ffi.Pointer<gchar> Function(int, int)>();

  ffi.Pointer<gchar> g_format_size(
    int size,
  ) {
    return _g_format_size(
      size,
    );
  }

  late final _g_format_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(guint64)>>(
          'g_format_size');
  late final _g_format_size =
      _g_format_sizePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  ffi.Pointer<gchar> g_format_size_for_display(
    int size,
  ) {
    return _g_format_size_for_display(
      size,
    );
  }

  late final _g_format_size_for_displayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(goffset)>>(
          'g_format_size_for_display');
  late final _g_format_size_for_display = _g_format_size_for_displayPtr
      .asFunction<ffi.Pointer<gchar> Function(int)>();

  void g_atexit(
    GVoidFunc func,
  ) {
    return _g_atexit(
      func,
    );
  }

  late final _g_atexitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GVoidFunc)>>('g_atexit');
  late final _g_atexit = _g_atexitPtr.asFunction<void Function(GVoidFunc)>();

  ffi.Pointer<gchar> g_find_program_in_path(
    ffi.Pointer<gchar> program,
  ) {
    return _g_find_program_in_path(
      program,
    );
  }

  late final _g_find_program_in_pathPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_find_program_in_path');
  late final _g_find_program_in_path = _g_find_program_in_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_bit_nth_lsf(
    int mask,
    int nth_bit,
  ) {
    return _g_bit_nth_lsf(
      mask,
      nth_bit,
    );
  }

  late final _g_bit_nth_lsfPtr =
      _lookup<ffi.NativeFunction<gint Function(gulong, gint)>>('g_bit_nth_lsf');
  late final _g_bit_nth_lsf =
      _g_bit_nth_lsfPtr.asFunction<int Function(int, int)>();

  int g_bit_nth_msf(
    int mask,
    int nth_bit,
  ) {
    return _g_bit_nth_msf(
      mask,
      nth_bit,
    );
  }

  late final _g_bit_nth_msfPtr =
      _lookup<ffi.NativeFunction<gint Function(gulong, gint)>>('g_bit_nth_msf');
  late final _g_bit_nth_msf =
      _g_bit_nth_msfPtr.asFunction<int Function(int, int)>();

  int g_bit_storage(
    int number,
  ) {
    return _g_bit_storage(
      number,
    );
  }

  late final _g_bit_storagePtr =
      _lookup<ffi.NativeFunction<guint Function(gulong)>>('g_bit_storage');
  late final _g_bit_storage = _g_bit_storagePtr.asFunction<int Function(int)>();

  int g_thread_error_quark() {
    return _g_thread_error_quark();
  }

  late final _g_thread_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_thread_error_quark');
  late final _g_thread_error_quark =
      _g_thread_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GThread> g_thread_ref(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_ref(
      thread,
    );
  }

  late final _g_thread_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(ffi.Pointer<GThread>)>>('g_thread_ref');
  late final _g_thread_ref = _g_thread_refPtr
      .asFunction<ffi.Pointer<GThread> Function(ffi.Pointer<GThread>)>();

  void g_thread_unref(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_unref(
      thread,
    );
  }

  late final _g_thread_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GThread>)>>(
          'g_thread_unref');
  late final _g_thread_unref =
      _g_thread_unrefPtr.asFunction<void Function(ffi.Pointer<GThread>)>();

  ffi.Pointer<GThread> g_thread_new(
    ffi.Pointer<gchar> name,
    GThreadFunc func,
    gpointer data,
  ) {
    return _g_thread_new(
      name,
      func,
      data,
    );
  }

  late final _g_thread_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(
              ffi.Pointer<gchar>, GThreadFunc, gpointer)>>('g_thread_new');
  late final _g_thread_new = _g_thread_newPtr.asFunction<
      ffi.Pointer<GThread> Function(
          ffi.Pointer<gchar>, GThreadFunc, gpointer)>();

  ffi.Pointer<GThread> g_thread_try_new(
    ffi.Pointer<gchar> name,
    GThreadFunc func,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_try_new(
      name,
      func,
      data,
      error,
    );
  }

  late final _g_thread_try_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(ffi.Pointer<gchar>, GThreadFunc,
              gpointer, ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_try_new');
  late final _g_thread_try_new = _g_thread_try_newPtr.asFunction<
      ffi.Pointer<GThread> Function(ffi.Pointer<gchar>, GThreadFunc, gpointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThread> g_thread_self() {
    return _g_thread_self();
  }

  late final _g_thread_selfPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GThread> Function()>>(
          'g_thread_self');
  late final _g_thread_self =
      _g_thread_selfPtr.asFunction<ffi.Pointer<GThread> Function()>();

  void g_thread_exit(
    gpointer retval,
  ) {
    return _g_thread_exit(
      retval,
    );
  }

  late final _g_thread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>('g_thread_exit');
  late final _g_thread_exit =
      _g_thread_exitPtr.asFunction<void Function(gpointer)>();

  gpointer g_thread_join(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_join(
      thread,
    );
  }

  late final _g_thread_joinPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GThread>)>>(
          'g_thread_join');
  late final _g_thread_join =
      _g_thread_joinPtr.asFunction<gpointer Function(ffi.Pointer<GThread>)>();

  void g_thread_yield() {
    return _g_thread_yield();
  }

  late final _g_thread_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_thread_yield');
  late final _g_thread_yield = _g_thread_yieldPtr.asFunction<void Function()>();

  void g_mutex_init(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_init(
      mutex,
    );
  }

  late final _g_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_init');
  late final _g_mutex_init =
      _g_mutex_initPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_mutex_clear(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_clear(
      mutex,
    );
  }

  late final _g_mutex_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_clear');
  late final _g_mutex_clear =
      _g_mutex_clearPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_mutex_lock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_lock(
      mutex,
    );
  }

  late final _g_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_lock');
  late final _g_mutex_lock =
      _g_mutex_lockPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  int g_mutex_trylock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_trylock(
      mutex,
    );
  }

  late final _g_mutex_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_trylock');
  late final _g_mutex_trylock =
      _g_mutex_trylockPtr.asFunction<int Function(ffi.Pointer<GMutex>)>();

  void g_mutex_unlock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_unlock(
      mutex,
    );
  }

  late final _g_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_unlock');
  late final _g_mutex_unlock =
      _g_mutex_unlockPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_rw_lock_init(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_init(
      rw_lock,
    );
  }

  late final _g_rw_lock_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_init');
  late final _g_rw_lock_init =
      _g_rw_lock_initPtr.asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_clear(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_clear(
      rw_lock,
    );
  }

  late final _g_rw_lock_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_clear');
  late final _g_rw_lock_clear =
      _g_rw_lock_clearPtr.asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_writer_lock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_lock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_lock');
  late final _g_rw_lock_writer_lock = _g_rw_lock_writer_lockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  int g_rw_lock_writer_trylock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_trylock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_trylock');
  late final _g_rw_lock_writer_trylock = _g_rw_lock_writer_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_writer_unlock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_unlock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_unlock');
  late final _g_rw_lock_writer_unlock = _g_rw_lock_writer_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_reader_lock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_lock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_lock');
  late final _g_rw_lock_reader_lock = _g_rw_lock_reader_lockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  int g_rw_lock_reader_trylock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_trylock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_trylock');
  late final _g_rw_lock_reader_trylock = _g_rw_lock_reader_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_reader_unlock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_unlock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_unlock');
  late final _g_rw_lock_reader_unlock = _g_rw_lock_reader_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rec_mutex_init(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_init(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_init');
  late final _g_rec_mutex_init =
      _g_rec_mutex_initPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_clear(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_clear(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_clear');
  late final _g_rec_mutex_clear =
      _g_rec_mutex_clearPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_lock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_lock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_lock');
  late final _g_rec_mutex_lock =
      _g_rec_mutex_lockPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  int g_rec_mutex_trylock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_trylock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_trylock');
  late final _g_rec_mutex_trylock = _g_rec_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_unlock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_unlock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_unlock');
  late final _g_rec_mutex_unlock = _g_rec_mutex_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_cond_init(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_init(
      cond,
    );
  }

  late final _g_cond_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_init');
  late final _g_cond_init =
      _g_cond_initPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_clear(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_clear(
      cond,
    );
  }

  late final _g_cond_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_clear');
  late final _g_cond_clear =
      _g_cond_clearPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_wait(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_cond_wait(
      cond,
      mutex,
    );
  }

  late final _g_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCond>, ffi.Pointer<GMutex>)>>('g_cond_wait');
  late final _g_cond_wait = _g_cond_waitPtr
      .asFunction<void Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>)>();

  void g_cond_signal(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_signal(
      cond,
    );
  }

  late final _g_cond_signalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_signal');
  late final _g_cond_signal =
      _g_cond_signalPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_broadcast(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_broadcast(
      cond,
    );
  }

  late final _g_cond_broadcastPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_broadcast');
  late final _g_cond_broadcast =
      _g_cond_broadcastPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  int g_cond_wait_until(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
    int end_time,
  ) {
    return _g_cond_wait_until(
      cond,
      mutex,
      end_time,
    );
  }

  late final _g_cond_wait_untilPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>,
              gint64)>>('g_cond_wait_until');
  late final _g_cond_wait_until = _g_cond_wait_untilPtr
      .asFunction<int Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>, int)>();

  gpointer g_private_get(
    ffi.Pointer<GPrivate> key,
  ) {
    return _g_private_get(
      key,
    );
  }

  late final _g_private_getPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GPrivate>)>>(
          'g_private_get');
  late final _g_private_get =
      _g_private_getPtr.asFunction<gpointer Function(ffi.Pointer<GPrivate>)>();

  void g_private_set(
    ffi.Pointer<GPrivate> key,
    gpointer value,
  ) {
    return _g_private_set(
      key,
      value,
    );
  }

  late final _g_private_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPrivate>, gpointer)>>('g_private_set');
  late final _g_private_set = _g_private_setPtr
      .asFunction<void Function(ffi.Pointer<GPrivate>, gpointer)>();

  void g_private_replace(
    ffi.Pointer<GPrivate> key,
    gpointer value,
  ) {
    return _g_private_replace(
      key,
      value,
    );
  }

  late final _g_private_replacePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GPrivate>, gpointer)>>(
      'g_private_replace');
  late final _g_private_replace = _g_private_replacePtr
      .asFunction<void Function(ffi.Pointer<GPrivate>, gpointer)>();

  gpointer g_once_impl(
    ffi.Pointer<GOnce> once,
    GThreadFunc func,
    gpointer arg,
  ) {
    return _g_once_impl(
      once,
      func,
      arg,
    );
  }

  late final _g_once_implPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GOnce>, GThreadFunc, gpointer)>>('g_once_impl');
  late final _g_once_impl = _g_once_implPtr.asFunction<
      gpointer Function(ffi.Pointer<GOnce>, GThreadFunc, gpointer)>();

  int g_get_num_processors() {
    return _g_get_num_processors();
  }

  late final _g_get_num_processorsPtr =
      _lookup<ffi.NativeFunction<guint Function()>>('g_get_num_processors');
  late final _g_get_num_processors =
      _g_get_num_processorsPtr.asFunction<int Function()>();

  ffi.Pointer<GAsyncQueue> g_async_queue_new() {
    return _g_async_queue_new();
  }

  late final _g_async_queue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GAsyncQueue> Function()>>(
          'g_async_queue_new');
  late final _g_async_queue_new =
      _g_async_queue_newPtr.asFunction<ffi.Pointer<GAsyncQueue> Function()>();

  ffi.Pointer<GAsyncQueue> g_async_queue_new_full(
    GDestroyNotify item_free_func,
  ) {
    return _g_async_queue_new_full(
      item_free_func,
    );
  }

  late final _g_async_queue_new_fullPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GAsyncQueue> Function(GDestroyNotify)>>(
      'g_async_queue_new_full');
  late final _g_async_queue_new_full = _g_async_queue_new_fullPtr
      .asFunction<ffi.Pointer<GAsyncQueue> Function(GDestroyNotify)>();

  void g_async_queue_lock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_lock(
      queue,
    );
  }

  late final _g_async_queue_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_lock');
  late final _g_async_queue_lock = _g_async_queue_lockPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unlock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unlock(
      queue,
    );
  }

  late final _g_async_queue_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unlock');
  late final _g_async_queue_unlock = _g_async_queue_unlockPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer<GAsyncQueue> g_async_queue_ref(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_ref(
      queue,
    );
  }

  late final _g_async_queue_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAsyncQueue> Function(
              ffi.Pointer<GAsyncQueue>)>>('g_async_queue_ref');
  late final _g_async_queue_ref = _g_async_queue_refPtr.asFunction<
      ffi.Pointer<GAsyncQueue> Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unref(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unref(
      queue,
    );
  }

  late final _g_async_queue_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unref');
  late final _g_async_queue_unref = _g_async_queue_unrefPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_ref_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_ref_unlocked(
      queue,
    );
  }

  late final _g_async_queue_ref_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_ref_unlocked');
  late final _g_async_queue_ref_unlocked = _g_async_queue_ref_unlockedPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unref_and_unlock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unref_and_unlock(
      queue,
    );
  }

  late final _g_async_queue_unref_and_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unref_and_unlock');
  late final _g_async_queue_unref_and_unlock =
      _g_async_queue_unref_and_unlockPtr
          .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_push(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer data,
  ) {
    return _g_async_queue_push(
      queue,
      data,
    );
  }

  late final _g_async_queue_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncQueue>, gpointer)>>('g_async_queue_push');
  late final _g_async_queue_push = _g_async_queue_pushPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  void g_async_queue_push_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer data,
  ) {
    return _g_async_queue_push_unlocked(
      queue,
      data,
    );
  }

  late final _g_async_queue_push_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>,
              gpointer)>>('g_async_queue_push_unlocked');
  late final _g_async_queue_push_unlocked = _g_async_queue_push_unlockedPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  void g_async_queue_push_sorted(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer data,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_async_queue_push_sorted(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_async_queue_push_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, gpointer,
              GCompareDataFunc, gpointer)>>('g_async_queue_push_sorted');
  late final _g_async_queue_push_sorted =
      _g_async_queue_push_sortedPtr.asFunction<
          void Function(ffi.Pointer<GAsyncQueue>, gpointer, GCompareDataFunc,
              gpointer)>();

  void g_async_queue_push_sorted_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer data,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_async_queue_push_sorted_unlocked(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_async_queue_push_sorted_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncQueue>,
              gpointer,
              GCompareDataFunc,
              gpointer)>>('g_async_queue_push_sorted_unlocked');
  late final _g_async_queue_push_sorted_unlocked =
      _g_async_queue_push_sorted_unlockedPtr.asFunction<
          void Function(ffi.Pointer<GAsyncQueue>, gpointer, GCompareDataFunc,
              gpointer)>();

  gpointer g_async_queue_pop(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_pop(
      queue,
    );
  }

  late final _g_async_queue_popPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_pop');
  late final _g_async_queue_pop = _g_async_queue_popPtr
      .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>();

  gpointer g_async_queue_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_pop_unlocked(
      queue,
    );
  }

  late final _g_async_queue_pop_unlockedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_pop_unlocked');
  late final _g_async_queue_pop_unlocked = _g_async_queue_pop_unlockedPtr
      .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>();

  gpointer g_async_queue_try_pop(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_try_pop(
      queue,
    );
  }

  late final _g_async_queue_try_popPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_try_pop');
  late final _g_async_queue_try_pop = _g_async_queue_try_popPtr
      .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>();

  gpointer g_async_queue_try_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_try_pop_unlocked(
      queue,
    );
  }

  late final _g_async_queue_try_pop_unlockedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_try_pop_unlocked');
  late final _g_async_queue_try_pop_unlocked =
      _g_async_queue_try_pop_unlockedPtr
          .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>)>();

  gpointer g_async_queue_timeout_pop(
    ffi.Pointer<GAsyncQueue> queue,
    int timeout,
  ) {
    return _g_async_queue_timeout_pop(
      queue,
      timeout,
    );
  }

  late final _g_async_queue_timeout_popPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GAsyncQueue>, guint64)>>('g_async_queue_timeout_pop');
  late final _g_async_queue_timeout_pop = _g_async_queue_timeout_popPtr
      .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>, int)>();

  gpointer g_async_queue_timeout_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    int timeout,
  ) {
    return _g_async_queue_timeout_pop_unlocked(
      queue,
      timeout,
    );
  }

  late final _g_async_queue_timeout_pop_unlockedPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GAsyncQueue>,
              guint64)>>('g_async_queue_timeout_pop_unlocked');
  late final _g_async_queue_timeout_pop_unlocked =
      _g_async_queue_timeout_pop_unlockedPtr
          .asFunction<gpointer Function(ffi.Pointer<GAsyncQueue>, int)>();

  int g_async_queue_length(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_length(
      queue,
    );
  }

  late final _g_async_queue_lengthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_length');
  late final _g_async_queue_length = _g_async_queue_lengthPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>)>();

  int g_async_queue_length_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_length_unlocked(
      queue,
    );
  }

  late final _g_async_queue_length_unlockedPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_length_unlocked');
  late final _g_async_queue_length_unlocked = _g_async_queue_length_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_sort(
    ffi.Pointer<GAsyncQueue> queue,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_async_queue_sort(
      queue,
      func,
      user_data,
    );
  }

  late final _g_async_queue_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc,
              gpointer)>>('g_async_queue_sort');
  late final _g_async_queue_sort = _g_async_queue_sortPtr.asFunction<
      void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc, gpointer)>();

  void g_async_queue_sort_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_async_queue_sort_unlocked(
      queue,
      func,
      user_data,
    );
  }

  late final _g_async_queue_sort_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc,
              gpointer)>>('g_async_queue_sort_unlocked');
  late final _g_async_queue_sort_unlocked =
      _g_async_queue_sort_unlockedPtr.asFunction<
          void Function(
              ffi.Pointer<GAsyncQueue>, GCompareDataFunc, gpointer)>();

  int g_async_queue_remove(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer item,
  ) {
    return _g_async_queue_remove(
      queue,
      item,
    );
  }

  late final _g_async_queue_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAsyncQueue>, gpointer)>>('g_async_queue_remove');
  late final _g_async_queue_remove = _g_async_queue_removePtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  int g_async_queue_remove_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer item,
  ) {
    return _g_async_queue_remove_unlocked(
      queue,
      item,
    );
  }

  late final _g_async_queue_remove_unlockedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAsyncQueue>,
              gpointer)>>('g_async_queue_remove_unlocked');
  late final _g_async_queue_remove_unlocked = _g_async_queue_remove_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  void g_async_queue_push_front(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer item,
  ) {
    return _g_async_queue_push_front(
      queue,
      item,
    );
  }

  late final _g_async_queue_push_frontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncQueue>, gpointer)>>('g_async_queue_push_front');
  late final _g_async_queue_push_front = _g_async_queue_push_frontPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  void g_async_queue_push_front_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    gpointer item,
  ) {
    return _g_async_queue_push_front_unlocked(
      queue,
      item,
    );
  }

  late final _g_async_queue_push_front_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>,
              gpointer)>>('g_async_queue_push_front_unlocked');
  late final _g_async_queue_push_front_unlocked =
      _g_async_queue_push_front_unlockedPtr
          .asFunction<void Function(ffi.Pointer<GAsyncQueue>, gpointer)>();

  gpointer g_async_queue_timed_pop(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer<GTimeVal> end_time,
  ) {
    return _g_async_queue_timed_pop(
      queue,
      end_time,
    );
  }

  late final _g_async_queue_timed_popPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer<GTimeVal>)>>('g_async_queue_timed_pop');
  late final _g_async_queue_timed_pop = _g_async_queue_timed_popPtr.asFunction<
      gpointer Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer<GTimeVal>)>();

  gpointer g_async_queue_timed_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer<GTimeVal> end_time,
  ) {
    return _g_async_queue_timed_pop_unlocked(
      queue,
      end_time,
    );
  }

  late final _g_async_queue_timed_pop_unlockedPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer<GTimeVal>)>>('g_async_queue_timed_pop_unlocked');
  late final _g_async_queue_timed_pop_unlocked =
      _g_async_queue_timed_pop_unlockedPtr.asFunction<
          gpointer Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer<GTimeVal>)>();

  void g_on_error_query(
    ffi.Pointer<gchar> prg_name,
  ) {
    return _g_on_error_query(
      prg_name,
    );
  }

  late final _g_on_error_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_on_error_query');
  late final _g_on_error_query =
      _g_on_error_queryPtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  void g_on_error_stack_trace(
    ffi.Pointer<gchar> prg_name,
  ) {
    return _g_on_error_stack_trace(
      prg_name,
    );
  }

  late final _g_on_error_stack_tracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_on_error_stack_trace');
  late final _g_on_error_stack_trace = _g_on_error_stack_tracePtr
      .asFunction<void Function(ffi.Pointer<gchar>)>();

  int g_base64_encode_step(
    ffi.Pointer<guchar> in1,
    int len,
    int break_lines,
    ffi.Pointer<gchar> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<gint> save,
  ) {
    return _g_base64_encode_step(
      in1,
      len,
      break_lines,
      out,
      state,
      save,
    );
  }

  late final _g_base64_encode_stepPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<guchar>,
              gsize,
              gboolean,
              ffi.Pointer<gchar>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_base64_encode_step');
  late final _g_base64_encode_step = _g_base64_encode_stepPtr.asFunction<
      int Function(ffi.Pointer<guchar>, int, int, ffi.Pointer<gchar>,
          ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int g_base64_encode_close(
    int break_lines,
    ffi.Pointer<gchar> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<gint> save,
  ) {
    return _g_base64_encode_close(
      break_lines,
      out,
      state,
      save,
    );
  }

  late final _g_base64_encode_closePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(gboolean, ffi.Pointer<gchar>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_base64_encode_close');
  late final _g_base64_encode_close = _g_base64_encode_closePtr.asFunction<
      int Function(
          int, ffi.Pointer<gchar>, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  ffi.Pointer<gchar> g_base64_encode(
    ffi.Pointer<guchar> data,
    int len,
  ) {
    return _g_base64_encode(
      data,
      len,
    );
  }

  late final _g_base64_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<guchar>, gsize)>>('g_base64_encode');
  late final _g_base64_encode = _g_base64_encodePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<guchar>, int)>();

  int g_base64_decode_step(
    ffi.Pointer<gchar> in1,
    int len,
    ffi.Pointer<guchar> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<guint> save,
  ) {
    return _g_base64_decode_step(
      in1,
      len,
      out,
      state,
      save,
    );
  }

  late final _g_base64_decode_stepPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<gchar>, gsize, ffi.Pointer<guchar>,
              ffi.Pointer<gint>, ffi.Pointer<guint>)>>('g_base64_decode_step');
  late final _g_base64_decode_step = _g_base64_decode_stepPtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<guchar>,
          ffi.Pointer<gint>, ffi.Pointer<guint>)>();

  ffi.Pointer<guchar> g_base64_decode(
    ffi.Pointer<gchar> text,
    ffi.Pointer<gsize> out_len,
  ) {
    return _g_base64_decode(
      text,
      out_len,
    );
  }

  late final _g_base64_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gsize>)>>('g_base64_decode');
  late final _g_base64_decode = _g_base64_decodePtr.asFunction<
      ffi.Pointer<guchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gsize>)>();

  ffi.Pointer<guchar> g_base64_decode_inplace(
    ffi.Pointer<gchar> text,
    ffi.Pointer<gsize> out_len,
  ) {
    return _g_base64_decode_inplace(
      text,
      out_len,
    );
  }

  late final _g_base64_decode_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gsize>)>>('g_base64_decode_inplace');
  late final _g_base64_decode_inplace = _g_base64_decode_inplacePtr.asFunction<
      ffi.Pointer<guchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gsize>)>();

  void g_bit_lock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_lock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_lock');
  late final _g_bit_lock =
      _g_bit_lockPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  int g_bit_trylock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_trylock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_trylock');
  late final _g_bit_trylock =
      _g_bit_trylockPtr.asFunction<int Function(ffi.Pointer<gint>, int)>();

  void g_bit_unlock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_unlock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_unlock');
  late final _g_bit_unlock =
      _g_bit_unlockPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  ffi.Pointer<GTimeZone> g_time_zone_new(
    ffi.Pointer<gchar> identifier,
  ) {
    return _g_time_zone_new(
      identifier,
    );
  }

  late final _g_time_zone_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<gchar>)>>(
      'g_time_zone_new');
  late final _g_time_zone_new = _g_time_zone_newPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GTimeZone> g_time_zone_new_identifier(
    ffi.Pointer<gchar> identifier,
  ) {
    return _g_time_zone_new_identifier(
      identifier,
    );
  }

  late final _g_time_zone_new_identifierPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<gchar>)>>(
      'g_time_zone_new_identifier');
  late final _g_time_zone_new_identifier = _g_time_zone_new_identifierPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GTimeZone> g_time_zone_new_utc() {
    return _g_time_zone_new_utc();
  }

  late final _g_time_zone_new_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function()>>(
          'g_time_zone_new_utc');
  late final _g_time_zone_new_utc =
      _g_time_zone_new_utcPtr.asFunction<ffi.Pointer<GTimeZone> Function()>();

  ffi.Pointer<GTimeZone> g_time_zone_new_local() {
    return _g_time_zone_new_local();
  }

  late final _g_time_zone_new_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function()>>(
          'g_time_zone_new_local');
  late final _g_time_zone_new_local =
      _g_time_zone_new_localPtr.asFunction<ffi.Pointer<GTimeZone> Function()>();

  ffi.Pointer<GTimeZone> g_time_zone_new_offset(
    int seconds,
  ) {
    return _g_time_zone_new_offset(
      seconds,
    );
  }

  late final _g_time_zone_new_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function(gint32)>>(
          'g_time_zone_new_offset');
  late final _g_time_zone_new_offset = _g_time_zone_new_offsetPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(int)>();

  ffi.Pointer<GTimeZone> g_time_zone_ref(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_ref(
      tz,
    );
  }

  late final _g_time_zone_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<GTimeZone>)>>('g_time_zone_ref');
  late final _g_time_zone_ref = _g_time_zone_refPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<GTimeZone>)>();

  void g_time_zone_unref(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_unref(
      tz,
    );
  }

  late final _g_time_zone_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeZone>)>>(
          'g_time_zone_unref');
  late final _g_time_zone_unref =
      _g_time_zone_unrefPtr.asFunction<void Function(ffi.Pointer<GTimeZone>)>();

  int g_time_zone_find_interval(
    ffi.Pointer<GTimeZone> tz,
    int type,
    int time_,
  ) {
    return _g_time_zone_find_interval(
      tz,
      type,
      time_,
    );
  }

  late final _g_time_zone_find_intervalPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GTimeZone>, ffi.Int32,
              gint64)>>('g_time_zone_find_interval');
  late final _g_time_zone_find_interval = _g_time_zone_find_intervalPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int, int)>();

  int g_time_zone_adjust_time(
    ffi.Pointer<GTimeZone> tz,
    int type,
    ffi.Pointer<gint64> time_,
  ) {
    return _g_time_zone_adjust_time(
      tz,
      type,
      time_,
    );
  }

  late final _g_time_zone_adjust_timePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GTimeZone>, ffi.Int32,
              ffi.Pointer<gint64>)>>('g_time_zone_adjust_time');
  late final _g_time_zone_adjust_time = _g_time_zone_adjust_timePtr.asFunction<
      int Function(ffi.Pointer<GTimeZone>, int, ffi.Pointer<gint64>)>();

  ffi.Pointer<gchar> g_time_zone_get_abbreviation(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_get_abbreviation(
      tz,
      interval,
    );
  }

  late final _g_time_zone_get_abbreviationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTimeZone>, gint)>>('g_time_zone_get_abbreviation');
  late final _g_time_zone_get_abbreviation = _g_time_zone_get_abbreviationPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTimeZone>, int)>();

  int g_time_zone_get_offset(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_get_offset(
      tz,
      interval,
    );
  }

  late final _g_time_zone_get_offsetPtr = _lookup<
          ffi.NativeFunction<gint32 Function(ffi.Pointer<GTimeZone>, gint)>>(
      'g_time_zone_get_offset');
  late final _g_time_zone_get_offset = _g_time_zone_get_offsetPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int)>();

  int g_time_zone_is_dst(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_is_dst(
      tz,
      interval,
    );
  }

  late final _g_time_zone_is_dstPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTimeZone>, gint)>>(
      'g_time_zone_is_dst');
  late final _g_time_zone_is_dst = _g_time_zone_is_dstPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int)>();

  ffi.Pointer<gchar> g_time_zone_get_identifier(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_get_identifier(
      tz,
    );
  }

  late final _g_time_zone_get_identifierPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTimeZone>)>>(
      'g_time_zone_get_identifier');
  late final _g_time_zone_get_identifier = _g_time_zone_get_identifierPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTimeZone>)>();

  void g_date_time_unref(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_unref(
      datetime,
    );
  }

  late final _g_date_time_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_unref');
  late final _g_date_time_unref =
      _g_date_time_unrefPtr.asFunction<void Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_ref(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_ref(
      datetime,
    );
  }

  late final _g_date_time_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_ref');
  late final _g_date_time_ref = _g_date_time_refPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_new_now(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_date_time_new_now(
      tz,
    );
  }

  late final _g_date_time_new_nowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeZone>)>>('g_date_time_new_now');
  late final _g_date_time_new_now = _g_date_time_new_nowPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_new_now_local() {
    return _g_date_time_new_now_local();
  }

  late final _g_date_time_new_now_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function()>>(
          'g_date_time_new_now_local');
  late final _g_date_time_new_now_local = _g_date_time_new_now_localPtr
      .asFunction<ffi.Pointer<GDateTime> Function()>();

  ffi.Pointer<GDateTime> g_date_time_new_now_utc() {
    return _g_date_time_new_now_utc();
  }

  late final _g_date_time_new_now_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function()>>(
          'g_date_time_new_now_utc');
  late final _g_date_time_new_now_utc = _g_date_time_new_now_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function()>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_local(
    int t,
  ) {
    return _g_date_time_new_from_unix_local(
      t,
    );
  }

  late final _g_date_time_new_from_unix_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_local');
  late final _g_date_time_new_from_unix_local =
      _g_date_time_new_from_unix_localPtr
          .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_utc(
    int t,
  ) {
    return _g_date_time_new_from_unix_utc(
      t,
    );
  }

  late final _g_date_time_new_from_unix_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_utc');
  late final _g_date_time_new_from_unix_utc = _g_date_time_new_from_unix_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_timeval_local(
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_new_from_timeval_local(
      tv,
    );
  }

  late final _g_date_time_new_from_timeval_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeVal>)>>('g_date_time_new_from_timeval_local');
  late final _g_date_time_new_from_timeval_local =
      _g_date_time_new_from_timeval_localPtr
          .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_timeval_utc(
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_new_from_timeval_utc(
      tv,
    );
  }

  late final _g_date_time_new_from_timeval_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeVal>)>>('g_date_time_new_from_timeval_utc');
  late final _g_date_time_new_from_timeval_utc =
      _g_date_time_new_from_timeval_utcPtr
          .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_iso8601(
    ffi.Pointer<gchar> text,
    ffi.Pointer<GTimeZone> default_tz,
  ) {
    return _g_date_time_new_from_iso8601(
      text,
      default_tz,
    );
  }

  late final _g_date_time_new_from_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GTimeZone>)>>('g_date_time_new_from_iso8601');
  late final _g_date_time_new_from_iso8601 =
      _g_date_time_new_from_iso8601Ptr.asFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<gchar>, ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_new(
    ffi.Pointer<GTimeZone> tz,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new(
      tz,
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeZone>, gint, gint,
              gint, gint, gint, gdouble)>>('g_date_time_new');
  late final _g_date_time_new = _g_date_time_newPtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GTimeZone>, int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_new_local(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new_local(
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_new_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              gint, gint, gint, gint, gint, gdouble)>>('g_date_time_new_local');
  late final _g_date_time_new_local = _g_date_time_new_localPtr.asFunction<
      ffi.Pointer<GDateTime> Function(int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_new_utc(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new_utc(
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_new_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              gint, gint, gint, gint, gint, gdouble)>>('g_date_time_new_utc');
  late final _g_date_time_new_utc = _g_date_time_new_utcPtr.asFunction<
      ffi.Pointer<GDateTime> Function(int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_add(
    ffi.Pointer<GDateTime> datetime,
    int timespan,
  ) {
    return _g_date_time_add(
      datetime,
      timespan,
    );
  }

  late final _g_date_time_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, GTimeSpan)>>('g_date_time_add');
  late final _g_date_time_add = _g_date_time_addPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_years(
    ffi.Pointer<GDateTime> datetime,
    int years,
  ) {
    return _g_date_time_add_years(
      datetime,
      years,
    );
  }

  late final _g_date_time_add_yearsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_years');
  late final _g_date_time_add_years = _g_date_time_add_yearsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_months(
    ffi.Pointer<GDateTime> datetime,
    int months,
  ) {
    return _g_date_time_add_months(
      datetime,
      months,
    );
  }

  late final _g_date_time_add_monthsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_months');
  late final _g_date_time_add_months = _g_date_time_add_monthsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_weeks(
    ffi.Pointer<GDateTime> datetime,
    int weeks,
  ) {
    return _g_date_time_add_weeks(
      datetime,
      weeks,
    );
  }

  late final _g_date_time_add_weeksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_weeks');
  late final _g_date_time_add_weeks = _g_date_time_add_weeksPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_days(
    ffi.Pointer<GDateTime> datetime,
    int days,
  ) {
    return _g_date_time_add_days(
      datetime,
      days,
    );
  }

  late final _g_date_time_add_daysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_days');
  late final _g_date_time_add_days = _g_date_time_add_daysPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_hours(
    ffi.Pointer<GDateTime> datetime,
    int hours,
  ) {
    return _g_date_time_add_hours(
      datetime,
      hours,
    );
  }

  late final _g_date_time_add_hoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_hours');
  late final _g_date_time_add_hours = _g_date_time_add_hoursPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_minutes(
    ffi.Pointer<GDateTime> datetime,
    int minutes,
  ) {
    return _g_date_time_add_minutes(
      datetime,
      minutes,
    );
  }

  late final _g_date_time_add_minutesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_minutes');
  late final _g_date_time_add_minutes = _g_date_time_add_minutesPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_seconds(
    ffi.Pointer<GDateTime> datetime,
    double seconds,
  ) {
    return _g_date_time_add_seconds(
      datetime,
      seconds,
    );
  }

  late final _g_date_time_add_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gdouble)>>('g_date_time_add_seconds');
  late final _g_date_time_add_seconds = _g_date_time_add_secondsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, double)>();

  ffi.Pointer<GDateTime> g_date_time_add_full(
    ffi.Pointer<GDateTime> datetime,
    int years,
    int months,
    int days,
    int hours,
    int minutes,
    double seconds,
  ) {
    return _g_date_time_add_full(
      datetime,
      years,
      months,
      days,
      hours,
      minutes,
      seconds,
    );
  }

  late final _g_date_time_add_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, gint, gint,
              gint, gint, gint, gdouble)>>('g_date_time_add_full');
  late final _g_date_time_add_full = _g_date_time_add_fullPtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GDateTime>, int, int, int, int, int, double)>();

  int g_date_time_compare(
    gconstpointer dt1,
    gconstpointer dt2,
  ) {
    return _g_date_time_compare(
      dt1,
      dt2,
    );
  }

  late final _g_date_time_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_date_time_compare');
  late final _g_date_time_compare = _g_date_time_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_date_time_difference(
    ffi.Pointer<GDateTime> end,
    ffi.Pointer<GDateTime> begin,
  ) {
    return _g_date_time_difference(
      end,
      begin,
    );
  }

  late final _g_date_time_differencePtr = _lookup<
      ffi.NativeFunction<
          GTimeSpan Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GDateTime>)>>('g_date_time_difference');
  late final _g_date_time_difference = _g_date_time_differencePtr.asFunction<
      int Function(ffi.Pointer<GDateTime>, ffi.Pointer<GDateTime>)>();

  int g_date_time_hash(
    gconstpointer datetime,
  ) {
    return _g_date_time_hash(
      datetime,
    );
  }

  late final _g_date_time_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_date_time_hash');
  late final _g_date_time_hash =
      _g_date_time_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_date_time_equal(
    gconstpointer dt1,
    gconstpointer dt2,
  ) {
    return _g_date_time_equal(
      dt1,
      dt2,
    );
  }

  late final _g_date_time_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_date_time_equal');
  late final _g_date_time_equal = _g_date_time_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  void g_date_time_get_ymd(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<gint> year,
    ffi.Pointer<gint> month,
    ffi.Pointer<gint> day,
  ) {
    return _g_date_time_get_ymd(
      datetime,
      year,
      month,
      day,
    );
  }

  late final _g_date_time_get_ymdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDateTime>, ffi.Pointer<gint>,
              ffi.Pointer<gint>, ffi.Pointer<gint>)>>('g_date_time_get_ymd');
  late final _g_date_time_get_ymd = _g_date_time_get_ymdPtr.asFunction<
      void Function(ffi.Pointer<GDateTime>, ffi.Pointer<gint>,
          ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int g_date_time_get_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_year(
      datetime,
    );
  }

  late final _g_date_time_get_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_year');
  late final _g_date_time_get_year = _g_date_time_get_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_month(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_month(
      datetime,
    );
  }

  late final _g_date_time_get_monthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_month');
  late final _g_date_time_get_month = _g_date_time_get_monthPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_month(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_month(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_monthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_month');
  late final _g_date_time_get_day_of_month = _g_date_time_get_day_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_week_numbering_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_week_numbering_year(
      datetime,
    );
  }

  late final _g_date_time_get_week_numbering_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_week_numbering_year');
  late final _g_date_time_get_week_numbering_year =
      _g_date_time_get_week_numbering_yearPtr
          .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_week_of_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_week_of_year(
      datetime,
    );
  }

  late final _g_date_time_get_week_of_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_week_of_year');
  late final _g_date_time_get_week_of_year = _g_date_time_get_week_of_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_week(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_week(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_weekPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_week');
  late final _g_date_time_get_day_of_week = _g_date_time_get_day_of_weekPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_year(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_year');
  late final _g_date_time_get_day_of_year = _g_date_time_get_day_of_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_hour(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_hour(
      datetime,
    );
  }

  late final _g_date_time_get_hourPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_hour');
  late final _g_date_time_get_hour = _g_date_time_get_hourPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_minute(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_minute(
      datetime,
    );
  }

  late final _g_date_time_get_minutePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_minute');
  late final _g_date_time_get_minute = _g_date_time_get_minutePtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_second(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_second(
      datetime,
    );
  }

  late final _g_date_time_get_secondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_second');
  late final _g_date_time_get_second = _g_date_time_get_secondPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_microsecond(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_microsecond(
      datetime,
    );
  }

  late final _g_date_time_get_microsecondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_microsecond');
  late final _g_date_time_get_microsecond = _g_date_time_get_microsecondPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  double g_date_time_get_seconds(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_seconds(
      datetime,
    );
  }

  late final _g_date_time_get_secondsPtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_seconds');
  late final _g_date_time_get_seconds = _g_date_time_get_secondsPtr
      .asFunction<double Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_to_unix(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_unix(
      datetime,
    );
  }

  late final _g_date_time_to_unixPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_to_unix');
  late final _g_date_time_to_unix = _g_date_time_to_unixPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_to_timeval(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_to_timeval(
      datetime,
      tv,
    );
  }

  late final _g_date_time_to_timevalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GTimeVal>)>>('g_date_time_to_timeval');
  late final _g_date_time_to_timeval = _g_date_time_to_timevalPtr.asFunction<
      int Function(ffi.Pointer<GDateTime>, ffi.Pointer<GTimeVal>)>();

  int g_date_time_get_utc_offset(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_utc_offset(
      datetime,
    );
  }

  late final _g_date_time_get_utc_offsetPtr =
      _lookup<ffi.NativeFunction<GTimeSpan Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_utc_offset');
  late final _g_date_time_get_utc_offset = _g_date_time_get_utc_offsetPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GTimeZone> g_date_time_get_timezone(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_timezone(
      datetime,
    );
  }

  late final _g_date_time_get_timezonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_get_timezone');
  late final _g_date_time_get_timezone = _g_date_time_get_timezonePtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<gchar> g_date_time_get_timezone_abbreviation(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_timezone_abbreviation(
      datetime,
    );
  }

  late final _g_date_time_get_timezone_abbreviationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDateTime>)>>(
      'g_date_time_get_timezone_abbreviation');
  late final _g_date_time_get_timezone_abbreviation =
      _g_date_time_get_timezone_abbreviationPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_is_daylight_savings(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_is_daylight_savings(
      datetime,
    );
  }

  late final _g_date_time_is_daylight_savingsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_is_daylight_savings');
  late final _g_date_time_is_daylight_savings =
      _g_date_time_is_daylight_savingsPtr
          .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_to_timezone(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_date_time_to_timezone(
      datetime,
      tz,
    );
  }

  late final _g_date_time_to_timezonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GTimeZone>)>>('g_date_time_to_timezone');
  late final _g_date_time_to_timezone = _g_date_time_to_timezonePtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GDateTime>, ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_to_local(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_local(
      datetime,
    );
  }

  late final _g_date_time_to_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_to_local');
  late final _g_date_time_to_local = _g_date_time_to_localPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_to_utc(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_utc(
      datetime,
    );
  }

  late final _g_date_time_to_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_to_utc');
  late final _g_date_time_to_utc = _g_date_time_to_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<gchar> g_date_time_format(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<gchar> format,
  ) {
    return _g_date_time_format(
      datetime,
      format,
    );
  }

  late final _g_date_time_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<gchar>)>>('g_date_time_format');
  late final _g_date_time_format = _g_date_time_formatPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<GDateTime>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_date_time_format_iso8601(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_format_iso8601(
      datetime,
    );
  }

  late final _g_date_time_format_iso8601Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDateTime>)>>(
      'g_date_time_format_iso8601');
  late final _g_date_time_format_iso8601 = _g_date_time_format_iso8601Ptr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_error_quark() {
    return _g_bookmark_file_error_quark();
  }

  late final _g_bookmark_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_bookmark_file_error_quark');
  late final _g_bookmark_file_error_quark =
      _g_bookmark_file_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GBookmarkFile> g_bookmark_file_new() {
    return _g_bookmark_file_new();
  }

  late final _g_bookmark_file_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GBookmarkFile> Function()>>(
          'g_bookmark_file_new');
  late final _g_bookmark_file_new = _g_bookmark_file_newPtr
      .asFunction<ffi.Pointer<GBookmarkFile> Function()>();

  void g_bookmark_file_free(
    ffi.Pointer<GBookmarkFile> bookmark,
  ) {
    return _g_bookmark_file_free(
      bookmark,
    );
  }

  late final _g_bookmark_file_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBookmarkFile>)>>(
      'g_bookmark_file_free');
  late final _g_bookmark_file_free = _g_bookmark_file_freePtr
      .asFunction<void Function(ffi.Pointer<GBookmarkFile>)>();

  int g_bookmark_file_load_from_file(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_file(
      bookmark,
      filename,
      error,
    );
  }

  late final _g_bookmark_file_load_from_filePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_file');
  late final _g_bookmark_file_load_from_file =
      _g_bookmark_file_load_from_filePtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_load_from_data(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> data,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_data(
      bookmark,
      data,
      length,
      error,
    );
  }

  late final _g_bookmark_file_load_from_dataPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  gsize, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_data');
  late final _g_bookmark_file_load_from_data =
      _g_bookmark_file_load_from_dataPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_load_from_data_dirs(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> file,
    ffi.Pointer<ffi.Pointer<gchar>> full_path,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_data_dirs(
      bookmark,
      file,
      full_path,
      error,
    );
  }

  late final _g_bookmark_file_load_from_data_dirsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_data_dirs');
  late final _g_bookmark_file_load_from_data_dirs =
      _g_bookmark_file_load_from_data_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_bookmark_file_to_data(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_to_data(
      bookmark,
      length,
      error,
    );
  }

  late final _g_bookmark_file_to_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_to_data');
  late final _g_bookmark_file_to_data = _g_bookmark_file_to_dataPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_to_file(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_to_file(
      bookmark,
      filename,
      error,
    );
  }

  late final _g_bookmark_file_to_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_to_file');
  late final _g_bookmark_file_to_file = _g_bookmark_file_to_filePtr.asFunction<
      int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_title(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> title,
  ) {
    return _g_bookmark_file_set_title(
      bookmark,
      uri,
      title,
    );
  }

  late final _g_bookmark_file_set_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_set_title');
  late final _g_bookmark_file_set_title =
      _g_bookmark_file_set_titlePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_bookmark_file_get_title(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_title(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_title');
  late final _g_bookmark_file_get_title =
      _g_bookmark_file_get_titlePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_description(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> description,
  ) {
    return _g_bookmark_file_set_description(
      bookmark,
      uri,
      description,
    );
  }

  late final _g_bookmark_file_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_set_description');
  late final _g_bookmark_file_set_description =
      _g_bookmark_file_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_bookmark_file_get_description(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_description(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_description');
  late final _g_bookmark_file_get_description =
      _g_bookmark_file_get_descriptionPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_mime_type(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> mime_type,
  ) {
    return _g_bookmark_file_set_mime_type(
      bookmark,
      uri,
      mime_type,
    );
  }

  late final _g_bookmark_file_set_mime_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_set_mime_type');
  late final _g_bookmark_file_set_mime_type =
      _g_bookmark_file_set_mime_typePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_bookmark_file_get_mime_type(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_mime_type(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_mime_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_mime_type');
  late final _g_bookmark_file_get_mime_type =
      _g_bookmark_file_get_mime_typePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_groups(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<gchar>> groups,
    int length,
  ) {
    return _g_bookmark_file_set_groups(
      bookmark,
      uri,
      groups,
      length,
    );
  }

  late final _g_bookmark_file_set_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gsize)>>('g_bookmark_file_set_groups');
  late final _g_bookmark_file_set_groups =
      _g_bookmark_file_set_groupsPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  void g_bookmark_file_add_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> group,
  ) {
    return _g_bookmark_file_add_group(
      bookmark,
      uri,
      group,
    );
  }

  late final _g_bookmark_file_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_add_group');
  late final _g_bookmark_file_add_group =
      _g_bookmark_file_add_groupPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  int g_bookmark_file_has_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> group,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_has_group(
      bookmark,
      uri,
      group,
      error,
    );
  }

  late final _g_bookmark_file_has_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_has_group');
  late final _g_bookmark_file_has_group =
      _g_bookmark_file_has_groupPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_bookmark_file_get_groups(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_groups(
      bookmark,
      uri,
      length,
      error,
    );
  }

  late final _g_bookmark_file_get_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_groups');
  late final _g_bookmark_file_get_groups =
      _g_bookmark_file_get_groupsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_add_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> exec,
  ) {
    return _g_bookmark_file_add_application(
      bookmark,
      uri,
      name,
      exec,
    );
  }

  late final _g_bookmark_file_add_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_add_application');
  late final _g_bookmark_file_add_application =
      _g_bookmark_file_add_applicationPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_bookmark_file_has_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_has_application(
      bookmark,
      uri,
      name,
      error,
    );
  }

  late final _g_bookmark_file_has_applicationPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_has_application');
  late final _g_bookmark_file_has_application =
      _g_bookmark_file_has_applicationPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_bookmark_file_get_applications(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_applications(
      bookmark,
      uri,
      length,
      error,
    );
  }

  late final _g_bookmark_file_get_applicationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_applications');
  late final _g_bookmark_file_get_applications =
      _g_bookmark_file_get_applicationsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_set_app_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> exec,
    int count,
    int stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_set_app_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_set_app_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  gint,
                  time_t,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_set_app_info');
  late final _g_bookmark_file_set_app_info =
      _g_bookmark_file_set_app_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_set_application_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> exec,
    int count,
    ffi.Pointer<GDateTime> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_set_application_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_set_application_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Pointer<GDateTime>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_set_application_info');
  late final _g_bookmark_file_set_application_info =
      _g_bookmark_file_set_application_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GDateTime>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_get_app_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> name,
    ffi.Pointer<ffi.Pointer<gchar>> exec,
    ffi.Pointer<guint> count,
    ffi.Pointer<time_t> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_app_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_get_app_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<guint>,
                  ffi.Pointer<time_t>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_app_info');
  late final _g_bookmark_file_get_app_info =
      _g_bookmark_file_get_app_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<guint>,
              ffi.Pointer<time_t>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_get_application_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> exec,
    ffi.Pointer<ffi.UnsignedInt> count,
    ffi.Pointer<ffi.Pointer<GDateTime>> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_application_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_get_application_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Pointer<GDateTime>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_application_info');
  late final _g_bookmark_file_get_application_info =
      _g_bookmark_file_get_application_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Pointer<GDateTime>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_is_private(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    int is_private,
  ) {
    return _g_bookmark_file_set_is_private(
      bookmark,
      uri,
      is_private,
    );
  }

  late final _g_bookmark_file_set_is_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              gboolean)>>('g_bookmark_file_set_is_private');
  late final _g_bookmark_file_set_is_private =
      _g_bookmark_file_set_is_privatePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>, int)>();

  int g_bookmark_file_get_is_private(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_is_private(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_is_privatePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_is_private');
  late final _g_bookmark_file_get_is_private =
      _g_bookmark_file_get_is_privatePtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_icon(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> href,
    ffi.Pointer<gchar> mime_type,
  ) {
    return _g_bookmark_file_set_icon(
      bookmark,
      uri,
      href,
      mime_type,
    );
  }

  late final _g_bookmark_file_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_set_icon');
  late final _g_bookmark_file_set_icon =
      _g_bookmark_file_set_iconPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_bookmark_file_get_icon(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<gchar>> href,
    ffi.Pointer<ffi.Pointer<gchar>> mime_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_icon(
      bookmark,
      uri,
      href,
      mime_type,
      error,
    );
  }

  late final _g_bookmark_file_get_iconPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_icon');
  late final _g_bookmark_file_get_icon =
      _g_bookmark_file_get_iconPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_added(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    int added,
  ) {
    return _g_bookmark_file_set_added(
      bookmark,
      uri,
      added,
    );
  }

  late final _g_bookmark_file_set_addedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              time_t)>>('g_bookmark_file_set_added');
  late final _g_bookmark_file_set_added =
      _g_bookmark_file_set_addedPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>, int)>();

  void g_bookmark_file_set_added_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> added,
  ) {
    return _g_bookmark_file_set_added_date_time(
      bookmark,
      uri,
      added,
    );
  }

  late final _g_bookmark_file_set_added_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>>('g_bookmark_file_set_added_date_time');
  late final _g_bookmark_file_set_added_date_time =
      _g_bookmark_file_set_added_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_added(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_added(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_addedPtr = _lookup<
      ffi.NativeFunction<
          time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_added');
  late final _g_bookmark_file_get_added =
      _g_bookmark_file_get_addedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_added_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_added_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_added_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_added_date_time');
  late final _g_bookmark_file_get_added_date_time =
      _g_bookmark_file_get_added_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_modified(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    int modified,
  ) {
    return _g_bookmark_file_set_modified(
      bookmark,
      uri,
      modified,
    );
  }

  late final _g_bookmark_file_set_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              time_t)>>('g_bookmark_file_set_modified');
  late final _g_bookmark_file_set_modified =
      _g_bookmark_file_set_modifiedPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>, int)>();

  void g_bookmark_file_set_modified_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> modified,
  ) {
    return _g_bookmark_file_set_modified_date_time(
      bookmark,
      uri,
      modified,
    );
  }

  late final _g_bookmark_file_set_modified_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GDateTime>)>>(
      'g_bookmark_file_set_modified_date_time');
  late final _g_bookmark_file_set_modified_date_time =
      _g_bookmark_file_set_modified_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_modified(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_modified(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_modifiedPtr = _lookup<
          ffi.NativeFunction<
              time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_modified');
  late final _g_bookmark_file_get_modified =
      _g_bookmark_file_get_modifiedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_modified_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_modified_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_modified_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_modified_date_time');
  late final _g_bookmark_file_get_modified_date_time =
      _g_bookmark_file_get_modified_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_visited(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    int visited,
  ) {
    return _g_bookmark_file_set_visited(
      bookmark,
      uri,
      visited,
    );
  }

  late final _g_bookmark_file_set_visitedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              time_t)>>('g_bookmark_file_set_visited');
  late final _g_bookmark_file_set_visited =
      _g_bookmark_file_set_visitedPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>, int)>();

  void g_bookmark_file_set_visited_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> visited,
  ) {
    return _g_bookmark_file_set_visited_date_time(
      bookmark,
      uri,
      visited,
    );
  }

  late final _g_bookmark_file_set_visited_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GDateTime>)>>(
      'g_bookmark_file_set_visited_date_time');
  late final _g_bookmark_file_set_visited_date_time =
      _g_bookmark_file_set_visited_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_visited(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_visited(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_visitedPtr = _lookup<
          ffi.NativeFunction<
              time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_visited');
  late final _g_bookmark_file_get_visited =
      _g_bookmark_file_get_visitedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_visited_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_visited_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_visited_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_visited_date_time');
  late final _g_bookmark_file_get_visited_date_time =
      _g_bookmark_file_get_visited_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_has_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
  ) {
    return _g_bookmark_file_has_item(
      bookmark,
      uri,
    );
  }

  late final _g_bookmark_file_has_itemPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>)>>('g_bookmark_file_has_item');
  late final _g_bookmark_file_has_item =
      _g_bookmark_file_has_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>)>();

  int g_bookmark_file_get_size(
    ffi.Pointer<GBookmarkFile> bookmark,
  ) {
    return _g_bookmark_file_get_size(
      bookmark,
    );
  }

  late final _g_bookmark_file_get_sizePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GBookmarkFile>)>>(
          'g_bookmark_file_get_size');
  late final _g_bookmark_file_get_size = _g_bookmark_file_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GBookmarkFile>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_bookmark_file_get_uris(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gsize> length,
  ) {
    return _g_bookmark_file_get_uris(
      bookmark,
      length,
    );
  }

  late final _g_bookmark_file_get_urisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gsize>)>>('g_bookmark_file_get_uris');
  late final _g_bookmark_file_get_uris =
      _g_bookmark_file_get_urisPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<gsize>)>();

  int g_bookmark_file_remove_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> group,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_group(
      bookmark,
      uri,
      group,
      error,
    );
  }

  late final _g_bookmark_file_remove_groupPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_group');
  late final _g_bookmark_file_remove_group =
      _g_bookmark_file_remove_groupPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_remove_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<gchar> name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_application(
      bookmark,
      uri,
      name,
      error,
    );
  }

  late final _g_bookmark_file_remove_applicationPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_application');
  late final _g_bookmark_file_remove_application =
      _g_bookmark_file_remove_applicationPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_remove_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_item(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_remove_itemPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_item');
  late final _g_bookmark_file_remove_item =
      _g_bookmark_file_remove_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_move_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gchar> old_uri,
    ffi.Pointer<gchar> new_uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_move_item(
      bookmark,
      old_uri,
      new_uri,
      error,
    );
  }

  late final _g_bookmark_file_move_itemPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_move_item');
  late final _g_bookmark_file_move_item =
      _g_bookmark_file_move_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GBytes> g_bytes_new(
    gconstpointer data,
    int size,
  ) {
    return _g_bytes_new(
      data,
      size,
    );
  }

  late final _g_bytes_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(gconstpointer, gsize)>>('g_bytes_new');
  late final _g_bytes_new = _g_bytes_newPtr
      .asFunction<ffi.Pointer<GBytes> Function(gconstpointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_take(
    gpointer data,
    int size,
  ) {
    return _g_bytes_new_take(
      data,
      size,
    );
  }

  late final _g_bytes_new_takePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GBytes> Function(gpointer, gsize)>>(
      'g_bytes_new_take');
  late final _g_bytes_new_take = _g_bytes_new_takePtr
      .asFunction<ffi.Pointer<GBytes> Function(gpointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_static(
    gconstpointer data,
    int size,
  ) {
    return _g_bytes_new_static(
      data,
      size,
    );
  }

  late final _g_bytes_new_staticPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(gconstpointer, gsize)>>(
      'g_bytes_new_static');
  late final _g_bytes_new_static = _g_bytes_new_staticPtr
      .asFunction<ffi.Pointer<GBytes> Function(gconstpointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_with_free_func(
    gconstpointer data,
    int size,
    GDestroyNotify free_func,
    gpointer user_data,
  ) {
    return _g_bytes_new_with_free_func(
      data,
      size,
      free_func,
      user_data,
    );
  }

  late final _g_bytes_new_with_free_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(gconstpointer, gsize, GDestroyNotify,
              gpointer)>>('g_bytes_new_with_free_func');
  late final _g_bytes_new_with_free_func =
      _g_bytes_new_with_free_funcPtr.asFunction<
          ffi.Pointer<GBytes> Function(
              gconstpointer, int, GDestroyNotify, gpointer)>();

  ffi.Pointer<GBytes> g_bytes_new_from_bytes(
    ffi.Pointer<GBytes> bytes,
    int offset,
    int length,
  ) {
    return _g_bytes_new_from_bytes(
      bytes,
      offset,
      length,
    );
  }

  late final _g_bytes_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GBytes>, gsize, gsize)>>('g_bytes_new_from_bytes');
  late final _g_bytes_new_from_bytes = _g_bytes_new_from_bytesPtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>, int, int)>();

  gconstpointer g_bytes_get_data(
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<gsize> size,
  ) {
    return _g_bytes_get_data(
      bytes,
      size,
    );
  }

  late final _g_bytes_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(
              ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>>('g_bytes_get_data');
  late final _g_bytes_get_data = _g_bytes_get_dataPtr.asFunction<
      gconstpointer Function(ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>();

  int g_bytes_get_size(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_get_size(
      bytes,
    );
  }

  late final _g_bytes_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GBytes>)>>(
          'g_bytes_get_size');
  late final _g_bytes_get_size =
      _g_bytes_get_sizePtr.asFunction<int Function(ffi.Pointer<GBytes>)>();

  ffi.Pointer<GBytes> g_bytes_ref(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_ref(
      bytes,
    );
  }

  late final _g_bytes_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>)>>('g_bytes_ref');
  late final _g_bytes_ref = _g_bytes_refPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>)>();

  void g_bytes_unref(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_unref(
      bytes,
    );
  }

  late final _g_bytes_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBytes>)>>(
          'g_bytes_unref');
  late final _g_bytes_unref =
      _g_bytes_unrefPtr.asFunction<void Function(ffi.Pointer<GBytes>)>();

  gpointer g_bytes_unref_to_data(
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<gsize> size,
  ) {
    return _g_bytes_unref_to_data(
      bytes,
      size,
    );
  }

  late final _g_bytes_unref_to_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GBytes>,
              ffi.Pointer<gsize>)>>('g_bytes_unref_to_data');
  late final _g_bytes_unref_to_data = _g_bytes_unref_to_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GByteArray> g_bytes_unref_to_array(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_unref_to_array(
      bytes,
    );
  }

  late final _g_bytes_unref_to_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GBytes>)>>('g_bytes_unref_to_array');
  late final _g_bytes_unref_to_array = _g_bytes_unref_to_arrayPtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<GBytes>)>();

  int g_bytes_hash(
    gconstpointer bytes,
  ) {
    return _g_bytes_hash(
      bytes,
    );
  }

  late final _g_bytes_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_bytes_hash');
  late final _g_bytes_hash =
      _g_bytes_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_bytes_equal(
    gconstpointer bytes1,
    gconstpointer bytes2,
  ) {
    return _g_bytes_equal(
      bytes1,
      bytes2,
    );
  }

  late final _g_bytes_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_bytes_equal');
  late final _g_bytes_equal = _g_bytes_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_bytes_compare(
    gconstpointer bytes1,
    gconstpointer bytes2,
  ) {
    return _g_bytes_compare(
      bytes1,
      bytes2,
    );
  }

  late final _g_bytes_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_bytes_compare');
  late final _g_bytes_compare = _g_bytes_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  gconstpointer g_bytes_get_region(
    ffi.Pointer<GBytes> bytes,
    int element_size,
    int offset,
    int n_elements,
  ) {
    return _g_bytes_get_region(
      bytes,
      element_size,
      offset,
      n_elements,
    );
  }

  late final _g_bytes_get_regionPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(
              ffi.Pointer<GBytes>, gsize, gsize, gsize)>>('g_bytes_get_region');
  late final _g_bytes_get_region = _g_bytes_get_regionPtr
      .asFunction<gconstpointer Function(ffi.Pointer<GBytes>, int, int, int)>();

  int g_get_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_charset(
      charset,
    );
  }

  late final _g_get_charsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_charset');
  late final _g_get_charset = _g_get_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<gchar> g_get_codeset() {
    return _g_get_codeset();
  }

  late final _g_get_codesetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_codeset');
  late final _g_get_codeset =
      _g_get_codesetPtr.asFunction<ffi.Pointer<gchar> Function()>();

  int g_get_console_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_console_charset(
      charset,
    );
  }

  late final _g_get_console_charsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_console_charset');
  late final _g_get_console_charset = _g_get_console_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_language_names() {
    return _g_get_language_names();
  }

  late final _g_get_language_namesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_get_language_names');
  late final _g_get_language_names = _g_get_language_namesPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_language_names_with_category(
    ffi.Pointer<gchar> category_name,
  ) {
    return _g_get_language_names_with_category(
      category_name,
    );
  }

  late final _g_get_language_names_with_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>)>>('g_get_language_names_with_category');
  late final _g_get_language_names_with_category =
      _g_get_language_names_with_categoryPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_locale_variants(
    ffi.Pointer<gchar> locale,
  ) {
    return _g_get_locale_variants(
      locale,
    );
  }

  late final _g_get_locale_variantsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>)>>('g_get_locale_variants');
  late final _g_get_locale_variants = _g_get_locale_variantsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<gchar>)>();

  int g_checksum_type_get_length(
    int checksum_type,
  ) {
    return _g_checksum_type_get_length(
      checksum_type,
    );
  }

  late final _g_checksum_type_get_lengthPtr =
      _lookup<ffi.NativeFunction<gssize Function(ffi.Int32)>>(
          'g_checksum_type_get_length');
  late final _g_checksum_type_get_length =
      _g_checksum_type_get_lengthPtr.asFunction<int Function(int)>();

  ffi.Pointer<GChecksum> g_checksum_new(
    int checksum_type,
  ) {
    return _g_checksum_new(
      checksum_type,
    );
  }

  late final _g_checksum_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GChecksum> Function(ffi.Int32)>>(
          'g_checksum_new');
  late final _g_checksum_new =
      _g_checksum_newPtr.asFunction<ffi.Pointer<GChecksum> Function(int)>();

  void g_checksum_reset(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_reset(
      checksum,
    );
  }

  late final _g_checksum_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GChecksum>)>>(
          'g_checksum_reset');
  late final _g_checksum_reset =
      _g_checksum_resetPtr.asFunction<void Function(ffi.Pointer<GChecksum>)>();

  ffi.Pointer<GChecksum> g_checksum_copy(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_copy(
      checksum,
    );
  }

  late final _g_checksum_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GChecksum> Function(
              ffi.Pointer<GChecksum>)>>('g_checksum_copy');
  late final _g_checksum_copy = _g_checksum_copyPtr
      .asFunction<ffi.Pointer<GChecksum> Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_free(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_free(
      checksum,
    );
  }

  late final _g_checksum_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GChecksum>)>>(
          'g_checksum_free');
  late final _g_checksum_free =
      _g_checksum_freePtr.asFunction<void Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_update(
    ffi.Pointer<GChecksum> checksum,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_checksum_update(
      checksum,
      data,
      length,
    );
  }

  late final _g_checksum_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guchar>,
              gssize)>>('g_checksum_update');
  late final _g_checksum_update = _g_checksum_updatePtr.asFunction<
      void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<gchar> g_checksum_get_string(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_get_string(
      checksum,
    );
  }

  late final _g_checksum_get_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GChecksum>)>>(
      'g_checksum_get_string');
  late final _g_checksum_get_string = _g_checksum_get_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_get_digest(
    ffi.Pointer<GChecksum> checksum,
    ffi.Pointer<guint8> buffer,
    ffi.Pointer<gsize> digest_len,
  ) {
    return _g_checksum_get_digest(
      checksum,
      buffer,
      digest_len,
    );
  }

  late final _g_checksum_get_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guint8>,
              ffi.Pointer<gsize>)>>('g_checksum_get_digest');
  late final _g_checksum_get_digest = _g_checksum_get_digestPtr.asFunction<
      void Function(
          ffi.Pointer<GChecksum>, ffi.Pointer<guint8>, ffi.Pointer<gsize>)>();

  ffi.Pointer<gchar> g_compute_checksum_for_data(
    int checksum_type,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_compute_checksum_for_data(
      checksum_type,
      data,
      length,
    );
  }

  late final _g_compute_checksum_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<guchar>,
              gsize)>>('g_compute_checksum_for_data');
  late final _g_compute_checksum_for_data = _g_compute_checksum_for_dataPtr
      .asFunction<ffi.Pointer<gchar> Function(int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<gchar> g_compute_checksum_for_string(
    int checksum_type,
    ffi.Pointer<gchar> str,
    int length,
  ) {
    return _g_compute_checksum_for_string(
      checksum_type,
      str,
      length,
    );
  }

  late final _g_compute_checksum_for_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<gchar>,
              gssize)>>('g_compute_checksum_for_string');
  late final _g_compute_checksum_for_string = _g_compute_checksum_for_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(int, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_compute_checksum_for_bytes(
    int checksum_type,
    ffi.Pointer<GBytes> data,
  ) {
    return _g_compute_checksum_for_bytes(
      checksum_type,
      data,
    );
  }

  late final _g_compute_checksum_for_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Int32, ffi.Pointer<GBytes>)>>('g_compute_checksum_for_bytes');
  late final _g_compute_checksum_for_bytes = _g_compute_checksum_for_bytesPtr
      .asFunction<ffi.Pointer<gchar> Function(int, ffi.Pointer<GBytes>)>();

  int g_convert_error_quark() {
    return _g_convert_error_quark();
  }

  late final _g_convert_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_convert_error_quark');
  late final _g_convert_error_quark =
      _g_convert_error_quarkPtr.asFunction<int Function()>();

  GIConv g_iconv_open(
    ffi.Pointer<gchar> to_codeset,
    ffi.Pointer<gchar> from_codeset,
  ) {
    return _g_iconv_open(
      to_codeset,
      from_codeset,
    );
  }

  late final _g_iconv_openPtr = _lookup<
      ffi.NativeFunction<
          GIConv Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_iconv_open');
  late final _g_iconv_open = _g_iconv_openPtr
      .asFunction<GIConv Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_iconv(
    GIConv converter,
    ffi.Pointer<ffi.Pointer<gchar>> inbuf,
    ffi.Pointer<gsize> inbytes_left,
    ffi.Pointer<ffi.Pointer<gchar>> outbuf,
    ffi.Pointer<gsize> outbytes_left,
  ) {
    return _g_iconv(
      converter,
      inbuf,
      inbytes_left,
      outbuf,
      outbytes_left,
    );
  }

  late final _g_iconvPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              GIConv,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>)>>('g_iconv');
  late final _g_iconv = _g_iconvPtr.asFunction<
      int Function(GIConv, ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<gsize>)>();

  int g_iconv_close(
    GIConv converter,
  ) {
    return _g_iconv_close(
      converter,
    );
  }

  late final _g_iconv_closePtr =
      _lookup<ffi.NativeFunction<gint Function(GIConv)>>('g_iconv_close');
  late final _g_iconv_close =
      _g_iconv_closePtr.asFunction<int Function(GIConv)>();

  ffi.Pointer<gchar> g_convert(
    ffi.Pointer<gchar> str,
    int len,
    ffi.Pointer<gchar> to_codeset,
    ffi.Pointer<gchar> from_codeset,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert(
      str,
      len,
      to_codeset,
      from_codeset,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert');
  late final _g_convert = _g_convertPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_convert_with_iconv(
    ffi.Pointer<gchar> str,
    int len,
    GIConv converter,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert_with_iconv(
      str,
      len,
      converter,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convert_with_iconvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              GIConv,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert_with_iconv');
  late final _g_convert_with_iconv = _g_convert_with_iconvPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>,
          int,
          GIConv,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_convert_with_fallback(
    ffi.Pointer<gchar> str,
    int len,
    ffi.Pointer<gchar> to_codeset,
    ffi.Pointer<gchar> from_codeset,
    ffi.Pointer<gchar> fallback,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert_with_fallback(
      str,
      len,
      to_codeset,
      from_codeset,
      fallback,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convert_with_fallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert_with_fallback');
  late final _g_convert_with_fallback = _g_convert_with_fallbackPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_locale_to_utf8(
    ffi.Pointer<gchar> opsysstring,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_locale_to_utf8(
      opsysstring,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_locale_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_locale_to_utf8');
  late final _g_locale_to_utf8 = _g_locale_to_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, ffi.Pointer<gsize>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_locale_from_utf8(
    ffi.Pointer<gchar> utf8string,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_locale_from_utf8(
      utf8string,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_locale_from_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_locale_from_utf8');
  late final _g_locale_from_utf8 = _g_locale_from_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, ffi.Pointer<gsize>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_filename_to_utf8(
    ffi.Pointer<gchar> opsysstring,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_to_utf8(
      opsysstring,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_filename_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_to_utf8');
  late final _g_filename_to_utf8 = _g_filename_to_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, ffi.Pointer<gsize>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_filename_from_utf8(
    ffi.Pointer<gchar> utf8string,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_from_utf8(
      utf8string,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_filename_from_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_from_utf8');
  late final _g_filename_from_utf8 = _g_filename_from_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, ffi.Pointer<gsize>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_filename_from_uri(
    ffi.Pointer<gchar> uri,
    ffi.Pointer<ffi.Pointer<gchar>> hostname,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_from_uri(
      uri,
      hostname,
      error,
    );
  }

  late final _g_filename_from_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_from_uri');
  late final _g_filename_from_uri = _g_filename_from_uriPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_filename_to_uri(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<gchar> hostname,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_to_uri(
      filename,
      hostname,
      error,
    );
  }

  late final _g_filename_to_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_to_uri');
  late final _g_filename_to_uri = _g_filename_to_uriPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_filename_display_name(
    ffi.Pointer<gchar> filename,
  ) {
    return _g_filename_display_name(
      filename,
    );
  }

  late final _g_filename_display_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_filename_display_name');
  late final _g_filename_display_name = _g_filename_display_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_get_filename_charsets(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> filename_charsets,
  ) {
    return _g_get_filename_charsets(
      filename_charsets,
    );
  }

  late final _g_get_filename_charsetsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>>(
      'g_get_filename_charsets');
  late final _g_get_filename_charsets = _g_get_filename_charsetsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>();

  ffi.Pointer<gchar> g_filename_display_basename(
    ffi.Pointer<gchar> filename,
  ) {
    return _g_filename_display_basename(
      filename,
    );
  }

  late final _g_filename_display_basenamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_filename_display_basename');
  late final _g_filename_display_basename = _g_filename_display_basenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_uri_list_extract_uris(
    ffi.Pointer<gchar> uri_list,
  ) {
    return _g_uri_list_extract_uris(
      uri_list,
    );
  }

  late final _g_uri_list_extract_urisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>)>>('g_uri_list_extract_uris');
  late final _g_uri_list_extract_uris = _g_uri_list_extract_urisPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<gchar>)>();

  void g_datalist_init(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_init(
      datalist,
    );
  }

  late final _g_datalist_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_init');
  late final _g_datalist_init = _g_datalist_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  void g_datalist_clear(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_clear(
      datalist,
    );
  }

  late final _g_datalist_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_clear');
  late final _g_datalist_clear = _g_datalist_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  gpointer g_datalist_id_get_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
  ) {
    return _g_datalist_id_get_data(
      datalist,
      key_id,
    );
  }

  late final _g_datalist_id_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              GQuark)>>('g_datalist_id_get_data');
  late final _g_datalist_id_get_data = _g_datalist_id_get_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_id_set_data_full(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    gpointer data,
    GDestroyNotify destroy_func,
  ) {
    return _g_datalist_id_set_data_full(
      datalist,
      key_id,
      data,
      destroy_func,
    );
  }

  late final _g_datalist_id_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>, GQuark, gpointer,
              GDestroyNotify)>>('g_datalist_id_set_data_full');
  late final _g_datalist_id_set_data_full =
      _g_datalist_id_set_data_fullPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<GData>>, int, gpointer,
              GDestroyNotify)>();

  gpointer g_datalist_id_dup_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    GDuplicateFunc dup_func,
    gpointer user_data,
  ) {
    return _g_datalist_id_dup_data(
      datalist,
      key_id,
      dup_func,
      user_data,
    );
  }

  late final _g_datalist_id_dup_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<ffi.Pointer<GData>>, GQuark,
              GDuplicateFunc, gpointer)>>('g_datalist_id_dup_data');
  late final _g_datalist_id_dup_data = _g_datalist_id_dup_dataPtr.asFunction<
      gpointer Function(
          ffi.Pointer<ffi.Pointer<GData>>, int, GDuplicateFunc, gpointer)>();

  int g_datalist_id_replace_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    gpointer oldval,
    gpointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_datalist_id_replace_data(
      datalist,
      key_id,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_datalist_id_replace_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<GData>>,
              GQuark,
              gpointer,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_datalist_id_replace_data');
  late final _g_datalist_id_replace_data =
      _g_datalist_id_replace_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<GData>>, int, gpointer, gpointer,
              GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  gpointer g_datalist_id_remove_no_notify(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
  ) {
    return _g_datalist_id_remove_no_notify(
      datalist,
      key_id,
    );
  }

  late final _g_datalist_id_remove_no_notifyPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              GQuark)>>('g_datalist_id_remove_no_notify');
  late final _g_datalist_id_remove_no_notify =
      _g_datalist_id_remove_no_notifyPtr.asFunction<
          gpointer Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_foreach(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    GDataForeachFunc func,
    gpointer user_data,
  ) {
    return _g_datalist_foreach(
      datalist,
      func,
      user_data,
    );
  }

  late final _g_datalist_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>, GDataForeachFunc,
              gpointer)>>('g_datalist_foreach');
  late final _g_datalist_foreach = _g_datalist_foreachPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GData>>, GDataForeachFunc, gpointer)>();

  void g_datalist_set_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int flags,
  ) {
    return _g_datalist_set_flags(
      datalist,
      flags,
    );
  }

  late final _g_datalist_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GData>>, guint)>>('g_datalist_set_flags');
  late final _g_datalist_set_flags = _g_datalist_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_unset_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int flags,
  ) {
    return _g_datalist_unset_flags(
      datalist,
      flags,
    );
  }

  late final _g_datalist_unset_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>,
              guint)>>('g_datalist_unset_flags');
  late final _g_datalist_unset_flags = _g_datalist_unset_flagsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  int g_datalist_get_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_get_flags(
      datalist,
    );
  }

  late final _g_datalist_get_flagsPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_get_flags');
  late final _g_datalist_get_flags = _g_datalist_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  void g_dataset_destroy(
    gconstpointer dataset_location,
  ) {
    return _g_dataset_destroy(
      dataset_location,
    );
  }

  late final _g_dataset_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gconstpointer)>>(
          'g_dataset_destroy');
  late final _g_dataset_destroy =
      _g_dataset_destroyPtr.asFunction<void Function(gconstpointer)>();

  gpointer g_dataset_id_get_data(
    gconstpointer dataset_location,
    int key_id,
  ) {
    return _g_dataset_id_get_data(
      dataset_location,
      key_id,
    );
  }

  late final _g_dataset_id_get_dataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gconstpointer, GQuark)>>(
          'g_dataset_id_get_data');
  late final _g_dataset_id_get_data = _g_dataset_id_get_dataPtr
      .asFunction<gpointer Function(gconstpointer, int)>();

  gpointer g_datalist_get_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    ffi.Pointer<gchar> key,
  ) {
    return _g_datalist_get_data(
      datalist,
      key,
    );
  }

  late final _g_datalist_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              ffi.Pointer<gchar>)>>('g_datalist_get_data');
  late final _g_datalist_get_data = _g_datalist_get_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<ffi.Pointer<GData>>, ffi.Pointer<gchar>)>();

  void g_dataset_id_set_data_full(
    gconstpointer dataset_location,
    int key_id,
    gpointer data,
    GDestroyNotify destroy_func,
  ) {
    return _g_dataset_id_set_data_full(
      dataset_location,
      key_id,
      data,
      destroy_func,
    );
  }

  late final _g_dataset_id_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gconstpointer, GQuark, gpointer,
              GDestroyNotify)>>('g_dataset_id_set_data_full');
  late final _g_dataset_id_set_data_full =
      _g_dataset_id_set_data_fullPtr.asFunction<
          void Function(gconstpointer, int, gpointer, GDestroyNotify)>();

  gpointer g_dataset_id_remove_no_notify(
    gconstpointer dataset_location,
    int key_id,
  ) {
    return _g_dataset_id_remove_no_notify(
      dataset_location,
      key_id,
    );
  }

  late final _g_dataset_id_remove_no_notifyPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gconstpointer, GQuark)>>(
          'g_dataset_id_remove_no_notify');
  late final _g_dataset_id_remove_no_notify = _g_dataset_id_remove_no_notifyPtr
      .asFunction<gpointer Function(gconstpointer, int)>();

  void g_dataset_foreach(
    gconstpointer dataset_location,
    GDataForeachFunc func,
    gpointer user_data,
  ) {
    return _g_dataset_foreach(
      dataset_location,
      func,
      user_data,
    );
  }

  late final _g_dataset_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gconstpointer, GDataForeachFunc, gpointer)>>('g_dataset_foreach');
  late final _g_dataset_foreach = _g_dataset_foreachPtr
      .asFunction<void Function(gconstpointer, GDataForeachFunc, gpointer)>();

  ffi.Pointer<GDate> g_date_new() {
    return _g_date_new();
  }

  late final _g_date_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDate> Function()>>('g_date_new');
  late final _g_date_new =
      _g_date_newPtr.asFunction<ffi.Pointer<GDate> Function()>();

  ffi.Pointer<GDate> g_date_new_dmy(
    int day,
    int month,
    int year,
  ) {
    return _g_date_new_dmy(
      day,
      month,
      year,
    );
  }

  late final _g_date_new_dmyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDate> Function(
              GDateDay, ffi.Int32, GDateYear)>>('g_date_new_dmy');
  late final _g_date_new_dmy = _g_date_new_dmyPtr
      .asFunction<ffi.Pointer<GDate> Function(int, int, int)>();

  ffi.Pointer<GDate> g_date_new_julian(
    int julian_day,
  ) {
    return _g_date_new_julian(
      julian_day,
    );
  }

  late final _g_date_new_julianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDate> Function(guint32)>>(
          'g_date_new_julian');
  late final _g_date_new_julian =
      _g_date_new_julianPtr.asFunction<ffi.Pointer<GDate> Function(int)>();

  void g_date_free(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_free(
      date,
    );
  }

  late final _g_date_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>)>>(
          'g_date_free');
  late final _g_date_free =
      _g_date_freePtr.asFunction<void Function(ffi.Pointer<GDate>)>();

  ffi.Pointer<GDate> g_date_copy(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_copy(
      date,
    );
  }

  late final _g_date_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GDate> Function(ffi.Pointer<GDate>)>>(
      'g_date_copy');
  late final _g_date_copy = _g_date_copyPtr
      .asFunction<ffi.Pointer<GDate> Function(ffi.Pointer<GDate>)>();

  int g_date_valid(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_valid(
      date,
    );
  }

  late final _g_date_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_valid');
  late final _g_date_valid =
      _g_date_validPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_valid_day(
    int day,
  ) {
    return _g_date_valid_day(
      day,
    );
  }

  late final _g_date_valid_dayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateDay)>>(
          'g_date_valid_day');
  late final _g_date_valid_day =
      _g_date_valid_dayPtr.asFunction<int Function(int)>();

  int g_date_valid_month(
    int month,
  ) {
    return _g_date_valid_month(
      month,
    );
  }

  late final _g_date_valid_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Int32)>>(
          'g_date_valid_month');
  late final _g_date_valid_month =
      _g_date_valid_monthPtr.asFunction<int Function(int)>();

  int g_date_valid_year(
    int year,
  ) {
    return _g_date_valid_year(
      year,
    );
  }

  late final _g_date_valid_yearPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateYear)>>(
          'g_date_valid_year');
  late final _g_date_valid_year =
      _g_date_valid_yearPtr.asFunction<int Function(int)>();

  int g_date_valid_weekday(
    int weekday,
  ) {
    return _g_date_valid_weekday(
      weekday,
    );
  }

  late final _g_date_valid_weekdayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Int32)>>(
          'g_date_valid_weekday');
  late final _g_date_valid_weekday =
      _g_date_valid_weekdayPtr.asFunction<int Function(int)>();

  int g_date_valid_julian(
    int julian_date,
  ) {
    return _g_date_valid_julian(
      julian_date,
    );
  }

  late final _g_date_valid_julianPtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint32)>>(
          'g_date_valid_julian');
  late final _g_date_valid_julian =
      _g_date_valid_julianPtr.asFunction<int Function(int)>();

  int g_date_valid_dmy(
    int day,
    int month,
    int year,
  ) {
    return _g_date_valid_dmy(
      day,
      month,
      year,
    );
  }

  late final _g_date_valid_dmyPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(GDateDay, ffi.Int32, GDateYear)>>(
      'g_date_valid_dmy');
  late final _g_date_valid_dmy =
      _g_date_valid_dmyPtr.asFunction<int Function(int, int, int)>();

  int g_date_get_weekday(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_weekday(
      date,
    );
  }

  late final _g_date_get_weekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_weekday');
  late final _g_date_get_weekday =
      _g_date_get_weekdayPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_month(
      date,
    );
  }

  late final _g_date_get_monthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_month');
  late final _g_date_get_month =
      _g_date_get_monthPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_year(
      date,
    );
  }

  late final _g_date_get_yearPtr =
      _lookup<ffi.NativeFunction<GDateYear Function(ffi.Pointer<GDate>)>>(
          'g_date_get_year');
  late final _g_date_get_year =
      _g_date_get_yearPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_day(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_day(
      date,
    );
  }

  late final _g_date_get_dayPtr =
      _lookup<ffi.NativeFunction<GDateDay Function(ffi.Pointer<GDate>)>>(
          'g_date_get_day');
  late final _g_date_get_day =
      _g_date_get_dayPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_julian(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_julian(
      date,
    );
  }

  late final _g_date_get_julianPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_julian');
  late final _g_date_get_julian =
      _g_date_get_julianPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_day_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_day_of_year(
      date,
    );
  }

  late final _g_date_get_day_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_day_of_year');
  late final _g_date_get_day_of_year =
      _g_date_get_day_of_yearPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_monday_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_monday_week_of_year(
      date,
    );
  }

  late final _g_date_get_monday_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_monday_week_of_year');
  late final _g_date_get_monday_week_of_year =
      _g_date_get_monday_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_sunday_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_sunday_week_of_year(
      date,
    );
  }

  late final _g_date_get_sunday_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_sunday_week_of_year');
  late final _g_date_get_sunday_week_of_year =
      _g_date_get_sunday_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_iso8601_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_iso8601_week_of_year(
      date,
    );
  }

  late final _g_date_get_iso8601_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_iso8601_week_of_year');
  late final _g_date_get_iso8601_week_of_year =
      _g_date_get_iso8601_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  void g_date_clear(
    ffi.Pointer<GDate> date,
    int n_dates,
  ) {
    return _g_date_clear(
      date,
      n_dates,
    );
  }

  late final _g_date_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_clear');
  late final _g_date_clear =
      _g_date_clearPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_parse(
    ffi.Pointer<GDate> date,
    ffi.Pointer<gchar> str,
  ) {
    return _g_date_set_parse(
      date,
      str,
    );
  }

  late final _g_date_set_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<gchar>)>>('g_date_set_parse');
  late final _g_date_set_parse = _g_date_set_parsePtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<gchar>)>();

  void g_date_set_time_t(
    ffi.Pointer<GDate> date,
    int timet,
  ) {
    return _g_date_set_time_t(
      date,
      timet,
    );
  }

  late final _g_date_set_time_tPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, time_t)>>(
      'g_date_set_time_t');
  late final _g_date_set_time_t = _g_date_set_time_tPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_time_val(
    ffi.Pointer<GDate> date,
    ffi.Pointer<GTimeVal> timeval,
  ) {
    return _g_date_set_time_val(
      date,
      timeval,
    );
  }

  late final _g_date_set_time_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>,
              ffi.Pointer<GTimeVal>)>>('g_date_set_time_val');
  late final _g_date_set_time_val = _g_date_set_time_valPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<GTimeVal>)>();

  void g_date_set_time(
    ffi.Pointer<GDate> date,
    int time_,
  ) {
    return _g_date_set_time(
      date,
      time_,
    );
  }

  late final _g_date_set_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GTime)>>(
          'g_date_set_time');
  late final _g_date_set_time =
      _g_date_set_timePtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_month(
    ffi.Pointer<GDate> date,
    int month,
  ) {
    return _g_date_set_month(
      date,
      month,
    );
  }

  late final _g_date_set_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, ffi.Int32)>>(
      'g_date_set_month');
  late final _g_date_set_month =
      _g_date_set_monthPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_day(
    ffi.Pointer<GDate> date,
    int day,
  ) {
    return _g_date_set_day(
      date,
      day,
    );
  }

  late final _g_date_set_dayPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GDateDay)>>(
      'g_date_set_day');
  late final _g_date_set_day =
      _g_date_set_dayPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_year(
    ffi.Pointer<GDate> date,
    int year,
  ) {
    return _g_date_set_year(
      date,
      year,
    );
  }

  late final _g_date_set_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GDateYear)>>(
      'g_date_set_year');
  late final _g_date_set_year =
      _g_date_set_yearPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_dmy(
    ffi.Pointer<GDate> date,
    int day,
    int month,
    int y,
  ) {
    return _g_date_set_dmy(
      date,
      day,
      month,
      y,
    );
  }

  late final _g_date_set_dmyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>, GDateDay, ffi.Int32,
              GDateYear)>>('g_date_set_dmy');
  late final _g_date_set_dmy = _g_date_set_dmyPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int, int, int)>();

  void g_date_set_julian(
    ffi.Pointer<GDate> date,
    int julian_date,
  ) {
    return _g_date_set_julian(
      date,
      julian_date,
    );
  }

  late final _g_date_set_julianPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint32)>>(
      'g_date_set_julian');
  late final _g_date_set_julian = _g_date_set_julianPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  int g_date_is_first_of_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_is_first_of_month(
      date,
    );
  }

  late final _g_date_is_first_of_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_is_first_of_month');
  late final _g_date_is_first_of_month = _g_date_is_first_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_is_last_of_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_is_last_of_month(
      date,
    );
  }

  late final _g_date_is_last_of_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_is_last_of_month');
  late final _g_date_is_last_of_month = _g_date_is_last_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDate>)>();

  void g_date_add_days(
    ffi.Pointer<GDate> date,
    int n_days,
  ) {
    return _g_date_add_days(
      date,
      n_days,
    );
  }

  late final _g_date_add_daysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_days');
  late final _g_date_add_days =
      _g_date_add_daysPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_days(
    ffi.Pointer<GDate> date,
    int n_days,
  ) {
    return _g_date_subtract_days(
      date,
      n_days,
    );
  }

  late final _g_date_subtract_daysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_days');
  late final _g_date_subtract_days = _g_date_subtract_daysPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_add_months(
    ffi.Pointer<GDate> date,
    int n_months,
  ) {
    return _g_date_add_months(
      date,
      n_months,
    );
  }

  late final _g_date_add_monthsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_months');
  late final _g_date_add_months = _g_date_add_monthsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_months(
    ffi.Pointer<GDate> date,
    int n_months,
  ) {
    return _g_date_subtract_months(
      date,
      n_months,
    );
  }

  late final _g_date_subtract_monthsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_months');
  late final _g_date_subtract_months = _g_date_subtract_monthsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_add_years(
    ffi.Pointer<GDate> date,
    int n_years,
  ) {
    return _g_date_add_years(
      date,
      n_years,
    );
  }

  late final _g_date_add_yearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_years');
  late final _g_date_add_years =
      _g_date_add_yearsPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_years(
    ffi.Pointer<GDate> date,
    int n_years,
  ) {
    return _g_date_subtract_years(
      date,
      n_years,
    );
  }

  late final _g_date_subtract_yearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_years');
  late final _g_date_subtract_years = _g_date_subtract_yearsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  int g_date_is_leap_year(
    int year,
  ) {
    return _g_date_is_leap_year(
      year,
    );
  }

  late final _g_date_is_leap_yearPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateYear)>>(
          'g_date_is_leap_year');
  late final _g_date_is_leap_year =
      _g_date_is_leap_yearPtr.asFunction<int Function(int)>();

  int g_date_get_days_in_month(
    int month,
    int year,
  ) {
    return _g_date_get_days_in_month(
      month,
      year,
    );
  }

  late final _g_date_get_days_in_monthPtr =
      _lookup<ffi.NativeFunction<guint8 Function(ffi.Int32, GDateYear)>>(
          'g_date_get_days_in_month');
  late final _g_date_get_days_in_month =
      _g_date_get_days_in_monthPtr.asFunction<int Function(int, int)>();

  int g_date_get_monday_weeks_in_year(
    int year,
  ) {
    return _g_date_get_monday_weeks_in_year(
      year,
    );
  }

  late final _g_date_get_monday_weeks_in_yearPtr =
      _lookup<ffi.NativeFunction<guint8 Function(GDateYear)>>(
          'g_date_get_monday_weeks_in_year');
  late final _g_date_get_monday_weeks_in_year =
      _g_date_get_monday_weeks_in_yearPtr.asFunction<int Function(int)>();

  int g_date_get_sunday_weeks_in_year(
    int year,
  ) {
    return _g_date_get_sunday_weeks_in_year(
      year,
    );
  }

  late final _g_date_get_sunday_weeks_in_yearPtr =
      _lookup<ffi.NativeFunction<guint8 Function(GDateYear)>>(
          'g_date_get_sunday_weeks_in_year');
  late final _g_date_get_sunday_weeks_in_year =
      _g_date_get_sunday_weeks_in_yearPtr.asFunction<int Function(int)>();

  int g_date_days_between(
    ffi.Pointer<GDate> date1,
    ffi.Pointer<GDate> date2,
  ) {
    return _g_date_days_between(
      date1,
      date2,
    );
  }

  late final _g_date_days_betweenPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_days_between');
  late final _g_date_days_between = _g_date_days_betweenPtr
      .asFunction<int Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  int g_date_compare(
    ffi.Pointer<GDate> lhs,
    ffi.Pointer<GDate> rhs,
  ) {
    return _g_date_compare(
      lhs,
      rhs,
    );
  }

  late final _g_date_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_compare');
  late final _g_date_compare = _g_date_comparePtr
      .asFunction<int Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  void g_date_to_struct_tm(
    ffi.Pointer<GDate> date,
    ffi.Pointer<tm> tm,
  ) {
    return _g_date_to_struct_tm(
      date,
      tm,
    );
  }

  late final _g_date_to_struct_tmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<tm>)>>('g_date_to_struct_tm');
  late final _g_date_to_struct_tm = _g_date_to_struct_tmPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<tm>)>();

  void g_date_clamp(
    ffi.Pointer<GDate> date,
    ffi.Pointer<GDate> min_date,
    ffi.Pointer<GDate> max_date,
  ) {
    return _g_date_clamp(
      date,
      min_date,
      max_date,
    );
  }

  late final _g_date_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>,
              ffi.Pointer<GDate>)>>('g_date_clamp');
  late final _g_date_clamp = _g_date_clampPtr.asFunction<
      void Function(
          ffi.Pointer<GDate>, ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  void g_date_order(
    ffi.Pointer<GDate> date1,
    ffi.Pointer<GDate> date2,
  ) {
    return _g_date_order(
      date1,
      date2,
    );
  }

  late final _g_date_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_order');
  late final _g_date_order = _g_date_orderPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  int g_date_strftime(
    ffi.Pointer<gchar> s,
    int slen,
    ffi.Pointer<gchar> format,
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_strftime(
      s,
      slen,
      format,
      date,
    );
  }

  late final _g_date_strftimePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<gchar>, gsize, ffi.Pointer<gchar>,
              ffi.Pointer<GDate>)>>('g_date_strftime');
  late final _g_date_strftime = _g_date_strftimePtr.asFunction<
      int Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<gchar>, ffi.Pointer<GDate>)>();

  ffi.Pointer<GDir> g_dir_open(
    ffi.Pointer<gchar> path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dir_open(
      path,
      flags,
      error,
    );
  }

  late final _g_dir_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDir> Function(ffi.Pointer<gchar>, guint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dir_open');
  late final _g_dir_open = _g_dir_openPtr.asFunction<
      ffi.Pointer<GDir> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_dir_read_name(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_read_name(
      dir,
    );
  }

  late final _g_dir_read_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDir>)>>(
      'g_dir_read_name');
  late final _g_dir_read_name = _g_dir_read_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDir>)>();

  void g_dir_rewind(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_rewind(
      dir,
    );
  }

  late final _g_dir_rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDir>)>>(
          'g_dir_rewind');
  late final _g_dir_rewind =
      _g_dir_rewindPtr.asFunction<void Function(ffi.Pointer<GDir>)>();

  void g_dir_close(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_close(
      dir,
    );
  }

  late final _g_dir_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDir>)>>(
          'g_dir_close');
  late final _g_dir_close =
      _g_dir_closePtr.asFunction<void Function(ffi.Pointer<GDir>)>();

  ffi.Pointer<gchar> g_getenv(
    ffi.Pointer<gchar> variable,
  ) {
    return _g_getenv(
      variable,
    );
  }

  late final _g_getenvPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_getenv');
  late final _g_getenv = _g_getenvPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_setenv(
    ffi.Pointer<gchar> variable,
    ffi.Pointer<gchar> value,
    int overwrite,
  ) {
    return _g_setenv(
      variable,
      value,
      overwrite,
    );
  }

  late final _g_setenvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gboolean)>>('g_setenv');
  late final _g_setenv = _g_setenvPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  void g_unsetenv(
    ffi.Pointer<gchar> variable,
  ) {
    return _g_unsetenv(
      variable,
    );
  }

  late final _g_unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_unsetenv');
  late final _g_unsetenv =
      _g_unsetenvPtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_listenv() {
    return _g_listenv();
  }

  late final _g_listenvPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_listenv');
  late final _g_listenv =
      _g_listenvPtr.asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_get_environ() {
    return _g_get_environ();
  }

  late final _g_get_environPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_get_environ');
  late final _g_get_environ = _g_get_environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<gchar> g_environ_getenv(
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    ffi.Pointer<gchar> variable,
  ) {
    return _g_environ_getenv(
      envp,
      variable,
    );
  }

  late final _g_environ_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gchar>)>>('g_environ_getenv');
  late final _g_environ_getenv = _g_environ_getenvPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_environ_setenv(
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    ffi.Pointer<gchar> variable,
    ffi.Pointer<gchar> value,
    int overwrite,
  ) {
    return _g_environ_setenv(
      envp,
      variable,
      value,
      overwrite,
    );
  }

  late final _g_environ_setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gboolean)>>('g_environ_setenv');
  late final _g_environ_setenv = _g_environ_setenvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_environ_unsetenv(
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    ffi.Pointer<gchar> variable,
  ) {
    return _g_environ_unsetenv(
      envp,
      variable,
    );
  }

  late final _g_environ_unsetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gchar>)>>('g_environ_unsetenv');
  late final _g_environ_unsetenv = _g_environ_unsetenvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<gchar>)>();

  int g_file_error_quark() {
    return _g_file_error_quark();
  }

  late final _g_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_file_error_quark');
  late final _g_file_error_quark =
      _g_file_error_quarkPtr.asFunction<int Function()>();

  int g_file_error_from_errno(
    int err_no,
  ) {
    return _g_file_error_from_errno(
      err_no,
    );
  }

  late final _g_file_error_from_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gint)>>(
          'g_file_error_from_errno');
  late final _g_file_error_from_errno =
      _g_file_error_from_errnoPtr.asFunction<int Function(int)>();

  int g_file_test(
    ffi.Pointer<gchar> filename,
    int test,
  ) {
    return _g_file_test(
      filename,
      test,
    );
  }

  late final _g_file_testPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>, ffi.Int32)>>(
      'g_file_test');
  late final _g_file_test =
      _g_file_testPtr.asFunction<int Function(ffi.Pointer<gchar>, int)>();

  int g_file_get_contents(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<gchar>> contents,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_get_contents(
      filename,
      contents,
      length,
      error,
    );
  }

  late final _g_file_get_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_get_contents');
  late final _g_file_get_contents = _g_file_get_contentsPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_contents(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<gchar> contents,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_contents(
      filename,
      contents,
      length,
      error,
    );
  }

  late final _g_file_set_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, gssize,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_contents');
  late final _g_file_set_contents = _g_file_set_contentsPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_contents_full(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<gchar> contents,
    int length,
    int flags,
    int mode,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_contents_full(
      filename,
      contents,
      length,
      flags,
      mode,
      error,
    );
  }

  late final _g_file_set_contents_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gssize,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_contents_full');
  late final _g_file_set_contents_full =
      _g_file_set_contents_fullPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_file_read_link(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_read_link(
      filename,
      error,
    );
  }

  late final _g_file_read_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_read_link');
  late final _g_file_read_link = _g_file_read_linkPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_mkdtemp(
    ffi.Pointer<gchar> tmpl,
  ) {
    return _g_mkdtemp(
      tmpl,
    );
  }

  late final _g_mkdtempPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_mkdtemp');
  late final _g_mkdtemp = _g_mkdtempPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_mkdtemp_full(
    ffi.Pointer<gchar> tmpl,
    int mode,
  ) {
    return _g_mkdtemp_full(
      tmpl,
      mode,
    );
  }

  late final _g_mkdtemp_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gint)>>('g_mkdtemp_full');
  late final _g_mkdtemp_full = _g_mkdtemp_fullPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  int g_mkstemp(
    ffi.Pointer<gchar> tmpl,
  ) {
    return _g_mkstemp(
      tmpl,
    );
  }

  late final _g_mkstempPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gchar>)>>(
          'g_mkstemp');
  late final _g_mkstemp =
      _g_mkstempPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_mkstemp_full(
    ffi.Pointer<gchar> tmpl,
    int flags,
    int mode,
  ) {
    return _g_mkstemp_full(
      tmpl,
      flags,
      mode,
    );
  }

  late final _g_mkstemp_fullPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<gchar>, gint, gint)>>(
      'g_mkstemp_full');
  late final _g_mkstemp_full = _g_mkstemp_fullPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int, int)>();

  int g_file_open_tmp(
    ffi.Pointer<gchar> tmpl,
    ffi.Pointer<ffi.Pointer<gchar>> name_used,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_open_tmp(
      tmpl,
      name_used,
      error,
    );
  }

  late final _g_file_open_tmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_open_tmp');
  late final _g_file_open_tmp = _g_file_open_tmpPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_dir_make_tmp(
    ffi.Pointer<gchar> tmpl,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dir_make_tmp(
      tmpl,
      error,
    );
  }

  late final _g_dir_make_tmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dir_make_tmp');
  late final _g_dir_make_tmp = _g_dir_make_tmpPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_build_path(
    ffi.Pointer<gchar> separator,
    ffi.Pointer<gchar> first_element,
  ) {
    return _g_build_path(
      separator,
      first_element,
    );
  }

  late final _g_build_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_build_path');
  late final _g_build_path = _g_build_pathPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_build_pathv(
    ffi.Pointer<gchar> separator,
    ffi.Pointer<ffi.Pointer<gchar>> args,
  ) {
    return _g_build_pathv(
      separator,
      args,
    );
  }

  late final _g_build_pathvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_build_pathv');
  late final _g_build_pathv = _g_build_pathvPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_build_filename(
    ffi.Pointer<gchar> first_element,
  ) {
    return _g_build_filename(
      first_element,
    );
  }

  late final _g_build_filenamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_build_filename');
  late final _g_build_filename = _g_build_filenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_build_filenamev(
    ffi.Pointer<ffi.Pointer<gchar>> args,
  ) {
    return _g_build_filenamev(
      args,
    );
  }

  late final _g_build_filenamevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_build_filenamev');
  late final _g_build_filenamev = _g_build_filenamevPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_build_filename_valist(
    ffi.Pointer<gchar> first_element,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> args,
  ) {
    return _g_build_filename_valist(
      first_element,
      args,
    );
  }

  late final _g_build_filename_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>(
      'g_build_filename_valist');
  late final _g_build_filename_valist = _g_build_filename_valistPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  int g_mkdir_with_parents(
    ffi.Pointer<gchar> pathname,
    int mode,
  ) {
    return _g_mkdir_with_parents(
      pathname,
      mode,
    );
  }

  late final _g_mkdir_with_parentsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gchar>, gint)>>(
          'g_mkdir_with_parents');
  late final _g_mkdir_with_parents = _g_mkdir_with_parentsPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int)>();

  int g_path_is_absolute(
    ffi.Pointer<gchar> file_name,
  ) {
    return _g_path_is_absolute(
      file_name,
    );
  }

  late final _g_path_is_absolutePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_path_is_absolute');
  late final _g_path_is_absolute =
      _g_path_is_absolutePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_path_skip_root(
    ffi.Pointer<gchar> file_name,
  ) {
    return _g_path_skip_root(
      file_name,
    );
  }

  late final _g_path_skip_rootPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_path_skip_root');
  late final _g_path_skip_root = _g_path_skip_rootPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_basename(
    ffi.Pointer<gchar> file_name,
  ) {
    return _g_basename(
      file_name,
    );
  }

  late final _g_basenamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_basename');
  late final _g_basename = _g_basenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_get_current_dir() {
    return _g_get_current_dir();
  }

  late final _g_get_current_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_get_current_dir');
  late final _g_get_current_dir =
      _g_get_current_dirPtr.asFunction<ffi.Pointer<gchar> Function()>();

  ffi.Pointer<gchar> g_path_get_basename(
    ffi.Pointer<gchar> file_name,
  ) {
    return _g_path_get_basename(
      file_name,
    );
  }

  late final _g_path_get_basenamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_path_get_basename');
  late final _g_path_get_basename = _g_path_get_basenamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_path_get_dirname(
    ffi.Pointer<gchar> file_name,
  ) {
    return _g_path_get_dirname(
      file_name,
    );
  }

  late final _g_path_get_dirnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_path_get_dirname');
  late final _g_path_get_dirname = _g_path_get_dirnamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_canonicalize_filename(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<gchar> relative_to,
  ) {
    return _g_canonicalize_filename(
      filename,
      relative_to,
    );
  }

  late final _g_canonicalize_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_canonicalize_filename');
  late final _g_canonicalize_filename = _g_canonicalize_filenamePtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strip_context(
    ffi.Pointer<gchar> msgid,
    ffi.Pointer<gchar> msgval,
  ) {
    return _g_strip_context(
      msgid,
      msgval,
    );
  }

  late final _g_strip_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_strip_context');
  late final _g_strip_context = _g_strip_contextPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dgettext(
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> msgid,
  ) {
    return _g_dgettext(
      domain,
      msgid,
    );
  }

  late final _g_dgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_dgettext');
  late final _g_dgettext = _g_dgettextPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dcgettext(
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> msgid,
    int category,
  ) {
    return _g_dcgettext(
      domain,
      msgid,
      category,
    );
  }

  late final _g_dcgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gint)>>('g_dcgettext');
  late final _g_dcgettext = _g_dcgettextPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_dngettext(
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> msgid,
    ffi.Pointer<gchar> msgid_plural,
    int n,
  ) {
    return _g_dngettext(
      domain,
      msgid,
      msgid_plural,
      n,
    );
  }

  late final _g_dngettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, gulong)>>('g_dngettext');
  late final _g_dngettext = _g_dngettextPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_dpgettext(
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> msgctxtid,
    int msgidoffset,
  ) {
    return _g_dpgettext(
      domain,
      msgctxtid,
      msgidoffset,
    );
  }

  late final _g_dpgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gsize)>>('g_dpgettext');
  late final _g_dpgettext = _g_dpgettextPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_dpgettext2(
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> context,
    ffi.Pointer<gchar> msgid,
  ) {
    return _g_dpgettext2(
      domain,
      context,
      msgid,
    );
  }

  late final _g_dpgettext2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dpgettext2');
  late final _g_dpgettext2 = _g_dpgettext2Ptr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_free(
    gpointer mem,
  ) {
    return _g_free(
      mem,
    );
  }

  late final _g_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>('g_free');
  late final _g_free = _g_freePtr.asFunction<void Function(gpointer)>();

  void g_clear_pointer(
    ffi.Pointer<gpointer> pp,
    GDestroyNotify destroy,
  ) {
    return _g_clear_pointer(
      pp,
      destroy,
    );
  }

  late final _g_clear_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gpointer>, GDestroyNotify)>>('g_clear_pointer');
  late final _g_clear_pointer = _g_clear_pointerPtr
      .asFunction<void Function(ffi.Pointer<gpointer>, GDestroyNotify)>();

  gpointer g_malloc(
    int n_bytes,
  ) {
    return _g_malloc(
      n_bytes,
    );
  }

  late final _g_mallocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_malloc');
  late final _g_malloc = _g_mallocPtr.asFunction<gpointer Function(int)>();

  gpointer g_malloc0(
    int n_bytes,
  ) {
    return _g_malloc0(
      n_bytes,
    );
  }

  late final _g_malloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_malloc0');
  late final _g_malloc0 = _g_malloc0Ptr.asFunction<gpointer Function(int)>();

  gpointer g_realloc(
    gpointer mem,
    int n_bytes,
  ) {
    return _g_realloc(
      mem,
      n_bytes,
    );
  }

  late final _g_reallocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, gsize)>>(
          'g_realloc');
  late final _g_realloc =
      _g_reallocPtr.asFunction<gpointer Function(gpointer, int)>();

  gpointer g_try_malloc(
    int n_bytes,
  ) {
    return _g_try_malloc(
      n_bytes,
    );
  }

  late final _g_try_mallocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_try_malloc');
  late final _g_try_malloc =
      _g_try_mallocPtr.asFunction<gpointer Function(int)>();

  gpointer g_try_malloc0(
    int n_bytes,
  ) {
    return _g_try_malloc0(
      n_bytes,
    );
  }

  late final _g_try_malloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_try_malloc0');
  late final _g_try_malloc0 =
      _g_try_malloc0Ptr.asFunction<gpointer Function(int)>();

  gpointer g_try_realloc(
    gpointer mem,
    int n_bytes,
  ) {
    return _g_try_realloc(
      mem,
      n_bytes,
    );
  }

  late final _g_try_reallocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, gsize)>>(
          'g_try_realloc');
  late final _g_try_realloc =
      _g_try_reallocPtr.asFunction<gpointer Function(gpointer, int)>();

  gpointer g_malloc_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_malloc_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_malloc_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize)>>(
          'g_malloc_n');
  late final _g_malloc_n =
      _g_malloc_nPtr.asFunction<gpointer Function(int, int)>();

  gpointer g_malloc0_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_malloc0_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_malloc0_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize)>>(
          'g_malloc0_n');
  late final _g_malloc0_n =
      _g_malloc0_nPtr.asFunction<gpointer Function(int, int)>();

  gpointer g_realloc_n(
    gpointer mem,
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_realloc_n(
      mem,
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_realloc_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, gsize, gsize)>>(
          'g_realloc_n');
  late final _g_realloc_n =
      _g_realloc_nPtr.asFunction<gpointer Function(gpointer, int, int)>();

  gpointer g_try_malloc_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_malloc_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_malloc_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize)>>(
          'g_try_malloc_n');
  late final _g_try_malloc_n =
      _g_try_malloc_nPtr.asFunction<gpointer Function(int, int)>();

  gpointer g_try_malloc0_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_malloc0_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_malloc0_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize)>>(
          'g_try_malloc0_n');
  late final _g_try_malloc0_n =
      _g_try_malloc0_nPtr.asFunction<gpointer Function(int, int)>();

  gpointer g_try_realloc_n(
    gpointer mem,
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_realloc_n(
      mem,
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_realloc_nPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, gsize, gsize)>>(
          'g_try_realloc_n');
  late final _g_try_realloc_n =
      _g_try_realloc_nPtr.asFunction<gpointer Function(gpointer, int, int)>();

  gpointer g_aligned_alloc(
    int n_blocks,
    int n_block_bytes,
    int alignment,
  ) {
    return _g_aligned_alloc(
      n_blocks,
      n_block_bytes,
      alignment,
    );
  }

  late final _g_aligned_allocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize, gsize)>>(
          'g_aligned_alloc');
  late final _g_aligned_alloc =
      _g_aligned_allocPtr.asFunction<gpointer Function(int, int, int)>();

  gpointer g_aligned_alloc0(
    int n_blocks,
    int n_block_bytes,
    int alignment,
  ) {
    return _g_aligned_alloc0(
      n_blocks,
      n_block_bytes,
      alignment,
    );
  }

  late final _g_aligned_alloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gsize, gsize)>>(
          'g_aligned_alloc0');
  late final _g_aligned_alloc0 =
      _g_aligned_alloc0Ptr.asFunction<gpointer Function(int, int, int)>();

  void g_aligned_free(
    gpointer mem,
  ) {
    return _g_aligned_free(
      mem,
    );
  }

  late final _g_aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_aligned_free');
  late final _g_aligned_free =
      _g_aligned_freePtr.asFunction<void Function(gpointer)>();

  void g_mem_set_vtable(
    ffi.Pointer<GMemVTable> vtable,
  ) {
    return _g_mem_set_vtable(
      vtable,
    );
  }

  late final _g_mem_set_vtablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemVTable>)>>(
          'g_mem_set_vtable');
  late final _g_mem_set_vtable =
      _g_mem_set_vtablePtr.asFunction<void Function(ffi.Pointer<GMemVTable>)>();

  int g_mem_is_system_malloc() {
    return _g_mem_is_system_malloc();
  }

  late final _g_mem_is_system_mallocPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_mem_is_system_malloc');
  late final _g_mem_is_system_malloc =
      _g_mem_is_system_mallocPtr.asFunction<int Function()>();

  late final ffi.Pointer<gboolean> _g_mem_gc_friendly =
      _lookup<gboolean>('g_mem_gc_friendly');

  int get g_mem_gc_friendly => _g_mem_gc_friendly.value;

  set g_mem_gc_friendly(int value) => _g_mem_gc_friendly.value = value;

  late final ffi.Pointer<ffi.Pointer<GMemVTable>> _glib_mem_profiler_table =
      _lookup<ffi.Pointer<GMemVTable>>('glib_mem_profiler_table');

  ffi.Pointer<GMemVTable> get glib_mem_profiler_table =>
      _glib_mem_profiler_table.value;

  set glib_mem_profiler_table(ffi.Pointer<GMemVTable> value) =>
      _glib_mem_profiler_table.value = value;

  void g_mem_profile() {
    return _g_mem_profile();
  }

  late final _g_mem_profilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_mem_profile');
  late final _g_mem_profile = _g_mem_profilePtr.asFunction<void Function()>();

  ffi.Pointer<GNode> g_node_new(
    gpointer data,
  ) {
    return _g_node_new(
      data,
    );
  }

  late final _g_node_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GNode> Function(gpointer)>>(
          'g_node_new');
  late final _g_node_new =
      _g_node_newPtr.asFunction<ffi.Pointer<GNode> Function(gpointer)>();

  void g_node_destroy(
    ffi.Pointer<GNode> root,
  ) {
    return _g_node_destroy(
      root,
    );
  }

  late final _g_node_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_destroy');
  late final _g_node_destroy =
      _g_node_destroyPtr.asFunction<void Function(ffi.Pointer<GNode>)>();

  void g_node_unlink(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_unlink(
      node,
    );
  }

  late final _g_node_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_unlink');
  late final _g_node_unlink =
      _g_node_unlinkPtr.asFunction<void Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_copy_deep(
    ffi.Pointer<GNode> node,
    GCopyFunc copy_func,
    gpointer data,
  ) {
    return _g_node_copy_deep(
      node,
      copy_func,
      data,
    );
  }

  late final _g_node_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, GCopyFunc, gpointer)>>('g_node_copy_deep');
  late final _g_node_copy_deep = _g_node_copy_deepPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, GCopyFunc, gpointer)>();

  ffi.Pointer<GNode> g_node_copy(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_copy(
      node,
    );
  }

  late final _g_node_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_copy');
  late final _g_node_copy = _g_node_copyPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert(
    ffi.Pointer<GNode> parent,
    int position,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert(
      parent,
      position,
      node,
    );
  }

  late final _g_node_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, gint, ffi.Pointer<GNode>)>>('g_node_insert');
  late final _g_node_insert = _g_node_insertPtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, int, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert_before(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> sibling,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert_before(
      parent,
      sibling,
      node,
    );
  }

  late final _g_node_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_insert_before');
  late final _g_node_insert_before = _g_node_insert_beforePtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert_after(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> sibling,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert_after(
      parent,
      sibling,
      node,
    );
  }

  late final _g_node_insert_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_insert_after');
  late final _g_node_insert_after = _g_node_insert_afterPtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_prepend(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_prepend(
      parent,
      node,
    );
  }

  late final _g_node_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, ffi.Pointer<GNode>)>>('g_node_prepend');
  late final _g_node_prepend = _g_node_prependPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_n_nodes(
    ffi.Pointer<GNode> root,
    int flags,
  ) {
    return _g_node_n_nodes(
      root,
      flags,
    );
  }

  late final _g_node_n_nodesPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GNode>, ffi.Int32)>>(
      'g_node_n_nodes');
  late final _g_node_n_nodes =
      _g_node_n_nodesPtr.asFunction<int Function(ffi.Pointer<GNode>, int)>();

  ffi.Pointer<GNode> g_node_get_root(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_get_root(
      node,
    );
  }

  late final _g_node_get_rootPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_get_root');
  late final _g_node_get_root = _g_node_get_rootPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  int g_node_is_ancestor(
    ffi.Pointer<GNode> node,
    ffi.Pointer<GNode> descendant,
  ) {
    return _g_node_is_ancestor(
      node,
      descendant,
    );
  }

  late final _g_node_is_ancestorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GNode>, ffi.Pointer<GNode>)>>('g_node_is_ancestor');
  late final _g_node_is_ancestor = _g_node_is_ancestorPtr
      .asFunction<int Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_depth(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_depth(
      node,
    );
  }

  late final _g_node_depthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_depth');
  late final _g_node_depth =
      _g_node_depthPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_find(
    ffi.Pointer<GNode> root,
    int order,
    int flags,
    gpointer data,
  ) {
    return _g_node_find(
      root,
      order,
      flags,
      data,
    );
  }

  late final _g_node_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Int32, ffi.Int32,
              gpointer)>>('g_node_find');
  late final _g_node_find = _g_node_findPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int, int, gpointer)>();

  void g_node_traverse(
    ffi.Pointer<GNode> root,
    int order,
    int flags,
    int max_depth,
    GNodeTraverseFunc func,
    gpointer data,
  ) {
    return _g_node_traverse(
      root,
      order,
      flags,
      max_depth,
      func,
      data,
    );
  }

  late final _g_node_traversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNode>, ffi.Int32, ffi.Int32, gint,
              GNodeTraverseFunc, gpointer)>>('g_node_traverse');
  late final _g_node_traverse = _g_node_traversePtr.asFunction<
      void Function(
          ffi.Pointer<GNode>, int, int, int, GNodeTraverseFunc, gpointer)>();

  int g_node_max_height(
    ffi.Pointer<GNode> root,
  ) {
    return _g_node_max_height(
      root,
    );
  }

  late final _g_node_max_heightPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_max_height');
  late final _g_node_max_height =
      _g_node_max_heightPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  void g_node_children_foreach(
    ffi.Pointer<GNode> node,
    int flags,
    GNodeForeachFunc func,
    gpointer data,
  ) {
    return _g_node_children_foreach(
      node,
      flags,
      func,
      data,
    );
  }

  late final _g_node_children_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNode>, ffi.Int32, GNodeForeachFunc,
              gpointer)>>('g_node_children_foreach');
  late final _g_node_children_foreach = _g_node_children_foreachPtr.asFunction<
      void Function(ffi.Pointer<GNode>, int, GNodeForeachFunc, gpointer)>();

  void g_node_reverse_children(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_reverse_children(
      node,
    );
  }

  late final _g_node_reverse_childrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_reverse_children');
  late final _g_node_reverse_children = _g_node_reverse_childrenPtr
      .asFunction<void Function(ffi.Pointer<GNode>)>();

  int g_node_n_children(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_n_children(
      node,
    );
  }

  late final _g_node_n_childrenPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_n_children');
  late final _g_node_n_children =
      _g_node_n_childrenPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_nth_child(
    ffi.Pointer<GNode> node,
    int n,
  ) {
    return _g_node_nth_child(
      node,
      n,
    );
  }

  late final _g_node_nth_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, guint)>>('g_node_nth_child');
  late final _g_node_nth_child = _g_node_nth_childPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int)>();

  ffi.Pointer<GNode> g_node_last_child(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_last_child(
      node,
    );
  }

  late final _g_node_last_childPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_last_child');
  late final _g_node_last_child = _g_node_last_childPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_find_child(
    ffi.Pointer<GNode> node,
    int flags,
    gpointer data,
  ) {
    return _g_node_find_child(
      node,
      flags,
      data,
    );
  }

  late final _g_node_find_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, ffi.Int32, gpointer)>>('g_node_find_child');
  late final _g_node_find_child = _g_node_find_childPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int, gpointer)>();

  int g_node_child_position(
    ffi.Pointer<GNode> node,
    ffi.Pointer<GNode> child,
  ) {
    return _g_node_child_position(
      node,
      child,
    );
  }

  late final _g_node_child_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_child_position');
  late final _g_node_child_position = _g_node_child_positionPtr
      .asFunction<int Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_child_index(
    ffi.Pointer<GNode> node,
    gpointer data,
  ) {
    return _g_node_child_index(
      node,
      data,
    );
  }

  late final _g_node_child_indexPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GNode>, gpointer)>>(
          'g_node_child_index');
  late final _g_node_child_index = _g_node_child_indexPtr
      .asFunction<int Function(ffi.Pointer<GNode>, gpointer)>();

  ffi.Pointer<GNode> g_node_first_sibling(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_first_sibling(
      node,
    );
  }

  late final _g_node_first_siblingPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_first_sibling');
  late final _g_node_first_sibling = _g_node_first_siblingPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_last_sibling(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_last_sibling(
      node,
    );
  }

  late final _g_node_last_siblingPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_last_sibling');
  late final _g_node_last_sibling = _g_node_last_siblingPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GList> g_list_alloc() {
    return _g_list_alloc();
  }

  late final _g_list_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'g_list_alloc');
  late final _g_list_alloc =
      _g_list_allocPtr.asFunction<ffi.Pointer<GList> Function()>();

  void g_list_free(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_free(
      list,
    );
  }

  late final _g_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_list_free');
  late final _g_list_free =
      _g_list_freePtr.asFunction<void Function(ffi.Pointer<GList>)>();

  void g_list_free_1(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_free_1(
      list,
    );
  }

  late final _g_list_free_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_list_free_1');
  late final _g_list_free_1 =
      _g_list_free_1Ptr.asFunction<void Function(ffi.Pointer<GList>)>();

  void g_list_free_full(
    ffi.Pointer<GList> list,
    GDestroyNotify free_func,
  ) {
    return _g_list_free_full(
      list,
      free_func,
    );
  }

  late final _g_list_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GList>, GDestroyNotify)>>('g_list_free_full');
  late final _g_list_free_full = _g_list_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GList>, GDestroyNotify)>();

  ffi.Pointer<GList> g_list_append(
    ffi.Pointer<GList> list,
    gpointer data,
  ) {
    return _g_list_append(
      list,
      data,
    );
  }

  late final _g_list_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gpointer)>>('g_list_append');
  late final _g_list_append = _g_list_appendPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, gpointer)>();

  ffi.Pointer<GList> g_list_prepend(
    ffi.Pointer<GList> list,
    gpointer data,
  ) {
    return _g_list_prepend(
      list,
      data,
    );
  }

  late final _g_list_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gpointer)>>('g_list_prepend');
  late final _g_list_prepend = _g_list_prependPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, gpointer)>();

  ffi.Pointer<GList> g_list_insert(
    ffi.Pointer<GList> list,
    gpointer data,
    int position,
  ) {
    return _g_list_insert(
      list,
      data,
      position,
    );
  }

  late final _g_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gpointer, gint)>>('g_list_insert');
  late final _g_list_insert = _g_list_insertPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gpointer, int)>();

  ffi.Pointer<GList> g_list_insert_sorted(
    ffi.Pointer<GList> list,
    gpointer data,
    GCompareFunc func,
  ) {
    return _g_list_insert_sorted(
      list,
      data,
      func,
    );
  }

  late final _g_list_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, gpointer,
              GCompareFunc)>>('g_list_insert_sorted');
  late final _g_list_insert_sorted = _g_list_insert_sortedPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, gpointer, GCompareFunc)>();

  ffi.Pointer<GList> g_list_insert_sorted_with_data(
    ffi.Pointer<GList> list,
    gpointer data,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_list_insert_sorted_with_data(
      list,
      data,
      func,
      user_data,
    );
  }

  late final _g_list_insert_sorted_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, gpointer,
              GCompareDataFunc, gpointer)>>('g_list_insert_sorted_with_data');
  late final _g_list_insert_sorted_with_data =
      _g_list_insert_sorted_with_dataPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gpointer, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GList> g_list_insert_before(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> sibling,
    gpointer data,
  ) {
    return _g_list_insert_before(
      list,
      sibling,
      data,
    );
  }

  late final _g_list_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>,
              gpointer)>>('g_list_insert_before');
  late final _g_list_insert_before = _g_list_insert_beforePtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, ffi.Pointer<GList>, gpointer)>();

  ffi.Pointer<GList> g_list_insert_before_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_list_insert_before_link(
      list,
      sibling,
      link_,
    );
  }

  late final _g_list_insert_before_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_list_insert_before_link');
  late final _g_list_insert_before_link =
      _g_list_insert_before_linkPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_concat(
    ffi.Pointer<GList> list1,
    ffi.Pointer<GList> list2,
  ) {
    return _g_list_concat(
      list1,
      list2,
    );
  }

  late final _g_list_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_concat');
  late final _g_list_concat = _g_list_concatPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_remove(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_remove(
      list,
      data,
    );
  }

  late final _g_list_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_remove');
  late final _g_list_remove = _g_list_removePtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_remove_all(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_remove_all(
      list,
      data,
    );
  }

  late final _g_list_remove_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_remove_all');
  late final _g_list_remove_all = _g_list_remove_allPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_remove_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> llink,
  ) {
    return _g_list_remove_link(
      list,
      llink,
    );
  }

  late final _g_list_remove_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_remove_link');
  late final _g_list_remove_link = _g_list_remove_linkPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_delete_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> link_,
  ) {
    return _g_list_delete_link(
      list,
      link_,
    );
  }

  late final _g_list_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_delete_link');
  late final _g_list_delete_link = _g_list_delete_linkPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_reverse(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_reverse(
      list,
    );
  }

  late final _g_list_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_reverse');
  late final _g_list_reverse = _g_list_reversePtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_copy(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_copy(
      list,
    );
  }

  late final _g_list_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_copy');
  late final _g_list_copy = _g_list_copyPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_copy_deep(
    ffi.Pointer<GList> list,
    GCopyFunc func,
    gpointer user_data,
  ) {
    return _g_list_copy_deep(
      list,
      func,
      user_data,
    );
  }

  late final _g_list_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, GCopyFunc, gpointer)>>('g_list_copy_deep');
  late final _g_list_copy_deep = _g_list_copy_deepPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, GCopyFunc, gpointer)>();

  ffi.Pointer<GList> g_list_nth(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth(
      list,
      n,
    );
  }

  late final _g_list_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, guint)>>('g_list_nth');
  late final _g_list_nth = _g_list_nthPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, int)>();

  ffi.Pointer<GList> g_list_nth_prev(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth_prev(
      list,
      n,
    );
  }

  late final _g_list_nth_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, guint)>>('g_list_nth_prev');
  late final _g_list_nth_prev = _g_list_nth_prevPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, int)>();

  ffi.Pointer<GList> g_list_find(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_find(
      list,
      data,
    );
  }

  late final _g_list_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_find');
  late final _g_list_find = _g_list_findPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_find_custom(
    ffi.Pointer<GList> list,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_list_find_custom(
      list,
      data,
      func,
    );
  }

  late final _g_list_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer,
              GCompareFunc)>>('g_list_find_custom');
  late final _g_list_find_custom = _g_list_find_customPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, gconstpointer, GCompareFunc)>();

  int g_list_position(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> llink,
  ) {
    return _g_list_position(
      list,
      llink,
    );
  }

  late final _g_list_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_position');
  late final _g_list_position = _g_list_positionPtr
      .asFunction<int Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  int g_list_index(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_index(
      list,
      data,
    );
  }

  late final _g_list_indexPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<GList>, gconstpointer)>>(
      'g_list_index');
  late final _g_list_index = _g_list_indexPtr
      .asFunction<int Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_last(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_last(
      list,
    );
  }

  late final _g_list_lastPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_last');
  late final _g_list_last = _g_list_lastPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_first(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_first(
      list,
    );
  }

  late final _g_list_firstPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_first');
  late final _g_list_first = _g_list_firstPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  int g_list_length(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_length(
      list,
    );
  }

  late final _g_list_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GList>)>>(
          'g_list_length');
  late final _g_list_length =
      _g_list_lengthPtr.asFunction<int Function(ffi.Pointer<GList>)>();

  void g_list_foreach(
    ffi.Pointer<GList> list,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_list_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _g_list_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GList>, GFunc, gpointer)>>('g_list_foreach');
  late final _g_list_foreach = _g_list_foreachPtr
      .asFunction<void Function(ffi.Pointer<GList>, GFunc, gpointer)>();

  ffi.Pointer<GList> g_list_sort(
    ffi.Pointer<GList> list,
    GCompareFunc compare_func,
  ) {
    return _g_list_sort(
      list,
      compare_func,
    );
  }

  late final _g_list_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, GCompareFunc)>>('g_list_sort');
  late final _g_list_sort = _g_list_sortPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, GCompareFunc)>();

  ffi.Pointer<GList> g_list_sort_with_data(
    ffi.Pointer<GList> list,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_list_sort_with_data(
      list,
      compare_func,
      user_data,
    );
  }

  late final _g_list_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, GCompareDataFunc,
              gpointer)>>('g_list_sort_with_data');
  late final _g_list_sort_with_data = _g_list_sort_with_dataPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, GCompareDataFunc, gpointer)>();

  gpointer g_list_nth_data(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth_data(
      list,
      n,
    );
  }

  late final _g_list_nth_dataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GList>, guint)>>(
          'g_list_nth_data');
  late final _g_list_nth_data = _g_list_nth_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<GList>, int)>();

  void g_clear_list(
    ffi.Pointer<ffi.Pointer<GList>> list_ptr,
    GDestroyNotify destroy,
  ) {
    return _g_clear_list(
      list_ptr,
      destroy,
    );
  }

  late final _g_clear_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GList>>,
              GDestroyNotify)>>('g_clear_list');
  late final _g_clear_list = _g_clear_listPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GList>>, GDestroyNotify)>();

  ffi.Pointer<GHashTable> g_hash_table_new(
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_hash_table_new(
      hash_func,
      key_equal_func,
    );
  }

  late final _g_hash_table_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              GHashFunc, GEqualFunc)>>('g_hash_table_new');
  late final _g_hash_table_new = _g_hash_table_newPtr
      .asFunction<ffi.Pointer<GHashTable> Function(GHashFunc, GEqualFunc)>();

  ffi.Pointer<GHashTable> g_hash_table_new_full(
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
    GDestroyNotify key_destroy_func,
    GDestroyNotify value_destroy_func,
  ) {
    return _g_hash_table_new_full(
      hash_func,
      key_equal_func,
      key_destroy_func,
      value_destroy_func,
    );
  }

  late final _g_hash_table_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(GHashFunc, GEqualFunc,
              GDestroyNotify, GDestroyNotify)>>('g_hash_table_new_full');
  late final _g_hash_table_new_full = _g_hash_table_new_fullPtr.asFunction<
      ffi.Pointer<GHashTable> Function(
          GHashFunc, GEqualFunc, GDestroyNotify, GDestroyNotify)>();

  ffi.Pointer<GHashTable> g_hash_table_new_similar(
    ffi.Pointer<GHashTable> other_hash_table,
  ) {
    return _g_hash_table_new_similar(
      other_hash_table,
    );
  }

  late final _g_hash_table_new_similarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_new_similar');
  late final _g_hash_table_new_similar = _g_hash_table_new_similarPtr
      .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTable>)>();

  void g_hash_table_destroy(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_destroy(
      hash_table,
    );
  }

  late final _g_hash_table_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_destroy');
  late final _g_hash_table_destroy = _g_hash_table_destroyPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_hash_table_insert(
    ffi.Pointer<GHashTable> hash_table,
    gpointer key,
    gpointer value,
  ) {
    return _g_hash_table_insert(
      hash_table,
      key,
      value,
    );
  }

  late final _g_hash_table_insertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>, gpointer,
              gpointer)>>('g_hash_table_insert');
  late final _g_hash_table_insert = _g_hash_table_insertPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gpointer, gpointer)>();

  int g_hash_table_replace(
    ffi.Pointer<GHashTable> hash_table,
    gpointer key,
    gpointer value,
  ) {
    return _g_hash_table_replace(
      hash_table,
      key,
      value,
    );
  }

  late final _g_hash_table_replacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>, gpointer,
              gpointer)>>('g_hash_table_replace');
  late final _g_hash_table_replace = _g_hash_table_replacePtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gpointer, gpointer)>();

  int g_hash_table_add(
    ffi.Pointer<GHashTable> hash_table,
    gpointer key,
  ) {
    return _g_hash_table_add(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_addPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, gpointer)>>('g_hash_table_add');
  late final _g_hash_table_add = _g_hash_table_addPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gpointer)>();

  int g_hash_table_remove(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_remove(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_remove');
  late final _g_hash_table_remove = _g_hash_table_removePtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  void g_hash_table_remove_all(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_remove_all(
      hash_table,
    );
  }

  late final _g_hash_table_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_remove_all');
  late final _g_hash_table_remove_all = _g_hash_table_remove_allPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_hash_table_steal(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_steal(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_stealPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_steal');
  late final _g_hash_table_steal = _g_hash_table_stealPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_steal_extended(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer lookup_key,
    ffi.Pointer<gpointer> stolen_key,
    ffi.Pointer<gpointer> stolen_value,
  ) {
    return _g_hash_table_steal_extended(
      hash_table,
      lookup_key,
      stolen_key,
      stolen_value,
    );
  }

  late final _g_hash_table_steal_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>,
              gconstpointer,
              ffi.Pointer<gpointer>,
              ffi.Pointer<gpointer>)>>('g_hash_table_steal_extended');
  late final _g_hash_table_steal_extended =
      _g_hash_table_steal_extendedPtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, gconstpointer,
              ffi.Pointer<gpointer>, ffi.Pointer<gpointer>)>();

  void g_hash_table_steal_all(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_steal_all(
      hash_table,
    );
  }

  late final _g_hash_table_steal_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_steal_all');
  late final _g_hash_table_steal_all = _g_hash_table_steal_allPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  gpointer g_hash_table_lookup(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_lookup(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_lookupPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_lookup');
  late final _g_hash_table_lookup = _g_hash_table_lookupPtr
      .asFunction<gpointer Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_contains(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_contains(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>,
              gconstpointer)>>('g_hash_table_contains');
  late final _g_hash_table_contains = _g_hash_table_containsPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_lookup_extended(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer lookup_key,
    ffi.Pointer<gpointer> orig_key,
    ffi.Pointer<gpointer> value,
  ) {
    return _g_hash_table_lookup_extended(
      hash_table,
      lookup_key,
      orig_key,
      value,
    );
  }

  late final _g_hash_table_lookup_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>,
              gconstpointer,
              ffi.Pointer<gpointer>,
              ffi.Pointer<gpointer>)>>('g_hash_table_lookup_extended');
  late final _g_hash_table_lookup_extended =
      _g_hash_table_lookup_extendedPtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, gconstpointer,
              ffi.Pointer<gpointer>, ffi.Pointer<gpointer>)>();

  void g_hash_table_foreach(
    ffi.Pointer<GHashTable> hash_table,
    GHFunc func,
    gpointer user_data,
  ) {
    return _g_hash_table_foreach(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTable>, GHFunc,
              gpointer)>>('g_hash_table_foreach');
  late final _g_hash_table_foreach = _g_hash_table_foreachPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>, GHFunc, gpointer)>();

  gpointer g_hash_table_find(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc predicate,
    gpointer user_data,
  ) {
    return _g_hash_table_find(
      hash_table,
      predicate,
      user_data,
    );
  }

  late final _g_hash_table_findPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GHashTable>, GHRFunc,
              gpointer)>>('g_hash_table_find');
  late final _g_hash_table_find = _g_hash_table_findPtr.asFunction<
      gpointer Function(ffi.Pointer<GHashTable>, GHRFunc, gpointer)>();

  int g_hash_table_foreach_remove(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc func,
    gpointer user_data,
  ) {
    return _g_hash_table_foreach_remove(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreach_removePtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GHashTable>, GHRFunc,
              gpointer)>>('g_hash_table_foreach_remove');
  late final _g_hash_table_foreach_remove = _g_hash_table_foreach_removePtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, GHRFunc, gpointer)>();

  int g_hash_table_foreach_steal(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc func,
    gpointer user_data,
  ) {
    return _g_hash_table_foreach_steal(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreach_stealPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GHashTable>, GHRFunc,
              gpointer)>>('g_hash_table_foreach_steal');
  late final _g_hash_table_foreach_steal = _g_hash_table_foreach_stealPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, GHRFunc, gpointer)>();

  int g_hash_table_size(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_size(
      hash_table,
    );
  }

  late final _g_hash_table_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_size');
  late final _g_hash_table_size =
      _g_hash_table_sizePtr.asFunction<int Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GList> g_hash_table_get_keys(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_keys(
      hash_table,
    );
  }

  late final _g_hash_table_get_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_get_keys');
  late final _g_hash_table_get_keys = _g_hash_table_get_keysPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GList> g_hash_table_get_values(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_values(
      hash_table,
    );
  }

  late final _g_hash_table_get_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_get_values');
  late final _g_hash_table_get_values = _g_hash_table_get_valuesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<gpointer> g_hash_table_get_keys_as_array(
    ffi.Pointer<GHashTable> hash_table,
    ffi.Pointer<guint> length,
  ) {
    return _g_hash_table_get_keys_as_array(
      hash_table,
      length,
    );
  }

  late final _g_hash_table_get_keys_as_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gpointer> Function(ffi.Pointer<GHashTable>,
              ffi.Pointer<guint>)>>('g_hash_table_get_keys_as_array');
  late final _g_hash_table_get_keys_as_array =
      _g_hash_table_get_keys_as_arrayPtr.asFunction<
          ffi.Pointer<gpointer> Function(
              ffi.Pointer<GHashTable>, ffi.Pointer<guint>)>();

  void g_hash_table_iter_init(
    ffi.Pointer<GHashTableIter> iter,
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_iter_init(
      iter,
      hash_table,
    );
  }

  late final _g_hash_table_iter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTableIter>,
              ffi.Pointer<GHashTable>)>>('g_hash_table_iter_init');
  late final _g_hash_table_iter_init = _g_hash_table_iter_initPtr.asFunction<
      void Function(ffi.Pointer<GHashTableIter>, ffi.Pointer<GHashTable>)>();

  int g_hash_table_iter_next(
    ffi.Pointer<GHashTableIter> iter,
    ffi.Pointer<gpointer> key,
    ffi.Pointer<gpointer> value,
  ) {
    return _g_hash_table_iter_next(
      iter,
      key,
      value,
    );
  }

  late final _g_hash_table_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTableIter>, ffi.Pointer<gpointer>,
              ffi.Pointer<gpointer>)>>('g_hash_table_iter_next');
  late final _g_hash_table_iter_next = _g_hash_table_iter_nextPtr.asFunction<
      int Function(ffi.Pointer<GHashTableIter>, ffi.Pointer<gpointer>,
          ffi.Pointer<gpointer>)>();

  ffi.Pointer<GHashTable> g_hash_table_iter_get_hash_table(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_get_hash_table(
      iter,
    );
  }

  late final _g_hash_table_iter_get_hash_tablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_get_hash_table');
  late final _g_hash_table_iter_get_hash_table =
      _g_hash_table_iter_get_hash_tablePtr.asFunction<
          ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTableIter>)>();

  void g_hash_table_iter_remove(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_remove(
      iter,
    );
  }

  late final _g_hash_table_iter_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_remove');
  late final _g_hash_table_iter_remove = _g_hash_table_iter_removePtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>)>();

  void g_hash_table_iter_replace(
    ffi.Pointer<GHashTableIter> iter,
    gpointer value,
  ) {
    return _g_hash_table_iter_replace(
      iter,
      value,
    );
  }

  late final _g_hash_table_iter_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTableIter>,
              gpointer)>>('g_hash_table_iter_replace');
  late final _g_hash_table_iter_replace = _g_hash_table_iter_replacePtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>, gpointer)>();

  void g_hash_table_iter_steal(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_steal(
      iter,
    );
  }

  late final _g_hash_table_iter_stealPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_steal');
  late final _g_hash_table_iter_steal = _g_hash_table_iter_stealPtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>)>();

  ffi.Pointer<GHashTable> g_hash_table_ref(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_ref(
      hash_table,
    );
  }

  late final _g_hash_table_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_ref');
  late final _g_hash_table_ref = _g_hash_table_refPtr
      .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTable>)>();

  void g_hash_table_unref(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_unref(
      hash_table,
    );
  }

  late final _g_hash_table_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_unref');
  late final _g_hash_table_unref = _g_hash_table_unrefPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_str_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_str_equal(
      v1,
      v2,
    );
  }

  late final _g_str_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_str_equal');
  late final _g_str_equal =
      _g_str_equalPtr.asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_str_hash(
    gconstpointer v,
  ) {
    return _g_str_hash(
      v,
    );
  }

  late final _g_str_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_str_hash');
  late final _g_str_hash =
      _g_str_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_int_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_int_equal(
      v1,
      v2,
    );
  }

  late final _g_int_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_int_equal');
  late final _g_int_equal =
      _g_int_equalPtr.asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_int_hash(
    gconstpointer v,
  ) {
    return _g_int_hash(
      v,
    );
  }

  late final _g_int_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_int_hash');
  late final _g_int_hash =
      _g_int_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_int64_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_int64_equal(
      v1,
      v2,
    );
  }

  late final _g_int64_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_int64_equal');
  late final _g_int64_equal = _g_int64_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_int64_hash(
    gconstpointer v,
  ) {
    return _g_int64_hash(
      v,
    );
  }

  late final _g_int64_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_int64_hash');
  late final _g_int64_hash =
      _g_int64_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_double_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_double_equal(
      v1,
      v2,
    );
  }

  late final _g_double_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_double_equal');
  late final _g_double_equal = _g_double_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_double_hash(
    gconstpointer v,
  ) {
    return _g_double_hash(
      v,
    );
  }

  late final _g_double_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_double_hash');
  late final _g_double_hash =
      _g_double_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_direct_hash(
    gconstpointer v,
  ) {
    return _g_direct_hash(
      v,
    );
  }

  late final _g_direct_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_direct_hash');
  late final _g_direct_hash =
      _g_direct_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_direct_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_direct_equal(
      v1,
      v2,
    );
  }

  late final _g_direct_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_direct_equal');
  late final _g_direct_equal = _g_direct_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GHmac> g_hmac_new(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
  ) {
    return _g_hmac_new(
      digest_type,
      key,
      key_len,
    );
  }

  late final _g_hmac_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHmac> Function(
              ffi.Int32, ffi.Pointer<guchar>, gsize)>>('g_hmac_new');
  late final _g_hmac_new = _g_hmac_newPtr
      .asFunction<ffi.Pointer<GHmac> Function(int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<GHmac> g_hmac_copy(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_copy(
      hmac,
    );
  }

  late final _g_hmac_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_copy');
  late final _g_hmac_copy = _g_hmac_copyPtr
      .asFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>();

  ffi.Pointer<GHmac> g_hmac_ref(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_ref(
      hmac,
    );
  }

  late final _g_hmac_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_ref');
  late final _g_hmac_ref = _g_hmac_refPtr
      .asFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>();

  void g_hmac_unref(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_unref(
      hmac,
    );
  }

  late final _g_hmac_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHmac>)>>(
          'g_hmac_unref');
  late final _g_hmac_unref =
      _g_hmac_unrefPtr.asFunction<void Function(ffi.Pointer<GHmac>)>();

  void g_hmac_update(
    ffi.Pointer<GHmac> hmac,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_hmac_update(
      hmac,
      data,
      length,
    );
  }

  late final _g_hmac_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHmac>, ffi.Pointer<guchar>,
              gssize)>>('g_hmac_update');
  late final _g_hmac_update = _g_hmac_updatePtr.asFunction<
      void Function(ffi.Pointer<GHmac>, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<gchar> g_hmac_get_string(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_get_string(
      hmac,
    );
  }

  late final _g_hmac_get_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_get_string');
  late final _g_hmac_get_string = _g_hmac_get_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GHmac>)>();

  void g_hmac_get_digest(
    ffi.Pointer<GHmac> hmac,
    ffi.Pointer<guint8> buffer,
    ffi.Pointer<gsize> digest_len,
  ) {
    return _g_hmac_get_digest(
      hmac,
      buffer,
      digest_len,
    );
  }

  late final _g_hmac_get_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHmac>, ffi.Pointer<guint8>,
              ffi.Pointer<gsize>)>>('g_hmac_get_digest');
  late final _g_hmac_get_digest = _g_hmac_get_digestPtr.asFunction<
      void Function(
          ffi.Pointer<GHmac>, ffi.Pointer<guint8>, ffi.Pointer<gsize>)>();

  ffi.Pointer<gchar> g_compute_hmac_for_data(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_compute_hmac_for_data(
      digest_type,
      key,
      key_len,
      data,
      length,
    );
  }

  late final _g_compute_hmac_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<guchar>, gsize,
              ffi.Pointer<guchar>, gsize)>>('g_compute_hmac_for_data');
  late final _g_compute_hmac_for_data = _g_compute_hmac_for_dataPtr.asFunction<
      ffi.Pointer<gchar> Function(
          int, ffi.Pointer<guchar>, int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<gchar> g_compute_hmac_for_string(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
    ffi.Pointer<gchar> str,
    int length,
  ) {
    return _g_compute_hmac_for_string(
      digest_type,
      key,
      key_len,
      str,
      length,
    );
  }

  late final _g_compute_hmac_for_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<guchar>, gsize,
              ffi.Pointer<gchar>, gssize)>>('g_compute_hmac_for_string');
  late final _g_compute_hmac_for_string =
      _g_compute_hmac_for_stringPtr.asFunction<
          ffi.Pointer<gchar> Function(
              int, ffi.Pointer<guchar>, int, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_compute_hmac_for_bytes(
    int digest_type,
    ffi.Pointer<GBytes> key,
    ffi.Pointer<GBytes> data,
  ) {
    return _g_compute_hmac_for_bytes(
      digest_type,
      key,
      data,
    );
  }

  late final _g_compute_hmac_for_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<GBytes>,
              ffi.Pointer<GBytes>)>>('g_compute_hmac_for_bytes');
  late final _g_compute_hmac_for_bytes =
      _g_compute_hmac_for_bytesPtr.asFunction<
          ffi.Pointer<gchar> Function(
              int, ffi.Pointer<GBytes>, ffi.Pointer<GBytes>)>();

  void g_hook_list_init(
    ffi.Pointer<GHookList> hook_list,
    int hook_size,
  ) {
    return _g_hook_list_init(
      hook_list,
      hook_size,
    );
  }

  late final _g_hook_list_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, guint)>>(
      'g_hook_list_init');
  late final _g_hook_list_init = _g_hook_list_initPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_clear(
    ffi.Pointer<GHookList> hook_list,
  ) {
    return _g_hook_list_clear(
      hook_list,
    );
  }

  late final _g_hook_list_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>)>>(
          'g_hook_list_clear');
  late final _g_hook_list_clear =
      _g_hook_list_clearPtr.asFunction<void Function(ffi.Pointer<GHookList>)>();

  ffi.Pointer<GHook> g_hook_alloc(
    ffi.Pointer<GHookList> hook_list,
  ) {
    return _g_hook_alloc(
      hook_list,
    );
  }

  late final _g_hook_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>)>>('g_hook_alloc');
  late final _g_hook_alloc = _g_hook_allocPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>)>();

  void g_hook_free(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_free(
      hook_list,
      hook,
    );
  }

  late final _g_hook_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_free');
  late final _g_hook_free = _g_hook_freePtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  ffi.Pointer<GHook> g_hook_ref(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_ref(
      hook_list,
      hook,
    );
  }

  late final _g_hook_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_ref');
  late final _g_hook_ref = _g_hook_refPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_unref(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_unref(
      hook_list,
      hook,
    );
  }

  late final _g_hook_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_unref');
  late final _g_hook_unref = _g_hook_unrefPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  int g_hook_destroy(
    ffi.Pointer<GHookList> hook_list,
    int hook_id,
  ) {
    return _g_hook_destroy(
      hook_list,
      hook_id,
    );
  }

  late final _g_hook_destroyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHookList>, gulong)>>('g_hook_destroy');
  late final _g_hook_destroy = _g_hook_destroyPtr
      .asFunction<int Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_destroy_link(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_destroy_link(
      hook_list,
      hook,
    );
  }

  late final _g_hook_destroy_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>,
              ffi.Pointer<GHook>)>>('g_hook_destroy_link');
  late final _g_hook_destroy_link = _g_hook_destroy_linkPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_prepend(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_prepend(
      hook_list,
      hook,
    );
  }

  late final _g_hook_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_prepend');
  late final _g_hook_prepend = _g_hook_prependPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_insert_before(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> sibling,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_insert_before(
      hook_list,
      sibling,
      hook,
    );
  }

  late final _g_hook_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>,
              ffi.Pointer<GHook>)>>('g_hook_insert_before');
  late final _g_hook_insert_before = _g_hook_insert_beforePtr.asFunction<
      void Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, ffi.Pointer<GHook>)>();

  void g_hook_insert_sorted(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
    GHookCompareFunc func,
  ) {
    return _g_hook_insert_sorted(
      hook_list,
      hook,
      func,
    );
  }

  late final _g_hook_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>,
              GHookCompareFunc)>>('g_hook_insert_sorted');
  late final _g_hook_insert_sorted = _g_hook_insert_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, GHookCompareFunc)>();

  ffi.Pointer<GHook> g_hook_get(
    ffi.Pointer<GHookList> hook_list,
    int hook_id,
  ) {
    return _g_hook_get(
      hook_list,
      hook_id,
    );
  }

  late final _g_hook_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gulong)>>('g_hook_get');
  late final _g_hook_get = _g_hook_getPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int)>();

  ffi.Pointer<GHook> g_hook_find(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    GHookFindFunc func,
    gpointer data,
  ) {
    return _g_hook_find(
      hook_list,
      need_valids,
      func,
      data,
    );
  }

  late final _g_hook_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              GHookFindFunc, gpointer)>>('g_hook_find');
  late final _g_hook_find = _g_hook_findPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, int, GHookFindFunc, gpointer)>();

  ffi.Pointer<GHook> g_hook_find_data(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    gpointer data,
  ) {
    return _g_hook_find_data(
      hook_list,
      need_valids,
      data,
    );
  }

  late final _g_hook_find_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gboolean, gpointer)>>('g_hook_find_data');
  late final _g_hook_find_data = _g_hook_find_dataPtr.asFunction<
      ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int, gpointer)>();

  ffi.Pointer<GHook> g_hook_find_func(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    gpointer func,
  ) {
    return _g_hook_find_func(
      hook_list,
      need_valids,
      func,
    );
  }

  late final _g_hook_find_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gboolean, gpointer)>>('g_hook_find_func');
  late final _g_hook_find_func = _g_hook_find_funcPtr.asFunction<
      ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int, gpointer)>();

  ffi.Pointer<GHook> g_hook_find_func_data(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    gpointer func,
    gpointer data,
  ) {
    return _g_hook_find_func_data(
      hook_list,
      need_valids,
      func,
      data,
    );
  }

  late final _g_hook_find_func_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              gpointer, gpointer)>>('g_hook_find_func_data');
  late final _g_hook_find_func_data = _g_hook_find_func_dataPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, int, gpointer, gpointer)>();

  ffi.Pointer<GHook> g_hook_first_valid(
    ffi.Pointer<GHookList> hook_list,
    int may_be_in_call,
  ) {
    return _g_hook_first_valid(
      hook_list,
      may_be_in_call,
    );
  }

  late final _g_hook_first_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gboolean)>>('g_hook_first_valid');
  late final _g_hook_first_valid = _g_hook_first_validPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int)>();

  ffi.Pointer<GHook> g_hook_next_valid(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
    int may_be_in_call,
  ) {
    return _g_hook_next_valid(
      hook_list,
      hook,
      may_be_in_call,
    );
  }

  late final _g_hook_next_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>,
              ffi.Pointer<GHook>, gboolean)>>('g_hook_next_valid');
  late final _g_hook_next_valid = _g_hook_next_validPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, int)>();

  int g_hook_compare_ids(
    ffi.Pointer<GHook> new_hook,
    ffi.Pointer<GHook> sibling,
  ) {
    return _g_hook_compare_ids(
      new_hook,
      sibling,
    );
  }

  late final _g_hook_compare_idsPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GHook>, ffi.Pointer<GHook>)>>('g_hook_compare_ids');
  late final _g_hook_compare_ids = _g_hook_compare_idsPtr
      .asFunction<int Function(ffi.Pointer<GHook>, ffi.Pointer<GHook>)>();

  void g_hook_list_invoke(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
  ) {
    return _g_hook_list_invoke(
      hook_list,
      may_recurse,
    );
  }

  late final _g_hook_list_invokePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, gboolean)>>(
      'g_hook_list_invoke');
  late final _g_hook_list_invoke = _g_hook_list_invokePtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_invoke_check(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
  ) {
    return _g_hook_list_invoke_check(
      hook_list,
      may_recurse,
    );
  }

  late final _g_hook_list_invoke_checkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, gboolean)>>(
      'g_hook_list_invoke_check');
  late final _g_hook_list_invoke_check = _g_hook_list_invoke_checkPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_marshal(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
    GHookMarshaller marshaller,
    gpointer marshal_data,
  ) {
    return _g_hook_list_marshal(
      hook_list,
      may_recurse,
      marshaller,
      marshal_data,
    );
  }

  late final _g_hook_list_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, gboolean, GHookMarshaller,
              gpointer)>>('g_hook_list_marshal');
  late final _g_hook_list_marshal = _g_hook_list_marshalPtr.asFunction<
      void Function(ffi.Pointer<GHookList>, int, GHookMarshaller, gpointer)>();

  void g_hook_list_marshal_check(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
    GHookCheckMarshaller marshaller,
    gpointer marshal_data,
  ) {
    return _g_hook_list_marshal_check(
      hook_list,
      may_recurse,
      marshaller,
      marshal_data,
    );
  }

  late final _g_hook_list_marshal_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, gboolean,
              GHookCheckMarshaller, gpointer)>>('g_hook_list_marshal_check');
  late final _g_hook_list_marshal_check =
      _g_hook_list_marshal_checkPtr.asFunction<
          void Function(
              ffi.Pointer<GHookList>, int, GHookCheckMarshaller, gpointer)>();

  int g_hostname_is_non_ascii(
    ffi.Pointer<gchar> hostname,
  ) {
    return _g_hostname_is_non_ascii(
      hostname,
    );
  }

  late final _g_hostname_is_non_asciiPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_hostname_is_non_ascii');
  late final _g_hostname_is_non_ascii = _g_hostname_is_non_asciiPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_hostname_is_ascii_encoded(
    ffi.Pointer<gchar> hostname,
  ) {
    return _g_hostname_is_ascii_encoded(
      hostname,
    );
  }

  late final _g_hostname_is_ascii_encodedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_hostname_is_ascii_encoded');
  late final _g_hostname_is_ascii_encoded = _g_hostname_is_ascii_encodedPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_hostname_is_ip_address(
    ffi.Pointer<gchar> hostname,
  ) {
    return _g_hostname_is_ip_address(
      hostname,
    );
  }

  late final _g_hostname_is_ip_addressPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_hostname_is_ip_address');
  late final _g_hostname_is_ip_address = _g_hostname_is_ip_addressPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_hostname_to_ascii(
    ffi.Pointer<gchar> hostname,
  ) {
    return _g_hostname_to_ascii(
      hostname,
    );
  }

  late final _g_hostname_to_asciiPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_hostname_to_ascii');
  late final _g_hostname_to_ascii = _g_hostname_to_asciiPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_hostname_to_unicode(
    ffi.Pointer<gchar> hostname,
  ) {
    return _g_hostname_to_unicode(
      hostname,
    );
  }

  late final _g_hostname_to_unicodePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_hostname_to_unicode');
  late final _g_hostname_to_unicode = _g_hostname_to_unicodePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  /// G_POLLFD_FORMAT:
  ///
  /// A format specifier that can be used in printf()-style format strings
  /// when printing the @fd member of a #GPollFD.
  int g_poll(
    ffi.Pointer<GPollFD> fds,
    int nfds,
    int timeout,
  ) {
    return _g_poll(
      fds,
      nfds,
      timeout,
    );
  }

  late final _g_pollPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<GPollFD>, guint, gint)>>(
      'g_poll');
  late final _g_poll =
      _g_pollPtr.asFunction<int Function(ffi.Pointer<GPollFD>, int, int)>();

  ffi.Pointer<GSList> g_slist_alloc() {
    return _g_slist_alloc();
  }

  late final _g_slist_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSList> Function()>>(
          'g_slist_alloc');
  late final _g_slist_alloc =
      _g_slist_allocPtr.asFunction<ffi.Pointer<GSList> Function()>();

  void g_slist_free(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_free(
      list,
    );
  }

  late final _g_slist_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSList>)>>(
          'g_slist_free');
  late final _g_slist_free =
      _g_slist_freePtr.asFunction<void Function(ffi.Pointer<GSList>)>();

  void g_slist_free_1(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_free_1(
      list,
    );
  }

  late final _g_slist_free_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSList>)>>(
          'g_slist_free_1');
  late final _g_slist_free_1 =
      _g_slist_free_1Ptr.asFunction<void Function(ffi.Pointer<GSList>)>();

  void g_slist_free_full(
    ffi.Pointer<GSList> list,
    GDestroyNotify free_func,
  ) {
    return _g_slist_free_full(
      list,
      free_func,
    );
  }

  late final _g_slist_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSList>, GDestroyNotify)>>('g_slist_free_full');
  late final _g_slist_free_full = _g_slist_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GSList>, GDestroyNotify)>();

  ffi.Pointer<GSList> g_slist_append(
    ffi.Pointer<GSList> list,
    gpointer data,
  ) {
    return _g_slist_append(
      list,
      data,
    );
  }

  late final _g_slist_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gpointer)>>('g_slist_append');
  late final _g_slist_append = _g_slist_appendPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gpointer)>();

  ffi.Pointer<GSList> g_slist_prepend(
    ffi.Pointer<GSList> list,
    gpointer data,
  ) {
    return _g_slist_prepend(
      list,
      data,
    );
  }

  late final _g_slist_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gpointer)>>('g_slist_prepend');
  late final _g_slist_prepend = _g_slist_prependPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gpointer)>();

  ffi.Pointer<GSList> g_slist_insert(
    ffi.Pointer<GSList> list,
    gpointer data,
    int position,
  ) {
    return _g_slist_insert(
      list,
      data,
      position,
    );
  }

  late final _g_slist_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gpointer, gint)>>('g_slist_insert');
  late final _g_slist_insert = _g_slist_insertPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gpointer, int)>();

  ffi.Pointer<GSList> g_slist_insert_sorted(
    ffi.Pointer<GSList> list,
    gpointer data,
    GCompareFunc func,
  ) {
    return _g_slist_insert_sorted(
      list,
      data,
      func,
    );
  }

  late final _g_slist_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gpointer,
              GCompareFunc)>>('g_slist_insert_sorted');
  late final _g_slist_insert_sorted = _g_slist_insert_sortedPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, gpointer, GCompareFunc)>();

  ffi.Pointer<GSList> g_slist_insert_sorted_with_data(
    ffi.Pointer<GSList> list,
    gpointer data,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_slist_insert_sorted_with_data(
      list,
      data,
      func,
      user_data,
    );
  }

  late final _g_slist_insert_sorted_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gpointer,
              GCompareDataFunc, gpointer)>>('g_slist_insert_sorted_with_data');
  late final _g_slist_insert_sorted_with_data =
      _g_slist_insert_sorted_with_dataPtr.asFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gpointer, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GSList> g_slist_insert_before(
    ffi.Pointer<GSList> slist,
    ffi.Pointer<GSList> sibling,
    gpointer data,
  ) {
    return _g_slist_insert_before(
      slist,
      sibling,
      data,
    );
  }

  late final _g_slist_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>,
              gpointer)>>('g_slist_insert_before');
  late final _g_slist_insert_before = _g_slist_insert_beforePtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, ffi.Pointer<GSList>, gpointer)>();

  ffi.Pointer<GSList> g_slist_concat(
    ffi.Pointer<GSList> list1,
    ffi.Pointer<GSList> list2,
  ) {
    return _g_slist_concat(
      list1,
      list2,
    );
  }

  late final _g_slist_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, ffi.Pointer<GSList>)>>('g_slist_concat');
  late final _g_slist_concat = _g_slist_concatPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_remove(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_remove(
      list,
      data,
    );
  }

  late final _g_slist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_remove');
  late final _g_slist_remove = _g_slist_removePtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_remove_all(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_remove_all(
      list,
      data,
    );
  }

  late final _g_slist_remove_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_remove_all');
  late final _g_slist_remove_all = _g_slist_remove_allPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_remove_link(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> link_,
  ) {
    return _g_slist_remove_link(
      list,
      link_,
    );
  }

  late final _g_slist_remove_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>,
              ffi.Pointer<GSList>)>>('g_slist_remove_link');
  late final _g_slist_remove_link = _g_slist_remove_linkPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_delete_link(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> link_,
  ) {
    return _g_slist_delete_link(
      list,
      link_,
    );
  }

  late final _g_slist_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>,
              ffi.Pointer<GSList>)>>('g_slist_delete_link');
  late final _g_slist_delete_link = _g_slist_delete_linkPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_reverse(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_reverse(
      list,
    );
  }

  late final _g_slist_reversePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>(
      'g_slist_reverse');
  late final _g_slist_reverse = _g_slist_reversePtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_copy(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_copy(
      list,
    );
  }

  late final _g_slist_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>('g_slist_copy');
  late final _g_slist_copy = _g_slist_copyPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_copy_deep(
    ffi.Pointer<GSList> list,
    GCopyFunc func,
    gpointer user_data,
  ) {
    return _g_slist_copy_deep(
      list,
      func,
      user_data,
    );
  }

  late final _g_slist_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, GCopyFunc, gpointer)>>('g_slist_copy_deep');
  late final _g_slist_copy_deep = _g_slist_copy_deepPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCopyFunc, gpointer)>();

  ffi.Pointer<GSList> g_slist_nth(
    ffi.Pointer<GSList> list,
    int n,
  ) {
    return _g_slist_nth(
      list,
      n,
    );
  }

  late final _g_slist_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, guint)>>('g_slist_nth');
  late final _g_slist_nth = _g_slist_nthPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, int)>();

  ffi.Pointer<GSList> g_slist_find(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_find(
      list,
      data,
    );
  }

  late final _g_slist_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_find');
  late final _g_slist_find = _g_slist_findPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_find_custom(
    ffi.Pointer<GSList> list,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_slist_find_custom(
      list,
      data,
      func,
    );
  }

  late final _g_slist_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer,
              GCompareFunc)>>('g_slist_find_custom');
  late final _g_slist_find_custom = _g_slist_find_customPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, gconstpointer, GCompareFunc)>();

  int g_slist_position(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> llink,
  ) {
    return _g_slist_position(
      list,
      llink,
    );
  }

  late final _g_slist_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GSList>, ffi.Pointer<GSList>)>>('g_slist_position');
  late final _g_slist_position = _g_slist_positionPtr
      .asFunction<int Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  int g_slist_index(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_index(
      list,
      data,
    );
  }

  late final _g_slist_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSList>, gconstpointer)>>('g_slist_index');
  late final _g_slist_index = _g_slist_indexPtr
      .asFunction<int Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_last(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_last(
      list,
    );
  }

  late final _g_slist_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>('g_slist_last');
  late final _g_slist_last = _g_slist_lastPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  int g_slist_length(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_length(
      list,
    );
  }

  late final _g_slist_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSList>)>>(
          'g_slist_length');
  late final _g_slist_length =
      _g_slist_lengthPtr.asFunction<int Function(ffi.Pointer<GSList>)>();

  void g_slist_foreach(
    ffi.Pointer<GSList> list,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_slist_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _g_slist_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSList>, GFunc, gpointer)>>('g_slist_foreach');
  late final _g_slist_foreach = _g_slist_foreachPtr
      .asFunction<void Function(ffi.Pointer<GSList>, GFunc, gpointer)>();

  ffi.Pointer<GSList> g_slist_sort(
    ffi.Pointer<GSList> list,
    GCompareFunc compare_func,
  ) {
    return _g_slist_sort(
      list,
      compare_func,
    );
  }

  late final _g_slist_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, GCompareFunc)>>('g_slist_sort');
  late final _g_slist_sort = _g_slist_sortPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCompareFunc)>();

  ffi.Pointer<GSList> g_slist_sort_with_data(
    ffi.Pointer<GSList> list,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_slist_sort_with_data(
      list,
      compare_func,
      user_data,
    );
  }

  late final _g_slist_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCompareDataFunc,
              gpointer)>>('g_slist_sort_with_data');
  late final _g_slist_sort_with_data = _g_slist_sort_with_dataPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, GCompareDataFunc, gpointer)>();

  gpointer g_slist_nth_data(
    ffi.Pointer<GSList> list,
    int n,
  ) {
    return _g_slist_nth_data(
      list,
      n,
    );
  }

  late final _g_slist_nth_dataPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GSList>, guint)>>(
      'g_slist_nth_data');
  late final _g_slist_nth_data = _g_slist_nth_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<GSList>, int)>();

  void g_clear_slist(
    ffi.Pointer<ffi.Pointer<GSList>> slist_ptr,
    GDestroyNotify destroy,
  ) {
    return _g_clear_slist(
      slist_ptr,
      destroy,
    );
  }

  late final _g_clear_slistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GSList>>,
              GDestroyNotify)>>('g_clear_slist');
  late final _g_clear_slist = _g_clear_slistPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GSList>>, GDestroyNotify)>();

  ffi.Pointer<GMainContext> g_main_context_new() {
    return _g_main_context_new();
  }

  late final _g_main_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_new');
  late final _g_main_context_new =
      _g_main_context_newPtr.asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainContext> g_main_context_new_with_flags(
    int flags,
  ) {
    return _g_main_context_new_with_flags(
      flags,
    );
  }

  late final _g_main_context_new_with_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GMainContext> Function(ffi.Int32)>>(
      'g_main_context_new_with_flags');
  late final _g_main_context_new_with_flags = _g_main_context_new_with_flagsPtr
      .asFunction<ffi.Pointer<GMainContext> Function(int)>();

  ffi.Pointer<GMainContext> g_main_context_ref(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_ref(
      context,
    );
  }

  late final _g_main_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GMainContext>)>>('g_main_context_ref');
  late final _g_main_context_ref = _g_main_context_refPtr.asFunction<
      ffi.Pointer<GMainContext> Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_unref(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_unref(
      context,
    );
  }

  late final _g_main_context_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_unref');
  late final _g_main_context_unref = _g_main_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GMainContext> g_main_context_default() {
    return _g_main_context_default();
  }

  late final _g_main_context_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_default');
  late final _g_main_context_default = _g_main_context_defaultPtr
      .asFunction<ffi.Pointer<GMainContext> Function()>();

  int g_main_context_iteration(
    ffi.Pointer<GMainContext> context,
    int may_block,
  ) {
    return _g_main_context_iteration(
      context,
      may_block,
    );
  }

  late final _g_main_context_iterationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>,
              gboolean)>>('g_main_context_iteration');
  late final _g_main_context_iteration = _g_main_context_iterationPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>, int)>();

  int g_main_context_pending(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_pending(
      context,
    );
  }

  late final _g_main_context_pendingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_pending');
  late final _g_main_context_pending = _g_main_context_pendingPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_id(
    ffi.Pointer<GMainContext> context,
    int source_id,
  ) {
    return _g_main_context_find_source_by_id(
      context,
      source_id,
    );
  }

  late final _g_main_context_find_source_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              guint)>>('g_main_context_find_source_by_id');
  late final _g_main_context_find_source_by_id =
      _g_main_context_find_source_by_idPtr.asFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>, int)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_user_data(
    ffi.Pointer<GMainContext> context,
    gpointer user_data,
  ) {
    return _g_main_context_find_source_by_user_data(
      context,
      user_data,
    );
  }

  late final _g_main_context_find_source_by_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              gpointer)>>('g_main_context_find_source_by_user_data');
  late final _g_main_context_find_source_by_user_data =
      _g_main_context_find_source_by_user_dataPtr.asFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>, gpointer)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_funcs_user_data(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GSourceFuncs> funcs,
    gpointer user_data,
  ) {
    return _g_main_context_find_source_by_funcs_user_data(
      context,
      funcs,
      user_data,
    );
  }

  late final _g_main_context_find_source_by_funcs_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GMainContext>,
              ffi.Pointer<GSourceFuncs>,
              gpointer)>>('g_main_context_find_source_by_funcs_user_data');
  late final _g_main_context_find_source_by_funcs_user_data =
      _g_main_context_find_source_by_funcs_user_dataPtr.asFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<GSourceFuncs>, gpointer)>();

  void g_main_context_wakeup(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_wakeup(
      context,
    );
  }

  late final _g_main_context_wakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_wakeup');
  late final _g_main_context_wakeup = _g_main_context_wakeupPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_acquire(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_acquire(
      context,
    );
  }

  late final _g_main_context_acquirePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_acquire');
  late final _g_main_context_acquire = _g_main_context_acquirePtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_release(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_release(
      context,
    );
  }

  late final _g_main_context_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_release');
  late final _g_main_context_release = _g_main_context_releasePtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_is_owner(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_is_owner(
      context,
    );
  }

  late final _g_main_context_is_ownerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_is_owner');
  late final _g_main_context_is_owner = _g_main_context_is_ownerPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_wait(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_main_context_wait(
      context,
      cond,
      mutex,
    );
  }

  late final _g_main_context_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>, ffi.Pointer<GCond>,
              ffi.Pointer<GMutex>)>>('g_main_context_wait');
  late final _g_main_context_wait = _g_main_context_waitPtr.asFunction<
      int Function(ffi.Pointer<GMainContext>, ffi.Pointer<GCond>,
          ffi.Pointer<GMutex>)>();

  int g_main_context_prepare(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<gint> priority,
  ) {
    return _g_main_context_prepare(
      context,
      priority,
    );
  }

  late final _g_main_context_preparePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<gint>)>>('g_main_context_prepare');
  late final _g_main_context_prepare = _g_main_context_preparePtr
      .asFunction<int Function(ffi.Pointer<GMainContext>, ffi.Pointer<gint>)>();

  int g_main_context_query(
    ffi.Pointer<GMainContext> context,
    int max_priority,
    ffi.Pointer<gint> timeout_,
    ffi.Pointer<GPollFD> fds,
    int n_fds,
  ) {
    return _g_main_context_query(
      context,
      max_priority,
      timeout_,
      fds,
      n_fds,
    );
  }

  late final _g_main_context_queryPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GMainContext>, gint, ffi.Pointer<gint>,
              ffi.Pointer<GPollFD>, gint)>>('g_main_context_query');
  late final _g_main_context_query = _g_main_context_queryPtr.asFunction<
      int Function(ffi.Pointer<GMainContext>, int, ffi.Pointer<gint>,
          ffi.Pointer<GPollFD>, int)>();

  int g_main_context_check(
    ffi.Pointer<GMainContext> context,
    int max_priority,
    ffi.Pointer<GPollFD> fds,
    int n_fds,
  ) {
    return _g_main_context_check(
      context,
      max_priority,
      fds,
      n_fds,
    );
  }

  late final _g_main_context_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>, gint,
              ffi.Pointer<GPollFD>, gint)>>('g_main_context_check');
  late final _g_main_context_check = _g_main_context_checkPtr.asFunction<
      int Function(
          ffi.Pointer<GMainContext>, int, ffi.Pointer<GPollFD>, int)>();

  void g_main_context_dispatch(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_dispatch(
      context,
    );
  }

  late final _g_main_context_dispatchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_dispatch');
  late final _g_main_context_dispatch = _g_main_context_dispatchPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_set_poll_func(
    ffi.Pointer<GMainContext> context,
    GPollFunc func,
  ) {
    return _g_main_context_set_poll_func(
      context,
      func,
    );
  }

  late final _g_main_context_set_poll_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>,
              GPollFunc)>>('g_main_context_set_poll_func');
  late final _g_main_context_set_poll_func = _g_main_context_set_poll_funcPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>, GPollFunc)>();

  GPollFunc g_main_context_get_poll_func(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_get_poll_func(
      context,
    );
  }

  late final _g_main_context_get_poll_funcPtr = _lookup<
          ffi.NativeFunction<GPollFunc Function(ffi.Pointer<GMainContext>)>>(
      'g_main_context_get_poll_func');
  late final _g_main_context_get_poll_func = _g_main_context_get_poll_funcPtr
      .asFunction<GPollFunc Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_add_poll(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GPollFD> fd,
    int priority,
  ) {
    return _g_main_context_add_poll(
      context,
      fd,
      priority,
    );
  }

  late final _g_main_context_add_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>,
              gint)>>('g_main_context_add_poll');
  late final _g_main_context_add_poll = _g_main_context_add_pollPtr.asFunction<
      void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>, int)>();

  void g_main_context_remove_poll(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_main_context_remove_poll(
      context,
      fd,
    );
  }

  late final _g_main_context_remove_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<GPollFD>)>>('g_main_context_remove_poll');
  late final _g_main_context_remove_poll =
      _g_main_context_remove_pollPtr.asFunction<
          void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>)>();

  int g_main_depth() {
    return _g_main_depth();
  }

  late final _g_main_depthPtr =
      _lookup<ffi.NativeFunction<gint Function()>>('g_main_depth');
  late final _g_main_depth = _g_main_depthPtr.asFunction<int Function()>();

  ffi.Pointer<GSource> g_main_current_source() {
    return _g_main_current_source();
  }

  late final _g_main_current_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function()>>(
          'g_main_current_source');
  late final _g_main_current_source =
      _g_main_current_sourcePtr.asFunction<ffi.Pointer<GSource> Function()>();

  void g_main_context_push_thread_default(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_push_thread_default(
      context,
    );
  }

  late final _g_main_context_push_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_push_thread_default');
  late final _g_main_context_push_thread_default =
      _g_main_context_push_thread_defaultPtr
          .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_pop_thread_default(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_pop_thread_default(
      context,
    );
  }

  late final _g_main_context_pop_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_pop_thread_default');
  late final _g_main_context_pop_thread_default =
      _g_main_context_pop_thread_defaultPtr
          .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GMainContext> g_main_context_get_thread_default() {
    return _g_main_context_get_thread_default();
  }

  late final _g_main_context_get_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_get_thread_default');
  late final _g_main_context_get_thread_default =
      _g_main_context_get_thread_defaultPtr
          .asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainContext> g_main_context_ref_thread_default() {
    return _g_main_context_ref_thread_default();
  }

  late final _g_main_context_ref_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_ref_thread_default');
  late final _g_main_context_ref_thread_default =
      _g_main_context_ref_thread_defaultPtr
          .asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainLoop> g_main_loop_new(
    ffi.Pointer<GMainContext> context,
    int is_running,
  ) {
    return _g_main_loop_new(
      context,
      is_running,
    );
  }

  late final _g_main_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainLoop> Function(
              ffi.Pointer<GMainContext>, gboolean)>>('g_main_loop_new');
  late final _g_main_loop_new = _g_main_loop_newPtr.asFunction<
      ffi.Pointer<GMainLoop> Function(ffi.Pointer<GMainContext>, int)>();

  void g_main_loop_run(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_run(
      loop,
    );
  }

  late final _g_main_loop_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_run');
  late final _g_main_loop_run =
      _g_main_loop_runPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  void g_main_loop_quit(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_quit(
      loop,
    );
  }

  late final _g_main_loop_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_quit');
  late final _g_main_loop_quit =
      _g_main_loop_quitPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GMainLoop> g_main_loop_ref(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_ref(
      loop,
    );
  }

  late final _g_main_loop_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainLoop> Function(
              ffi.Pointer<GMainLoop>)>>('g_main_loop_ref');
  late final _g_main_loop_ref = _g_main_loop_refPtr
      .asFunction<ffi.Pointer<GMainLoop> Function(ffi.Pointer<GMainLoop>)>();

  void g_main_loop_unref(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_unref(
      loop,
    );
  }

  late final _g_main_loop_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_unref');
  late final _g_main_loop_unref =
      _g_main_loop_unrefPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  int g_main_loop_is_running(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_is_running(
      loop,
    );
  }

  late final _g_main_loop_is_runningPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_is_running');
  late final _g_main_loop_is_running = _g_main_loop_is_runningPtr
      .asFunction<int Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GMainContext> g_main_loop_get_context(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_get_context(
      loop,
    );
  }

  late final _g_main_loop_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GMainLoop>)>>('g_main_loop_get_context');
  late final _g_main_loop_get_context = _g_main_loop_get_contextPtr
      .asFunction<ffi.Pointer<GMainContext> Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GSource> g_source_new(
    ffi.Pointer<GSourceFuncs> source_funcs,
    int struct_size,
  ) {
    return _g_source_new(
      source_funcs,
      struct_size,
    );
  }

  late final _g_source_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GSourceFuncs>, guint)>>('g_source_new');
  late final _g_source_new = _g_source_newPtr.asFunction<
      ffi.Pointer<GSource> Function(ffi.Pointer<GSourceFuncs>, int)>();

  void g_source_set_dispose_function(
    ffi.Pointer<GSource> source,
    GSourceDisposeFunc dispose,
  ) {
    return _g_source_set_dispose_function(
      source,
      dispose,
    );
  }

  late final _g_source_set_dispose_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              GSourceDisposeFunc)>>('g_source_set_dispose_function');
  late final _g_source_set_dispose_function = _g_source_set_dispose_functionPtr
      .asFunction<void Function(ffi.Pointer<GSource>, GSourceDisposeFunc)>();

  ffi.Pointer<GSource> g_source_ref(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_ref(
      source,
    );
  }

  late final _g_source_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GSource>)>>('g_source_ref');
  late final _g_source_ref = _g_source_refPtr
      .asFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GSource>)>();

  void g_source_unref(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_unref(
      source,
    );
  }

  late final _g_source_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_unref');
  late final _g_source_unref =
      _g_source_unrefPtr.asFunction<void Function(ffi.Pointer<GSource>)>();

  int g_source_attach(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_source_attach(
      source,
      context,
    );
  }

  late final _g_source_attachPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GSource>,
              ffi.Pointer<GMainContext>)>>('g_source_attach');
  late final _g_source_attach = _g_source_attachPtr.asFunction<
      int Function(ffi.Pointer<GSource>, ffi.Pointer<GMainContext>)>();

  void g_source_destroy(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_destroy(
      source,
    );
  }

  late final _g_source_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_destroy');
  late final _g_source_destroy =
      _g_source_destroyPtr.asFunction<void Function(ffi.Pointer<GSource>)>();

  void g_source_set_priority(
    ffi.Pointer<GSource> source,
    int priority,
  ) {
    return _g_source_set_priority(
      source,
      priority,
    );
  }

  late final _g_source_set_priorityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gint)>>(
      'g_source_set_priority');
  late final _g_source_set_priority = _g_source_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_priority(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_priority(
      source,
    );
  }

  late final _g_source_get_priorityPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSource>)>>(
          'g_source_get_priority');
  late final _g_source_get_priority = _g_source_get_priorityPtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  void g_source_set_can_recurse(
    ffi.Pointer<GSource> source,
    int can_recurse,
  ) {
    return _g_source_set_can_recurse(
      source,
      can_recurse,
    );
  }

  late final _g_source_set_can_recursePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gboolean)>>(
      'g_source_set_can_recurse');
  late final _g_source_set_can_recurse = _g_source_set_can_recursePtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_can_recurse(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_can_recurse(
      source,
    );
  }

  late final _g_source_get_can_recursePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource>)>>(
          'g_source_get_can_recurse');
  late final _g_source_get_can_recurse = _g_source_get_can_recursePtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  int g_source_get_id(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_id(
      source,
    );
  }

  late final _g_source_get_idPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSource>)>>(
          'g_source_get_id');
  late final _g_source_get_id =
      _g_source_get_idPtr.asFunction<int Function(ffi.Pointer<GSource>)>();

  ffi.Pointer<GMainContext> g_source_get_context(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_context(
      source,
    );
  }

  late final _g_source_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GSource>)>>('g_source_get_context');
  late final _g_source_get_context = _g_source_get_contextPtr
      .asFunction<ffi.Pointer<GMainContext> Function(ffi.Pointer<GSource>)>();

  void g_source_set_callback(
    ffi.Pointer<GSource> source,
    GSourceFunc func,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_source_set_callback(
      source,
      func,
      data,
      notify,
    );
  }

  late final _g_source_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>, GSourceFunc, gpointer,
              GDestroyNotify)>>('g_source_set_callback');
  late final _g_source_set_callback = _g_source_set_callbackPtr.asFunction<
      void Function(
          ffi.Pointer<GSource>, GSourceFunc, gpointer, GDestroyNotify)>();

  void g_source_set_funcs(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSourceFuncs> funcs,
  ) {
    return _g_source_set_funcs(
      source,
      funcs,
    );
  }

  late final _g_source_set_funcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSourceFuncs>)>>('g_source_set_funcs');
  late final _g_source_set_funcs = _g_source_set_funcsPtr.asFunction<
      void Function(ffi.Pointer<GSource>, ffi.Pointer<GSourceFuncs>)>();

  int g_source_is_destroyed(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_is_destroyed(
      source,
    );
  }

  late final _g_source_is_destroyedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource>)>>(
          'g_source_is_destroyed');
  late final _g_source_is_destroyed = _g_source_is_destroyedPtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  void g_source_set_name(
    ffi.Pointer<GSource> source,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_name(
      source,
      name,
    );
  }

  late final _g_source_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<ffi.Char>)>>('g_source_set_name');
  late final _g_source_set_name = _g_source_set_namePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<ffi.Char>)>();

  void g_source_set_static_name(
    ffi.Pointer<GSource> source,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_static_name(
      source,
      name,
    );
  }

  late final _g_source_set_static_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<ffi.Char>)>>('g_source_set_static_name');
  late final _g_source_set_static_name = _g_source_set_static_namePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_source_get_name(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_name(
      source,
    );
  }

  late final _g_source_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GSource>)>>('g_source_get_name');
  late final _g_source_get_name = _g_source_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GSource>)>();

  void g_source_set_name_by_id(
    int tag,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_name_by_id(
      tag,
      name,
    );
  }

  late final _g_source_set_name_by_idPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(guint, ffi.Pointer<ffi.Char>)>>(
      'g_source_set_name_by_id');
  late final _g_source_set_name_by_id = _g_source_set_name_by_idPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void g_source_set_ready_time(
    ffi.Pointer<GSource> source,
    int ready_time,
  ) {
    return _g_source_set_ready_time(
      source,
      ready_time,
    );
  }

  late final _g_source_set_ready_timePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gint64)>>(
      'g_source_set_ready_time');
  late final _g_source_set_ready_time = _g_source_set_ready_timePtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_ready_time(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_ready_time(
      source,
    );
  }

  late final _g_source_get_ready_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GSource>)>>(
          'g_source_get_ready_time');
  late final _g_source_get_ready_time = _g_source_get_ready_timePtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  gpointer g_source_add_unix_fd(
    ffi.Pointer<GSource> source,
    int fd,
    int events,
  ) {
    return _g_source_add_unix_fd(
      source,
      fd,
      events,
    );
  }

  late final _g_source_add_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GSource>, gint, ffi.Int32)>>('g_source_add_unix_fd');
  late final _g_source_add_unix_fd = _g_source_add_unix_fdPtr
      .asFunction<gpointer Function(ffi.Pointer<GSource>, int, int)>();

  void g_source_modify_unix_fd(
    ffi.Pointer<GSource> source,
    gpointer tag,
    int new_events,
  ) {
    return _g_source_modify_unix_fd(
      source,
      tag,
      new_events,
    );
  }

  late final _g_source_modify_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>, gpointer,
              ffi.Int32)>>('g_source_modify_unix_fd');
  late final _g_source_modify_unix_fd = _g_source_modify_unix_fdPtr
      .asFunction<void Function(ffi.Pointer<GSource>, gpointer, int)>();

  void g_source_remove_unix_fd(
    ffi.Pointer<GSource> source,
    gpointer tag,
  ) {
    return _g_source_remove_unix_fd(
      source,
      tag,
    );
  }

  late final _g_source_remove_unix_fdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gpointer)>>(
      'g_source_remove_unix_fd');
  late final _g_source_remove_unix_fd = _g_source_remove_unix_fdPtr
      .asFunction<void Function(ffi.Pointer<GSource>, gpointer)>();

  int g_source_query_unix_fd(
    ffi.Pointer<GSource> source,
    gpointer tag,
  ) {
    return _g_source_query_unix_fd(
      source,
      tag,
    );
  }

  late final _g_source_query_unix_fdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GSource>, gpointer)>>(
      'g_source_query_unix_fd');
  late final _g_source_query_unix_fd = _g_source_query_unix_fdPtr
      .asFunction<int Function(ffi.Pointer<GSource>, gpointer)>();

  void g_source_set_callback_indirect(
    ffi.Pointer<GSource> source,
    gpointer callback_data,
    ffi.Pointer<GSourceCallbackFuncs> callback_funcs,
  ) {
    return _g_source_set_callback_indirect(
      source,
      callback_data,
      callback_funcs,
    );
  }

  late final _g_source_set_callback_indirectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSource>, gpointer,
                  ffi.Pointer<GSourceCallbackFuncs>)>>(
      'g_source_set_callback_indirect');
  late final _g_source_set_callback_indirect =
      _g_source_set_callback_indirectPtr.asFunction<
          void Function(ffi.Pointer<GSource>, gpointer,
              ffi.Pointer<GSourceCallbackFuncs>)>();

  void g_source_add_poll(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_source_add_poll(
      source,
      fd,
    );
  }

  late final _g_source_add_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GPollFD>)>>('g_source_add_poll');
  late final _g_source_add_poll = _g_source_add_pollPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GPollFD>)>();

  void g_source_remove_poll(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_source_remove_poll(
      source,
      fd,
    );
  }

  late final _g_source_remove_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GPollFD>)>>('g_source_remove_poll');
  late final _g_source_remove_poll = _g_source_remove_pollPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GPollFD>)>();

  void g_source_add_child_source(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSource> child_source,
  ) {
    return _g_source_add_child_source(
      source,
      child_source,
    );
  }

  late final _g_source_add_child_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSource>)>>('g_source_add_child_source');
  late final _g_source_add_child_source = _g_source_add_child_sourcePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GSource>)>();

  void g_source_remove_child_source(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSource> child_source,
  ) {
    return _g_source_remove_child_source(
      source,
      child_source,
    );
  }

  late final _g_source_remove_child_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSource>)>>('g_source_remove_child_source');
  late final _g_source_remove_child_source = _g_source_remove_child_sourcePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GSource>)>();

  void g_source_get_current_time(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GTimeVal> timeval,
  ) {
    return _g_source_get_current_time(
      source,
      timeval,
    );
  }

  late final _g_source_get_current_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GTimeVal>)>>('g_source_get_current_time');
  late final _g_source_get_current_time = _g_source_get_current_timePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GTimeVal>)>();

  int g_source_get_time(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_time(
      source,
    );
  }

  late final _g_source_get_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GSource>)>>(
          'g_source_get_time');
  late final _g_source_get_time =
      _g_source_get_timePtr.asFunction<int Function(ffi.Pointer<GSource>)>();

  ffi.Pointer<GSource> g_idle_source_new() {
    return _g_idle_source_new();
  }

  late final _g_idle_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function()>>(
          'g_idle_source_new');
  late final _g_idle_source_new =
      _g_idle_source_newPtr.asFunction<ffi.Pointer<GSource> Function()>();

  ffi.Pointer<GSource> g_child_watch_source_new(
    int pid,
  ) {
    return _g_child_watch_source_new(
      pid,
    );
  }

  late final _g_child_watch_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(GPid)>>(
          'g_child_watch_source_new');
  late final _g_child_watch_source_new = _g_child_watch_source_newPtr
      .asFunction<ffi.Pointer<GSource> Function(int)>();

  ffi.Pointer<GSource> g_timeout_source_new(
    int interval,
  ) {
    return _g_timeout_source_new(
      interval,
    );
  }

  late final _g_timeout_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(guint)>>(
          'g_timeout_source_new');
  late final _g_timeout_source_new =
      _g_timeout_source_newPtr.asFunction<ffi.Pointer<GSource> Function(int)>();

  ffi.Pointer<GSource> g_timeout_source_new_seconds(
    int interval,
  ) {
    return _g_timeout_source_new_seconds(
      interval,
    );
  }

  late final _g_timeout_source_new_secondsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(guint)>>(
          'g_timeout_source_new_seconds');
  late final _g_timeout_source_new_seconds = _g_timeout_source_new_secondsPtr
      .asFunction<ffi.Pointer<GSource> Function(int)>();

  void g_get_current_time(
    ffi.Pointer<GTimeVal> result,
  ) {
    return _g_get_current_time(
      result,
    );
  }

  late final _g_get_current_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeVal>)>>(
          'g_get_current_time');
  late final _g_get_current_time =
      _g_get_current_timePtr.asFunction<void Function(ffi.Pointer<GTimeVal>)>();

  int g_get_monotonic_time() {
    return _g_get_monotonic_time();
  }

  late final _g_get_monotonic_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function()>>('g_get_monotonic_time');
  late final _g_get_monotonic_time =
      _g_get_monotonic_timePtr.asFunction<int Function()>();

  int g_get_real_time() {
    return _g_get_real_time();
  }

  late final _g_get_real_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function()>>('g_get_real_time');
  late final _g_get_real_time =
      _g_get_real_timePtr.asFunction<int Function()>();

  int g_source_remove(
    int tag,
  ) {
    return _g_source_remove(
      tag,
    );
  }

  late final _g_source_removePtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint)>>('g_source_remove');
  late final _g_source_remove =
      _g_source_removePtr.asFunction<int Function(int)>();

  int g_source_remove_by_user_data(
    gpointer user_data,
  ) {
    return _g_source_remove_by_user_data(
      user_data,
    );
  }

  late final _g_source_remove_by_user_dataPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer)>>(
          'g_source_remove_by_user_data');
  late final _g_source_remove_by_user_data =
      _g_source_remove_by_user_dataPtr.asFunction<int Function(gpointer)>();

  int g_source_remove_by_funcs_user_data(
    ffi.Pointer<GSourceFuncs> funcs,
    gpointer user_data,
  ) {
    return _g_source_remove_by_funcs_user_data(
      funcs,
      user_data,
    );
  }

  late final _g_source_remove_by_funcs_user_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSourceFuncs>,
              gpointer)>>('g_source_remove_by_funcs_user_data');
  late final _g_source_remove_by_funcs_user_data =
      _g_source_remove_by_funcs_user_dataPtr
          .asFunction<int Function(ffi.Pointer<GSourceFuncs>, gpointer)>();

  void g_clear_handle_id(
    ffi.Pointer<guint> tag_ptr,
    GClearHandleFunc clear_func,
  ) {
    return _g_clear_handle_id(
      tag_ptr,
      clear_func,
    );
  }

  late final _g_clear_handle_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<guint>, GClearHandleFunc)>>('g_clear_handle_id');
  late final _g_clear_handle_id = _g_clear_handle_idPtr
      .asFunction<void Function(ffi.Pointer<guint>, GClearHandleFunc)>();

  int g_timeout_add_full(
    int priority,
    int interval,
    GSourceFunc function,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_timeout_add_full(
      priority,
      interval,
      function,
      data,
      notify,
    );
  }

  late final _g_timeout_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, guint, GSourceFunc, gpointer,
              GDestroyNotify)>>('g_timeout_add_full');
  late final _g_timeout_add_full = _g_timeout_add_fullPtr.asFunction<
      int Function(int, int, GSourceFunc, gpointer, GDestroyNotify)>();

  int g_timeout_add(
    int interval,
    GSourceFunc function,
    gpointer data,
  ) {
    return _g_timeout_add(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_addPtr =
      _lookup<ffi.NativeFunction<guint Function(guint, GSourceFunc, gpointer)>>(
          'g_timeout_add');
  late final _g_timeout_add =
      _g_timeout_addPtr.asFunction<int Function(int, GSourceFunc, gpointer)>();

  int g_timeout_add_seconds_full(
    int priority,
    int interval,
    GSourceFunc function,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_timeout_add_seconds_full(
      priority,
      interval,
      function,
      data,
      notify,
    );
  }

  late final _g_timeout_add_seconds_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, guint, GSourceFunc, gpointer,
              GDestroyNotify)>>('g_timeout_add_seconds_full');
  late final _g_timeout_add_seconds_full =
      _g_timeout_add_seconds_fullPtr.asFunction<
          int Function(int, int, GSourceFunc, gpointer, GDestroyNotify)>();

  int g_timeout_add_seconds(
    int interval,
    GSourceFunc function,
    gpointer data,
  ) {
    return _g_timeout_add_seconds(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_add_secondsPtr =
      _lookup<ffi.NativeFunction<guint Function(guint, GSourceFunc, gpointer)>>(
          'g_timeout_add_seconds');
  late final _g_timeout_add_seconds = _g_timeout_add_secondsPtr
      .asFunction<int Function(int, GSourceFunc, gpointer)>();

  int g_child_watch_add_full(
    int priority,
    int pid,
    GChildWatchFunc function,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_child_watch_add_full(
      priority,
      pid,
      function,
      data,
      notify,
    );
  }

  late final _g_child_watch_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, GPid, GChildWatchFunc, gpointer,
              GDestroyNotify)>>('g_child_watch_add_full');
  late final _g_child_watch_add_full = _g_child_watch_add_fullPtr.asFunction<
      int Function(int, int, GChildWatchFunc, gpointer, GDestroyNotify)>();

  int g_child_watch_add(
    int pid,
    GChildWatchFunc function,
    gpointer data,
  ) {
    return _g_child_watch_add(
      pid,
      function,
      data,
    );
  }

  late final _g_child_watch_addPtr = _lookup<
          ffi.NativeFunction<guint Function(GPid, GChildWatchFunc, gpointer)>>(
      'g_child_watch_add');
  late final _g_child_watch_add = _g_child_watch_addPtr
      .asFunction<int Function(int, GChildWatchFunc, gpointer)>();

  int g_idle_add(
    GSourceFunc function,
    gpointer data,
  ) {
    return _g_idle_add(
      function,
      data,
    );
  }

  late final _g_idle_addPtr =
      _lookup<ffi.NativeFunction<guint Function(GSourceFunc, gpointer)>>(
          'g_idle_add');
  late final _g_idle_add =
      _g_idle_addPtr.asFunction<int Function(GSourceFunc, gpointer)>();

  int g_idle_add_full(
    int priority,
    GSourceFunc function,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_idle_add_full(
      priority,
      function,
      data,
      notify,
    );
  }

  late final _g_idle_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gint, GSourceFunc, gpointer, GDestroyNotify)>>('g_idle_add_full');
  late final _g_idle_add_full = _g_idle_add_fullPtr
      .asFunction<int Function(int, GSourceFunc, gpointer, GDestroyNotify)>();

  int g_idle_remove_by_data(
    gpointer data,
  ) {
    return _g_idle_remove_by_data(
      data,
    );
  }

  late final _g_idle_remove_by_dataPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer)>>(
          'g_idle_remove_by_data');
  late final _g_idle_remove_by_data =
      _g_idle_remove_by_dataPtr.asFunction<int Function(gpointer)>();

  void g_main_context_invoke_full(
    ffi.Pointer<GMainContext> context,
    int priority,
    GSourceFunc function,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_main_context_invoke_full(
      context,
      priority,
      function,
      data,
      notify,
    );
  }

  late final _g_main_context_invoke_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, gint, GSourceFunc,
              gpointer, GDestroyNotify)>>('g_main_context_invoke_full');
  late final _g_main_context_invoke_full =
      _g_main_context_invoke_fullPtr.asFunction<
          void Function(ffi.Pointer<GMainContext>, int, GSourceFunc, gpointer,
              GDestroyNotify)>();

  void g_main_context_invoke(
    ffi.Pointer<GMainContext> context,
    GSourceFunc function,
    gpointer data,
  ) {
    return _g_main_context_invoke(
      context,
      function,
      data,
    );
  }

  late final _g_main_context_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, GSourceFunc,
              gpointer)>>('g_main_context_invoke');
  late final _g_main_context_invoke = _g_main_context_invokePtr.asFunction<
      void Function(ffi.Pointer<GMainContext>, GSourceFunc, gpointer)>();

  late final ffi.Pointer<GSourceFuncs> _g_timeout_funcs =
      _lookup<GSourceFuncs>('g_timeout_funcs');

  GSourceFuncs get g_timeout_funcs => _g_timeout_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_child_watch_funcs =
      _lookup<GSourceFuncs>('g_child_watch_funcs');

  GSourceFuncs get g_child_watch_funcs => _g_child_watch_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_idle_funcs =
      _lookup<GSourceFuncs>('g_idle_funcs');

  GSourceFuncs get g_idle_funcs => _g_idle_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_unix_signal_funcs =
      _lookup<GSourceFuncs>('g_unix_signal_funcs');

  GSourceFuncs get g_unix_signal_funcs => _g_unix_signal_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_unix_fd_source_funcs =
      _lookup<GSourceFuncs>('g_unix_fd_source_funcs');

  GSourceFuncs get g_unix_fd_source_funcs => _g_unix_fd_source_funcs.ref;

  int g_unicode_script_to_iso15924(
    int script,
  ) {
    return _g_unicode_script_to_iso15924(
      script,
    );
  }

  late final _g_unicode_script_to_iso15924Ptr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Int32)>>(
          'g_unicode_script_to_iso15924');
  late final _g_unicode_script_to_iso15924 =
      _g_unicode_script_to_iso15924Ptr.asFunction<int Function(int)>();

  int g_unicode_script_from_iso15924(
    int iso15924,
  ) {
    return _g_unicode_script_from_iso15924(
      iso15924,
    );
  }

  late final _g_unicode_script_from_iso15924Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(guint32)>>(
          'g_unicode_script_from_iso15924');
  late final _g_unicode_script_from_iso15924 =
      _g_unicode_script_from_iso15924Ptr.asFunction<int Function(int)>();

  int g_unichar_isalnum(
    int c,
  ) {
    return _g_unichar_isalnum(
      c,
    );
  }

  late final _g_unichar_isalnumPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isalnum');
  late final _g_unichar_isalnum =
      _g_unichar_isalnumPtr.asFunction<int Function(int)>();

  int g_unichar_isalpha(
    int c,
  ) {
    return _g_unichar_isalpha(
      c,
    );
  }

  late final _g_unichar_isalphaPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isalpha');
  late final _g_unichar_isalpha =
      _g_unichar_isalphaPtr.asFunction<int Function(int)>();

  int g_unichar_iscntrl(
    int c,
  ) {
    return _g_unichar_iscntrl(
      c,
    );
  }

  late final _g_unichar_iscntrlPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iscntrl');
  late final _g_unichar_iscntrl =
      _g_unichar_iscntrlPtr.asFunction<int Function(int)>();

  int g_unichar_isdigit(
    int c,
  ) {
    return _g_unichar_isdigit(
      c,
    );
  }

  late final _g_unichar_isdigitPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isdigit');
  late final _g_unichar_isdigit =
      _g_unichar_isdigitPtr.asFunction<int Function(int)>();

  int g_unichar_isgraph(
    int c,
  ) {
    return _g_unichar_isgraph(
      c,
    );
  }

  late final _g_unichar_isgraphPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isgraph');
  late final _g_unichar_isgraph =
      _g_unichar_isgraphPtr.asFunction<int Function(int)>();

  int g_unichar_islower(
    int c,
  ) {
    return _g_unichar_islower(
      c,
    );
  }

  late final _g_unichar_islowerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_islower');
  late final _g_unichar_islower =
      _g_unichar_islowerPtr.asFunction<int Function(int)>();

  int g_unichar_isprint(
    int c,
  ) {
    return _g_unichar_isprint(
      c,
    );
  }

  late final _g_unichar_isprintPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isprint');
  late final _g_unichar_isprint =
      _g_unichar_isprintPtr.asFunction<int Function(int)>();

  int g_unichar_ispunct(
    int c,
  ) {
    return _g_unichar_ispunct(
      c,
    );
  }

  late final _g_unichar_ispunctPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_ispunct');
  late final _g_unichar_ispunct =
      _g_unichar_ispunctPtr.asFunction<int Function(int)>();

  int g_unichar_isspace(
    int c,
  ) {
    return _g_unichar_isspace(
      c,
    );
  }

  late final _g_unichar_isspacePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isspace');
  late final _g_unichar_isspace =
      _g_unichar_isspacePtr.asFunction<int Function(int)>();

  int g_unichar_isupper(
    int c,
  ) {
    return _g_unichar_isupper(
      c,
    );
  }

  late final _g_unichar_isupperPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isupper');
  late final _g_unichar_isupper =
      _g_unichar_isupperPtr.asFunction<int Function(int)>();

  int g_unichar_isxdigit(
    int c,
  ) {
    return _g_unichar_isxdigit(
      c,
    );
  }

  late final _g_unichar_isxdigitPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isxdigit');
  late final _g_unichar_isxdigit =
      _g_unichar_isxdigitPtr.asFunction<int Function(int)>();

  int g_unichar_istitle(
    int c,
  ) {
    return _g_unichar_istitle(
      c,
    );
  }

  late final _g_unichar_istitlePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_istitle');
  late final _g_unichar_istitle =
      _g_unichar_istitlePtr.asFunction<int Function(int)>();

  int g_unichar_isdefined(
    int c,
  ) {
    return _g_unichar_isdefined(
      c,
    );
  }

  late final _g_unichar_isdefinedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isdefined');
  late final _g_unichar_isdefined =
      _g_unichar_isdefinedPtr.asFunction<int Function(int)>();

  int g_unichar_iswide(
    int c,
  ) {
    return _g_unichar_iswide(
      c,
    );
  }

  late final _g_unichar_iswidePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iswide');
  late final _g_unichar_iswide =
      _g_unichar_iswidePtr.asFunction<int Function(int)>();

  int g_unichar_iswide_cjk(
    int c,
  ) {
    return _g_unichar_iswide_cjk(
      c,
    );
  }

  late final _g_unichar_iswide_cjkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iswide_cjk');
  late final _g_unichar_iswide_cjk =
      _g_unichar_iswide_cjkPtr.asFunction<int Function(int)>();

  int g_unichar_iszerowidth(
    int c,
  ) {
    return _g_unichar_iszerowidth(
      c,
    );
  }

  late final _g_unichar_iszerowidthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iszerowidth');
  late final _g_unichar_iszerowidth =
      _g_unichar_iszerowidthPtr.asFunction<int Function(int)>();

  int g_unichar_ismark(
    int c,
  ) {
    return _g_unichar_ismark(
      c,
    );
  }

  late final _g_unichar_ismarkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_ismark');
  late final _g_unichar_ismark =
      _g_unichar_ismarkPtr.asFunction<int Function(int)>();

  int g_unichar_toupper(
    int c,
  ) {
    return _g_unichar_toupper(
      c,
    );
  }

  late final _g_unichar_toupperPtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_toupper');
  late final _g_unichar_toupper =
      _g_unichar_toupperPtr.asFunction<int Function(int)>();

  int g_unichar_tolower(
    int c,
  ) {
    return _g_unichar_tolower(
      c,
    );
  }

  late final _g_unichar_tolowerPtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_tolower');
  late final _g_unichar_tolower =
      _g_unichar_tolowerPtr.asFunction<int Function(int)>();

  int g_unichar_totitle(
    int c,
  ) {
    return _g_unichar_totitle(
      c,
    );
  }

  late final _g_unichar_totitlePtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_totitle');
  late final _g_unichar_totitle =
      _g_unichar_totitlePtr.asFunction<int Function(int)>();

  int g_unichar_digit_value(
    int c,
  ) {
    return _g_unichar_digit_value(
      c,
    );
  }

  late final _g_unichar_digit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_digit_value');
  late final _g_unichar_digit_value =
      _g_unichar_digit_valuePtr.asFunction<int Function(int)>();

  int g_unichar_xdigit_value(
    int c,
  ) {
    return _g_unichar_xdigit_value(
      c,
    );
  }

  late final _g_unichar_xdigit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_xdigit_value');
  late final _g_unichar_xdigit_value =
      _g_unichar_xdigit_valuePtr.asFunction<int Function(int)>();

  int g_unichar_type(
    int c,
  ) {
    return _g_unichar_type(
      c,
    );
  }

  late final _g_unichar_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_type');
  late final _g_unichar_type =
      _g_unichar_typePtr.asFunction<int Function(int)>();

  int g_unichar_break_type(
    int c,
  ) {
    return _g_unichar_break_type(
      c,
    );
  }

  late final _g_unichar_break_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_break_type');
  late final _g_unichar_break_type =
      _g_unichar_break_typePtr.asFunction<int Function(int)>();

  int g_unichar_combining_class(
    int uc,
  ) {
    return _g_unichar_combining_class(
      uc,
    );
  }

  late final _g_unichar_combining_classPtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_combining_class');
  late final _g_unichar_combining_class =
      _g_unichar_combining_classPtr.asFunction<int Function(int)>();

  int g_unichar_get_mirror_char(
    int ch,
    ffi.Pointer<gunichar> mirrored_ch,
  ) {
    return _g_unichar_get_mirror_char(
      ch,
      mirrored_ch,
    );
  }

  late final _g_unichar_get_mirror_charPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(gunichar, ffi.Pointer<gunichar>)>>(
      'g_unichar_get_mirror_char');
  late final _g_unichar_get_mirror_char = _g_unichar_get_mirror_charPtr
      .asFunction<int Function(int, ffi.Pointer<gunichar>)>();

  int g_unichar_get_script(
    int ch,
  ) {
    return _g_unichar_get_script(
      ch,
    );
  }

  late final _g_unichar_get_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_get_script');
  late final _g_unichar_get_script =
      _g_unichar_get_scriptPtr.asFunction<int Function(int)>();

  int g_unichar_validate(
    int ch,
  ) {
    return _g_unichar_validate(
      ch,
    );
  }

  late final _g_unichar_validatePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_validate');
  late final _g_unichar_validate =
      _g_unichar_validatePtr.asFunction<int Function(int)>();

  int g_unichar_compose(
    int a,
    int b,
    ffi.Pointer<gunichar> ch,
  ) {
    return _g_unichar_compose(
      a,
      b,
      ch,
    );
  }

  late final _g_unichar_composePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              gunichar, gunichar, ffi.Pointer<gunichar>)>>('g_unichar_compose');
  late final _g_unichar_compose = _g_unichar_composePtr
      .asFunction<int Function(int, int, ffi.Pointer<gunichar>)>();

  int g_unichar_decompose(
    int ch,
    ffi.Pointer<gunichar> a,
    ffi.Pointer<gunichar> b,
  ) {
    return _g_unichar_decompose(
      ch,
      a,
      b,
    );
  }

  late final _g_unichar_decomposePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gunichar, ffi.Pointer<gunichar>,
              ffi.Pointer<gunichar>)>>('g_unichar_decompose');
  late final _g_unichar_decompose = _g_unichar_decomposePtr.asFunction<
      int Function(int, ffi.Pointer<gunichar>, ffi.Pointer<gunichar>)>();

  int g_unichar_fully_decompose(
    int ch,
    int compat,
    ffi.Pointer<gunichar> result,
    int result_len,
  ) {
    return _g_unichar_fully_decompose(
      ch,
      compat,
      result,
      result_len,
    );
  }

  late final _g_unichar_fully_decomposePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(gunichar, gboolean, ffi.Pointer<gunichar>,
              gsize)>>('g_unichar_fully_decompose');
  late final _g_unichar_fully_decompose = _g_unichar_fully_decomposePtr
      .asFunction<int Function(int, int, ffi.Pointer<gunichar>, int)>();

  void g_unicode_canonical_ordering(
    ffi.Pointer<gunichar> string,
    int len,
  ) {
    return _g_unicode_canonical_ordering(
      string,
      len,
    );
  }

  late final _g_unicode_canonical_orderingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gunichar>, gsize)>>(
      'g_unicode_canonical_ordering');
  late final _g_unicode_canonical_ordering = _g_unicode_canonical_orderingPtr
      .asFunction<void Function(ffi.Pointer<gunichar>, int)>();

  ffi.Pointer<gunichar> g_unicode_canonical_decomposition(
    int ch,
    ffi.Pointer<gsize> result_len,
  ) {
    return _g_unicode_canonical_decomposition(
      ch,
      result_len,
    );
  }

  late final _g_unicode_canonical_decompositionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(gunichar,
              ffi.Pointer<gsize>)>>('g_unicode_canonical_decomposition');
  late final _g_unicode_canonical_decomposition =
      _g_unicode_canonical_decompositionPtr.asFunction<
          ffi.Pointer<gunichar> Function(int, ffi.Pointer<gsize>)>();

  late final ffi.Pointer<ffi.Pointer<gchar>> _g_utf8_skip =
      _lookup<ffi.Pointer<gchar>>('g_utf8_skip');

  ffi.Pointer<gchar> get g_utf8_skip => _g_utf8_skip.value;

  int g_utf8_get_char(
    ffi.Pointer<gchar> p,
  ) {
    return _g_utf8_get_char(
      p,
    );
  }

  late final _g_utf8_get_charPtr =
      _lookup<ffi.NativeFunction<gunichar Function(ffi.Pointer<gchar>)>>(
          'g_utf8_get_char');
  late final _g_utf8_get_char =
      _g_utf8_get_charPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_utf8_get_char_validated(
    ffi.Pointer<gchar> p,
    int max_len,
  ) {
    return _g_utf8_get_char_validated(
      p,
      max_len,
    );
  }

  late final _g_utf8_get_char_validatedPtr = _lookup<
          ffi.NativeFunction<gunichar Function(ffi.Pointer<gchar>, gssize)>>(
      'g_utf8_get_char_validated');
  late final _g_utf8_get_char_validated = _g_utf8_get_char_validatedPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_offset_to_pointer(
    ffi.Pointer<gchar> str,
    int offset,
  ) {
    return _g_utf8_offset_to_pointer(
      str,
      offset,
    );
  }

  late final _g_utf8_offset_to_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, glong)>>('g_utf8_offset_to_pointer');
  late final _g_utf8_offset_to_pointer = _g_utf8_offset_to_pointerPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  int g_utf8_pointer_to_offset(
    ffi.Pointer<gchar> str,
    ffi.Pointer<gchar> pos,
  ) {
    return _g_utf8_pointer_to_offset(
      str,
      pos,
    );
  }

  late final _g_utf8_pointer_to_offsetPtr = _lookup<
      ffi.NativeFunction<
          glong Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_utf8_pointer_to_offset');
  late final _g_utf8_pointer_to_offset = _g_utf8_pointer_to_offsetPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_utf8_prev_char(
    ffi.Pointer<gchar> p,
  ) {
    return _g_utf8_prev_char(
      p,
    );
  }

  late final _g_utf8_prev_charPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_utf8_prev_char');
  late final _g_utf8_prev_char = _g_utf8_prev_charPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_utf8_find_next_char(
    ffi.Pointer<gchar> p,
    ffi.Pointer<gchar> end,
  ) {
    return _g_utf8_find_next_char(
      p,
      end,
    );
  }

  late final _g_utf8_find_next_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_utf8_find_next_char');
  late final _g_utf8_find_next_char = _g_utf8_find_next_charPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_utf8_find_prev_char(
    ffi.Pointer<gchar> str,
    ffi.Pointer<gchar> p,
  ) {
    return _g_utf8_find_prev_char(
      str,
      p,
    );
  }

  late final _g_utf8_find_prev_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_utf8_find_prev_char');
  late final _g_utf8_find_prev_char = _g_utf8_find_prev_charPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_utf8_strlen(
    ffi.Pointer<gchar> p,
    int max,
  ) {
    return _g_utf8_strlen(
      p,
      max,
    );
  }

  late final _g_utf8_strlenPtr =
      _lookup<ffi.NativeFunction<glong Function(ffi.Pointer<gchar>, gssize)>>(
          'g_utf8_strlen');
  late final _g_utf8_strlen =
      _g_utf8_strlenPtr.asFunction<int Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_substring(
    ffi.Pointer<gchar> str,
    int start_pos,
    int end_pos,
  ) {
    return _g_utf8_substring(
      str,
      start_pos,
      end_pos,
    );
  }

  late final _g_utf8_substringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, glong, glong)>>('g_utf8_substring');
  late final _g_utf8_substring = _g_utf8_substringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<gchar> g_utf8_strncpy(
    ffi.Pointer<gchar> dest,
    ffi.Pointer<gchar> src,
    int n,
  ) {
    return _g_utf8_strncpy(
      dest,
      src,
      n,
    );
  }

  late final _g_utf8_strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              gsize)>>('g_utf8_strncpy');
  late final _g_utf8_strncpy = _g_utf8_strncpyPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_strchr(
    ffi.Pointer<gchar> p,
    int len,
    int c,
  ) {
    return _g_utf8_strchr(
      p,
      len,
      c,
    );
  }

  late final _g_utf8_strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize, gunichar)>>('g_utf8_strchr');
  late final _g_utf8_strchr = _g_utf8_strchrPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<gchar> g_utf8_strrchr(
    ffi.Pointer<gchar> p,
    int len,
    int c,
  ) {
    return _g_utf8_strrchr(
      p,
      len,
      c,
    );
  }

  late final _g_utf8_strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize, gunichar)>>('g_utf8_strrchr');
  late final _g_utf8_strrchr = _g_utf8_strrchrPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<gchar> g_utf8_strreverse(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_strreverse(
      str,
      len,
    );
  }

  late final _g_utf8_strreversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_strreverse');
  late final _g_utf8_strreverse = _g_utf8_strreversePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gunichar2> g_utf8_to_utf16(
    ffi.Pointer<gchar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf8_to_utf16(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf8_to_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar2> Function(
              ffi.Pointer<gchar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf8_to_utf16');
  late final _g_utf8_to_utf16 = _g_utf8_to_utf16Ptr.asFunction<
      ffi.Pointer<gunichar2> Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar> g_utf8_to_ucs4(
    ffi.Pointer<gchar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf8_to_ucs4(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf8_to_ucs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(
              ffi.Pointer<gchar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf8_to_ucs4');
  late final _g_utf8_to_ucs4 = _g_utf8_to_ucs4Ptr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar> g_utf8_to_ucs4_fast(
    ffi.Pointer<gchar> str,
    int len,
    ffi.Pointer<glong> items_written,
  ) {
    return _g_utf8_to_ucs4_fast(
      str,
      len,
      items_written,
    );
  }

  late final _g_utf8_to_ucs4_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(ffi.Pointer<gchar>, glong,
              ffi.Pointer<glong>)>>('g_utf8_to_ucs4_fast');
  late final _g_utf8_to_ucs4_fast = _g_utf8_to_ucs4_fastPtr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<glong>)>();

  ffi.Pointer<gunichar> g_utf16_to_ucs4(
    ffi.Pointer<gunichar2> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf16_to_ucs4(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf16_to_ucs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(
              ffi.Pointer<gunichar2>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf16_to_ucs4');
  late final _g_utf16_to_ucs4 = _g_utf16_to_ucs4Ptr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<gunichar2>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_utf16_to_utf8(
    ffi.Pointer<gunichar2> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf16_to_utf8(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf16_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gunichar2>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf16_to_utf8');
  late final _g_utf16_to_utf8 = _g_utf16_to_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gunichar2>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar2> g_ucs4_to_utf16(
    ffi.Pointer<gunichar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ucs4_to_utf16(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_ucs4_to_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar2> Function(
              ffi.Pointer<gunichar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ucs4_to_utf16');
  late final _g_ucs4_to_utf16 = _g_ucs4_to_utf16Ptr.asFunction<
      ffi.Pointer<gunichar2> Function(
          ffi.Pointer<gunichar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_ucs4_to_utf8(
    ffi.Pointer<gunichar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ucs4_to_utf8(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_ucs4_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gunichar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ucs4_to_utf8');
  late final _g_ucs4_to_utf8 = _g_ucs4_to_utf8Ptr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gunichar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_unichar_to_utf8(
    int c,
    ffi.Pointer<gchar> outbuf,
  ) {
    return _g_unichar_to_utf8(
      c,
      outbuf,
    );
  }

  late final _g_unichar_to_utf8Ptr =
      _lookup<ffi.NativeFunction<gint Function(gunichar, ffi.Pointer<gchar>)>>(
          'g_unichar_to_utf8');
  late final _g_unichar_to_utf8 =
      _g_unichar_to_utf8Ptr.asFunction<int Function(int, ffi.Pointer<gchar>)>();

  int g_utf8_validate(
    ffi.Pointer<gchar> str,
    int max_len,
    ffi.Pointer<ffi.Pointer<gchar>> end,
  ) {
    return _g_utf8_validate(
      str,
      max_len,
      end,
    );
  }

  late final _g_utf8_validatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, gssize,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_utf8_validate');
  late final _g_utf8_validate = _g_utf8_validatePtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_utf8_validate_len(
    ffi.Pointer<gchar> str,
    int max_len,
    ffi.Pointer<ffi.Pointer<gchar>> end,
  ) {
    return _g_utf8_validate_len(
      str,
      max_len,
      end,
    );
  }

  late final _g_utf8_validate_lenPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, gsize,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_utf8_validate_len');
  late final _g_utf8_validate_len = _g_utf8_validate_lenPtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_utf8_strup(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_strup(
      str,
      len,
    );
  }

  late final _g_utf8_strupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_strup');
  late final _g_utf8_strup = _g_utf8_strupPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_strdown(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_strdown(
      str,
      len,
    );
  }

  late final _g_utf8_strdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_strdown');
  late final _g_utf8_strdown = _g_utf8_strdownPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_casefold(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_casefold(
      str,
      len,
    );
  }

  late final _g_utf8_casefoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_casefold');
  late final _g_utf8_casefold = _g_utf8_casefoldPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_normalize(
    ffi.Pointer<gchar> str,
    int len,
    int mode,
  ) {
    return _g_utf8_normalize(
      str,
      len,
      mode,
    );
  }

  late final _g_utf8_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize, ffi.Int32)>>('g_utf8_normalize');
  late final _g_utf8_normalize = _g_utf8_normalizePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, int)>();

  int g_utf8_collate(
    ffi.Pointer<gchar> str1,
    ffi.Pointer<gchar> str2,
  ) {
    return _g_utf8_collate(
      str1,
      str2,
    );
  }

  late final _g_utf8_collatePtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_utf8_collate');
  late final _g_utf8_collate = _g_utf8_collatePtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_utf8_collate_key(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_collate_key(
      str,
      len,
    );
  }

  late final _g_utf8_collate_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_collate_key');
  late final _g_utf8_collate_key = _g_utf8_collate_keyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_collate_key_for_filename(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_collate_key_for_filename(
      str,
      len,
    );
  }

  late final _g_utf8_collate_key_for_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_collate_key_for_filename');
  late final _g_utf8_collate_key_for_filename =
      _g_utf8_collate_key_for_filenamePtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_utf8_make_valid(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_utf8_make_valid(
      str,
      len,
    );
  }

  late final _g_utf8_make_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_utf8_make_valid');
  late final _g_utf8_make_valid = _g_utf8_make_validPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_new(
    ffi.Pointer<gchar> init,
  ) {
    return _g_string_new(
      init,
    );
  }

  late final _g_string_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<gchar>)>>('g_string_new');
  late final _g_string_new = _g_string_newPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_new_len(
    ffi.Pointer<gchar> init,
    int len,
  ) {
    return _g_string_new_len(
      init,
      len,
    );
  }

  late final _g_string_new_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<gchar>, gssize)>>('g_string_new_len');
  late final _g_string_new_len = _g_string_new_lenPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_sized_new(
    int dfl_size,
  ) {
    return _g_string_sized_new(
      dfl_size,
    );
  }

  late final _g_string_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GString> Function(gsize)>>(
          'g_string_sized_new');
  late final _g_string_sized_new =
      _g_string_sized_newPtr.asFunction<ffi.Pointer<GString> Function(int)>();

  ffi.Pointer<gchar> g_string_free(
    ffi.Pointer<GString> string,
    int free_segment,
  ) {
    return _g_string_free(
      string,
      free_segment,
    );
  }

  late final _g_string_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GString>, gboolean)>>('g_string_free');
  late final _g_string_free = _g_string_freePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GBytes> g_string_free_to_bytes(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_free_to_bytes(
      string,
    );
  }

  late final _g_string_free_to_bytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GString>)>>(
      'g_string_free_to_bytes');
  late final _g_string_free_to_bytes = _g_string_free_to_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GString>)>();

  int g_string_equal(
    ffi.Pointer<GString> v,
    ffi.Pointer<GString> v2,
  ) {
    return _g_string_equal(
      v,
      v2,
    );
  }

  late final _g_string_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GString>, ffi.Pointer<GString>)>>('g_string_equal');
  late final _g_string_equal = _g_string_equalPtr
      .asFunction<int Function(ffi.Pointer<GString>, ffi.Pointer<GString>)>();

  int g_string_hash(
    ffi.Pointer<GString> str,
  ) {
    return _g_string_hash(
      str,
    );
  }

  late final _g_string_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GString>)>>(
          'g_string_hash');
  late final _g_string_hash =
      _g_string_hashPtr.asFunction<int Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_assign(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> rval,
  ) {
    return _g_string_assign(
      string,
      rval,
    );
  }

  late final _g_string_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Pointer<gchar>)>>('g_string_assign');
  late final _g_string_assign = _g_string_assignPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_truncate(
    ffi.Pointer<GString> string,
    int len,
  ) {
    return _g_string_truncate(
      string,
      len,
    );
  }

  late final _g_string_truncatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gsize)>>('g_string_truncate');
  late final _g_string_truncate = _g_string_truncatePtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_set_size(
    ffi.Pointer<GString> string,
    int len,
  ) {
    return _g_string_set_size(
      string,
      len,
    );
  }

  late final _g_string_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gsize)>>('g_string_set_size');
  late final _g_string_set_size = _g_string_set_sizePtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_insert_len(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<gchar> val,
    int len,
  ) {
    return _g_string_insert_len(
      string,
      pos,
      val,
      len,
    );
  }

  late final _g_string_insert_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              ffi.Pointer<gchar>, gssize)>>('g_string_insert_len');
  late final _g_string_insert_len = _g_string_insert_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_append(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> val,
  ) {
    return _g_string_append(
      string,
      val,
    );
  }

  late final _g_string_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Pointer<gchar>)>>('g_string_append');
  late final _g_string_append = _g_string_appendPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_append_len(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> val,
    int len,
  ) {
    return _g_string_append_len(
      string,
      val,
      len,
    );
  }

  late final _g_string_append_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<gchar>, gssize)>>('g_string_append_len');
  late final _g_string_append_len = _g_string_append_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_append_c(
    ffi.Pointer<GString> string,
    int c,
  ) {
    return _g_string_append_c(
      string,
      c,
    );
  }

  late final _g_string_append_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gchar)>>('g_string_append_c');
  late final _g_string_append_c = _g_string_append_cPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_append_unichar(
    ffi.Pointer<GString> string,
    int wc,
  ) {
    return _g_string_append_unichar(
      string,
      wc,
    );
  }

  late final _g_string_append_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gunichar)>>('g_string_append_unichar');
  late final _g_string_append_unichar = _g_string_append_unicharPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> val,
  ) {
    return _g_string_prepend(
      string,
      val,
    );
  }

  late final _g_string_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Pointer<gchar>)>>('g_string_prepend');
  late final _g_string_prepend = _g_string_prependPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_prepend_c(
    ffi.Pointer<GString> string,
    int c,
  ) {
    return _g_string_prepend_c(
      string,
      c,
    );
  }

  late final _g_string_prepend_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gchar)>>('g_string_prepend_c');
  late final _g_string_prepend_c = _g_string_prepend_cPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend_unichar(
    ffi.Pointer<GString> string,
    int wc,
  ) {
    return _g_string_prepend_unichar(
      string,
      wc,
    );
  }

  late final _g_string_prepend_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gunichar)>>('g_string_prepend_unichar');
  late final _g_string_prepend_unichar = _g_string_prepend_unicharPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend_len(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> val,
    int len,
  ) {
    return _g_string_prepend_len(
      string,
      val,
      len,
    );
  }

  late final _g_string_prepend_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<gchar>, gssize)>>('g_string_prepend_len');
  late final _g_string_prepend_len = _g_string_prepend_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_insert(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<gchar> val,
  ) {
    return _g_string_insert(
      string,
      pos,
      val,
    );
  }

  late final _g_string_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              ffi.Pointer<gchar>)>>('g_string_insert');
  late final _g_string_insert = _g_string_insertPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_insert_c(
    ffi.Pointer<GString> string,
    int pos,
    int c,
  ) {
    return _g_string_insert_c(
      string,
      pos,
      c,
    );
  }

  late final _g_string_insert_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gssize, gchar)>>('g_string_insert_c');
  late final _g_string_insert_c = _g_string_insert_cPtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  ffi.Pointer<GString> g_string_insert_unichar(
    ffi.Pointer<GString> string,
    int pos,
    int wc,
  ) {
    return _g_string_insert_unichar(
      string,
      pos,
      wc,
    );
  }

  late final _g_string_insert_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              gunichar)>>('g_string_insert_unichar');
  late final _g_string_insert_unichar = _g_string_insert_unicharPtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  ffi.Pointer<GString> g_string_overwrite(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<gchar> val,
  ) {
    return _g_string_overwrite(
      string,
      pos,
      val,
    );
  }

  late final _g_string_overwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gsize,
              ffi.Pointer<gchar>)>>('g_string_overwrite');
  late final _g_string_overwrite = _g_string_overwritePtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_overwrite_len(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<gchar> val,
    int len,
  ) {
    return _g_string_overwrite_len(
      string,
      pos,
      val,
      len,
    );
  }

  late final _g_string_overwrite_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gsize,
              ffi.Pointer<gchar>, gssize)>>('g_string_overwrite_len');
  late final _g_string_overwrite_len = _g_string_overwrite_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_erase(
    ffi.Pointer<GString> string,
    int pos,
    int len,
  ) {
    return _g_string_erase(
      string,
      pos,
      len,
    );
  }

  late final _g_string_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gssize, gssize)>>('g_string_erase');
  late final _g_string_erase = _g_string_erasePtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  int g_string_replace(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> find,
    ffi.Pointer<gchar> replace,
    int limit,
  ) {
    return _g_string_replace(
      string,
      find,
      replace,
      limit,
    );
  }

  late final _g_string_replacePtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GString>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, guint)>>('g_string_replace');
  late final _g_string_replace = _g_string_replacePtr.asFunction<
      int Function(
          ffi.Pointer<GString>, ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_ascii_down(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_ascii_down(
      string,
    );
  }

  late final _g_string_ascii_downPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_ascii_down');
  late final _g_string_ascii_down = _g_string_ascii_downPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_ascii_up(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_ascii_up(
      string,
    );
  }

  late final _g_string_ascii_upPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_ascii_up');
  late final _g_string_ascii_up = _g_string_ascii_upPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  void g_string_vprintf(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_string_vprintf(
      string,
      format,
      args,
    );
  }

  late final _g_string_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_string_vprintf');
  late final _g_string_vprintf = _g_string_vprintfPtr.asFunction<
      void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_string_printf(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> format,
  ) {
    return _g_string_printf(
      string,
      format,
    );
  }

  late final _g_string_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GString>, ffi.Pointer<gchar>)>>('g_string_printf');
  late final _g_string_printf = _g_string_printfPtr
      .asFunction<void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>)>();

  void g_string_append_vprintf(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_string_append_vprintf(
      string,
      format,
      args,
    );
  }

  late final _g_string_append_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_string_append_vprintf');
  late final _g_string_append_vprintf = _g_string_append_vprintfPtr.asFunction<
      void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_string_append_printf(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> format,
  ) {
    return _g_string_append_printf(
      string,
      format,
    );
  }

  late final _g_string_append_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>,
              ffi.Pointer<gchar>)>>('g_string_append_printf');
  late final _g_string_append_printf = _g_string_append_printfPtr
      .asFunction<void Function(ffi.Pointer<GString>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GString> g_string_append_uri_escaped(
    ffi.Pointer<GString> string,
    ffi.Pointer<gchar> unescaped,
    ffi.Pointer<gchar> reserved_chars_allowed,
    int allow_utf8,
  ) {
    return _g_string_append_uri_escaped(
      string,
      unescaped,
      reserved_chars_allowed,
      allow_utf8,
    );
  }

  late final _g_string_append_uri_escapedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gboolean)>>('g_string_append_uri_escaped');
  late final _g_string_append_uri_escaped =
      _g_string_append_uri_escapedPtr.asFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GString> g_string_down(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_down(
      string,
    );
  }

  late final _g_string_downPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_down');
  late final _g_string_down = _g_string_downPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_up(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_up(
      string,
    );
  }

  late final _g_string_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>('g_string_up');
  late final _g_string_up = _g_string_upPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  void g_io_channel_init(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_init(
      channel,
    );
  }

  late final _g_io_channel_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_init');
  late final _g_io_channel_init = _g_io_channel_initPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  ffi.Pointer<GIOChannel> g_io_channel_ref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_ref(
      channel,
    );
  }

  late final _g_io_channel_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOChannel> Function(
              ffi.Pointer<GIOChannel>)>>('g_io_channel_ref');
  late final _g_io_channel_ref = _g_io_channel_refPtr
      .asFunction<ffi.Pointer<GIOChannel> Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_unref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_unref(
      channel,
    );
  }

  late final _g_io_channel_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_unref');
  late final _g_io_channel_unref = _g_io_channel_unrefPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_read(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> buf,
    int count,
    ffi.Pointer<gsize> bytes_read,
  ) {
    return _g_io_channel_read(
      channel,
      buf,
      count,
      bytes_read,
    );
  }

  late final _g_io_channel_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, gsize,
              ffi.Pointer<gsize>)>>('g_io_channel_read');
  late final _g_io_channel_read = _g_io_channel_readPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, int,
          ffi.Pointer<gsize>)>();

  int g_io_channel_write(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> buf,
    int count,
    ffi.Pointer<gsize> bytes_written,
  ) {
    return _g_io_channel_write(
      channel,
      buf,
      count,
      bytes_written,
    );
  }

  late final _g_io_channel_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, gsize,
              ffi.Pointer<gsize>)>>('g_io_channel_write');
  late final _g_io_channel_write = _g_io_channel_writePtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, int,
          ffi.Pointer<gsize>)>();

  int g_io_channel_seek(
    ffi.Pointer<GIOChannel> channel,
    int offset,
    int type,
  ) {
    return _g_io_channel_seek(
      channel,
      offset,
      type,
    );
  }

  late final _g_io_channel_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gint64,
              ffi.Int32)>>('g_io_channel_seek');
  late final _g_io_channel_seek = _g_io_channel_seekPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>, int, int)>();

  void g_io_channel_close(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_close(
      channel,
    );
  }

  late final _g_io_channel_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_close');
  late final _g_io_channel_close = _g_io_channel_closePtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_shutdown(
    ffi.Pointer<GIOChannel> channel,
    int flush,
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _g_io_channel_shutdown(
      channel,
      flush,
      err,
    );
  }

  late final _g_io_channel_shutdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_shutdown');
  late final _g_io_channel_shutdown = _g_io_channel_shutdownPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_add_watch_full(
    ffi.Pointer<GIOChannel> channel,
    int priority,
    int condition,
    GIOFunc func,
    gpointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_io_add_watch_full(
      channel,
      priority,
      condition,
      func,
      user_data,
      notify,
    );
  }

  late final _g_io_add_watch_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GIOChannel>, gint, ffi.Int32, GIOFunc,
              gpointer, GDestroyNotify)>>('g_io_add_watch_full');
  late final _g_io_add_watch_full = _g_io_add_watch_fullPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, int, int, GIOFunc, gpointer,
          GDestroyNotify)>();

  ffi.Pointer<GSource> g_io_create_watch(
    ffi.Pointer<GIOChannel> channel,
    int condition,
  ) {
    return _g_io_create_watch(
      channel,
      condition,
    );
  }

  late final _g_io_create_watchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GIOChannel>, ffi.Int32)>>('g_io_create_watch');
  late final _g_io_create_watch = _g_io_create_watchPtr.asFunction<
      ffi.Pointer<GSource> Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_add_watch(
    ffi.Pointer<GIOChannel> channel,
    int condition,
    GIOFunc func,
    gpointer user_data,
  ) {
    return _g_io_add_watch(
      channel,
      condition,
      func,
      user_data,
    );
  }

  late final _g_io_add_watchPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GIOChannel>, ffi.Int32, GIOFunc,
              gpointer)>>('g_io_add_watch');
  late final _g_io_add_watch = _g_io_add_watchPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, int, GIOFunc, gpointer)>();

  void g_io_channel_set_buffer_size(
    ffi.Pointer<GIOChannel> channel,
    int size,
  ) {
    return _g_io_channel_set_buffer_size(
      channel,
      size,
    );
  }

  late final _g_io_channel_set_buffer_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>, gsize)>>(
      'g_io_channel_set_buffer_size');
  late final _g_io_channel_set_buffer_size = _g_io_channel_set_buffer_sizePtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_buffer_size(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffer_size(
      channel,
    );
  }

  late final _g_io_channel_get_buffer_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffer_size');
  late final _g_io_channel_get_buffer_size = _g_io_channel_get_buffer_sizePtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_get_buffer_condition(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffer_condition(
      channel,
    );
  }

  late final _g_io_channel_get_buffer_conditionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffer_condition');
  late final _g_io_channel_get_buffer_condition =
      _g_io_channel_get_buffer_conditionPtr
          .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_set_flags(
    ffi.Pointer<GIOChannel> channel,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_set_flags(
      channel,
      flags,
      error,
    );
  }

  late final _g_io_channel_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_set_flags');
  late final _g_io_channel_set_flags = _g_io_channel_set_flagsPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_get_flags(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_flags(
      channel,
    );
  }

  late final _g_io_channel_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_flags');
  late final _g_io_channel_get_flags = _g_io_channel_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_set_line_term(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> line_term,
    int length,
  ) {
    return _g_io_channel_set_line_term(
      channel,
      line_term,
      length,
    );
  }

  late final _g_io_channel_set_line_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>,
              gint)>>('g_io_channel_set_line_term');
  late final _g_io_channel_set_line_term =
      _g_io_channel_set_line_termPtr.asFunction<
          void Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_io_channel_get_line_term(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gint> length,
  ) {
    return _g_io_channel_get_line_term(
      channel,
      length,
    );
  }

  late final _g_io_channel_get_line_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GIOChannel>,
              ffi.Pointer<gint>)>>('g_io_channel_get_line_term');
  late final _g_io_channel_get_line_term =
      _g_io_channel_get_line_termPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GIOChannel>, ffi.Pointer<gint>)>();

  void g_io_channel_set_buffered(
    ffi.Pointer<GIOChannel> channel,
    int buffered,
  ) {
    return _g_io_channel_set_buffered(
      channel,
      buffered,
    );
  }

  late final _g_io_channel_set_bufferedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOChannel>, gboolean)>>('g_io_channel_set_buffered');
  late final _g_io_channel_set_buffered = _g_io_channel_set_bufferedPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_buffered(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffered(
      channel,
    );
  }

  late final _g_io_channel_get_bufferedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffered');
  late final _g_io_channel_get_buffered = _g_io_channel_get_bufferedPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_set_encoding(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> encoding,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_set_encoding(
      channel,
      encoding,
      error,
    );
  }

  late final _g_io_channel_set_encodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_set_encoding');
  late final _g_io_channel_set_encoding =
      _g_io_channel_set_encodingPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_io_channel_get_encoding(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_encoding(
      channel,
    );
  }

  late final _g_io_channel_get_encodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GIOChannel>)>>('g_io_channel_get_encoding');
  late final _g_io_channel_get_encoding = _g_io_channel_get_encodingPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_set_close_on_unref(
    ffi.Pointer<GIOChannel> channel,
    int do_close,
  ) {
    return _g_io_channel_set_close_on_unref(
      channel,
      do_close,
    );
  }

  late final _g_io_channel_set_close_on_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOChannel>,
              gboolean)>>('g_io_channel_set_close_on_unref');
  late final _g_io_channel_set_close_on_unref =
      _g_io_channel_set_close_on_unrefPtr
          .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_close_on_unref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_close_on_unref(
      channel,
    );
  }

  late final _g_io_channel_get_close_on_unrefPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_close_on_unref');
  late final _g_io_channel_get_close_on_unref =
      _g_io_channel_get_close_on_unrefPtr
          .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_flush(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_flush(
      channel,
      error,
    );
  }

  late final _g_io_channel_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_flush');
  late final _g_io_channel_flush = _g_io_channel_flushPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_line(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<gchar>> str_return,
    ffi.Pointer<gsize> length,
    ffi.Pointer<gsize> terminator_pos,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_line(
      channel,
      str_return,
      length,
      terminator_pos,
      error,
    );
  }

  late final _g_io_channel_read_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_line');
  late final _g_io_channel_read_line = _g_io_channel_read_linePtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_line_string(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<GString> buffer,
    ffi.Pointer<gsize> terminator_pos,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_line_string(
      channel,
      buffer,
      terminator_pos,
      error,
    );
  }

  late final _g_io_channel_read_line_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<GString>,
                  ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_io_channel_read_line_string');
  late final _g_io_channel_read_line_string =
      _g_io_channel_read_line_stringPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<GString>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_to_end(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<gchar>> str_return,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_to_end(
      channel,
      str_return,
      length,
      error,
    );
  }

  late final _g_io_channel_read_to_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_to_end');
  late final _g_io_channel_read_to_end =
      _g_io_channel_read_to_endPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_chars(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> buf,
    int count,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_chars(
      channel,
      buf,
      count,
      bytes_read,
      error,
    );
  }

  late final _g_io_channel_read_charsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_chars');
  late final _g_io_channel_read_chars = _g_io_channel_read_charsPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, int,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_unichar(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gunichar> thechar,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_unichar(
      channel,
      thechar,
      error,
    );
  }

  late final _g_io_channel_read_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gunichar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_unichar');
  late final _g_io_channel_read_unichar =
      _g_io_channel_read_unicharPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gunichar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_write_chars(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gchar> buf,
    int count,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_write_chars(
      channel,
      buf,
      count,
      bytes_written,
      error,
    );
  }

  late final _g_io_channel_write_charsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_write_chars');
  late final _g_io_channel_write_chars =
      _g_io_channel_write_charsPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gchar>, int,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_write_unichar(
    ffi.Pointer<GIOChannel> channel,
    int thechar,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_write_unichar(
      channel,
      thechar,
      error,
    );
  }

  late final _g_io_channel_write_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gunichar,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_write_unichar');
  late final _g_io_channel_write_unichar =
      _g_io_channel_write_unicharPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_seek_position(
    ffi.Pointer<GIOChannel> channel,
    int offset,
    int type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_seek_position(
      channel,
      offset,
      type,
      error,
    );
  }

  late final _g_io_channel_seek_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gint64, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_seek_position');
  late final _g_io_channel_seek_position =
      _g_io_channel_seek_positionPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GIOChannel> g_io_channel_new_file(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<gchar> mode,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_new_file(
      filename,
      mode,
      error,
    );
  }

  late final _g_io_channel_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOChannel> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_new_file');
  late final _g_io_channel_new_file = _g_io_channel_new_filePtr.asFunction<
      ffi.Pointer<GIOChannel> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_error_quark() {
    return _g_io_channel_error_quark();
  }

  late final _g_io_channel_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_io_channel_error_quark');
  late final _g_io_channel_error_quark =
      _g_io_channel_error_quarkPtr.asFunction<int Function()>();

  int g_io_channel_error_from_errno(
    int en,
  ) {
    return _g_io_channel_error_from_errno(
      en,
    );
  }

  late final _g_io_channel_error_from_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gint)>>(
          'g_io_channel_error_from_errno');
  late final _g_io_channel_error_from_errno =
      _g_io_channel_error_from_errnoPtr.asFunction<int Function(int)>();

  ffi.Pointer<GIOChannel> g_io_channel_unix_new(
    int fd,
  ) {
    return _g_io_channel_unix_new(
      fd,
    );
  }

  late final _g_io_channel_unix_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GIOChannel> Function(ffi.Int)>>(
          'g_io_channel_unix_new');
  late final _g_io_channel_unix_new = _g_io_channel_unix_newPtr
      .asFunction<ffi.Pointer<GIOChannel> Function(int)>();

  int g_io_channel_unix_get_fd(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_unix_get_fd(
      channel,
    );
  }

  late final _g_io_channel_unix_get_fdPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_unix_get_fd');
  late final _g_io_channel_unix_get_fd = _g_io_channel_unix_get_fdPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  late final ffi.Pointer<GSourceFuncs> _g_io_watch_funcs =
      _lookup<GSourceFuncs>('g_io_watch_funcs');

  GSourceFuncs get g_io_watch_funcs => _g_io_watch_funcs.ref;

  int g_key_file_error_quark() {
    return _g_key_file_error_quark();
  }

  late final _g_key_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_key_file_error_quark');
  late final _g_key_file_error_quark =
      _g_key_file_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GKeyFile> g_key_file_new() {
    return _g_key_file_new();
  }

  late final _g_key_file_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GKeyFile> Function()>>(
          'g_key_file_new');
  late final _g_key_file_new =
      _g_key_file_newPtr.asFunction<ffi.Pointer<GKeyFile> Function()>();

  ffi.Pointer<GKeyFile> g_key_file_ref(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_ref(
      key_file,
    );
  }

  late final _g_key_file_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GKeyFile> Function(
              ffi.Pointer<GKeyFile>)>>('g_key_file_ref');
  late final _g_key_file_ref = _g_key_file_refPtr
      .asFunction<ffi.Pointer<GKeyFile> Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_unref(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_unref(
      key_file,
    );
  }

  late final _g_key_file_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>)>>(
          'g_key_file_unref');
  late final _g_key_file_unref =
      _g_key_file_unrefPtr.asFunction<void Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_free(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_free(
      key_file,
    );
  }

  late final _g_key_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>)>>(
          'g_key_file_free');
  late final _g_key_file_free =
      _g_key_file_freePtr.asFunction<void Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_set_list_separator(
    ffi.Pointer<GKeyFile> key_file,
    int separator,
  ) {
    return _g_key_file_set_list_separator(
      key_file,
      separator,
    );
  }

  late final _g_key_file_set_list_separatorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>, gchar)>>(
      'g_key_file_set_list_separator');
  late final _g_key_file_set_list_separator = _g_key_file_set_list_separatorPtr
      .asFunction<void Function(ffi.Pointer<GKeyFile>, int)>();

  int g_key_file_load_from_file(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> file,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_file(
      key_file,
      file,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_file');
  late final _g_key_file_load_from_file =
      _g_key_file_load_from_filePtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_data(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> data,
    int length,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_data(
      key_file,
      data,
      length,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_data');
  late final _g_key_file_load_from_data =
      _g_key_file_load_from_dataPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_bytes(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<GBytes> bytes,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_bytes(
      key_file,
      bytes,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<GBytes>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_bytes');
  late final _g_key_file_load_from_bytes =
      _g_key_file_load_from_bytesPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<GBytes>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_dirs(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> file,
    ffi.Pointer<ffi.Pointer<gchar>> search_dirs,
    ffi.Pointer<ffi.Pointer<gchar>> full_path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_dirs(
      key_file,
      file,
      search_dirs,
      full_path,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_dirsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_dirs');
  late final _g_key_file_load_from_dirs =
      _g_key_file_load_from_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_data_dirs(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> file,
    ffi.Pointer<ffi.Pointer<gchar>> full_path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_data_dirs(
      key_file,
      file,
      full_path,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_data_dirsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_load_from_data_dirs');
  late final _g_key_file_load_from_data_dirs =
      _g_key_file_load_from_data_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_key_file_to_data(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_to_data(
      key_file,
      length,
      error,
    );
  }

  late final _g_key_file_to_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_to_data');
  late final _g_key_file_to_data = _g_key_file_to_dataPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_save_to_file(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_save_to_file(
      key_file,
      filename,
      error,
    );
  }

  late final _g_key_file_save_to_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_save_to_file');
  late final _g_key_file_save_to_file = _g_key_file_save_to_filePtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_key_file_get_start_group(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_get_start_group(
      key_file,
    );
  }

  late final _g_key_file_get_start_groupPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>)>>(
      'g_key_file_get_start_group');
  late final _g_key_file_get_start_group = _g_key_file_get_start_groupPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_key_file_get_groups(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gsize> length,
  ) {
    return _g_key_file_get_groups(
      key_file,
      length,
    );
  }

  late final _g_key_file_get_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GKeyFile>,
              ffi.Pointer<gsize>)>>('g_key_file_get_groups');
  late final _g_key_file_get_groups = _g_key_file_get_groupsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GKeyFile>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_key_file_get_keys(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_keys(
      key_file,
      group_name,
      length,
      error,
    );
  }

  late final _g_key_file_get_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_keys');
  late final _g_key_file_get_keys = _g_key_file_get_keysPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_has_group(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
  ) {
    return _g_key_file_has_group(
      key_file,
      group_name,
    );
  }

  late final _g_key_file_has_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>)>>('g_key_file_has_group');
  late final _g_key_file_has_group = _g_key_file_has_groupPtr
      .asFunction<int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>)>();

  int g_key_file_has_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_has_key(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_has_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_has_key');
  late final _g_key_file_has_key = _g_key_file_has_keyPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_key_file_get_value(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_value(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_value');
  late final _g_key_file_get_value = _g_key_file_get_valuePtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_value(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> value,
  ) {
    return _g_key_file_set_value(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_key_file_set_value');
  late final _g_key_file_set_value = _g_key_file_set_valuePtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_key_file_get_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_string(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_string');
  late final _g_key_file_get_string = _g_key_file_get_stringPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> string,
  ) {
    return _g_key_file_set_string(
      key_file,
      group_name,
      key,
      string,
    );
  }

  late final _g_key_file_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_key_file_set_string');
  late final _g_key_file_set_string = _g_key_file_set_stringPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_key_file_get_locale_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> locale,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_locale_string(
      key_file,
      group_name,
      key,
      locale,
      error,
    );
  }

  late final _g_key_file_get_locale_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_locale_string');
  late final _g_key_file_get_locale_string =
      _g_key_file_get_locale_stringPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_key_file_get_locale_for_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> locale,
  ) {
    return _g_key_file_get_locale_for_key(
      key_file,
      group_name,
      key,
      locale,
    );
  }

  late final _g_key_file_get_locale_for_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_key_file_get_locale_for_key');
  late final _g_key_file_get_locale_for_key =
      _g_key_file_get_locale_for_keyPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_key_file_set_locale_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> locale,
    ffi.Pointer<gchar> string,
  ) {
    return _g_key_file_set_locale_string(
      key_file,
      group_name,
      key,
      locale,
      string,
    );
  }

  late final _g_key_file_set_locale_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_key_file_set_locale_string');
  late final _g_key_file_set_locale_string =
      _g_key_file_set_locale_stringPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_key_file_get_boolean(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_boolean(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_boolean');
  late final _g_key_file_get_boolean = _g_key_file_get_booleanPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_boolean(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_key_file_set_boolean(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, gboolean)>>('g_key_file_set_boolean');
  late final _g_key_file_set_boolean = _g_key_file_set_booleanPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  int g_key_file_get_integer(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_integer(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_integerPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_integer');
  late final _g_key_file_get_integer = _g_key_file_get_integerPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_integer(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_key_file_set_integer(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, gint)>>('g_key_file_set_integer');
  late final _g_key_file_set_integer = _g_key_file_set_integerPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  int g_key_file_get_int64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_int64(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          gint64 Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_int64');
  late final _g_key_file_get_int64 = _g_key_file_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_int64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_key_file_set_int64(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, gint64)>>('g_key_file_set_int64');
  late final _g_key_file_set_int64 = _g_key_file_set_int64Ptr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  int g_key_file_get_uint64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_uint64(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          guint64 Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_uint64');
  late final _g_key_file_get_uint64 = _g_key_file_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_uint64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_key_file_set_uint64(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, guint64)>>('g_key_file_set_uint64');
  late final _g_key_file_set_uint64 = _g_key_file_set_uint64Ptr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  double g_key_file_get_double(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_double(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_doublePtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_double');
  late final _g_key_file_get_double = _g_key_file_get_doublePtr.asFunction<
      double Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_double(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    double value,
  ) {
    return _g_key_file_set_double(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, gdouble)>>('g_key_file_set_double');
  late final _g_key_file_set_double = _g_key_file_set_doublePtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, double)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_key_file_get_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_string_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_string_list');
  late final _g_key_file_get_string_list =
      _g_key_file_get_string_listPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<gchar>> list,
    int length,
  ) {
    return _g_key_file_set_string_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gsize)>>('g_key_file_set_string_list');
  late final _g_key_file_set_string_list =
      _g_key_file_set_string_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_key_file_get_locale_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> locale,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_locale_string_list(
      key_file,
      group_name,
      key,
      locale,
      length,
      error,
    );
  }

  late final _g_key_file_get_locale_string_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_locale_string_list');
  late final _g_key_file_get_locale_string_list =
      _g_key_file_get_locale_string_listPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_locale_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> locale,
    ffi.Pointer<ffi.Pointer<gchar>> list,
    int length,
  ) {
    return _g_key_file_set_locale_string_list(
      key_file,
      group_name,
      key,
      locale,
      list,
      length,
    );
  }

  late final _g_key_file_set_locale_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              gsize)>>('g_key_file_set_locale_string_list');
  late final _g_key_file_set_locale_string_list =
      _g_key_file_set_locale_string_listPtr.asFunction<
          void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              int)>();

  ffi.Pointer<gboolean> g_key_file_get_boolean_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_boolean_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_boolean_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gboolean> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_boolean_list');
  late final _g_key_file_get_boolean_list =
      _g_key_file_get_boolean_listPtr.asFunction<
          ffi.Pointer<gboolean> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_boolean_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gboolean> list,
    int length,
  ) {
    return _g_key_file_set_boolean_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_boolean_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gboolean>,
              gsize)>>('g_key_file_set_boolean_list');
  late final _g_key_file_set_boolean_list =
      _g_key_file_set_boolean_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gboolean>, int)>();

  ffi.Pointer<gint> g_key_file_get_integer_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_integer_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_integer_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gint> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_integer_list');
  late final _g_key_file_get_integer_list =
      _g_key_file_get_integer_listPtr.asFunction<
          ffi.Pointer<gint> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_double_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gdouble> list,
    int length,
  ) {
    return _g_key_file_set_double_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_double_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gdouble>,
              gsize)>>('g_key_file_set_double_list');
  late final _g_key_file_set_double_list =
      _g_key_file_set_double_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gdouble>, int)>();

  ffi.Pointer<gdouble> g_key_file_get_double_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_double_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_double_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gdouble> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_double_list');
  late final _g_key_file_get_double_list =
      _g_key_file_get_double_listPtr.asFunction<
          ffi.Pointer<gdouble> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_integer_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gint> list,
    int length,
  ) {
    return _g_key_file_set_integer_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_integer_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gint>,
              gsize)>>('g_key_file_set_integer_list');
  late final _g_key_file_set_integer_list =
      _g_key_file_set_integer_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gint>, int)>();

  int g_key_file_set_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> comment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_set_comment(
      key_file,
      group_name,
      key,
      comment,
      error,
    );
  }

  late final _g_key_file_set_commentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_set_comment');
  late final _g_key_file_set_comment = _g_key_file_set_commentPtr.asFunction<
      int Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_key_file_get_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_comment(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_comment');
  late final _g_key_file_get_comment = _g_key_file_get_commentPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_comment(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_remove_commentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_comment');
  late final _g_key_file_remove_comment =
      _g_key_file_remove_commentPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_key(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_remove_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_key');
  late final _g_key_file_remove_key = _g_key_file_remove_keyPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_group(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gchar> group_name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_group(
      key_file,
      group_name,
      error,
    );
  }

  late final _g_key_file_remove_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_group');
  late final _g_key_file_remove_group = _g_key_file_remove_groupPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_new(
    ffi.Pointer<gchar> filename,
    int writable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mapped_file_new(
      filename,
      writable,
      error,
    );
  }

  late final _g_mapped_file_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(ffi.Pointer<gchar>, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mapped_file_new');
  late final _g_mapped_file_new = _g_mapped_file_newPtr.asFunction<
      ffi.Pointer<GMappedFile> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_new_from_fd(
    int fd,
    int writable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mapped_file_new_from_fd(
      fd,
      writable,
      error,
    );
  }

  late final _g_mapped_file_new_from_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(gint, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mapped_file_new_from_fd');
  late final _g_mapped_file_new_from_fd =
      _g_mapped_file_new_from_fdPtr.asFunction<
          ffi.Pointer<GMappedFile> Function(
              int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_mapped_file_get_length(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_length(
      file,
    );
  }

  late final _g_mapped_file_get_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_get_length');
  late final _g_mapped_file_get_length = _g_mapped_file_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<gchar> g_mapped_file_get_contents(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_contents(
      file,
    );
  }

  late final _g_mapped_file_get_contentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_get_contents');
  late final _g_mapped_file_get_contents = _g_mapped_file_get_contentsPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<GBytes> g_mapped_file_get_bytes(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_bytes(
      file,
    );
  }

  late final _g_mapped_file_get_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_get_bytes');
  late final _g_mapped_file_get_bytes = _g_mapped_file_get_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_ref(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_ref(
      file,
    );
  }

  late final _g_mapped_file_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_ref');
  late final _g_mapped_file_ref = _g_mapped_file_refPtr.asFunction<
      ffi.Pointer<GMappedFile> Function(ffi.Pointer<GMappedFile>)>();

  void g_mapped_file_unref(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_unref(
      file,
    );
  }

  late final _g_mapped_file_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_unref');
  late final _g_mapped_file_unref = _g_mapped_file_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMappedFile>)>();

  void g_mapped_file_free(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_free(
      file,
    );
  }

  late final _g_mapped_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_free');
  late final _g_mapped_file_free = _g_mapped_file_freePtr
      .asFunction<void Function(ffi.Pointer<GMappedFile>)>();

  int g_markup_error_quark() {
    return _g_markup_error_quark();
  }

  late final _g_markup_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_markup_error_quark');
  late final _g_markup_error_quark =
      _g_markup_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GMarkupParseContext> g_markup_parse_context_new(
    ffi.Pointer<GMarkupParser> parser,
    int flags,
    gpointer user_data,
    GDestroyNotify user_data_dnotify,
  ) {
    return _g_markup_parse_context_new(
      parser,
      flags,
      user_data,
      user_data_dnotify,
    );
  }

  late final _g_markup_parse_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParser>,
              ffi.Int32,
              gpointer,
              GDestroyNotify)>>('g_markup_parse_context_new');
  late final _g_markup_parse_context_new =
      _g_markup_parse_context_newPtr.asFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParser>, int, gpointer, GDestroyNotify)>();

  ffi.Pointer<GMarkupParseContext> g_markup_parse_context_ref(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_ref(
      context,
    );
  }

  late final _g_markup_parse_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParseContext>)>>('g_markup_parse_context_ref');
  late final _g_markup_parse_context_ref =
      _g_markup_parse_context_refPtr.asFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_unref(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_unref(
      context,
    );
  }

  late final _g_markup_parse_context_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_unref');
  late final _g_markup_parse_context_unref = _g_markup_parse_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_free(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_free(
      context,
    );
  }

  late final _g_markup_parse_context_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_free');
  late final _g_markup_parse_context_free = _g_markup_parse_context_freePtr
      .asFunction<void Function(ffi.Pointer<GMarkupParseContext>)>();

  int g_markup_parse_context_parse(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<gchar> text,
    int text_len,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_markup_parse_context_parse(
      context,
      text,
      text_len,
      error,
    );
  }

  late final _g_markup_parse_context_parsePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMarkupParseContext>,
                  ffi.Pointer<gchar>,
                  gssize,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_markup_parse_context_parse');
  late final _g_markup_parse_context_parse =
      _g_markup_parse_context_parsePtr.asFunction<
          int Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<gchar>,
              int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_markup_parse_context_push(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<GMarkupParser> parser,
    gpointer user_data,
  ) {
    return _g_markup_parse_context_push(
      context,
      parser,
      user_data,
    );
  }

  late final _g_markup_parse_context_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<GMarkupParser>,
              gpointer)>>('g_markup_parse_context_push');
  late final _g_markup_parse_context_push =
      _g_markup_parse_context_pushPtr.asFunction<
          void Function(ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<GMarkupParser>, gpointer)>();

  gpointer g_markup_parse_context_pop(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_pop(
      context,
    );
  }

  late final _g_markup_parse_context_popPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_pop');
  late final _g_markup_parse_context_pop = _g_markup_parse_context_popPtr
      .asFunction<gpointer Function(ffi.Pointer<GMarkupParseContext>)>();

  int g_markup_parse_context_end_parse(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_markup_parse_context_end_parse(
      context,
      error,
    );
  }

  late final _g_markup_parse_context_end_parsePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GMarkupParseContext>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_markup_parse_context_end_parse');
  late final _g_markup_parse_context_end_parse =
      _g_markup_parse_context_end_parsePtr.asFunction<
          int Function(ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_markup_parse_context_get_element(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_element(
      context,
    );
  }

  late final _g_markup_parse_context_get_elementPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_element');
  late final _g_markup_parse_context_get_element =
      _g_markup_parse_context_get_elementPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GMarkupParseContext>)>();

  ffi.Pointer<GSList> g_markup_parse_context_get_element_stack(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_element_stack(
      context,
    );
  }

  late final _g_markup_parse_context_get_element_stackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSList> Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_element_stack');
  late final _g_markup_parse_context_get_element_stack =
      _g_markup_parse_context_get_element_stackPtr.asFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_get_position(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<gint> line_number,
    ffi.Pointer<gint> char_number,
  ) {
    return _g_markup_parse_context_get_position(
      context,
      line_number,
      char_number,
    );
  }

  late final _g_markup_parse_context_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_markup_parse_context_get_position');
  late final _g_markup_parse_context_get_position =
      _g_markup_parse_context_get_positionPtr.asFunction<
          void Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>();

  gpointer g_markup_parse_context_get_user_data(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_user_data(
      context,
    );
  }

  late final _g_markup_parse_context_get_user_dataPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_user_data');
  late final _g_markup_parse_context_get_user_data =
      _g_markup_parse_context_get_user_dataPtr
          .asFunction<gpointer Function(ffi.Pointer<GMarkupParseContext>)>();

  ffi.Pointer<gchar> g_markup_escape_text(
    ffi.Pointer<gchar> text,
    int length,
  ) {
    return _g_markup_escape_text(
      text,
      length,
    );
  }

  late final _g_markup_escape_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_markup_escape_text');
  late final _g_markup_escape_text = _g_markup_escape_textPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_markup_printf_escaped(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_markup_printf_escaped(
      format,
    );
  }

  late final _g_markup_printf_escapedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<ffi.Char>)>>(
      'g_markup_printf_escaped');
  late final _g_markup_printf_escaped = _g_markup_printf_escapedPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<gchar> g_markup_vprintf_escaped(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_markup_vprintf_escaped(
      format,
      args,
    );
  }

  late final _g_markup_vprintf_escapedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_markup_vprintf_escaped');
  late final _g_markup_vprintf_escaped =
      _g_markup_vprintf_escapedPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int g_markup_collect_attributes(
    ffi.Pointer<gchar> element_name,
    ffi.Pointer<ffi.Pointer<gchar>> attribute_names,
    ffi.Pointer<ffi.Pointer<gchar>> attribute_values,
    ffi.Pointer<ffi.Pointer<GError>> error,
    int first_type,
    ffi.Pointer<gchar> first_attr,
  ) {
    return _g_markup_collect_attributes(
      element_name,
      attribute_names,
      attribute_values,
      error,
      first_type,
      first_attr,
    );
  }

  late final _g_markup_collect_attributesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Int32,
              ffi.Pointer<gchar>)>>('g_markup_collect_attributes');
  late final _g_markup_collect_attributes =
      _g_markup_collect_attributesPtr.asFunction<
          int Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>,
              int,
              ffi.Pointer<gchar>)>();

  int g_variant_type_string_is_valid(
    ffi.Pointer<gchar> type_string,
  ) {
    return _g_variant_type_string_is_valid(
      type_string,
    );
  }

  late final _g_variant_type_string_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_variant_type_string_is_valid');
  late final _g_variant_type_string_is_valid =
      _g_variant_type_string_is_validPtr
          .asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_variant_type_string_scan(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> limit,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
  ) {
    return _g_variant_type_string_scan(
      string,
      limit,
      endptr,
    );
  }

  late final _g_variant_type_string_scanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_variant_type_string_scan');
  late final _g_variant_type_string_scan =
      _g_variant_type_string_scanPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_variant_type_free(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_free(
      type,
    );
  }

  late final _g_variant_type_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_free');
  late final _g_variant_type_free = _g_variant_type_freePtr
      .asFunction<void Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_copy(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_copy(
      type,
    );
  }

  late final _g_variant_type_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_copy');
  late final _g_variant_type_copy = _g_variant_type_copyPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new(
    ffi.Pointer<gchar> type_string,
  ) {
    return _g_variant_type_new(
      type_string,
    );
  }

  late final _g_variant_type_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<gchar>)>>('g_variant_type_new');
  late final _g_variant_type_new = _g_variant_type_newPtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<gchar>)>();

  int g_variant_type_get_string_length(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_get_string_length(
      type,
    );
  }

  late final _g_variant_type_get_string_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_get_string_length');
  late final _g_variant_type_get_string_length =
      _g_variant_type_get_string_lengthPtr
          .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<gchar> g_variant_type_peek_string(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_peek_string(
      type,
    );
  }

  late final _g_variant_type_peek_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_peek_string');
  late final _g_variant_type_peek_string = _g_variant_type_peek_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<gchar> g_variant_type_dup_string(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_dup_string(
      type,
    );
  }

  late final _g_variant_type_dup_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_dup_string');
  late final _g_variant_type_dup_string = _g_variant_type_dup_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_definite(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_definite(
      type,
    );
  }

  late final _g_variant_type_is_definitePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_definite');
  late final _g_variant_type_is_definite = _g_variant_type_is_definitePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_container(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_container(
      type,
    );
  }

  late final _g_variant_type_is_containerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_container');
  late final _g_variant_type_is_container = _g_variant_type_is_containerPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_basic(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_basic(
      type,
    );
  }

  late final _g_variant_type_is_basicPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_basic');
  late final _g_variant_type_is_basic = _g_variant_type_is_basicPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_maybe(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_maybe(
      type,
    );
  }

  late final _g_variant_type_is_maybePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_maybe');
  late final _g_variant_type_is_maybe = _g_variant_type_is_maybePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_array(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_array(
      type,
    );
  }

  late final _g_variant_type_is_arrayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_array');
  late final _g_variant_type_is_array = _g_variant_type_is_arrayPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_tuple(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_tuple(
      type,
    );
  }

  late final _g_variant_type_is_tuplePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_tuple');
  late final _g_variant_type_is_tuple = _g_variant_type_is_tuplePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_dict_entry(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_dict_entry(
      type,
    );
  }

  late final _g_variant_type_is_dict_entryPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_dict_entry');
  late final _g_variant_type_is_dict_entry = _g_variant_type_is_dict_entryPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_variant(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_variant(
      type,
    );
  }

  late final _g_variant_type_is_variantPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_variant');
  late final _g_variant_type_is_variant = _g_variant_type_is_variantPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_hash(
    gconstpointer type,
  ) {
    return _g_variant_type_hash(
      type,
    );
  }

  late final _g_variant_type_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_variant_type_hash');
  late final _g_variant_type_hash =
      _g_variant_type_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_variant_type_equal(
    gconstpointer type1,
    gconstpointer type2,
  ) {
    return _g_variant_type_equal(
      type1,
      type2,
    );
  }

  late final _g_variant_type_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_variant_type_equal');
  late final _g_variant_type_equal = _g_variant_type_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_variant_type_is_subtype_of(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GVariantType> supertype,
  ) {
    return _g_variant_type_is_subtype_of(
      type,
      supertype,
    );
  }

  late final _g_variant_type_is_subtype_ofPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariantType>)>>('g_variant_type_is_subtype_of');
  late final _g_variant_type_is_subtype_of =
      _g_variant_type_is_subtype_ofPtr.asFunction<
          int Function(ffi.Pointer<GVariantType>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_element(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_element(
      type,
    );
  }

  late final _g_variant_type_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_element');
  late final _g_variant_type_element = _g_variant_type_elementPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_first(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_first(
      type,
    );
  }

  late final _g_variant_type_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_first');
  late final _g_variant_type_first = _g_variant_type_firstPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_next(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_next(
      type,
    );
  }

  late final _g_variant_type_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_next');
  late final _g_variant_type_next = _g_variant_type_nextPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_n_items(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_n_items(
      type,
    );
  }

  late final _g_variant_type_n_itemsPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_n_items');
  late final _g_variant_type_n_items = _g_variant_type_n_itemsPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_key(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_key(
      type,
    );
  }

  late final _g_variant_type_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_key');
  late final _g_variant_type_key = _g_variant_type_keyPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_value(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_value(
      type,
    );
  }

  late final _g_variant_type_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_value');
  late final _g_variant_type_value = _g_variant_type_valuePtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_array(
    ffi.Pointer<GVariantType> element,
  ) {
    return _g_variant_type_new_array(
      element,
    );
  }

  late final _g_variant_type_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_array');
  late final _g_variant_type_new_array =
      _g_variant_type_new_arrayPtr.asFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_maybe(
    ffi.Pointer<GVariantType> element,
  ) {
    return _g_variant_type_new_maybe(
      element,
    );
  }

  late final _g_variant_type_new_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_maybe');
  late final _g_variant_type_new_maybe =
      _g_variant_type_new_maybePtr.asFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_tuple(
    ffi.Pointer<ffi.Pointer<GVariantType>> items,
    int length,
  ) {
    return _g_variant_type_new_tuple(
      items,
      length,
    );
  }

  late final _g_variant_type_new_tuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Pointer<GVariantType>>,
              gint)>>('g_variant_type_new_tuple');
  late final _g_variant_type_new_tuple =
      _g_variant_type_new_tuplePtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Pointer<GVariantType>>, int)>();

  ffi.Pointer<GVariantType> g_variant_type_new_dict_entry(
    ffi.Pointer<GVariantType> key,
    ffi.Pointer<GVariantType> value,
  ) {
    return _g_variant_type_new_dict_entry(
      key,
      value,
    );
  }

  late final _g_variant_type_new_dict_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_dict_entry');
  late final _g_variant_type_new_dict_entry =
      _g_variant_type_new_dict_entryPtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_checked_(
    ffi.Pointer<gchar> arg0,
  ) {
    return _g_variant_type_checked_(
      arg0,
    );
  }

  late final _g_variant_type_checked_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<gchar>)>>('g_variant_type_checked_');
  late final _g_variant_type_checked_ = _g_variant_type_checked_Ptr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<gchar>)>();

  int g_variant_type_string_get_depth_(
    ffi.Pointer<gchar> type_string,
  ) {
    return _g_variant_type_string_get_depth_(
      type_string,
    );
  }

  late final _g_variant_type_string_get_depth_Ptr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<gchar>)>>(
          'g_variant_type_string_get_depth_');
  late final _g_variant_type_string_get_depth_ =
      _g_variant_type_string_get_depth_Ptr
          .asFunction<int Function(ffi.Pointer<gchar>)>();

  void g_variant_unref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_unref(
      value,
    );
  }

  late final _g_variant_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariant>)>>(
          'g_variant_unref');
  late final _g_variant_unref =
      _g_variant_unrefPtr.asFunction<void Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_ref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_ref(
      value,
    );
  }

  late final _g_variant_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_ref');
  late final _g_variant_ref = _g_variant_refPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_ref_sink(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_ref_sink(
      value,
    );
  }

  late final _g_variant_ref_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_ref_sink');
  late final _g_variant_ref_sink = _g_variant_ref_sinkPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_floating(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_floating(
      value,
    );
  }

  late final _g_variant_is_floatingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_floating');
  late final _g_variant_is_floating = _g_variant_is_floatingPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_take_ref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_take_ref(
      value,
    );
  }

  late final _g_variant_take_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_take_ref');
  late final _g_variant_take_ref = _g_variant_take_refPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariantType> g_variant_get_type(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_type(
      value,
    );
  }

  late final _g_variant_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_type');
  late final _g_variant_get_type = _g_variant_get_typePtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<gchar> g_variant_get_type_string(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_type_string(
      value,
    );
  }

  late final _g_variant_get_type_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_type_string');
  late final _g_variant_get_type_string = _g_variant_get_type_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_of_type(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_is_of_type(
      value,
      type,
    );
  }

  late final _g_variant_is_of_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>)>>('g_variant_is_of_type');
  late final _g_variant_is_of_type = _g_variant_is_of_typePtr.asFunction<
      int Function(ffi.Pointer<GVariant>, ffi.Pointer<GVariantType>)>();

  int g_variant_is_container(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_container(
      value,
    );
  }

  late final _g_variant_is_containerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_container');
  late final _g_variant_is_container = _g_variant_is_containerPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_classify(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_classify(
      value,
    );
  }

  late final _g_variant_classifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_classify');
  late final _g_variant_classify =
      _g_variant_classifyPtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_boolean(
    int value,
  ) {
    return _g_variant_new_boolean(
      value,
    );
  }

  late final _g_variant_new_booleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gboolean)>>(
          'g_variant_new_boolean');
  late final _g_variant_new_boolean = _g_variant_new_booleanPtr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_byte(
    int value,
  ) {
    return _g_variant_new_byte(
      value,
    );
  }

  late final _g_variant_new_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint8)>>(
          'g_variant_new_byte');
  late final _g_variant_new_byte =
      _g_variant_new_bytePtr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int16(
    int value,
  ) {
    return _g_variant_new_int16(
      value,
    );
  }

  late final _g_variant_new_int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint16)>>(
          'g_variant_new_int16');
  late final _g_variant_new_int16 =
      _g_variant_new_int16Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint16(
    int value,
  ) {
    return _g_variant_new_uint16(
      value,
    );
  }

  late final _g_variant_new_uint16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint16)>>(
          'g_variant_new_uint16');
  late final _g_variant_new_uint16 = _g_variant_new_uint16Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int32(
    int value,
  ) {
    return _g_variant_new_int32(
      value,
    );
  }

  late final _g_variant_new_int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint32)>>(
          'g_variant_new_int32');
  late final _g_variant_new_int32 =
      _g_variant_new_int32Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint32(
    int value,
  ) {
    return _g_variant_new_uint32(
      value,
    );
  }

  late final _g_variant_new_uint32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint32)>>(
          'g_variant_new_uint32');
  late final _g_variant_new_uint32 = _g_variant_new_uint32Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int64(
    int value,
  ) {
    return _g_variant_new_int64(
      value,
    );
  }

  late final _g_variant_new_int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint64)>>(
          'g_variant_new_int64');
  late final _g_variant_new_int64 =
      _g_variant_new_int64Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint64(
    int value,
  ) {
    return _g_variant_new_uint64(
      value,
    );
  }

  late final _g_variant_new_uint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint64)>>(
          'g_variant_new_uint64');
  late final _g_variant_new_uint64 = _g_variant_new_uint64Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_handle(
    int value,
  ) {
    return _g_variant_new_handle(
      value,
    );
  }

  late final _g_variant_new_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint32)>>(
          'g_variant_new_handle');
  late final _g_variant_new_handle = _g_variant_new_handlePtr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_double(
    double value,
  ) {
    return _g_variant_new_double(
      value,
    );
  }

  late final _g_variant_new_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gdouble)>>(
          'g_variant_new_double');
  late final _g_variant_new_double = _g_variant_new_doublePtr
      .asFunction<ffi.Pointer<GVariant> Function(double)>();

  ffi.Pointer<GVariant> g_variant_new_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_variant_new_string(
      string,
    );
  }

  late final _g_variant_new_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_string');
  late final _g_variant_new_string = _g_variant_new_stringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_take_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_variant_new_take_string(
      string,
    );
  }

  late final _g_variant_new_take_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_take_string');
  late final _g_variant_new_take_string = _g_variant_new_take_stringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_printf(
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_new_printf(
      format_string,
    );
  }

  late final _g_variant_new_printfPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_printf');
  late final _g_variant_new_printf = _g_variant_new_printfPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_object_path(
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_variant_new_object_path(
      object_path,
    );
  }

  late final _g_variant_new_object_pathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_object_path');
  late final _g_variant_new_object_path = _g_variant_new_object_pathPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  int g_variant_is_object_path(
    ffi.Pointer<gchar> string,
  ) {
    return _g_variant_is_object_path(
      string,
    );
  }

  late final _g_variant_is_object_pathPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_variant_is_object_path');
  late final _g_variant_is_object_path = _g_variant_is_object_pathPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_signature(
    ffi.Pointer<gchar> signature,
  ) {
    return _g_variant_new_signature(
      signature,
    );
  }

  late final _g_variant_new_signaturePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_signature');
  late final _g_variant_new_signature = _g_variant_new_signaturePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  int g_variant_is_signature(
    ffi.Pointer<gchar> string,
  ) {
    return _g_variant_is_signature(
      string,
    );
  }

  late final _g_variant_is_signaturePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_variant_is_signature');
  late final _g_variant_is_signature =
      _g_variant_is_signaturePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_variant(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_new_variant(
      value,
    );
  }

  late final _g_variant_new_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_new_variant');
  late final _g_variant_new_variant = _g_variant_new_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_strv(
    ffi.Pointer<ffi.Pointer<gchar>> strv,
    int length,
  ) {
    return _g_variant_new_strv(
      strv,
      length,
    );
  }

  late final _g_variant_new_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Pointer<gchar>>, gssize)>>('g_variant_new_strv');
  late final _g_variant_new_strv = _g_variant_new_strvPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_objv(
    ffi.Pointer<ffi.Pointer<gchar>> strv,
    int length,
  ) {
    return _g_variant_new_objv(
      strv,
      length,
    );
  }

  late final _g_variant_new_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Pointer<gchar>>, gssize)>>('g_variant_new_objv');
  late final _g_variant_new_objv = _g_variant_new_objvPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_bytestring(
    ffi.Pointer<gchar> string,
  ) {
    return _g_variant_new_bytestring(
      string,
    );
  }

  late final _g_variant_new_bytestringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_bytestring');
  late final _g_variant_new_bytestring = _g_variant_new_bytestringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_bytestring_array(
    ffi.Pointer<ffi.Pointer<gchar>> strv,
    int length,
  ) {
    return _g_variant_new_bytestring_array(
      strv,
      length,
    );
  }

  late final _g_variant_new_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<gchar>>,
              gssize)>>('g_variant_new_bytestring_array');
  late final _g_variant_new_bytestring_array =
      _g_variant_new_bytestring_arrayPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_fixed_array(
    ffi.Pointer<GVariantType> element_type,
    gconstpointer elements,
    int n_elements,
    int element_size,
  ) {
    return _g_variant_new_fixed_array(
      element_type,
      elements,
      n_elements,
      element_size,
    );
  }

  late final _g_variant_new_fixed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              gconstpointer, gsize, gsize)>>('g_variant_new_fixed_array');
  late final _g_variant_new_fixed_array =
      _g_variant_new_fixed_arrayPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>, gconstpointer, int, int)>();

  int g_variant_get_boolean(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_boolean(
      value,
    );
  }

  late final _g_variant_get_booleanPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_boolean');
  late final _g_variant_get_boolean = _g_variant_get_booleanPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_byte(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_byte(
      value,
    );
  }

  late final _g_variant_get_bytePtr =
      _lookup<ffi.NativeFunction<guint8 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_byte');
  late final _g_variant_get_byte =
      _g_variant_get_bytePtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int16(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int16(
      value,
    );
  }

  late final _g_variant_get_int16Ptr =
      _lookup<ffi.NativeFunction<gint16 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int16');
  late final _g_variant_get_int16 =
      _g_variant_get_int16Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint16(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint16(
      value,
    );
  }

  late final _g_variant_get_uint16Ptr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint16');
  late final _g_variant_get_uint16 = _g_variant_get_uint16Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int32(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int32(
      value,
    );
  }

  late final _g_variant_get_int32Ptr =
      _lookup<ffi.NativeFunction<gint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int32');
  late final _g_variant_get_int32 =
      _g_variant_get_int32Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint32(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint32(
      value,
    );
  }

  late final _g_variant_get_uint32Ptr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint32');
  late final _g_variant_get_uint32 = _g_variant_get_uint32Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int64(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int64(
      value,
    );
  }

  late final _g_variant_get_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int64');
  late final _g_variant_get_int64 =
      _g_variant_get_int64Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint64(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint64(
      value,
    );
  }

  late final _g_variant_get_uint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint64');
  late final _g_variant_get_uint64 = _g_variant_get_uint64Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_handle(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_handle(
      value,
    );
  }

  late final _g_variant_get_handlePtr =
      _lookup<ffi.NativeFunction<gint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_handle');
  late final _g_variant_get_handle = _g_variant_get_handlePtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  double g_variant_get_double(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_double(
      value,
    );
  }

  late final _g_variant_get_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_double');
  late final _g_variant_get_double = _g_variant_get_doublePtr
      .asFunction<double Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_get_variant(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_variant(
      value,
    );
  }

  late final _g_variant_get_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_variant');
  late final _g_variant_get_variant = _g_variant_get_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<gchar> g_variant_get_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_string(
      value,
      length,
    );
  }

  late final _g_variant_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_string');
  late final _g_variant_get_string = _g_variant_get_stringPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<gchar> g_variant_dup_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_string(
      value,
      length,
    );
  }

  late final _g_variant_dup_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_string');
  late final _g_variant_dup_string = _g_variant_dup_stringPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_get_strv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_strv(
      value,
      length,
    );
  }

  late final _g_variant_get_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_strv');
  late final _g_variant_get_strv = _g_variant_get_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_dup_strv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_strv(
      value,
      length,
    );
  }

  late final _g_variant_dup_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_strv');
  late final _g_variant_dup_strv = _g_variant_dup_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_get_objv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_objv(
      value,
      length,
    );
  }

  late final _g_variant_get_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_objv');
  late final _g_variant_get_objv = _g_variant_get_objvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_dup_objv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_objv(
      value,
      length,
    );
  }

  late final _g_variant_dup_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_objv');
  late final _g_variant_dup_objv = _g_variant_dup_objvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<gchar> g_variant_get_bytestring(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_bytestring(
      value,
    );
  }

  late final _g_variant_get_bytestringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_bytestring');
  late final _g_variant_get_bytestring = _g_variant_get_bytestringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<gchar> g_variant_dup_bytestring(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_bytestring(
      value,
      length,
    );
  }

  late final _g_variant_dup_bytestringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_bytestring');
  late final _g_variant_dup_bytestring =
      _g_variant_dup_bytestringPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_get_bytestring_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_bytestring_array(
      value,
      length,
    );
  }

  late final _g_variant_get_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_bytestring_array');
  late final _g_variant_get_bytestring_array =
      _g_variant_get_bytestring_arrayPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_variant_dup_bytestring_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_bytestring_array(
      value,
      length,
    );
  }

  late final _g_variant_dup_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_bytestring_array');
  late final _g_variant_dup_bytestring_array =
      _g_variant_dup_bytestring_arrayPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GVariant> g_variant_new_maybe(
    ffi.Pointer<GVariantType> child_type,
    ffi.Pointer<GVariant> child,
  ) {
    return _g_variant_new_maybe(
      child_type,
      child,
    );
  }

  late final _g_variant_new_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>)>>('g_variant_new_maybe');
  late final _g_variant_new_maybe = _g_variant_new_maybePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GVariantType>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_array(
    ffi.Pointer<GVariantType> child_type,
    ffi.Pointer<ffi.Pointer<GVariant>> children,
    int n_children,
  ) {
    return _g_variant_new_array(
      child_type,
      children,
      n_children,
    );
  }

  late final _g_variant_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              ffi.Pointer<ffi.Pointer<GVariant>>,
              gsize)>>('g_variant_new_array');
  late final _g_variant_new_array = _g_variant_new_arrayPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
          ffi.Pointer<ffi.Pointer<GVariant>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_tuple(
    ffi.Pointer<ffi.Pointer<GVariant>> children,
    int n_children,
  ) {
    return _g_variant_new_tuple(
      children,
      n_children,
    );
  }

  late final _g_variant_new_tuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<GVariant>>,
              gsize)>>('g_variant_new_tuple');
  late final _g_variant_new_tuple = _g_variant_new_tuplePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Pointer<GVariant>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_dict_entry(
    ffi.Pointer<GVariant> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_new_dict_entry(
      key,
      value,
    );
  }

  late final _g_variant_new_dict_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GVariant>)>>('g_variant_new_dict_entry');
  late final _g_variant_new_dict_entry =
      _g_variant_new_dict_entryPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_get_maybe(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_maybe(
      value,
    );
  }

  late final _g_variant_get_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_maybe');
  late final _g_variant_get_maybe = _g_variant_get_maybePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_n_children(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_n_children(
      value,
    );
  }

  late final _g_variant_n_childrenPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariant>)>>(
          'g_variant_n_children');
  late final _g_variant_n_children = _g_variant_n_childrenPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  void g_variant_get_child(
    ffi.Pointer<GVariant> value,
    int index_,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_get_child(
      value,
      index_,
      format_string,
    );
  }

  late final _g_variant_get_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariant>, gsize,
              ffi.Pointer<gchar>)>>('g_variant_get_child');
  late final _g_variant_get_child = _g_variant_get_childPtr.asFunction<
      void Function(ffi.Pointer<GVariant>, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_get_child_value(
    ffi.Pointer<GVariant> value,
    int index_,
  ) {
    return _g_variant_get_child_value(
      value,
      index_,
    );
  }

  late final _g_variant_get_child_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>, gsize)>>('g_variant_get_child_value');
  late final _g_variant_get_child_value = _g_variant_get_child_valuePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>, int)>();

  int g_variant_lookup(
    ffi.Pointer<GVariant> dictionary,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_lookup(
      dictionary,
      key,
      format_string,
    );
  }

  late final _g_variant_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_variant_lookup');
  late final _g_variant_lookup = _g_variant_lookupPtr.asFunction<
      int Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_lookup_value(
    ffi.Pointer<GVariant> dictionary,
    ffi.Pointer<gchar> key,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_variant_lookup_value(
      dictionary,
      key,
      expected_type,
    );
  }

  late final _g_variant_lookup_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>)>>('g_variant_lookup_value');
  late final _g_variant_lookup_value = _g_variant_lookup_valuePtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>, ffi.Pointer<gchar>,
          ffi.Pointer<GVariantType>)>();

  gconstpointer g_variant_get_fixed_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> n_elements,
    int element_size,
  ) {
    return _g_variant_get_fixed_array(
      value,
      n_elements,
      element_size,
    );
  }

  late final _g_variant_get_fixed_arrayPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(ffi.Pointer<GVariant>, ffi.Pointer<gsize>,
              gsize)>>('g_variant_get_fixed_array');
  late final _g_variant_get_fixed_array =
      _g_variant_get_fixed_arrayPtr.asFunction<
          gconstpointer Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>, int)>();

  int g_variant_get_size(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_size(
      value,
    );
  }

  late final _g_variant_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_size');
  late final _g_variant_get_size =
      _g_variant_get_sizePtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  gconstpointer g_variant_get_data(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_data(
      value,
    );
  }

  late final _g_variant_get_dataPtr = _lookup<
          ffi.NativeFunction<gconstpointer Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_data');
  late final _g_variant_get_data = _g_variant_get_dataPtr
      .asFunction<gconstpointer Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GBytes> g_variant_get_data_as_bytes(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_data_as_bytes(
      value,
    );
  }

  late final _g_variant_get_data_as_bytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_data_as_bytes');
  late final _g_variant_get_data_as_bytes = _g_variant_get_data_as_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GVariant>)>();

  void g_variant_store(
    ffi.Pointer<GVariant> value,
    gpointer data,
  ) {
    return _g_variant_store(
      value,
      data,
    );
  }

  late final _g_variant_storePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GVariant>, gpointer)>>(
      'g_variant_store');
  late final _g_variant_store = _g_variant_storePtr
      .asFunction<void Function(ffi.Pointer<GVariant>, gpointer)>();

  ffi.Pointer<gchar> g_variant_print(
    ffi.Pointer<GVariant> value,
    int type_annotate,
  ) {
    return _g_variant_print(
      value,
      type_annotate,
    );
  }

  late final _g_variant_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GVariant>, gboolean)>>('g_variant_print');
  late final _g_variant_print = _g_variant_printPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVariant>, int)>();

  ffi.Pointer<GString> g_variant_print_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GString> string,
    int type_annotate,
  ) {
    return _g_variant_print_string(
      value,
      string,
      type_annotate,
    );
  }

  late final _g_variant_print_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GString>, gboolean)>>('g_variant_print_string');
  late final _g_variant_print_string = _g_variant_print_stringPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<GString>, int)>();

  int g_variant_hash(
    gconstpointer value,
  ) {
    return _g_variant_hash(
      value,
    );
  }

  late final _g_variant_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_variant_hash');
  late final _g_variant_hash =
      _g_variant_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_variant_equal(
    gconstpointer one,
    gconstpointer two,
  ) {
    return _g_variant_equal(
      one,
      two,
    );
  }

  late final _g_variant_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_variant_equal');
  late final _g_variant_equal = _g_variant_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GVariant> g_variant_get_normal_form(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_normal_form(
      value,
    );
  }

  late final _g_variant_get_normal_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_normal_form');
  late final _g_variant_get_normal_form = _g_variant_get_normal_formPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_normal_form(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_normal_form(
      value,
    );
  }

  late final _g_variant_is_normal_formPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_normal_form');
  late final _g_variant_is_normal_form = _g_variant_is_normal_formPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_byteswap(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_byteswap(
      value,
    );
  }

  late final _g_variant_byteswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_byteswap');
  late final _g_variant_byteswap = _g_variant_byteswapPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_from_bytes(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GBytes> bytes,
    int trusted,
  ) {
    return _g_variant_new_from_bytes(
      type,
      bytes,
      trusted,
    );
  }

  late final _g_variant_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GBytes>, gboolean)>>('g_variant_new_from_bytes');
  late final _g_variant_new_from_bytes =
      _g_variant_new_from_bytesPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>, ffi.Pointer<GBytes>, int)>();

  ffi.Pointer<GVariant> g_variant_new_from_data(
    ffi.Pointer<GVariantType> type,
    gconstpointer data,
    int size,
    int trusted,
    GDestroyNotify notify,
    gpointer user_data,
  ) {
    return _g_variant_new_from_data(
      type,
      data,
      size,
      trusted,
      notify,
      user_data,
    );
  }

  late final _g_variant_new_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              gconstpointer,
              gsize,
              gboolean,
              GDestroyNotify,
              gpointer)>>('g_variant_new_from_data');
  late final _g_variant_new_from_data = _g_variant_new_from_dataPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>, gconstpointer,
          int, int, GDestroyNotify, gpointer)>();

  ffi.Pointer<GVariantIter> g_variant_iter_new(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_iter_new(
      value,
    );
  }

  late final _g_variant_iter_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantIter> Function(
              ffi.Pointer<GVariant>)>>('g_variant_iter_new');
  late final _g_variant_iter_new = _g_variant_iter_newPtr
      .asFunction<ffi.Pointer<GVariantIter> Function(ffi.Pointer<GVariant>)>();

  int g_variant_iter_init(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_iter_init(
      iter,
      value,
    );
  }

  late final _g_variant_iter_initPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<GVariant>)>>('g_variant_iter_init');
  late final _g_variant_iter_init = _g_variant_iter_initPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariantIter> g_variant_iter_copy(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_copy(
      iter,
    );
  }

  late final _g_variant_iter_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantIter> Function(
              ffi.Pointer<GVariantIter>)>>('g_variant_iter_copy');
  late final _g_variant_iter_copy = _g_variant_iter_copyPtr.asFunction<
      ffi.Pointer<GVariantIter> Function(ffi.Pointer<GVariantIter>)>();

  int g_variant_iter_n_children(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_n_children(
      iter,
    );
  }

  late final _g_variant_iter_n_childrenPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantIter>)>>(
          'g_variant_iter_n_children');
  late final _g_variant_iter_n_children = _g_variant_iter_n_childrenPtr
      .asFunction<int Function(ffi.Pointer<GVariantIter>)>();

  void g_variant_iter_free(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_free(
      iter,
    );
  }

  late final _g_variant_iter_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantIter>)>>(
          'g_variant_iter_free');
  late final _g_variant_iter_free = _g_variant_iter_freePtr
      .asFunction<void Function(ffi.Pointer<GVariantIter>)>();

  ffi.Pointer<GVariant> g_variant_iter_next_value(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_next_value(
      iter,
    );
  }

  late final _g_variant_iter_next_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantIter>)>>('g_variant_iter_next_value');
  late final _g_variant_iter_next_value = _g_variant_iter_next_valuePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantIter>)>();

  int g_variant_iter_next(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_iter_next(
      iter,
      format_string,
    );
  }

  late final _g_variant_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<gchar>)>>('g_variant_iter_next');
  late final _g_variant_iter_next = _g_variant_iter_nextPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<gchar>)>();

  int g_variant_iter_loop(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_iter_loop(
      iter,
      format_string,
    );
  }

  late final _g_variant_iter_loopPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<gchar>)>>('g_variant_iter_loop');
  late final _g_variant_iter_loop = _g_variant_iter_loopPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<gchar>)>();

  int g_variant_parser_get_error_quark() {
    return _g_variant_parser_get_error_quark();
  }

  late final _g_variant_parser_get_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_variant_parser_get_error_quark');
  late final _g_variant_parser_get_error_quark =
      _g_variant_parser_get_error_quarkPtr.asFunction<int Function()>();

  int g_variant_parse_error_quark() {
    return _g_variant_parse_error_quark();
  }

  late final _g_variant_parse_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_variant_parse_error_quark');
  late final _g_variant_parse_error_quark =
      _g_variant_parse_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GVariantBuilder> g_variant_builder_new(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_new(
      type,
    );
  }

  late final _g_variant_builder_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantBuilder> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_builder_new');
  late final _g_variant_builder_new = _g_variant_builder_newPtr.asFunction<
      ffi.Pointer<GVariantBuilder> Function(ffi.Pointer<GVariantType>)>();

  void g_variant_builder_unref(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_unref(
      builder,
    );
  }

  late final _g_variant_builder_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_unref');
  late final _g_variant_builder_unref = _g_variant_builder_unrefPtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  ffi.Pointer<GVariantBuilder> g_variant_builder_ref(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_ref(
      builder,
    );
  }

  late final _g_variant_builder_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantBuilder> Function(
              ffi.Pointer<GVariantBuilder>)>>('g_variant_builder_ref');
  late final _g_variant_builder_ref = _g_variant_builder_refPtr.asFunction<
      ffi.Pointer<GVariantBuilder> Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_init(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_init(
      builder,
      type,
    );
  }

  late final _g_variant_builder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariantType>)>>('g_variant_builder_init');
  late final _g_variant_builder_init = _g_variant_builder_initPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariant> g_variant_builder_end(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_end(
      builder,
    );
  }

  late final _g_variant_builder_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantBuilder>)>>('g_variant_builder_end');
  late final _g_variant_builder_end = _g_variant_builder_endPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_clear(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_clear(
      builder,
    );
  }

  late final _g_variant_builder_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_clear');
  late final _g_variant_builder_clear = _g_variant_builder_clearPtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_open(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_open(
      builder,
      type,
    );
  }

  late final _g_variant_builder_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariantType>)>>('g_variant_builder_open');
  late final _g_variant_builder_open = _g_variant_builder_openPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariantType>)>();

  void g_variant_builder_close(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_close(
      builder,
    );
  }

  late final _g_variant_builder_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_close');
  late final _g_variant_builder_close = _g_variant_builder_closePtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_add_value(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_builder_add_value(
      builder,
      value,
    );
  }

  late final _g_variant_builder_add_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariant>)>>('g_variant_builder_add_value');
  late final _g_variant_builder_add_value =
      _g_variant_builder_add_valuePtr.asFunction<
          void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariant>)>();

  void g_variant_builder_add(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_builder_add(
      builder,
      format_string,
    );
  }

  late final _g_variant_builder_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<gchar>)>>('g_variant_builder_add');
  late final _g_variant_builder_add = _g_variant_builder_addPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<gchar>)>();

  void g_variant_builder_add_parsed(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<gchar> format,
  ) {
    return _g_variant_builder_add_parsed(
      builder,
      format,
    );
  }

  late final _g_variant_builder_add_parsedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<gchar>)>>('g_variant_builder_add_parsed');
  late final _g_variant_builder_add_parsed =
      _g_variant_builder_add_parsedPtr.asFunction<
          void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new(
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_new(
      format_string,
    );
  }

  late final _g_variant_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>('g_variant_new');
  late final _g_variant_new = _g_variant_newPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  void g_variant_get(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_get(
      value,
      format_string,
    );
  }

  late final _g_variant_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gchar>)>>('g_variant_get');
  late final _g_variant_get = _g_variant_getPtr
      .asFunction<void Function(ffi.Pointer<GVariant>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_va(
    ffi.Pointer<gchar> format_string,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_new_va(
      format_string,
      endptr,
      app,
    );
  }

  late final _g_variant_new_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>('g_variant_new_va');
  late final _g_variant_new_va = _g_variant_new_vaPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  void g_variant_get_va(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gchar> format_string,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_get_va(
      value,
      format_string,
      endptr,
      app,
    );
  }

  late final _g_variant_get_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVariant>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>('g_variant_get_va');
  late final _g_variant_get_va = _g_variant_get_vaPtr.asFunction<
      void Function(
          ffi.Pointer<GVariant>,
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  int g_variant_check_format_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gchar> format_string,
    int copy_only,
  ) {
    return _g_variant_check_format_string(
      value,
      format_string,
      copy_only,
    );
  }

  late final _g_variant_check_format_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>, ffi.Pointer<gchar>,
              gboolean)>>('g_variant_check_format_string');
  late final _g_variant_check_format_string =
      _g_variant_check_format_stringPtr.asFunction<
          int Function(ffi.Pointer<GVariant>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GVariant> g_variant_parse(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<gchar> text,
    ffi.Pointer<gchar> limit,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_variant_parse(
      type,
      text,
      limit,
      endptr,
      error,
    );
  }

  late final _g_variant_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_variant_parse');
  late final _g_variant_parse = _g_variant_parsePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GVariantType>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_variant_new_parsed(
    ffi.Pointer<gchar> format,
  ) {
    return _g_variant_new_parsed(
      format,
    );
  }

  late final _g_variant_new_parsedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>>(
      'g_variant_new_parsed');
  late final _g_variant_new_parsed = _g_variant_new_parsedPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_new_parsed_va(
    ffi.Pointer<gchar> format,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_new_parsed_va(
      format,
      app,
    );
  }

  late final _g_variant_new_parsed_vaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>(
      'g_variant_new_parsed_va');
  late final _g_variant_new_parsed_va = _g_variant_new_parsed_vaPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  ffi.Pointer<gchar> g_variant_parse_error_print_context(
    ffi.Pointer<GError> error,
    ffi.Pointer<gchar> source_str,
  ) {
    return _g_variant_parse_error_print_context(
      error,
      source_str,
    );
  }

  late final _g_variant_parse_error_print_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GError>,
              ffi.Pointer<gchar>)>>('g_variant_parse_error_print_context');
  late final _g_variant_parse_error_print_context =
      _g_variant_parse_error_print_contextPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GError>, ffi.Pointer<gchar>)>();

  int g_variant_compare(
    gconstpointer one,
    gconstpointer two,
  ) {
    return _g_variant_compare(
      one,
      two,
    );
  }

  late final _g_variant_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_variant_compare');
  late final _g_variant_compare = _g_variant_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GVariantDict> g_variant_dict_new(
    ffi.Pointer<GVariant> from_asv,
  ) {
    return _g_variant_dict_new(
      from_asv,
    );
  }

  late final _g_variant_dict_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantDict> Function(
              ffi.Pointer<GVariant>)>>('g_variant_dict_new');
  late final _g_variant_dict_new = _g_variant_dict_newPtr
      .asFunction<ffi.Pointer<GVariantDict> Function(ffi.Pointer<GVariant>)>();

  void g_variant_dict_init(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<GVariant> from_asv,
  ) {
    return _g_variant_dict_init(
      dict,
      from_asv,
    );
  }

  late final _g_variant_dict_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<GVariant>)>>('g_variant_dict_init');
  late final _g_variant_dict_init = _g_variant_dict_initPtr.asFunction<
      void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<GVariant>)>();

  int g_variant_dict_lookup(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_dict_lookup(
      dict,
      key,
      format_string,
    );
  }

  late final _g_variant_dict_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_variant_dict_lookup');
  late final _g_variant_dict_lookup = _g_variant_dict_lookupPtr.asFunction<
      int Function(
          ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_variant_dict_lookup_value(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_variant_dict_lookup_value(
      dict,
      key,
      expected_type,
    );
  }

  late final _g_variant_dict_lookup_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantDict>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>)>>('g_variant_dict_lookup_value');
  late final _g_variant_dict_lookup_value =
      _g_variant_dict_lookup_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<gchar>, ffi.Pointer<GVariantType>)>();

  int g_variant_dict_contains(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
  ) {
    return _g_variant_dict_contains(
      dict,
      key,
    );
  }

  late final _g_variant_dict_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<gchar>)>>('g_variant_dict_contains');
  late final _g_variant_dict_contains = _g_variant_dict_containsPtr.asFunction<
      int Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>)>();

  void g_variant_dict_insert(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_variant_dict_insert(
      dict,
      key,
      format_string,
    );
  }

  late final _g_variant_dict_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_variant_dict_insert');
  late final _g_variant_dict_insert = _g_variant_dict_insertPtr.asFunction<
      void Function(
          ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_variant_dict_insert_value(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_dict_insert_value(
      dict,
      key,
      value,
    );
  }

  late final _g_variant_dict_insert_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_variant_dict_insert_value');
  late final _g_variant_dict_insert_value =
      _g_variant_dict_insert_valuePtr.asFunction<
          void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  int g_variant_dict_remove(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<gchar> key,
  ) {
    return _g_variant_dict_remove(
      dict,
      key,
    );
  }

  late final _g_variant_dict_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<gchar>)>>('g_variant_dict_remove');
  late final _g_variant_dict_remove = _g_variant_dict_removePtr.asFunction<
      int Function(ffi.Pointer<GVariantDict>, ffi.Pointer<gchar>)>();

  void g_variant_dict_clear(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_clear(
      dict,
    );
  }

  late final _g_variant_dict_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantDict>)>>(
          'g_variant_dict_clear');
  late final _g_variant_dict_clear = _g_variant_dict_clearPtr
      .asFunction<void Function(ffi.Pointer<GVariantDict>)>();

  ffi.Pointer<GVariant> g_variant_dict_end(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_end(
      dict,
    );
  }

  late final _g_variant_dict_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantDict>)>>('g_variant_dict_end');
  late final _g_variant_dict_end = _g_variant_dict_endPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantDict>)>();

  ffi.Pointer<GVariantDict> g_variant_dict_ref(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_ref(
      dict,
    );
  }

  late final _g_variant_dict_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantDict> Function(
              ffi.Pointer<GVariantDict>)>>('g_variant_dict_ref');
  late final _g_variant_dict_ref = _g_variant_dict_refPtr.asFunction<
      ffi.Pointer<GVariantDict> Function(ffi.Pointer<GVariantDict>)>();

  void g_variant_dict_unref(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_unref(
      dict,
    );
  }

  late final _g_variant_dict_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantDict>)>>(
          'g_variant_dict_unref');
  late final _g_variant_dict_unref = _g_variant_dict_unrefPtr
      .asFunction<void Function(ffi.Pointer<GVariantDict>)>();

  int g_printf_string_upper_bound(
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_printf_string_upper_bound(
      format,
      args,
    );
  }

  late final _g_printf_string_upper_boundPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_printf_string_upper_bound');
  late final _g_printf_string_upper_bound =
      _g_printf_string_upper_boundPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  int g_log_set_handler(
    ffi.Pointer<gchar> log_domain,
    int log_levels,
    GLogFunc log_func,
    gpointer user_data,
  ) {
    return _g_log_set_handler(
      log_domain,
      log_levels,
      log_func,
      user_data,
    );
  }

  late final _g_log_set_handlerPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<gchar>, ffi.Int32, GLogFunc,
              gpointer)>>('g_log_set_handler');
  late final _g_log_set_handler = _g_log_set_handlerPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int, GLogFunc, gpointer)>();

  int g_log_set_handler_full(
    ffi.Pointer<gchar> log_domain,
    int log_levels,
    GLogFunc log_func,
    gpointer user_data,
    GDestroyNotify destroy,
  ) {
    return _g_log_set_handler_full(
      log_domain,
      log_levels,
      log_func,
      user_data,
      destroy,
    );
  }

  late final _g_log_set_handler_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<gchar>, ffi.Int32, GLogFunc, gpointer,
              GDestroyNotify)>>('g_log_set_handler_full');
  late final _g_log_set_handler_full = _g_log_set_handler_fullPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>, int, GLogFunc, gpointer, GDestroyNotify)>();

  void g_log_remove_handler(
    ffi.Pointer<gchar> log_domain,
    int handler_id,
  ) {
    return _g_log_remove_handler(
      log_domain,
      handler_id,
    );
  }

  late final _g_log_remove_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>, guint)>>(
          'g_log_remove_handler');
  late final _g_log_remove_handler = _g_log_remove_handlerPtr
      .asFunction<void Function(ffi.Pointer<gchar>, int)>();

  void g_log_default_handler(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> message,
    gpointer unused_data,
  ) {
    return _g_log_default_handler(
      log_domain,
      log_level,
      message,
      unused_data,
    );
  }

  late final _g_log_default_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32, ffi.Pointer<gchar>,
              gpointer)>>('g_log_default_handler');
  late final _g_log_default_handler = _g_log_default_handlerPtr.asFunction<
      void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>, gpointer)>();

  GLogFunc g_log_set_default_handler(
    GLogFunc log_func,
    gpointer user_data,
  ) {
    return _g_log_set_default_handler(
      log_func,
      user_data,
    );
  }

  late final _g_log_set_default_handlerPtr =
      _lookup<ffi.NativeFunction<GLogFunc Function(GLogFunc, gpointer)>>(
          'g_log_set_default_handler');
  late final _g_log_set_default_handler = _g_log_set_default_handlerPtr
      .asFunction<GLogFunc Function(GLogFunc, gpointer)>();

  void g_log(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> format,
  ) {
    return _g_log(
      log_domain,
      log_level,
      format,
    );
  }

  late final _g_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gchar>, ffi.Int32, ffi.Pointer<gchar>)>>('g_log');
  late final _g_log = _g_logPtr
      .asFunction<void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>)>();

  void g_logv(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_logv(
      log_domain,
      log_level,
      format,
      args,
    );
  }

  late final _g_logvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_logv');
  late final _g_logv = _g_logvPtr.asFunction<
      void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  int g_log_set_fatal_mask(
    ffi.Pointer<gchar> log_domain,
    int fatal_mask,
  ) {
    return _g_log_set_fatal_mask(
      log_domain,
      fatal_mask,
    );
  }

  late final _g_log_set_fatal_maskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<gchar>, ffi.Int32)>>(
      'g_log_set_fatal_mask');
  late final _g_log_set_fatal_mask = _g_log_set_fatal_maskPtr
      .asFunction<int Function(ffi.Pointer<gchar>, int)>();

  int g_log_set_always_fatal(
    int fatal_mask,
  ) {
    return _g_log_set_always_fatal(
      fatal_mask,
    );
  }

  late final _g_log_set_always_fatalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'g_log_set_always_fatal');
  late final _g_log_set_always_fatal =
      _g_log_set_always_fatalPtr.asFunction<int Function(int)>();

  void g_log_structured(
    ffi.Pointer<gchar> log_domain,
    int log_level,
  ) {
    return _g_log_structured(
      log_domain,
      log_level,
    );
  }

  late final _g_log_structuredPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32)>>(
      'g_log_structured');
  late final _g_log_structured =
      _g_log_structuredPtr.asFunction<void Function(ffi.Pointer<gchar>, int)>();

  void g_log_structured_array(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
  ) {
    return _g_log_structured_array(
      log_level,
      fields,
      n_fields,
    );
  }

  late final _g_log_structured_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<GLogField>,
              gsize)>>('g_log_structured_array');
  late final _g_log_structured_array = _g_log_structured_arrayPtr
      .asFunction<void Function(int, ffi.Pointer<GLogField>, int)>();

  void g_log_variant(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<GVariant> fields,
  ) {
    return _g_log_variant(
      log_domain,
      log_level,
      fields,
    );
  }

  late final _g_log_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<GVariant>)>>('g_log_variant');
  late final _g_log_variant = _g_log_variantPtr.asFunction<
      void Function(ffi.Pointer<gchar>, int, ffi.Pointer<GVariant>)>();

  void g_log_set_writer_func(
    GLogWriterFunc func,
    gpointer user_data,
    GDestroyNotify user_data_free,
  ) {
    return _g_log_set_writer_func(
      func,
      user_data,
      user_data_free,
    );
  }

  late final _g_log_set_writer_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLogWriterFunc, gpointer,
              GDestroyNotify)>>('g_log_set_writer_func');
  late final _g_log_set_writer_func = _g_log_set_writer_funcPtr
      .asFunction<void Function(GLogWriterFunc, gpointer, GDestroyNotify)>();

  int g_log_writer_supports_color(
    int output_fd,
  ) {
    return _g_log_writer_supports_color(
      output_fd,
    );
  }

  late final _g_log_writer_supports_colorPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gint)>>(
          'g_log_writer_supports_color');
  late final _g_log_writer_supports_color =
      _g_log_writer_supports_colorPtr.asFunction<int Function(int)>();

  int g_log_writer_is_journald(
    int output_fd,
  ) {
    return _g_log_writer_is_journald(
      output_fd,
    );
  }

  late final _g_log_writer_is_journaldPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gint)>>(
          'g_log_writer_is_journald');
  late final _g_log_writer_is_journald =
      _g_log_writer_is_journaldPtr.asFunction<int Function(int)>();

  ffi.Pointer<gchar> g_log_writer_format_fields(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    int use_color,
  ) {
    return _g_log_writer_format_fields(
      log_level,
      fields,
      n_fields,
      use_color,
    );
  }

  late final _g_log_writer_format_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              gboolean)>>('g_log_writer_format_fields');
  late final _g_log_writer_format_fields =
      _g_log_writer_format_fieldsPtr.asFunction<
          ffi.Pointer<gchar> Function(int, ffi.Pointer<GLogField>, int, int)>();

  int g_log_writer_journald(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    gpointer user_data,
  ) {
    return _g_log_writer_journald(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_journaldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              gpointer)>>('g_log_writer_journald');
  late final _g_log_writer_journald = _g_log_writer_journaldPtr
      .asFunction<int Function(int, ffi.Pointer<GLogField>, int, gpointer)>();

  int g_log_writer_standard_streams(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    gpointer user_data,
  ) {
    return _g_log_writer_standard_streams(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_standard_streamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              gpointer)>>('g_log_writer_standard_streams');
  late final _g_log_writer_standard_streams = _g_log_writer_standard_streamsPtr
      .asFunction<int Function(int, ffi.Pointer<GLogField>, int, gpointer)>();

  int g_log_writer_default(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    gpointer user_data,
  ) {
    return _g_log_writer_default(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              gpointer)>>('g_log_writer_default');
  late final _g_log_writer_default = _g_log_writer_defaultPtr
      .asFunction<int Function(int, ffi.Pointer<GLogField>, int, gpointer)>();

  void g_log_writer_default_set_use_stderr(
    int use_stderr,
  ) {
    return _g_log_writer_default_set_use_stderr(
      use_stderr,
    );
  }

  late final _g_log_writer_default_set_use_stderrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'g_log_writer_default_set_use_stderr');
  late final _g_log_writer_default_set_use_stderr =
      _g_log_writer_default_set_use_stderrPtr.asFunction<void Function(int)>();

  int g_log_writer_default_would_drop(
    int log_level,
    ffi.Pointer<ffi.Char> log_domain,
  ) {
    return _g_log_writer_default_would_drop(
      log_level,
      log_domain,
    );
  }

  late final _g_log_writer_default_would_dropPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Int32, ffi.Pointer<ffi.Char>)>>(
      'g_log_writer_default_would_drop');
  late final _g_log_writer_default_would_drop =
      _g_log_writer_default_would_dropPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int g_log_get_debug_enabled() {
    return _g_log_get_debug_enabled();
  }

  late final _g_log_get_debug_enabledPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_log_get_debug_enabled');
  late final _g_log_get_debug_enabled =
      _g_log_get_debug_enabledPtr.asFunction<int Function()>();

  void g_log_set_debug_enabled(
    int enabled,
  ) {
    return _g_log_set_debug_enabled(
      enabled,
    );
  }

  late final _g_log_set_debug_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'g_log_set_debug_enabled');
  late final _g_log_set_debug_enabled =
      _g_log_set_debug_enabledPtr.asFunction<void Function(int)>();

  void _g_log_fallback_handler(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> message,
    gpointer unused_data,
  ) {
    return __g_log_fallback_handler(
      log_domain,
      log_level,
      message,
      unused_data,
    );
  }

  late final __g_log_fallback_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32, ffi.Pointer<gchar>,
              gpointer)>>('_g_log_fallback_handler');
  late final __g_log_fallback_handler = __g_log_fallback_handlerPtr.asFunction<
      void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>, gpointer)>();

  void g_return_if_fail_warning(
    ffi.Pointer<ffi.Char> log_domain,
    ffi.Pointer<ffi.Char> pretty_function,
    ffi.Pointer<ffi.Char> expression,
  ) {
    return _g_return_if_fail_warning(
      log_domain,
      pretty_function,
      expression,
    );
  }

  late final _g_return_if_fail_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_return_if_fail_warning');
  late final _g_return_if_fail_warning =
      _g_return_if_fail_warningPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_warn_message(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> warnexpr,
  ) {
    return _g_warn_message(
      domain,
      file,
      line,
      func,
      warnexpr,
    );
  }

  late final _g_warn_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_warn_message');
  late final _g_warn_message = _g_warn_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assert_warning(
    ffi.Pointer<ffi.Char> log_domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> pretty_function,
    ffi.Pointer<ffi.Char> expression,
  ) {
    return _g_assert_warning(
      log_domain,
      file,
      line,
      pretty_function,
      expression,
    );
  }

  late final _g_assert_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assert_warning');
  late final _g_assert_warning = _g_assert_warningPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_log_structured_standard(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> file,
    ffi.Pointer<gchar> line,
    ffi.Pointer<gchar> func,
    ffi.Pointer<gchar> message_format,
  ) {
    return _g_log_structured_standard(
      log_domain,
      log_level,
      file,
      line,
      func,
      message_format,
    );
  }

  late final _g_log_structured_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_log_structured_standard');
  late final _g_log_structured_standard =
      _g_log_structured_standardPtr.asFunction<
          void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_print(
    ffi.Pointer<gchar> format,
  ) {
    return _g_print(
      format,
    );
  }

  late final _g_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_print');
  late final _g_print =
      _g_printPtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  GPrintFunc g_set_print_handler(
    GPrintFunc func,
  ) {
    return _g_set_print_handler(
      func,
    );
  }

  late final _g_set_print_handlerPtr =
      _lookup<ffi.NativeFunction<GPrintFunc Function(GPrintFunc)>>(
          'g_set_print_handler');
  late final _g_set_print_handler =
      _g_set_print_handlerPtr.asFunction<GPrintFunc Function(GPrintFunc)>();

  void g_printerr(
    ffi.Pointer<gchar> format,
  ) {
    return _g_printerr(
      format,
    );
  }

  late final _g_printerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_printerr');
  late final _g_printerr =
      _g_printerrPtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  GPrintFunc g_set_printerr_handler(
    GPrintFunc func,
  ) {
    return _g_set_printerr_handler(
      func,
    );
  }

  late final _g_set_printerr_handlerPtr =
      _lookup<ffi.NativeFunction<GPrintFunc Function(GPrintFunc)>>(
          'g_set_printerr_handler');
  late final _g_set_printerr_handler =
      _g_set_printerr_handlerPtr.asFunction<GPrintFunc Function(GPrintFunc)>();

  int g_option_error_quark() {
    return _g_option_error_quark();
  }

  late final _g_option_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_option_error_quark');
  late final _g_option_error_quark =
      _g_option_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GOptionContext> g_option_context_new(
    ffi.Pointer<gchar> parameter_string,
  ) {
    return _g_option_context_new(
      parameter_string,
    );
  }

  late final _g_option_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionContext> Function(
              ffi.Pointer<gchar>)>>('g_option_context_new');
  late final _g_option_context_new = _g_option_context_newPtr
      .asFunction<ffi.Pointer<GOptionContext> Function(ffi.Pointer<gchar>)>();

  void g_option_context_set_summary(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<gchar> summary,
  ) {
    return _g_option_context_set_summary(
      context,
      summary,
    );
  }

  late final _g_option_context_set_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<gchar>)>>('g_option_context_set_summary');
  late final _g_option_context_set_summary =
      _g_option_context_set_summaryPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_option_context_get_summary(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_summary(
      context,
    );
  }

  late final _g_option_context_get_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GOptionContext>)>>('g_option_context_get_summary');
  late final _g_option_context_get_summary = _g_option_context_get_summaryPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_description(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<gchar> description,
  ) {
    return _g_option_context_set_description(
      context,
      description,
    );
  }

  late final _g_option_context_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<gchar>)>>('g_option_context_set_description');
  late final _g_option_context_set_description =
      _g_option_context_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_option_context_get_description(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_description(
      context,
    );
  }

  late final _g_option_context_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_description');
  late final _g_option_context_get_description =
      _g_option_context_get_descriptionPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_free(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_free(
      context,
    );
  }

  late final _g_option_context_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_free');
  late final _g_option_context_free = _g_option_context_freePtr
      .asFunction<void Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_help_enabled(
    ffi.Pointer<GOptionContext> context,
    int help_enabled,
  ) {
    return _g_option_context_set_help_enabled(
      context,
      help_enabled,
    );
  }

  late final _g_option_context_set_help_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_help_enabled');
  late final _g_option_context_set_help_enabled =
      _g_option_context_set_help_enabledPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_help_enabled(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_help_enabled(
      context,
    );
  }

  late final _g_option_context_get_help_enabledPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_help_enabled');
  late final _g_option_context_get_help_enabled =
      _g_option_context_get_help_enabledPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_ignore_unknown_options(
    ffi.Pointer<GOptionContext> context,
    int ignore_unknown,
  ) {
    return _g_option_context_set_ignore_unknown_options(
      context,
      ignore_unknown,
    );
  }

  late final _g_option_context_set_ignore_unknown_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_ignore_unknown_options');
  late final _g_option_context_set_ignore_unknown_options =
      _g_option_context_set_ignore_unknown_optionsPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_ignore_unknown_options(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_ignore_unknown_options(
      context,
    );
  }

  late final _g_option_context_get_ignore_unknown_optionsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_ignore_unknown_options');
  late final _g_option_context_get_ignore_unknown_options =
      _g_option_context_get_ignore_unknown_optionsPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_strict_posix(
    ffi.Pointer<GOptionContext> context,
    int strict_posix,
  ) {
    return _g_option_context_set_strict_posix(
      context,
      strict_posix,
    );
  }

  late final _g_option_context_set_strict_posixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_strict_posix');
  late final _g_option_context_set_strict_posix =
      _g_option_context_set_strict_posixPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_strict_posix(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_strict_posix(
      context,
    );
  }

  late final _g_option_context_get_strict_posixPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_strict_posix');
  late final _g_option_context_get_strict_posix =
      _g_option_context_get_strict_posixPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_add_main_entries(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionEntry> entries,
    ffi.Pointer<gchar> translation_domain,
  ) {
    return _g_option_context_add_main_entries(
      context,
      entries,
      translation_domain,
    );
  }

  late final _g_option_context_add_main_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionEntry>,
              ffi.Pointer<gchar>)>>('g_option_context_add_main_entries');
  late final _g_option_context_add_main_entries =
      _g_option_context_add_main_entriesPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionEntry>,
              ffi.Pointer<gchar>)>();

  int g_option_context_parse(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<gint> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> argv,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_option_context_parse(
      context,
      argc,
      argv,
      error,
    );
  }

  late final _g_option_context_parsePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_option_context_parse');
  late final _g_option_context_parse = _g_option_context_parsePtr.asFunction<
      int Function(
          ffi.Pointer<GOptionContext>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_option_context_parse_strv(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> arguments,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_option_context_parse_strv(
      context,
      arguments,
      error,
    );
  }

  late final _g_option_context_parse_strvPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOptionContext>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_option_context_parse_strv');
  late final _g_option_context_parse_strv =
      _g_option_context_parse_strvPtr.asFunction<
          int Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_option_context_set_translate_func(
    ffi.Pointer<GOptionContext> context,
    GTranslateFunc func,
    gpointer data,
    GDestroyNotify destroy_notify,
  ) {
    return _g_option_context_set_translate_func(
      context,
      func,
      data,
      destroy_notify,
    );
  }

  late final _g_option_context_set_translate_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOptionContext>,
              GTranslateFunc,
              gpointer,
              GDestroyNotify)>>('g_option_context_set_translate_func');
  late final _g_option_context_set_translate_func =
      _g_option_context_set_translate_funcPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, GTranslateFunc, gpointer,
              GDestroyNotify)>();

  void g_option_context_set_translation_domain(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<gchar> domain,
  ) {
    return _g_option_context_set_translation_domain(
      context,
      domain,
    );
  }

  late final _g_option_context_set_translation_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<gchar>)>>('g_option_context_set_translation_domain');
  late final _g_option_context_set_translation_domain =
      _g_option_context_set_translation_domainPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<gchar>)>();

  void g_option_context_add_group(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_add_group(
      context,
      group,
    );
  }

  late final _g_option_context_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_add_group');
  late final _g_option_context_add_group =
      _g_option_context_add_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionGroup>)>();

  void g_option_context_set_main_group(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_set_main_group(
      context,
      group,
    );
  }

  late final _g_option_context_set_main_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_set_main_group');
  late final _g_option_context_set_main_group =
      _g_option_context_set_main_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_context_get_main_group(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_main_group(
      context,
    );
  }

  late final _g_option_context_get_main_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<GOptionContext>)>>('g_option_context_get_main_group');
  late final _g_option_context_get_main_group =
      _g_option_context_get_main_groupPtr.asFunction<
          ffi.Pointer<GOptionGroup> Function(ffi.Pointer<GOptionContext>)>();

  ffi.Pointer<gchar> g_option_context_get_help(
    ffi.Pointer<GOptionContext> context,
    int main_help,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_get_help(
      context,
      main_help,
      group,
    );
  }

  late final _g_option_context_get_helpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GOptionContext>, gboolean,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_get_help');
  late final _g_option_context_get_help =
      _g_option_context_get_helpPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GOptionContext>, int, ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_group_new(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> description,
    ffi.Pointer<gchar> help_description,
    gpointer user_data,
    GDestroyNotify destroy,
  ) {
    return _g_option_group_new(
      name,
      description,
      help_description,
      user_data,
      destroy,
    );
  }

  late final _g_option_group_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gpointer,
              GDestroyNotify)>>('g_option_group_new');
  late final _g_option_group_new = _g_option_group_newPtr.asFunction<
      ffi.Pointer<GOptionGroup> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, gpointer, GDestroyNotify)>();

  void g_option_group_set_parse_hooks(
    ffi.Pointer<GOptionGroup> group,
    GOptionParseFunc pre_parse_func,
    GOptionParseFunc post_parse_func,
  ) {
    return _g_option_group_set_parse_hooks(
      group,
      pre_parse_func,
      post_parse_func,
    );
  }

  late final _g_option_group_set_parse_hooksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>, GOptionParseFunc,
              GOptionParseFunc)>>('g_option_group_set_parse_hooks');
  late final _g_option_group_set_parse_hooks =
      _g_option_group_set_parse_hooksPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionGroup>, GOptionParseFunc, GOptionParseFunc)>();

  void g_option_group_set_error_hook(
    ffi.Pointer<GOptionGroup> group,
    GOptionErrorFunc error_func,
  ) {
    return _g_option_group_set_error_hook(
      group,
      error_func,
    );
  }

  late final _g_option_group_set_error_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              GOptionErrorFunc)>>('g_option_group_set_error_hook');
  late final _g_option_group_set_error_hook = _g_option_group_set_error_hookPtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>, GOptionErrorFunc)>();

  void g_option_group_free(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_free(
      group,
    );
  }

  late final _g_option_group_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionGroup>)>>(
          'g_option_group_free');
  late final _g_option_group_free = _g_option_group_freePtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_group_ref(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_ref(
      group,
    );
  }

  late final _g_option_group_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<GOptionGroup>)>>('g_option_group_ref');
  late final _g_option_group_ref = _g_option_group_refPtr.asFunction<
      ffi.Pointer<GOptionGroup> Function(ffi.Pointer<GOptionGroup>)>();

  void g_option_group_unref(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_unref(
      group,
    );
  }

  late final _g_option_group_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionGroup>)>>(
          'g_option_group_unref');
  late final _g_option_group_unref = _g_option_group_unrefPtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>)>();

  void g_option_group_add_entries(
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer<GOptionEntry> entries,
  ) {
    return _g_option_group_add_entries(
      group,
      entries,
    );
  }

  late final _g_option_group_add_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              ffi.Pointer<GOptionEntry>)>>('g_option_group_add_entries');
  late final _g_option_group_add_entries =
      _g_option_group_add_entriesPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionGroup>, ffi.Pointer<GOptionEntry>)>();

  void g_option_group_set_translate_func(
    ffi.Pointer<GOptionGroup> group,
    GTranslateFunc func,
    gpointer data,
    GDestroyNotify destroy_notify,
  ) {
    return _g_option_group_set_translate_func(
      group,
      func,
      data,
      destroy_notify,
    );
  }

  late final _g_option_group_set_translate_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>, GTranslateFunc, gpointer,
              GDestroyNotify)>>('g_option_group_set_translate_func');
  late final _g_option_group_set_translate_func =
      _g_option_group_set_translate_funcPtr.asFunction<
          void Function(ffi.Pointer<GOptionGroup>, GTranslateFunc, gpointer,
              GDestroyNotify)>();

  void g_option_group_set_translation_domain(
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer<gchar> domain,
  ) {
    return _g_option_group_set_translation_domain(
      group,
      domain,
    );
  }

  late final _g_option_group_set_translation_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              ffi.Pointer<gchar>)>>('g_option_group_set_translation_domain');
  late final _g_option_group_set_translation_domain =
      _g_option_group_set_translation_domainPtr.asFunction<
          void Function(ffi.Pointer<GOptionGroup>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GPatternSpec> g_pattern_spec_new(
    ffi.Pointer<gchar> pattern,
  ) {
    return _g_pattern_spec_new(
      pattern,
    );
  }

  late final _g_pattern_spec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPatternSpec> Function(
              ffi.Pointer<gchar>)>>('g_pattern_spec_new');
  late final _g_pattern_spec_new = _g_pattern_spec_newPtr
      .asFunction<ffi.Pointer<GPatternSpec> Function(ffi.Pointer<gchar>)>();

  void g_pattern_spec_free(
    ffi.Pointer<GPatternSpec> pspec,
  ) {
    return _g_pattern_spec_free(
      pspec,
    );
  }

  late final _g_pattern_spec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPatternSpec>)>>(
          'g_pattern_spec_free');
  late final _g_pattern_spec_free = _g_pattern_spec_freePtr
      .asFunction<void Function(ffi.Pointer<GPatternSpec>)>();

  ffi.Pointer<GPatternSpec> g_pattern_spec_copy(
    ffi.Pointer<GPatternSpec> pspec,
  ) {
    return _g_pattern_spec_copy(
      pspec,
    );
  }

  late final _g_pattern_spec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPatternSpec> Function(
              ffi.Pointer<GPatternSpec>)>>('g_pattern_spec_copy');
  late final _g_pattern_spec_copy = _g_pattern_spec_copyPtr.asFunction<
      ffi.Pointer<GPatternSpec> Function(ffi.Pointer<GPatternSpec>)>();

  int g_pattern_spec_equal(
    ffi.Pointer<GPatternSpec> pspec1,
    ffi.Pointer<GPatternSpec> pspec2,
  ) {
    return _g_pattern_spec_equal(
      pspec1,
      pspec2,
    );
  }

  late final _g_pattern_spec_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<GPatternSpec>)>>('g_pattern_spec_equal');
  late final _g_pattern_spec_equal = _g_pattern_spec_equalPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<GPatternSpec>)>();

  int g_pattern_spec_match(
    ffi.Pointer<GPatternSpec> pspec,
    int string_length,
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> string_reversed,
  ) {
    return _g_pattern_spec_match(
      pspec,
      string_length,
      string,
      string_reversed,
    );
  }

  late final _g_pattern_spec_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>, gsize,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_pattern_spec_match');
  late final _g_pattern_spec_match = _g_pattern_spec_matchPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, int, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  int g_pattern_spec_match_string(
    ffi.Pointer<GPatternSpec> pspec,
    ffi.Pointer<gchar> string,
  ) {
    return _g_pattern_spec_match_string(
      pspec,
      string,
    );
  }

  late final _g_pattern_spec_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<gchar>)>>('g_pattern_spec_match_string');
  late final _g_pattern_spec_match_string =
      _g_pattern_spec_match_stringPtr.asFunction<
          int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<gchar>)>();

  int g_pattern_match(
    ffi.Pointer<GPatternSpec> pspec,
    int string_length,
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> string_reversed,
  ) {
    return _g_pattern_match(
      pspec,
      string_length,
      string,
      string_reversed,
    );
  }

  late final _g_pattern_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>, guint,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_pattern_match');
  late final _g_pattern_match = _g_pattern_matchPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, int, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  int g_pattern_match_string(
    ffi.Pointer<GPatternSpec> pspec,
    ffi.Pointer<gchar> string,
  ) {
    return _g_pattern_match_string(
      pspec,
      string,
    );
  }

  late final _g_pattern_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<gchar>)>>('g_pattern_match_string');
  late final _g_pattern_match_string = _g_pattern_match_stringPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<gchar>)>();

  int g_pattern_match_simple(
    ffi.Pointer<gchar> pattern,
    ffi.Pointer<gchar> string,
  ) {
    return _g_pattern_match_simple(
      pattern,
      string,
    );
  }

  late final _g_pattern_match_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_pattern_match_simple');
  late final _g_pattern_match_simple = _g_pattern_match_simplePtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_spaced_primes_closest(
    int num,
  ) {
    return _g_spaced_primes_closest(
      num,
    );
  }

  late final _g_spaced_primes_closestPtr =
      _lookup<ffi.NativeFunction<guint Function(guint)>>(
          'g_spaced_primes_closest');
  late final _g_spaced_primes_closest =
      _g_spaced_primes_closestPtr.asFunction<int Function(int)>();

  void g_qsort_with_data(
    gconstpointer pbase,
    int total_elems,
    int size,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_qsort_with_data(
      pbase,
      total_elems,
      size,
      compare_func,
      user_data,
    );
  }

  late final _g_qsort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gconstpointer, gint, gsize, GCompareDataFunc,
              gpointer)>>('g_qsort_with_data');
  late final _g_qsort_with_data = _g_qsort_with_dataPtr.asFunction<
      void Function(gconstpointer, int, int, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GQueue> g_queue_new() {
    return _g_queue_new();
  }

  late final _g_queue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GQueue> Function()>>(
          'g_queue_new');
  late final _g_queue_new =
      _g_queue_newPtr.asFunction<ffi.Pointer<GQueue> Function()>();

  void g_queue_free(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_free(
      queue,
    );
  }

  late final _g_queue_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_free');
  late final _g_queue_free =
      _g_queue_freePtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  void g_queue_free_full(
    ffi.Pointer<GQueue> queue,
    GDestroyNotify free_func,
  ) {
    return _g_queue_free_full(
      queue,
      free_func,
    );
  }

  late final _g_queue_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GDestroyNotify)>>('g_queue_free_full');
  late final _g_queue_free_full = _g_queue_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GDestroyNotify)>();

  void g_queue_init(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_init(
      queue,
    );
  }

  late final _g_queue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_init');
  late final _g_queue_init =
      _g_queue_initPtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  void g_queue_clear(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_clear(
      queue,
    );
  }

  late final _g_queue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_clear');
  late final _g_queue_clear =
      _g_queue_clearPtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  int g_queue_is_empty(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_is_empty(
      queue,
    );
  }

  late final _g_queue_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GQueue>)>>(
          'g_queue_is_empty');
  late final _g_queue_is_empty =
      _g_queue_is_emptyPtr.asFunction<int Function(ffi.Pointer<GQueue>)>();

  void g_queue_clear_full(
    ffi.Pointer<GQueue> queue,
    GDestroyNotify free_func,
  ) {
    return _g_queue_clear_full(
      queue,
      free_func,
    );
  }

  late final _g_queue_clear_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GDestroyNotify)>>('g_queue_clear_full');
  late final _g_queue_clear_full = _g_queue_clear_fullPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GDestroyNotify)>();

  int g_queue_get_length(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_get_length(
      queue,
    );
  }

  late final _g_queue_get_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GQueue>)>>(
          'g_queue_get_length');
  late final _g_queue_get_length =
      _g_queue_get_lengthPtr.asFunction<int Function(ffi.Pointer<GQueue>)>();

  void g_queue_reverse(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_reverse(
      queue,
    );
  }

  late final _g_queue_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_reverse');
  late final _g_queue_reverse =
      _g_queue_reversePtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GQueue> g_queue_copy(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_copy(
      queue,
    );
  }

  late final _g_queue_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GQueue> Function(ffi.Pointer<GQueue>)>>('g_queue_copy');
  late final _g_queue_copy = _g_queue_copyPtr
      .asFunction<ffi.Pointer<GQueue> Function(ffi.Pointer<GQueue>)>();

  void g_queue_foreach(
    ffi.Pointer<GQueue> queue,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_queue_foreach(
      queue,
      func,
      user_data,
    );
  }

  late final _g_queue_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GFunc, gpointer)>>('g_queue_foreach');
  late final _g_queue_foreach = _g_queue_foreachPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GFunc, gpointer)>();

  ffi.Pointer<GList> g_queue_find(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_find(
      queue,
      data,
    );
  }

  late final _g_queue_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_find');
  late final _g_queue_find = _g_queue_findPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, gconstpointer)>();

  ffi.Pointer<GList> g_queue_find_custom(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_queue_find_custom(
      queue,
      data,
      func,
    );
  }

  late final _g_queue_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, gconstpointer,
              GCompareFunc)>>('g_queue_find_custom');
  late final _g_queue_find_custom = _g_queue_find_customPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GQueue>, gconstpointer, GCompareFunc)>();

  void g_queue_sort(
    ffi.Pointer<GQueue> queue,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_queue_sort(
      queue,
      compare_func,
      user_data,
    );
  }

  late final _g_queue_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, GCompareDataFunc,
              gpointer)>>('g_queue_sort');
  late final _g_queue_sort = _g_queue_sortPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, GCompareDataFunc, gpointer)>();

  void g_queue_push_head(
    ffi.Pointer<GQueue> queue,
    gpointer data,
  ) {
    return _g_queue_push_head(
      queue,
      data,
    );
  }

  late final _g_queue_push_headPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>, gpointer)>>(
      'g_queue_push_head');
  late final _g_queue_push_head = _g_queue_push_headPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, gpointer)>();

  void g_queue_push_tail(
    ffi.Pointer<GQueue> queue,
    gpointer data,
  ) {
    return _g_queue_push_tail(
      queue,
      data,
    );
  }

  late final _g_queue_push_tailPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>, gpointer)>>(
      'g_queue_push_tail');
  late final _g_queue_push_tail = _g_queue_push_tailPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, gpointer)>();

  void g_queue_push_nth(
    ffi.Pointer<GQueue> queue,
    gpointer data,
    int n,
  ) {
    return _g_queue_push_nth(
      queue,
      data,
      n,
    );
  }

  late final _g_queue_push_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, gpointer, gint)>>('g_queue_push_nth');
  late final _g_queue_push_nth = _g_queue_push_nthPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, gpointer, int)>();

  gpointer g_queue_pop_head(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_head(
      queue,
    );
  }

  late final _g_queue_pop_headPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_pop_head');
  late final _g_queue_pop_head =
      _g_queue_pop_headPtr.asFunction<gpointer Function(ffi.Pointer<GQueue>)>();

  gpointer g_queue_pop_tail(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_tail(
      queue,
    );
  }

  late final _g_queue_pop_tailPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_pop_tail');
  late final _g_queue_pop_tail =
      _g_queue_pop_tailPtr.asFunction<gpointer Function(ffi.Pointer<GQueue>)>();

  gpointer g_queue_pop_nth(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_pop_nth(
      queue,
      n,
    );
  }

  late final _g_queue_pop_nthPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>, guint)>>(
      'g_queue_pop_nth');
  late final _g_queue_pop_nth = _g_queue_pop_nthPtr
      .asFunction<gpointer Function(ffi.Pointer<GQueue>, int)>();

  gpointer g_queue_peek_head(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_head(
      queue,
    );
  }

  late final _g_queue_peek_headPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_peek_head');
  late final _g_queue_peek_head = _g_queue_peek_headPtr
      .asFunction<gpointer Function(ffi.Pointer<GQueue>)>();

  gpointer g_queue_peek_tail(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_tail(
      queue,
    );
  }

  late final _g_queue_peek_tailPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_peek_tail');
  late final _g_queue_peek_tail = _g_queue_peek_tailPtr
      .asFunction<gpointer Function(ffi.Pointer<GQueue>)>();

  gpointer g_queue_peek_nth(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_peek_nth(
      queue,
      n,
    );
  }

  late final _g_queue_peek_nthPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GQueue>, guint)>>(
      'g_queue_peek_nth');
  late final _g_queue_peek_nth = _g_queue_peek_nthPtr
      .asFunction<gpointer Function(ffi.Pointer<GQueue>, int)>();

  int g_queue_index(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_index(
      queue,
      data,
    );
  }

  late final _g_queue_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_index');
  late final _g_queue_index = _g_queue_indexPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  int g_queue_remove(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_remove(
      queue,
      data,
    );
  }

  late final _g_queue_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_remove');
  late final _g_queue_remove = _g_queue_removePtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  int g_queue_remove_all(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_remove_all(
      queue,
      data,
    );
  }

  late final _g_queue_remove_allPtr = _lookup<
          ffi
          .NativeFunction<guint Function(ffi.Pointer<GQueue>, gconstpointer)>>(
      'g_queue_remove_all');
  late final _g_queue_remove_all = _g_queue_remove_allPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  void g_queue_insert_before(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    gpointer data,
  ) {
    return _g_queue_insert_before(
      queue,
      sibling,
      data,
    );
  }

  late final _g_queue_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              gpointer)>>('g_queue_insert_before');
  late final _g_queue_insert_before = _g_queue_insert_beforePtr.asFunction<
      void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>, gpointer)>();

  void g_queue_insert_before_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_insert_before_link(
      queue,
      sibling,
      link_,
    );
  }

  late final _g_queue_insert_before_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_queue_insert_before_link');
  late final _g_queue_insert_before_link =
      _g_queue_insert_before_linkPtr.asFunction<
          void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  void g_queue_insert_after(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    gpointer data,
  ) {
    return _g_queue_insert_after(
      queue,
      sibling,
      data,
    );
  }

  late final _g_queue_insert_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              gpointer)>>('g_queue_insert_after');
  late final _g_queue_insert_after = _g_queue_insert_afterPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>, gpointer)>();

  void g_queue_insert_after_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_insert_after_link(
      queue,
      sibling,
      link_,
    );
  }

  late final _g_queue_insert_after_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_queue_insert_after_link');
  late final _g_queue_insert_after_link =
      _g_queue_insert_after_linkPtr.asFunction<
          void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  void g_queue_insert_sorted(
    ffi.Pointer<GQueue> queue,
    gpointer data,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_queue_insert_sorted(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_queue_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, gpointer, GCompareDataFunc,
              gpointer)>>('g_queue_insert_sorted');
  late final _g_queue_insert_sorted = _g_queue_insert_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<GQueue>, gpointer, GCompareDataFunc, gpointer)>();

  void g_queue_push_head_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_head_link(
      queue,
      link_,
    );
  }

  late final _g_queue_push_head_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>,
              ffi.Pointer<GList>)>>('g_queue_push_head_link');
  late final _g_queue_push_head_link = _g_queue_push_head_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_push_tail_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_tail_link(
      queue,
      link_,
    );
  }

  late final _g_queue_push_tail_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>,
              ffi.Pointer<GList>)>>('g_queue_push_tail_link');
  late final _g_queue_push_tail_link = _g_queue_push_tail_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_push_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_nth_link(
      queue,
      n,
      link_,
    );
  }

  late final _g_queue_push_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, gint,
              ffi.Pointer<GList>)>>('g_queue_push_nth_link');
  late final _g_queue_push_nth_link = _g_queue_push_nth_linkPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, int, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_queue_pop_head_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_head_link(
      queue,
    );
  }

  late final _g_queue_pop_head_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_pop_head_link');
  late final _g_queue_pop_head_link = _g_queue_pop_head_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_pop_tail_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_tail_link(
      queue,
    );
  }

  late final _g_queue_pop_tail_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_pop_tail_link');
  late final _g_queue_pop_tail_link = _g_queue_pop_tail_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_pop_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_pop_nth_link(
      queue,
      n,
    );
  }

  late final _g_queue_pop_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, guint)>>('g_queue_pop_nth_link');
  late final _g_queue_pop_nth_link = _g_queue_pop_nth_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, int)>();

  ffi.Pointer<GList> g_queue_peek_head_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_head_link(
      queue,
    );
  }

  late final _g_queue_peek_head_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_peek_head_link');
  late final _g_queue_peek_head_link = _g_queue_peek_head_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_peek_tail_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_tail_link(
      queue,
    );
  }

  late final _g_queue_peek_tail_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_peek_tail_link');
  late final _g_queue_peek_tail_link = _g_queue_peek_tail_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_peek_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_peek_nth_link(
      queue,
      n,
    );
  }

  late final _g_queue_peek_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, guint)>>('g_queue_peek_nth_link');
  late final _g_queue_peek_nth_link = _g_queue_peek_nth_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, int)>();

  int g_queue_link_index(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_link_index(
      queue,
      link_,
    );
  }

  late final _g_queue_link_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_link_index');
  late final _g_queue_link_index = _g_queue_link_indexPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_unlink(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_unlink(
      queue,
      link_,
    );
  }

  late final _g_queue_unlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_unlink');
  late final _g_queue_unlink = _g_queue_unlinkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_delete_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_delete_link(
      queue,
      link_,
    );
  }

  late final _g_queue_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_delete_link');
  late final _g_queue_delete_link = _g_queue_delete_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  ffi.Pointer<GRand> g_rand_new_with_seed(
    int seed,
  ) {
    return _g_rand_new_with_seed(
      seed,
    );
  }

  late final _g_rand_new_with_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRand> Function(guint32)>>(
          'g_rand_new_with_seed');
  late final _g_rand_new_with_seed =
      _g_rand_new_with_seedPtr.asFunction<ffi.Pointer<GRand> Function(int)>();

  ffi.Pointer<GRand> g_rand_new_with_seed_array(
    ffi.Pointer<guint32> seed,
    int seed_length,
  ) {
    return _g_rand_new_with_seed_array(
      seed,
      seed_length,
    );
  }

  late final _g_rand_new_with_seed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRand> Function(
              ffi.Pointer<guint32>, guint)>>('g_rand_new_with_seed_array');
  late final _g_rand_new_with_seed_array = _g_rand_new_with_seed_arrayPtr
      .asFunction<ffi.Pointer<GRand> Function(ffi.Pointer<guint32>, int)>();

  ffi.Pointer<GRand> g_rand_new() {
    return _g_rand_new();
  }

  late final _g_rand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRand> Function()>>('g_rand_new');
  late final _g_rand_new =
      _g_rand_newPtr.asFunction<ffi.Pointer<GRand> Function()>();

  void g_rand_free(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_free(
      rand_,
    );
  }

  late final _g_rand_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRand>)>>(
          'g_rand_free');
  late final _g_rand_free =
      _g_rand_freePtr.asFunction<void Function(ffi.Pointer<GRand>)>();

  ffi.Pointer<GRand> g_rand_copy(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_copy(
      rand_,
    );
  }

  late final _g_rand_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GRand> Function(ffi.Pointer<GRand>)>>(
      'g_rand_copy');
  late final _g_rand_copy = _g_rand_copyPtr
      .asFunction<ffi.Pointer<GRand> Function(ffi.Pointer<GRand>)>();

  void g_rand_set_seed(
    ffi.Pointer<GRand> rand_,
    int seed,
  ) {
    return _g_rand_set_seed(
      rand_,
      seed,
    );
  }

  late final _g_rand_set_seedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRand>, guint32)>>(
      'g_rand_set_seed');
  late final _g_rand_set_seed =
      _g_rand_set_seedPtr.asFunction<void Function(ffi.Pointer<GRand>, int)>();

  void g_rand_set_seed_array(
    ffi.Pointer<GRand> rand_,
    ffi.Pointer<guint32> seed,
    int seed_length,
  ) {
    return _g_rand_set_seed_array(
      rand_,
      seed,
      seed_length,
    );
  }

  late final _g_rand_set_seed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GRand>, ffi.Pointer<guint32>,
              guint)>>('g_rand_set_seed_array');
  late final _g_rand_set_seed_array = _g_rand_set_seed_arrayPtr.asFunction<
      void Function(ffi.Pointer<GRand>, ffi.Pointer<guint32>, int)>();

  int g_rand_int(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_int(
      rand_,
    );
  }

  late final _g_rand_intPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GRand>)>>(
          'g_rand_int');
  late final _g_rand_int =
      _g_rand_intPtr.asFunction<int Function(ffi.Pointer<GRand>)>();

  int g_rand_int_range(
    ffi.Pointer<GRand> rand_,
    int begin,
    int end,
  ) {
    return _g_rand_int_range(
      rand_,
      begin,
      end,
    );
  }

  late final _g_rand_int_rangePtr = _lookup<
          ffi
          .NativeFunction<gint32 Function(ffi.Pointer<GRand>, gint32, gint32)>>(
      'g_rand_int_range');
  late final _g_rand_int_range = _g_rand_int_rangePtr
      .asFunction<int Function(ffi.Pointer<GRand>, int, int)>();

  double g_rand_double(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_double(
      rand_,
    );
  }

  late final _g_rand_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GRand>)>>(
          'g_rand_double');
  late final _g_rand_double =
      _g_rand_doublePtr.asFunction<double Function(ffi.Pointer<GRand>)>();

  double g_rand_double_range(
    ffi.Pointer<GRand> rand_,
    double begin,
    double end,
  ) {
    return _g_rand_double_range(
      rand_,
      begin,
      end,
    );
  }

  late final _g_rand_double_rangePtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GRand>, gdouble, gdouble)>>('g_rand_double_range');
  late final _g_rand_double_range = _g_rand_double_rangePtr
      .asFunction<double Function(ffi.Pointer<GRand>, double, double)>();

  void g_random_set_seed(
    int seed,
  ) {
    return _g_random_set_seed(
      seed,
    );
  }

  late final _g_random_set_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint32)>>(
          'g_random_set_seed');
  late final _g_random_set_seed =
      _g_random_set_seedPtr.asFunction<void Function(int)>();

  int g_random_int() {
    return _g_random_int();
  }

  late final _g_random_intPtr =
      _lookup<ffi.NativeFunction<guint32 Function()>>('g_random_int');
  late final _g_random_int = _g_random_intPtr.asFunction<int Function()>();

  int g_random_int_range(
    int begin,
    int end,
  ) {
    return _g_random_int_range(
      begin,
      end,
    );
  }

  late final _g_random_int_rangePtr =
      _lookup<ffi.NativeFunction<gint32 Function(gint32, gint32)>>(
          'g_random_int_range');
  late final _g_random_int_range =
      _g_random_int_rangePtr.asFunction<int Function(int, int)>();

  double g_random_double() {
    return _g_random_double();
  }

  late final _g_random_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function()>>('g_random_double');
  late final _g_random_double =
      _g_random_doublePtr.asFunction<double Function()>();

  double g_random_double_range(
    double begin,
    double end,
  ) {
    return _g_random_double_range(
      begin,
      end,
    );
  }

  late final _g_random_double_rangePtr =
      _lookup<ffi.NativeFunction<gdouble Function(gdouble, gdouble)>>(
          'g_random_double_range');
  late final _g_random_double_range =
      _g_random_double_rangePtr.asFunction<double Function(double, double)>();

  gpointer g_rc_box_alloc(
    int block_size,
  ) {
    return _g_rc_box_alloc(
      block_size,
    );
  }

  late final _g_rc_box_allocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_rc_box_alloc');
  late final _g_rc_box_alloc =
      _g_rc_box_allocPtr.asFunction<gpointer Function(int)>();

  gpointer g_rc_box_alloc0(
    int block_size,
  ) {
    return _g_rc_box_alloc0(
      block_size,
    );
  }

  late final _g_rc_box_alloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_rc_box_alloc0');
  late final _g_rc_box_alloc0 =
      _g_rc_box_alloc0Ptr.asFunction<gpointer Function(int)>();

  gpointer g_rc_box_dup(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_rc_box_dup(
      block_size,
      mem_block,
    );
  }

  late final _g_rc_box_dupPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gconstpointer)>>(
          'g_rc_box_dup');
  late final _g_rc_box_dup =
      _g_rc_box_dupPtr.asFunction<gpointer Function(int, gconstpointer)>();

  gpointer g_rc_box_acquire(
    gpointer mem_block,
  ) {
    return _g_rc_box_acquire(
      mem_block,
    );
  }

  late final _g_rc_box_acquirePtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_rc_box_acquire');
  late final _g_rc_box_acquire =
      _g_rc_box_acquirePtr.asFunction<gpointer Function(gpointer)>();

  void g_rc_box_release(
    gpointer mem_block,
  ) {
    return _g_rc_box_release(
      mem_block,
    );
  }

  late final _g_rc_box_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_rc_box_release');
  late final _g_rc_box_release =
      _g_rc_box_releasePtr.asFunction<void Function(gpointer)>();

  void g_rc_box_release_full(
    gpointer mem_block,
    GDestroyNotify clear_func,
  ) {
    return _g_rc_box_release_full(
      mem_block,
      clear_func,
    );
  }

  late final _g_rc_box_release_fullPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, GDestroyNotify)>>(
          'g_rc_box_release_full');
  late final _g_rc_box_release_full = _g_rc_box_release_fullPtr
      .asFunction<void Function(gpointer, GDestroyNotify)>();

  int g_rc_box_get_size(
    gpointer mem_block,
  ) {
    return _g_rc_box_get_size(
      mem_block,
    );
  }

  late final _g_rc_box_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(gpointer)>>(
          'g_rc_box_get_size');
  late final _g_rc_box_get_size =
      _g_rc_box_get_sizePtr.asFunction<int Function(gpointer)>();

  gpointer g_atomic_rc_box_alloc(
    int block_size,
  ) {
    return _g_atomic_rc_box_alloc(
      block_size,
    );
  }

  late final _g_atomic_rc_box_allocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>(
          'g_atomic_rc_box_alloc');
  late final _g_atomic_rc_box_alloc =
      _g_atomic_rc_box_allocPtr.asFunction<gpointer Function(int)>();

  gpointer g_atomic_rc_box_alloc0(
    int block_size,
  ) {
    return _g_atomic_rc_box_alloc0(
      block_size,
    );
  }

  late final _g_atomic_rc_box_alloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>(
          'g_atomic_rc_box_alloc0');
  late final _g_atomic_rc_box_alloc0 =
      _g_atomic_rc_box_alloc0Ptr.asFunction<gpointer Function(int)>();

  gpointer g_atomic_rc_box_dup(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_atomic_rc_box_dup(
      block_size,
      mem_block,
    );
  }

  late final _g_atomic_rc_box_dupPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gconstpointer)>>(
          'g_atomic_rc_box_dup');
  late final _g_atomic_rc_box_dup = _g_atomic_rc_box_dupPtr
      .asFunction<gpointer Function(int, gconstpointer)>();

  gpointer g_atomic_rc_box_acquire(
    gpointer mem_block,
  ) {
    return _g_atomic_rc_box_acquire(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_acquirePtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_atomic_rc_box_acquire');
  late final _g_atomic_rc_box_acquire =
      _g_atomic_rc_box_acquirePtr.asFunction<gpointer Function(gpointer)>();

  void g_atomic_rc_box_release(
    gpointer mem_block,
  ) {
    return _g_atomic_rc_box_release(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_atomic_rc_box_release');
  late final _g_atomic_rc_box_release =
      _g_atomic_rc_box_releasePtr.asFunction<void Function(gpointer)>();

  void g_atomic_rc_box_release_full(
    gpointer mem_block,
    GDestroyNotify clear_func,
  ) {
    return _g_atomic_rc_box_release_full(
      mem_block,
      clear_func,
    );
  }

  late final _g_atomic_rc_box_release_fullPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, GDestroyNotify)>>(
          'g_atomic_rc_box_release_full');
  late final _g_atomic_rc_box_release_full = _g_atomic_rc_box_release_fullPtr
      .asFunction<void Function(gpointer, GDestroyNotify)>();

  int g_atomic_rc_box_get_size(
    gpointer mem_block,
  ) {
    return _g_atomic_rc_box_get_size(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(gpointer)>>(
          'g_atomic_rc_box_get_size');
  late final _g_atomic_rc_box_get_size =
      _g_atomic_rc_box_get_sizePtr.asFunction<int Function(gpointer)>();

  void g_ref_count_init(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_init(
      rc,
    );
  }

  late final _g_ref_count_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_init');
  late final _g_ref_count_init =
      _g_ref_count_initPtr.asFunction<void Function(ffi.Pointer<grefcount>)>();

  void g_ref_count_inc(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_inc(
      rc,
    );
  }

  late final _g_ref_count_incPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_inc');
  late final _g_ref_count_inc =
      _g_ref_count_incPtr.asFunction<void Function(ffi.Pointer<grefcount>)>();

  int g_ref_count_dec(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_dec(
      rc,
    );
  }

  late final _g_ref_count_decPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_dec');
  late final _g_ref_count_dec =
      _g_ref_count_decPtr.asFunction<int Function(ffi.Pointer<grefcount>)>();

  int g_ref_count_compare(
    ffi.Pointer<grefcount> rc,
    int val,
  ) {
    return _g_ref_count_compare(
      rc,
      val,
    );
  }

  late final _g_ref_count_comparePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<grefcount>, gint)>>(
      'g_ref_count_compare');
  late final _g_ref_count_compare = _g_ref_count_comparePtr
      .asFunction<int Function(ffi.Pointer<grefcount>, int)>();

  void g_atomic_ref_count_init(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_init(
      arc,
    );
  }

  late final _g_atomic_ref_count_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_init');
  late final _g_atomic_ref_count_init = _g_atomic_ref_count_initPtr
      .asFunction<void Function(ffi.Pointer<gatomicrefcount>)>();

  void g_atomic_ref_count_inc(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_inc(
      arc,
    );
  }

  late final _g_atomic_ref_count_incPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_inc');
  late final _g_atomic_ref_count_inc = _g_atomic_ref_count_incPtr
      .asFunction<void Function(ffi.Pointer<gatomicrefcount>)>();

  int g_atomic_ref_count_dec(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_dec(
      arc,
    );
  }

  late final _g_atomic_ref_count_decPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_dec');
  late final _g_atomic_ref_count_dec = _g_atomic_ref_count_decPtr
      .asFunction<int Function(ffi.Pointer<gatomicrefcount>)>();

  int g_atomic_ref_count_compare(
    ffi.Pointer<gatomicrefcount> arc,
    int val,
  ) {
    return _g_atomic_ref_count_compare(
      arc,
      val,
    );
  }

  late final _g_atomic_ref_count_comparePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gatomicrefcount>,
              gint)>>('g_atomic_ref_count_compare');
  late final _g_atomic_ref_count_compare = _g_atomic_ref_count_comparePtr
      .asFunction<int Function(ffi.Pointer<gatomicrefcount>, int)>();

  ffi.Pointer<ffi.Char> g_ref_string_new(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_new(
      str,
    );
  }

  late final _g_ref_string_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_new');
  late final _g_ref_string_new = _g_ref_string_newPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_ref_string_new_len(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_ref_string_new_len(
      str,
      len,
    );
  }

  late final _g_ref_string_new_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_ref_string_new_len');
  late final _g_ref_string_new_len = _g_ref_string_new_lenPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_ref_string_new_intern(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_new_intern(
      str,
    );
  }

  late final _g_ref_string_new_internPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_new_intern');
  late final _g_ref_string_new_intern = _g_ref_string_new_internPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_ref_string_acquire(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_acquire(
      str,
    );
  }

  late final _g_ref_string_acquirePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_acquire');
  late final _g_ref_string_acquire = _g_ref_string_acquirePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void g_ref_string_release(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_release(
      str,
    );
  }

  late final _g_ref_string_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_ref_string_release');
  late final _g_ref_string_release = _g_ref_string_releasePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int g_ref_string_length(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_length(
      str,
    );
  }

  late final _g_ref_string_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<ffi.Char>)>>(
          'g_ref_string_length');
  late final _g_ref_string_length =
      _g_ref_string_lengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_regex_error_quark() {
    return _g_regex_error_quark();
  }

  late final _g_regex_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_regex_error_quark');
  late final _g_regex_error_quark =
      _g_regex_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GRegex> g_regex_new(
    ffi.Pointer<gchar> pattern,
    int compile_options,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_new(
      pattern,
      compile_options,
      match_options,
      error,
    );
  }

  late final _g_regex_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(ffi.Pointer<gchar>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_new');
  late final _g_regex_new = _g_regex_newPtr.asFunction<
      ffi.Pointer<GRegex> Function(
          ffi.Pointer<gchar>, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GRegex> g_regex_ref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_ref(
      regex,
    );
  }

  late final _g_regex_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(ffi.Pointer<GRegex>)>>('g_regex_ref');
  late final _g_regex_ref = _g_regex_refPtr
      .asFunction<ffi.Pointer<GRegex> Function(ffi.Pointer<GRegex>)>();

  void g_regex_unref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_unref(
      regex,
    );
  }

  late final _g_regex_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRegex>)>>(
          'g_regex_unref');
  late final _g_regex_unref =
      _g_regex_unrefPtr.asFunction<void Function(ffi.Pointer<GRegex>)>();

  ffi.Pointer<gchar> g_regex_get_pattern(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_pattern(
      regex,
    );
  }

  late final _g_regex_get_patternPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GRegex>)>>(
      'g_regex_get_pattern');
  late final _g_regex_get_pattern = _g_regex_get_patternPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_max_backref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_max_backref(
      regex,
    );
  }

  late final _g_regex_get_max_backrefPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_max_backref');
  late final _g_regex_get_max_backref = _g_regex_get_max_backrefPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_capture_count(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_capture_count(
      regex,
    );
  }

  late final _g_regex_get_capture_countPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_capture_count');
  late final _g_regex_get_capture_count = _g_regex_get_capture_countPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_has_cr_or_lf(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_has_cr_or_lf(
      regex,
    );
  }

  late final _g_regex_get_has_cr_or_lfPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_has_cr_or_lf');
  late final _g_regex_get_has_cr_or_lf = _g_regex_get_has_cr_or_lfPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_max_lookbehind(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_max_lookbehind(
      regex,
    );
  }

  late final _g_regex_get_max_lookbehindPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_max_lookbehind');
  late final _g_regex_get_max_lookbehind = _g_regex_get_max_lookbehindPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_string_number(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> name,
  ) {
    return _g_regex_get_string_number(
      regex,
      name,
    );
  }

  late final _g_regex_get_string_numberPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>)>>('g_regex_get_string_number');
  late final _g_regex_get_string_number = _g_regex_get_string_numberPtr
      .asFunction<int Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_regex_escape_string(
    ffi.Pointer<gchar> string,
    int length,
  ) {
    return _g_regex_escape_string(
      string,
      length,
    );
  }

  late final _g_regex_escape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gint)>>('g_regex_escape_string');
  late final _g_regex_escape_string = _g_regex_escape_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_regex_escape_nul(
    ffi.Pointer<gchar> string,
    int length,
  ) {
    return _g_regex_escape_nul(
      string,
      length,
    );
  }

  late final _g_regex_escape_nulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gint)>>('g_regex_escape_nul');
  late final _g_regex_escape_nul = _g_regex_escape_nulPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  int g_regex_get_compile_flags(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_compile_flags(
      regex,
    );
  }

  late final _g_regex_get_compile_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_compile_flags');
  late final _g_regex_get_compile_flags = _g_regex_get_compile_flagsPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_match_flags(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_match_flags(
      regex,
    );
  }

  late final _g_regex_get_match_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_match_flags');
  late final _g_regex_get_match_flags = _g_regex_get_match_flagsPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_match_simple(
    ffi.Pointer<gchar> pattern,
    ffi.Pointer<gchar> string,
    int compile_options,
    int match_options,
  ) {
    return _g_regex_match_simple(
      pattern,
      string,
      compile_options,
      match_options,
    );
  }

  late final _g_regex_match_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Int32,
              ffi.Int32)>>('g_regex_match_simple');
  late final _g_regex_match_simple = _g_regex_match_simplePtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int, int)>();

  int g_regex_match(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
  ) {
    return _g_regex_match(
      regex,
      string,
      match_options,
      match_info,
    );
  }

  late final _g_regex_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>)>>('g_regex_match');
  late final _g_regex_match = _g_regex_matchPtr.asFunction<
      int Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>)>();

  int g_regex_match_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_match_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      match_info,
      error,
    );
  }

  late final _g_regex_match_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_match_full');
  late final _g_regex_match_full = _g_regex_match_fullPtr.asFunction<
      int Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<gchar>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_regex_match_all(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
  ) {
    return _g_regex_match_all(
      regex,
      string,
      match_options,
      match_info,
    );
  }

  late final _g_regex_match_allPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>)>>('g_regex_match_all');
  late final _g_regex_match_all = _g_regex_match_allPtr.asFunction<
      int Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>)>();

  int g_regex_match_all_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_match_all_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      match_info,
      error,
    );
  }

  late final _g_regex_match_all_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_match_all_full');
  late final _g_regex_match_all_full = _g_regex_match_all_fullPtr.asFunction<
      int Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<gchar>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_regex_split_simple(
    ffi.Pointer<gchar> pattern,
    ffi.Pointer<gchar> string,
    int compile_options,
    int match_options,
  ) {
    return _g_regex_split_simple(
      pattern,
      string,
      compile_options,
      match_options,
    );
  }

  late final _g_regex_split_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Int32)>>('g_regex_split_simple');
  late final _g_regex_split_simple = _g_regex_split_simplePtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_regex_split(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int match_options,
  ) {
    return _g_regex_split(
      regex,
      string,
      match_options,
    );
  }

  late final _g_regex_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>, ffi.Int32)>>('g_regex_split');
  late final _g_regex_split = _g_regex_splitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GRegex>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_regex_split_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    int match_options,
    int max_tokens,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_split_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      max_tokens,
      error,
    );
  }

  late final _g_regex_split_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Int32,
              gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_split_full');
  late final _g_regex_split_full = _g_regex_split_fullPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<gchar>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_regex_replace(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    ffi.Pointer<gchar> replacement,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace(
      regex,
      string,
      string_len,
      start_position,
      replacement,
      match_options,
      error,
    );
  }

  late final _g_regex_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace');
  late final _g_regex_replace = _g_regex_replacePtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, int,
          int, ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_regex_replace_literal(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    ffi.Pointer<gchar> replacement,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace_literal(
      regex,
      string,
      string_len,
      start_position,
      replacement,
      match_options,
      error,
    );
  }

  late final _g_regex_replace_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace_literal');
  late final _g_regex_replace_literal = _g_regex_replace_literalPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GRegex>, ffi.Pointer<gchar>, int,
          int, ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_regex_replace_eval(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<gchar> string,
    int string_len,
    int start_position,
    int match_options,
    GRegexEvalCallback eval,
    gpointer user_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace_eval(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      eval,
      user_data,
      error,
    );
  }

  late final _g_regex_replace_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Int32,
              GRegexEvalCallback,
              gpointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace_eval');
  late final _g_regex_replace_eval = _g_regex_replace_evalPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<gchar>,
          int,
          int,
          int,
          GRegexEvalCallback,
          gpointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_regex_check_replacement(
    ffi.Pointer<gchar> replacement,
    ffi.Pointer<gboolean> has_references,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_check_replacement(
      replacement,
      has_references,
      error,
    );
  }

  late final _g_regex_check_replacementPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_check_replacement');
  late final _g_regex_check_replacement =
      _g_regex_check_replacementPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GRegex> g_match_info_get_regex(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_regex(
      match_info,
    );
  }

  late final _g_match_info_get_regexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_get_regex');
  late final _g_match_info_get_regex = _g_match_info_get_regexPtr
      .asFunction<ffi.Pointer<GRegex> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<gchar> g_match_info_get_string(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_string(
      match_info,
    );
  }

  late final _g_match_info_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_get_string');
  late final _g_match_info_get_string = _g_match_info_get_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<GMatchInfo> g_match_info_ref(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_ref(
      match_info,
    );
  }

  late final _g_match_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMatchInfo> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_ref');
  late final _g_match_info_ref = _g_match_info_refPtr
      .asFunction<ffi.Pointer<GMatchInfo> Function(ffi.Pointer<GMatchInfo>)>();

  void g_match_info_unref(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_unref(
      match_info,
    );
  }

  late final _g_match_info_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_unref');
  late final _g_match_info_unref = _g_match_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMatchInfo>)>();

  void g_match_info_free(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_free(
      match_info,
    );
  }

  late final _g_match_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_free');
  late final _g_match_info_free = _g_match_info_freePtr
      .asFunction<void Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_next(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_match_info_next(
      match_info,
      error,
    );
  }

  late final _g_match_info_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_match_info_next');
  late final _g_match_info_next = _g_match_info_nextPtr.asFunction<
      int Function(
          ffi.Pointer<GMatchInfo>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_match_info_matches(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_matches(
      match_info,
    );
  }

  late final _g_match_info_matchesPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_matches');
  late final _g_match_info_matches = _g_match_info_matchesPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_get_match_count(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_match_count(
      match_info,
    );
  }

  late final _g_match_info_get_match_countPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_get_match_count');
  late final _g_match_info_get_match_count = _g_match_info_get_match_countPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_is_partial_match(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_is_partial_match(
      match_info,
    );
  }

  late final _g_match_info_is_partial_matchPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_is_partial_match');
  late final _g_match_info_is_partial_match = _g_match_info_is_partial_matchPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<gchar> g_match_info_expand_references(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<gchar> string_to_expand,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_match_info_expand_references(
      match_info,
      string_to_expand,
      error,
    );
  }

  late final _g_match_info_expand_referencesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GMatchInfo>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_match_info_expand_references');
  late final _g_match_info_expand_references =
      _g_match_info_expand_referencesPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_match_info_fetch(
    ffi.Pointer<GMatchInfo> match_info,
    int match_num,
  ) {
    return _g_match_info_fetch(
      match_info,
      match_num,
    );
  }

  late final _g_match_info_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GMatchInfo>, gint)>>('g_match_info_fetch');
  late final _g_match_info_fetch = _g_match_info_fetchPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMatchInfo>, int)>();

  int g_match_info_fetch_pos(
    ffi.Pointer<GMatchInfo> match_info,
    int match_num,
    ffi.Pointer<gint> start_pos,
    ffi.Pointer<gint> end_pos,
  ) {
    return _g_match_info_fetch_pos(
      match_info,
      match_num,
      start_pos,
      end_pos,
    );
  }

  late final _g_match_info_fetch_posPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMatchInfo>, gint, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_match_info_fetch_pos');
  late final _g_match_info_fetch_pos = _g_match_info_fetch_posPtr.asFunction<
      int Function(ffi.Pointer<GMatchInfo>, int, ffi.Pointer<gint>,
          ffi.Pointer<gint>)>();

  ffi.Pointer<gchar> g_match_info_fetch_named(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<gchar> name,
  ) {
    return _g_match_info_fetch_named(
      match_info,
      name,
    );
  }

  late final _g_match_info_fetch_namedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<gchar>)>>('g_match_info_fetch_named');
  late final _g_match_info_fetch_named =
      _g_match_info_fetch_namedPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GMatchInfo>, ffi.Pointer<gchar>)>();

  int g_match_info_fetch_named_pos(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gint> start_pos,
    ffi.Pointer<gint> end_pos,
  ) {
    return _g_match_info_fetch_named_pos(
      match_info,
      name,
      start_pos,
      end_pos,
    );
  }

  late final _g_match_info_fetch_named_posPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMatchInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_match_info_fetch_named_pos');
  late final _g_match_info_fetch_named_pos =
      _g_match_info_fetch_named_posPtr.asFunction<
          int Function(ffi.Pointer<GMatchInfo>, ffi.Pointer<gchar>,
              ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_match_info_fetch_all(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_fetch_all(
      match_info,
    );
  }

  late final _g_match_info_fetch_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_fetch_all');
  late final _g_match_info_fetch_all = _g_match_info_fetch_allPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<GScanner> g_scanner_new(
    ffi.Pointer<GScannerConfig> config_templ,
  ) {
    return _g_scanner_new(
      config_templ,
    );
  }

  late final _g_scanner_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GScanner> Function(
              ffi.Pointer<GScannerConfig>)>>('g_scanner_new');
  late final _g_scanner_new = _g_scanner_newPtr.asFunction<
      ffi.Pointer<GScanner> Function(ffi.Pointer<GScannerConfig>)>();

  void g_scanner_destroy(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_destroy(
      scanner,
    );
  }

  late final _g_scanner_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_destroy');
  late final _g_scanner_destroy =
      _g_scanner_destroyPtr.asFunction<void Function(ffi.Pointer<GScanner>)>();

  void g_scanner_input_file(
    ffi.Pointer<GScanner> scanner,
    int input_fd,
  ) {
    return _g_scanner_input_file(
      scanner,
      input_fd,
    );
  }

  late final _g_scanner_input_filePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>, gint)>>(
      'g_scanner_input_file');
  late final _g_scanner_input_file = _g_scanner_input_filePtr
      .asFunction<void Function(ffi.Pointer<GScanner>, int)>();

  void g_scanner_sync_file_offset(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_sync_file_offset(
      scanner,
    );
  }

  late final _g_scanner_sync_file_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_sync_file_offset');
  late final _g_scanner_sync_file_offset = _g_scanner_sync_file_offsetPtr
      .asFunction<void Function(ffi.Pointer<GScanner>)>();

  void g_scanner_input_text(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<gchar> text,
    int text_len,
  ) {
    return _g_scanner_input_text(
      scanner,
      text,
      text_len,
    );
  }

  late final _g_scanner_input_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, ffi.Pointer<gchar>,
              guint)>>('g_scanner_input_text');
  late final _g_scanner_input_text = _g_scanner_input_textPtr.asFunction<
      void Function(ffi.Pointer<GScanner>, ffi.Pointer<gchar>, int)>();

  int g_scanner_get_next_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_get_next_token(
      scanner,
    );
  }

  late final _g_scanner_get_next_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_get_next_token');
  late final _g_scanner_get_next_token = _g_scanner_get_next_tokenPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_peek_next_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_peek_next_token(
      scanner,
    );
  }

  late final _g_scanner_peek_next_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_peek_next_token');
  late final _g_scanner_peek_next_token = _g_scanner_peek_next_tokenPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_token(
      scanner,
    );
  }

  late final _g_scanner_cur_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_token');
  late final _g_scanner_cur_token =
      _g_scanner_cur_tokenPtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  GTokenValue g_scanner_cur_value(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_value(
      scanner,
    );
  }

  late final _g_scanner_cur_valuePtr =
      _lookup<ffi.NativeFunction<GTokenValue Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_value');
  late final _g_scanner_cur_value = _g_scanner_cur_valuePtr
      .asFunction<GTokenValue Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_line(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_line(
      scanner,
    );
  }

  late final _g_scanner_cur_linePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_line');
  late final _g_scanner_cur_line =
      _g_scanner_cur_linePtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_position(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_position(
      scanner,
    );
  }

  late final _g_scanner_cur_positionPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_position');
  late final _g_scanner_cur_position = _g_scanner_cur_positionPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_eof(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_eof(
      scanner,
    );
  }

  late final _g_scanner_eofPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_eof');
  late final _g_scanner_eof =
      _g_scanner_eofPtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_set_scope(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
  ) {
    return _g_scanner_set_scope(
      scanner,
      scope_id,
    );
  }

  late final _g_scanner_set_scopePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>, guint)>>(
          'g_scanner_set_scope');
  late final _g_scanner_set_scope = _g_scanner_set_scopePtr
      .asFunction<int Function(ffi.Pointer<GScanner>, int)>();

  void g_scanner_scope_add_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<gchar> symbol,
    gpointer value,
  ) {
    return _g_scanner_scope_add_symbol(
      scanner,
      scope_id,
      symbol,
      value,
    );
  }

  late final _g_scanner_scope_add_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint, ffi.Pointer<gchar>,
              gpointer)>>('g_scanner_scope_add_symbol');
  late final _g_scanner_scope_add_symbol =
      _g_scanner_scope_add_symbolPtr.asFunction<
          void Function(
              ffi.Pointer<GScanner>, int, ffi.Pointer<gchar>, gpointer)>();

  void g_scanner_scope_remove_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<gchar> symbol,
  ) {
    return _g_scanner_scope_remove_symbol(
      scanner,
      scope_id,
      symbol,
    );
  }

  late final _g_scanner_scope_remove_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint,
              ffi.Pointer<gchar>)>>('g_scanner_scope_remove_symbol');
  late final _g_scanner_scope_remove_symbol =
      _g_scanner_scope_remove_symbolPtr.asFunction<
          void Function(ffi.Pointer<GScanner>, int, ffi.Pointer<gchar>)>();

  gpointer g_scanner_scope_lookup_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<gchar> symbol,
  ) {
    return _g_scanner_scope_lookup_symbol(
      scanner,
      scope_id,
      symbol,
    );
  }

  late final _g_scanner_scope_lookup_symbolPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GScanner>, guint,
              ffi.Pointer<gchar>)>>('g_scanner_scope_lookup_symbol');
  late final _g_scanner_scope_lookup_symbol =
      _g_scanner_scope_lookup_symbolPtr.asFunction<
          gpointer Function(ffi.Pointer<GScanner>, int, ffi.Pointer<gchar>)>();

  void g_scanner_scope_foreach_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    GHFunc func,
    gpointer user_data,
  ) {
    return _g_scanner_scope_foreach_symbol(
      scanner,
      scope_id,
      func,
      user_data,
    );
  }

  late final _g_scanner_scope_foreach_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint, GHFunc,
              gpointer)>>('g_scanner_scope_foreach_symbol');
  late final _g_scanner_scope_foreach_symbol =
      _g_scanner_scope_foreach_symbolPtr.asFunction<
          void Function(ffi.Pointer<GScanner>, int, GHFunc, gpointer)>();

  gpointer g_scanner_lookup_symbol(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<gchar> symbol,
  ) {
    return _g_scanner_lookup_symbol(
      scanner,
      symbol,
    );
  }

  late final _g_scanner_lookup_symbolPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GScanner>,
              ffi.Pointer<gchar>)>>('g_scanner_lookup_symbol');
  late final _g_scanner_lookup_symbol = _g_scanner_lookup_symbolPtr.asFunction<
      gpointer Function(ffi.Pointer<GScanner>, ffi.Pointer<gchar>)>();

  void g_scanner_unexp_token(
    ffi.Pointer<GScanner> scanner,
    int expected_token,
    ffi.Pointer<gchar> identifier_spec,
    ffi.Pointer<gchar> symbol_spec,
    ffi.Pointer<gchar> symbol_name,
    ffi.Pointer<gchar> message,
    int is_error,
  ) {
    return _g_scanner_unexp_token(
      scanner,
      expected_token,
      identifier_spec,
      symbol_spec,
      symbol_name,
      message,
      is_error,
    );
  }

  late final _g_scanner_unexp_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GScanner>,
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint)>>('g_scanner_unexp_token');
  late final _g_scanner_unexp_token = _g_scanner_unexp_tokenPtr.asFunction<
      void Function(ffi.Pointer<GScanner>, int, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  void g_scanner_error(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<gchar> format,
  ) {
    return _g_scanner_error(
      scanner,
      format,
    );
  }

  late final _g_scanner_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GScanner>, ffi.Pointer<gchar>)>>('g_scanner_error');
  late final _g_scanner_error = _g_scanner_errorPtr
      .asFunction<void Function(ffi.Pointer<GScanner>, ffi.Pointer<gchar>)>();

  void g_scanner_warn(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<gchar> format,
  ) {
    return _g_scanner_warn(
      scanner,
      format,
    );
  }

  late final _g_scanner_warnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GScanner>, ffi.Pointer<gchar>)>>('g_scanner_warn');
  late final _g_scanner_warn = _g_scanner_warnPtr
      .asFunction<void Function(ffi.Pointer<GScanner>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GSequence> g_sequence_new(
    GDestroyNotify data_destroy,
  ) {
    return _g_sequence_new(
      data_destroy,
    );
  }

  late final _g_sequence_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GSequence> Function(GDestroyNotify)>>(
      'g_sequence_new');
  late final _g_sequence_new = _g_sequence_newPtr
      .asFunction<ffi.Pointer<GSequence> Function(GDestroyNotify)>();

  void g_sequence_free(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_free(
      seq,
    );
  }

  late final _g_sequence_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_free');
  late final _g_sequence_free =
      _g_sequence_freePtr.asFunction<void Function(ffi.Pointer<GSequence>)>();

  int g_sequence_get_length(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_length(
      seq,
    );
  }

  late final _g_sequence_get_lengthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_get_length');
  late final _g_sequence_get_length = _g_sequence_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<GSequence>)>();

  void g_sequence_foreach(
    ffi.Pointer<GSequence> seq,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_sequence_foreach(
      seq,
      func,
      user_data,
    );
  }

  late final _g_sequence_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequence>, GFunc, gpointer)>>('g_sequence_foreach');
  late final _g_sequence_foreach = _g_sequence_foreachPtr
      .asFunction<void Function(ffi.Pointer<GSequence>, GFunc, gpointer)>();

  void g_sequence_foreach_range(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
    GFunc func,
    gpointer user_data,
  ) {
    return _g_sequence_foreach_range(
      begin,
      end,
      func,
      user_data,
    );
  }

  late final _g_sequence_foreach_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>,
              GFunc,
              gpointer)>>('g_sequence_foreach_range');
  late final _g_sequence_foreach_range =
      _g_sequence_foreach_rangePtr.asFunction<
          void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>,
              GFunc, gpointer)>();

  void g_sequence_sort(
    ffi.Pointer<GSequence> seq,
    GCompareDataFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_sort(
      seq,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequence>, GCompareDataFunc,
              gpointer)>>('g_sequence_sort');
  late final _g_sequence_sort = _g_sequence_sortPtr.asFunction<
      void Function(ffi.Pointer<GSequence>, GCompareDataFunc, gpointer)>();

  void g_sequence_sort_iter(
    ffi.Pointer<GSequence> seq,
    GSequenceIterCompareFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_sort_iter(
      seq,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sort_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequence>, GSequenceIterCompareFunc,
              gpointer)>>('g_sequence_sort_iter');
  late final _g_sequence_sort_iter = _g_sequence_sort_iterPtr.asFunction<
      void Function(
          ffi.Pointer<GSequence>, GSequenceIterCompareFunc, gpointer)>();

  int g_sequence_is_empty(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_is_empty(
      seq,
    );
  }

  late final _g_sequence_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_is_empty');
  late final _g_sequence_is_empty = _g_sequence_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_begin_iter(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_begin_iter(
      seq,
    );
  }

  late final _g_sequence_get_begin_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>)>>('g_sequence_get_begin_iter');
  late final _g_sequence_get_begin_iter =
      _g_sequence_get_begin_iterPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_end_iter(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_end_iter(
      seq,
    );
  }

  late final _g_sequence_get_end_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>)>>('g_sequence_get_end_iter');
  late final _g_sequence_get_end_iter = _g_sequence_get_end_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_iter_at_pos(
    ffi.Pointer<GSequence> seq,
    int pos,
  ) {
    return _g_sequence_get_iter_at_pos(
      seq,
      pos,
    );
  }

  late final _g_sequence_get_iter_at_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, gint)>>('g_sequence_get_iter_at_pos');
  late final _g_sequence_get_iter_at_pos =
      _g_sequence_get_iter_at_posPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, int)>();

  ffi.Pointer<GSequenceIter> g_sequence_append(
    ffi.Pointer<GSequence> seq,
    gpointer data,
  ) {
    return _g_sequence_append(
      seq,
      data,
    );
  }

  late final _g_sequence_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, gpointer)>>('g_sequence_append');
  late final _g_sequence_append = _g_sequence_appendPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_prepend(
    ffi.Pointer<GSequence> seq,
    gpointer data,
  ) {
    return _g_sequence_prepend(
      seq,
      data,
    );
  }

  late final _g_sequence_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, gpointer)>>('g_sequence_prepend');
  late final _g_sequence_prepend = _g_sequence_prependPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_before(
    ffi.Pointer<GSequenceIter> iter,
    gpointer data,
  ) {
    return _g_sequence_insert_before(
      iter,
      data,
    );
  }

  late final _g_sequence_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>,
              gpointer)>>('g_sequence_insert_before');
  late final _g_sequence_insert_before =
      _g_sequence_insert_beforePtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, gpointer)>();

  void g_sequence_move(
    ffi.Pointer<GSequenceIter> src,
    ffi.Pointer<GSequenceIter> dest,
  ) {
    return _g_sequence_move(
      src,
      dest,
    );
  }

  late final _g_sequence_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_move');
  late final _g_sequence_move = _g_sequence_movePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  void g_sequence_swap(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
  ) {
    return _g_sequence_swap(
      a,
      b,
    );
  }

  late final _g_sequence_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_swap');
  late final _g_sequence_swap = _g_sequence_swapPtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_sorted(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GCompareDataFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_insert_sorted(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GCompareDataFunc, gpointer)>>('g_sequence_insert_sorted');
  late final _g_sequence_insert_sorted =
      _g_sequence_insert_sortedPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, gpointer, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_sorted_iter(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GSequenceIterCompareFunc iter_cmp,
    gpointer cmp_data,
  ) {
    return _g_sequence_insert_sorted_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_insert_sorted_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              gpointer,
              GSequenceIterCompareFunc,
              gpointer)>>('g_sequence_insert_sorted_iter');
  late final _g_sequence_insert_sorted_iter =
      _g_sequence_insert_sorted_iterPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GSequenceIterCompareFunc, gpointer)>();

  void g_sequence_sort_changed(
    ffi.Pointer<GSequenceIter> iter,
    GCompareDataFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_sort_changed(
      iter,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sort_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>, GCompareDataFunc,
              gpointer)>>('g_sequence_sort_changed');
  late final _g_sequence_sort_changed = _g_sequence_sort_changedPtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, GCompareDataFunc, gpointer)>();

  void g_sequence_sort_changed_iter(
    ffi.Pointer<GSequenceIter> iter,
    GSequenceIterCompareFunc iter_cmp,
    gpointer cmp_data,
  ) {
    return _g_sequence_sort_changed_iter(
      iter,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_sort_changed_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              GSequenceIterCompareFunc,
              gpointer)>>('g_sequence_sort_changed_iter');
  late final _g_sequence_sort_changed_iter =
      _g_sequence_sort_changed_iterPtr.asFunction<
          void Function(ffi.Pointer<GSequenceIter>, GSequenceIterCompareFunc,
              gpointer)>();

  void g_sequence_remove(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_remove(
      iter,
    );
  }

  late final _g_sequence_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_remove');
  late final _g_sequence_remove = _g_sequence_removePtr
      .asFunction<void Function(ffi.Pointer<GSequenceIter>)>();

  void g_sequence_remove_range(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_remove_range(
      begin,
      end,
    );
  }

  late final _g_sequence_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_remove_range');
  late final _g_sequence_remove_range = _g_sequence_remove_rangePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  void g_sequence_move_range(
    ffi.Pointer<GSequenceIter> dest,
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_move_range(
      dest,
      begin,
      end,
    );
  }

  late final _g_sequence_move_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_move_range');
  late final _g_sequence_move_range = _g_sequence_move_rangePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>,
          ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_search(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GCompareDataFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_search(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GCompareDataFunc, gpointer)>>('g_sequence_search');
  late final _g_sequence_search = _g_sequence_searchPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(
          ffi.Pointer<GSequence>, gpointer, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_search_iter(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GSequenceIterCompareFunc iter_cmp,
    gpointer cmp_data,
  ) {
    return _g_sequence_search_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_search_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GSequenceIterCompareFunc, gpointer)>>('g_sequence_search_iter');
  late final _g_sequence_search_iter = _g_sequence_search_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
          GSequenceIterCompareFunc, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_lookup(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GCompareDataFunc cmp_func,
    gpointer cmp_data,
  ) {
    return _g_sequence_lookup(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GCompareDataFunc, gpointer)>>('g_sequence_lookup');
  late final _g_sequence_lookup = _g_sequence_lookupPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(
          ffi.Pointer<GSequence>, gpointer, GCompareDataFunc, gpointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_lookup_iter(
    ffi.Pointer<GSequence> seq,
    gpointer data,
    GSequenceIterCompareFunc iter_cmp,
    gpointer cmp_data,
  ) {
    return _g_sequence_lookup_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_lookup_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
              GSequenceIterCompareFunc, gpointer)>>('g_sequence_lookup_iter');
  late final _g_sequence_lookup_iter = _g_sequence_lookup_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, gpointer,
          GSequenceIterCompareFunc, gpointer)>();

  gpointer g_sequence_get(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_get(
      iter,
    );
  }

  late final _g_sequence_getPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_get');
  late final _g_sequence_get = _g_sequence_getPtr
      .asFunction<gpointer Function(ffi.Pointer<GSequenceIter>)>();

  void g_sequence_set(
    ffi.Pointer<GSequenceIter> iter,
    gpointer data,
  ) {
    return _g_sequence_set(
      iter,
      data,
    );
  }

  late final _g_sequence_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>, gpointer)>>('g_sequence_set');
  late final _g_sequence_set = _g_sequence_setPtr
      .asFunction<void Function(ffi.Pointer<GSequenceIter>, gpointer)>();

  int g_sequence_iter_is_begin(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_is_begin(
      iter,
    );
  }

  late final _g_sequence_iter_is_beginPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_iter_is_begin');
  late final _g_sequence_iter_is_begin = _g_sequence_iter_is_beginPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_is_end(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_is_end(
      iter,
    );
  }

  late final _g_sequence_iter_is_endPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_iter_is_end');
  late final _g_sequence_iter_is_end = _g_sequence_iter_is_endPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_next(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_next(
      iter,
    );
  }

  late final _g_sequence_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_next');
  late final _g_sequence_iter_next = _g_sequence_iter_nextPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_prev(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_prev(
      iter,
    );
  }

  late final _g_sequence_iter_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_prev');
  late final _g_sequence_iter_prev = _g_sequence_iter_prevPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_get_position(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_get_position(
      iter,
    );
  }

  late final _g_sequence_iter_get_positionPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSequenceIter>)>>(
          'g_sequence_iter_get_position');
  late final _g_sequence_iter_get_position = _g_sequence_iter_get_positionPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_move(
    ffi.Pointer<GSequenceIter> iter,
    int delta,
  ) {
    return _g_sequence_iter_move(
      iter,
      delta,
    );
  }

  late final _g_sequence_iter_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, gint)>>('g_sequence_iter_move');
  late final _g_sequence_iter_move = _g_sequence_iter_movePtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>, int)>();

  ffi.Pointer<GSequence> g_sequence_iter_get_sequence(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_get_sequence(
      iter,
    );
  }

  late final _g_sequence_iter_get_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequence> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_get_sequence');
  late final _g_sequence_iter_get_sequence =
      _g_sequence_iter_get_sequencePtr.asFunction<
          ffi.Pointer<GSequence> Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_compare(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
  ) {
    return _g_sequence_iter_compare(
      a,
      b,
    );
  }

  late final _g_sequence_iter_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_compare');
  late final _g_sequence_iter_compare = _g_sequence_iter_comparePtr.asFunction<
      int Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_range_get_midpoint(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_range_get_midpoint(
      begin,
      end,
    );
  }

  late final _g_sequence_range_get_midpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_range_get_midpoint');
  late final _g_sequence_range_get_midpoint =
      _g_sequence_range_get_midpointPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  int g_shell_error_quark() {
    return _g_shell_error_quark();
  }

  late final _g_shell_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_shell_error_quark');
  late final _g_shell_error_quark =
      _g_shell_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<gchar> g_shell_quote(
    ffi.Pointer<gchar> unquoted_string,
  ) {
    return _g_shell_quote(
      unquoted_string,
    );
  }

  late final _g_shell_quotePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_shell_quote');
  late final _g_shell_quote = _g_shell_quotePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_shell_unquote(
    ffi.Pointer<gchar> quoted_string,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_shell_unquote(
      quoted_string,
      error,
    );
  }

  late final _g_shell_unquotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_shell_unquote');
  late final _g_shell_unquote = _g_shell_unquotePtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_shell_parse_argv(
    ffi.Pointer<gchar> command_line,
    ffi.Pointer<gint> argcp,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> argvp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_shell_parse_argv(
      command_line,
      argcp,
      argvp,
      error,
    );
  }

  late final _g_shell_parse_argvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_shell_parse_argv');
  late final _g_shell_parse_argv = _g_shell_parse_argvPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  gpointer g_slice_alloc(
    int block_size,
  ) {
    return _g_slice_alloc(
      block_size,
    );
  }

  late final _g_slice_allocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_slice_alloc');
  late final _g_slice_alloc =
      _g_slice_allocPtr.asFunction<gpointer Function(int)>();

  gpointer g_slice_alloc0(
    int block_size,
  ) {
    return _g_slice_alloc0(
      block_size,
    );
  }

  late final _g_slice_alloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize)>>('g_slice_alloc0');
  late final _g_slice_alloc0 =
      _g_slice_alloc0Ptr.asFunction<gpointer Function(int)>();

  gpointer g_slice_copy(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_slice_copy(
      block_size,
      mem_block,
    );
  }

  late final _g_slice_copyPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gsize, gconstpointer)>>(
          'g_slice_copy');
  late final _g_slice_copy =
      _g_slice_copyPtr.asFunction<gpointer Function(int, gconstpointer)>();

  void g_slice_free1(
    int block_size,
    gpointer mem_block,
  ) {
    return _g_slice_free1(
      block_size,
      mem_block,
    );
  }

  late final _g_slice_free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gsize, gpointer)>>(
          'g_slice_free1');
  late final _g_slice_free1 =
      _g_slice_free1Ptr.asFunction<void Function(int, gpointer)>();

  void g_slice_free_chain_with_offset(
    int block_size,
    gpointer mem_chain,
    int next_offset,
  ) {
    return _g_slice_free_chain_with_offset(
      block_size,
      mem_chain,
      next_offset,
    );
  }

  late final _g_slice_free_chain_with_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gsize, gpointer, gsize)>>(
          'g_slice_free_chain_with_offset');
  late final _g_slice_free_chain_with_offset =
      _g_slice_free_chain_with_offsetPtr
          .asFunction<void Function(int, gpointer, int)>();

  void g_slice_set_config(
    int ckey,
    int value,
  ) {
    return _g_slice_set_config(
      ckey,
      value,
    );
  }

  late final _g_slice_set_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, gint64)>>(
          'g_slice_set_config');
  late final _g_slice_set_config =
      _g_slice_set_configPtr.asFunction<void Function(int, int)>();

  int g_slice_get_config(
    int ckey,
  ) {
    return _g_slice_get_config(
      ckey,
    );
  }

  late final _g_slice_get_configPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Int32)>>(
          'g_slice_get_config');
  late final _g_slice_get_config =
      _g_slice_get_configPtr.asFunction<int Function(int)>();

  ffi.Pointer<gint64> g_slice_get_config_state(
    int ckey,
    int address,
    ffi.Pointer<guint> n_values,
  ) {
    return _g_slice_get_config_state(
      ckey,
      address,
      n_values,
    );
  }

  late final _g_slice_get_config_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gint64> Function(ffi.Int32, gint64,
              ffi.Pointer<guint>)>>('g_slice_get_config_state');
  late final _g_slice_get_config_state = _g_slice_get_config_statePtr
      .asFunction<ffi.Pointer<gint64> Function(int, int, ffi.Pointer<guint>)>();

  int g_spawn_error_quark() {
    return _g_spawn_error_quark();
  }

  late final _g_spawn_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_spawn_error_quark');
  late final _g_spawn_error_quark =
      _g_spawn_error_quarkPtr.asFunction<int Function()>();

  int g_spawn_exit_error_quark() {
    return _g_spawn_exit_error_quark();
  }

  late final _g_spawn_exit_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_spawn_exit_error_quark');
  late final _g_spawn_exit_error_quark =
      _g_spawn_exit_error_quarkPtr.asFunction<int Function()>();

  int g_spawn_async(
    ffi.Pointer<gchar> working_directory,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    ffi.Pointer<GPid> child_pid,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      error,
    );
  }

  late final _g_spawn_asyncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              gpointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async');
  late final _g_spawn_async = _g_spawn_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          int,
          GSpawnChildSetupFunc,
          gpointer,
          ffi.Pointer<GPid>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_pipes(
    ffi.Pointer<gchar> working_directory,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    ffi.Pointer<GPid> child_pid,
    ffi.Pointer<gint> standard_input,
    ffi.Pointer<gint> standard_output,
    ffi.Pointer<gint> standard_error,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_pipes(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      standard_input,
      standard_output,
      standard_error,
      error,
    );
  }

  late final _g_spawn_async_with_pipesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              gpointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async_with_pipes');
  late final _g_spawn_async_with_pipes =
      _g_spawn_async_with_pipesPtr.asFunction<
          int Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              int,
              GSpawnChildSetupFunc,
              gpointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_pipes_and_fds(
    ffi.Pointer<gchar> working_directory,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    int stdin_fd,
    int stdout_fd,
    int stderr_fd,
    ffi.Pointer<gint> source_fds,
    ffi.Pointer<gint> target_fds,
    int n_fds,
    ffi.Pointer<GPid> child_pid_out,
    ffi.Pointer<gint> stdin_pipe_out,
    ffi.Pointer<gint> stdout_pipe_out,
    ffi.Pointer<gint> stderr_pipe_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_pipes_and_fds(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      stdin_fd,
      stdout_fd,
      stderr_fd,
      source_fds,
      target_fds,
      n_fds,
      child_pid_out,
      stdin_pipe_out,
      stdout_pipe_out,
      stderr_pipe_out,
      error,
    );
  }

  late final _g_spawn_async_with_pipes_and_fdsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Int32,
                  GSpawnChildSetupFunc,
                  gpointer,
                  gint,
                  gint,
                  gint,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  gsize,
                  ffi.Pointer<GPid>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_spawn_async_with_pipes_and_fds');
  late final _g_spawn_async_with_pipes_and_fds =
      _g_spawn_async_with_pipes_and_fdsPtr.asFunction<
          int Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              int,
              GSpawnChildSetupFunc,
              gpointer,
              int,
              int,
              int,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              int,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_fds(
    ffi.Pointer<gchar> working_directory,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    ffi.Pointer<GPid> child_pid,
    int stdin_fd,
    int stdout_fd,
    int stderr_fd,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_fds(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      stdin_fd,
      stdout_fd,
      stderr_fd,
      error,
    );
  }

  late final _g_spawn_async_with_fdsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              gpointer,
              ffi.Pointer<GPid>,
              gint,
              gint,
              gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async_with_fds');
  late final _g_spawn_async_with_fds = _g_spawn_async_with_fdsPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          int,
          GSpawnChildSetupFunc,
          gpointer,
          ffi.Pointer<GPid>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_sync(
    ffi.Pointer<gchar> working_directory,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<gchar>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    ffi.Pointer<ffi.Pointer<gchar>> standard_output,
    ffi.Pointer<ffi.Pointer<gchar>> standard_error,
    ffi.Pointer<gint> wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_sync(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      standard_output,
      standard_error,
      wait_status,
      error,
    );
  }

  late final _g_spawn_syncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              gpointer,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_sync');
  late final _g_spawn_sync = _g_spawn_syncPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          int,
          GSpawnChildSetupFunc,
          gpointer,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_command_line_sync(
    ffi.Pointer<gchar> command_line,
    ffi.Pointer<ffi.Pointer<gchar>> standard_output,
    ffi.Pointer<ffi.Pointer<gchar>> standard_error,
    ffi.Pointer<gint> wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_command_line_sync(
      command_line,
      standard_output,
      standard_error,
      wait_status,
      error,
    );
  }

  late final _g_spawn_command_line_syncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_command_line_sync');
  late final _g_spawn_command_line_sync =
      _g_spawn_command_line_syncPtr.asFunction<
          int Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_command_line_async(
    ffi.Pointer<gchar> command_line,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_command_line_async(
      command_line,
      error,
    );
  }

  late final _g_spawn_command_line_asyncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_command_line_async');
  late final _g_spawn_command_line_async =
      _g_spawn_command_line_asyncPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_check_wait_status(
    int wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_check_wait_status(
      wait_status,
      error,
    );
  }

  late final _g_spawn_check_wait_statusPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_check_wait_status');
  late final _g_spawn_check_wait_status = _g_spawn_check_wait_statusPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_check_exit_status(
    int wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_check_exit_status(
      wait_status,
      error,
    );
  }

  late final _g_spawn_check_exit_statusPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_check_exit_status');
  late final _g_spawn_check_exit_status = _g_spawn_check_exit_statusPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_spawn_close_pid(
    int pid,
  ) {
    return _g_spawn_close_pid(
      pid,
    );
  }

  late final _g_spawn_close_pidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GPid)>>('g_spawn_close_pid');
  late final _g_spawn_close_pid =
      _g_spawn_close_pidPtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.Pointer<guint16>> _g_ascii_table =
      _lookup<ffi.Pointer<guint16>>('g_ascii_table');

  ffi.Pointer<guint16> get g_ascii_table => _g_ascii_table.value;

  int g_ascii_tolower(
    int c,
  ) {
    return _g_ascii_tolower(
      c,
    );
  }

  late final _g_ascii_tolowerPtr =
      _lookup<ffi.NativeFunction<gchar Function(gchar)>>('g_ascii_tolower');
  late final _g_ascii_tolower =
      _g_ascii_tolowerPtr.asFunction<int Function(int)>();

  int g_ascii_toupper(
    int c,
  ) {
    return _g_ascii_toupper(
      c,
    );
  }

  late final _g_ascii_toupperPtr =
      _lookup<ffi.NativeFunction<gchar Function(gchar)>>('g_ascii_toupper');
  late final _g_ascii_toupper =
      _g_ascii_toupperPtr.asFunction<int Function(int)>();

  int g_ascii_digit_value(
    int c,
  ) {
    return _g_ascii_digit_value(
      c,
    );
  }

  late final _g_ascii_digit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gchar)>>('g_ascii_digit_value');
  late final _g_ascii_digit_value =
      _g_ascii_digit_valuePtr.asFunction<int Function(int)>();

  int g_ascii_xdigit_value(
    int c,
  ) {
    return _g_ascii_xdigit_value(
      c,
    );
  }

  late final _g_ascii_xdigit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gchar)>>('g_ascii_xdigit_value');
  late final _g_ascii_xdigit_value =
      _g_ascii_xdigit_valuePtr.asFunction<int Function(int)>();

  ffi.Pointer<gchar> g_strdelimit(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> delimiters,
    int new_delimiter,
  ) {
    return _g_strdelimit(
      string,
      delimiters,
      new_delimiter,
    );
  }

  late final _g_strdelimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gchar)>>('g_strdelimit');
  late final _g_strdelimit = _g_strdelimitPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strcanon(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> valid_chars,
    int substitutor,
  ) {
    return _g_strcanon(
      string,
      valid_chars,
      substitutor,
    );
  }

  late final _g_strcanonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gchar)>>('g_strcanon');
  late final _g_strcanon = _g_strcanonPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strerror(
    int errnum,
  ) {
    return _g_strerror(
      errnum,
    );
  }

  late final _g_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(gint)>>(
          'g_strerror');
  late final _g_strerror =
      _g_strerrorPtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  ffi.Pointer<gchar> g_strsignal(
    int signum,
  ) {
    return _g_strsignal(
      signum,
    );
  }

  late final _g_strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(gint)>>(
          'g_strsignal');
  late final _g_strsignal =
      _g_strsignalPtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  ffi.Pointer<gchar> g_strreverse(
    ffi.Pointer<gchar> string,
  ) {
    return _g_strreverse(
      string,
    );
  }

  late final _g_strreversePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strreverse');
  late final _g_strreverse = _g_strreversePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_strlcpy(
    ffi.Pointer<gchar> dest,
    ffi.Pointer<gchar> src,
    int dest_size,
  ) {
    return _g_strlcpy(
      dest,
      src,
      dest_size,
    );
  }

  late final _g_strlcpyPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gsize)>>('g_strlcpy');
  late final _g_strlcpy = _g_strlcpyPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  int g_strlcat(
    ffi.Pointer<gchar> dest,
    ffi.Pointer<gchar> src,
    int dest_size,
  ) {
    return _g_strlcat(
      dest,
      src,
      dest_size,
    );
  }

  late final _g_strlcatPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gsize)>>('g_strlcat');
  late final _g_strlcat = _g_strlcatPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strstr_len(
    ffi.Pointer<gchar> haystack,
    int haystack_len,
    ffi.Pointer<gchar> needle,
  ) {
    return _g_strstr_len(
      haystack,
      haystack_len,
      needle,
    );
  }

  late final _g_strstr_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize, ffi.Pointer<gchar>)>>('g_strstr_len');
  late final _g_strstr_len = _g_strstr_lenPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strrstr(
    ffi.Pointer<gchar> haystack,
    ffi.Pointer<gchar> needle,
  ) {
    return _g_strrstr(
      haystack,
      needle,
    );
  }

  late final _g_strrstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_strrstr');
  late final _g_strrstr = _g_strrstrPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strrstr_len(
    ffi.Pointer<gchar> haystack,
    int haystack_len,
    ffi.Pointer<gchar> needle,
  ) {
    return _g_strrstr_len(
      haystack,
      haystack_len,
      needle,
    );
  }

  late final _g_strrstr_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, gssize,
              ffi.Pointer<gchar>)>>('g_strrstr_len');
  late final _g_strrstr_len = _g_strrstr_lenPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<gchar>)>();

  int g_str_has_suffix(
    ffi.Pointer<gchar> str,
    ffi.Pointer<gchar> suffix,
  ) {
    return _g_str_has_suffix(
      str,
      suffix,
    );
  }

  late final _g_str_has_suffixPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_str_has_suffix');
  late final _g_str_has_suffix = _g_str_has_suffixPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_str_has_prefix(
    ffi.Pointer<gchar> str,
    ffi.Pointer<gchar> prefix,
  ) {
    return _g_str_has_prefix(
      str,
      prefix,
    );
  }

  late final _g_str_has_prefixPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_str_has_prefix');
  late final _g_str_has_prefix = _g_str_has_prefixPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  double g_strtod(
    ffi.Pointer<gchar> nptr,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
  ) {
    return _g_strtod(
      nptr,
      endptr,
    );
  }

  late final _g_strtodPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strtod');
  late final _g_strtod = _g_strtodPtr.asFunction<
      double Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  double g_ascii_strtod(
    ffi.Pointer<gchar> nptr,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
  ) {
    return _g_ascii_strtod(
      nptr,
      endptr,
    );
  }

  late final _g_ascii_strtodPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_ascii_strtod');
  late final _g_ascii_strtod = _g_ascii_strtodPtr.asFunction<
      double Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_ascii_strtoull(
    ffi.Pointer<gchar> nptr,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
    int base,
  ) {
    return _g_ascii_strtoull(
      nptr,
      endptr,
      base,
    );
  }

  late final _g_ascii_strtoullPtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>,
              guint)>>('g_ascii_strtoull');
  late final _g_ascii_strtoull = _g_ascii_strtoullPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  int g_ascii_strtoll(
    ffi.Pointer<gchar> nptr,
    ffi.Pointer<ffi.Pointer<gchar>> endptr,
    int base,
  ) {
    return _g_ascii_strtoll(
      nptr,
      endptr,
      base,
    );
  }

  late final _g_ascii_strtollPtr = _lookup<
      ffi.NativeFunction<
          gint64 Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>,
              guint)>>('g_ascii_strtoll');
  late final _g_ascii_strtoll = _g_ascii_strtollPtr.asFunction<
      int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>, int)>();

  ffi.Pointer<gchar> g_ascii_dtostr(
    ffi.Pointer<gchar> buffer,
    int buf_len,
    double d,
  ) {
    return _g_ascii_dtostr(
      buffer,
      buf_len,
      d,
    );
  }

  late final _g_ascii_dtostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gint, gdouble)>>('g_ascii_dtostr');
  late final _g_ascii_dtostr = _g_ascii_dtostrPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int, double)>();

  ffi.Pointer<gchar> g_ascii_formatd(
    ffi.Pointer<gchar> buffer,
    int buf_len,
    ffi.Pointer<gchar> format,
    double d,
  ) {
    return _g_ascii_formatd(
      buffer,
      buf_len,
      format,
      d,
    );
  }

  late final _g_ascii_formatdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, gint,
              ffi.Pointer<gchar>, gdouble)>>('g_ascii_formatd');
  late final _g_ascii_formatd = _g_ascii_formatdPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<gchar>, double)>();

  ffi.Pointer<gchar> g_strchug(
    ffi.Pointer<gchar> string,
  ) {
    return _g_strchug(
      string,
    );
  }

  late final _g_strchugPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strchug');
  late final _g_strchug = _g_strchugPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strchomp(
    ffi.Pointer<gchar> string,
  ) {
    return _g_strchomp(
      string,
    );
  }

  late final _g_strchompPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strchomp');
  late final _g_strchomp = _g_strchompPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_ascii_strcasecmp(
    ffi.Pointer<gchar> s1,
    ffi.Pointer<gchar> s2,
  ) {
    return _g_ascii_strcasecmp(
      s1,
      s2,
    );
  }

  late final _g_ascii_strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_ascii_strcasecmp');
  late final _g_ascii_strcasecmp = _g_ascii_strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_ascii_strncasecmp(
    ffi.Pointer<gchar> s1,
    ffi.Pointer<gchar> s2,
    int n,
  ) {
    return _g_ascii_strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _g_ascii_strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              gsize)>>('g_ascii_strncasecmp');
  late final _g_ascii_strncasecmp = _g_ascii_strncasecmpPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_ascii_strdown(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_ascii_strdown(
      str,
      len,
    );
  }

  late final _g_ascii_strdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_ascii_strdown');
  late final _g_ascii_strdown = _g_ascii_strdownPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_ascii_strup(
    ffi.Pointer<gchar> str,
    int len,
  ) {
    return _g_ascii_strup(
      str,
      len,
    );
  }

  late final _g_ascii_strupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, gssize)>>('g_ascii_strup');
  late final _g_ascii_strup = _g_ascii_strupPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  int g_str_is_ascii(
    ffi.Pointer<gchar> str,
  ) {
    return _g_str_is_ascii(
      str,
    );
  }

  late final _g_str_is_asciiPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_str_is_ascii');
  late final _g_str_is_ascii =
      _g_str_is_asciiPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_strcasecmp(
    ffi.Pointer<gchar> s1,
    ffi.Pointer<gchar> s2,
  ) {
    return _g_strcasecmp(
      s1,
      s2,
    );
  }

  late final _g_strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_strcasecmp');
  late final _g_strcasecmp = _g_strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_strncasecmp(
    ffi.Pointer<gchar> s1,
    ffi.Pointer<gchar> s2,
    int n,
  ) {
    return _g_strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _g_strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, guint)>>('g_strncasecmp');
  late final _g_strncasecmp = _g_strncasecmpPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strdown(
    ffi.Pointer<gchar> string,
  ) {
    return _g_strdown(
      string,
    );
  }

  late final _g_strdownPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strdown');
  late final _g_strdown = _g_strdownPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strup(
    ffi.Pointer<gchar> string,
  ) {
    return _g_strup(
      string,
    );
  }

  late final _g_strupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strup');
  late final _g_strup =
      _g_strupPtr.asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strdup(
    ffi.Pointer<gchar> str,
  ) {
    return _g_strdup(
      str,
    );
  }

  late final _g_strdupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strdup');
  late final _g_strdup = _g_strdupPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strdup_printf(
    ffi.Pointer<gchar> format,
  ) {
    return _g_strdup_printf(
      format,
    );
  }

  late final _g_strdup_printfPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strdup_printf');
  late final _g_strdup_printf = _g_strdup_printfPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strdup_vprintf(
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_strdup_vprintf(
      format,
      args,
    );
  }

  late final _g_strdup_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_strdup_vprintf');
  late final _g_strdup_vprintf = _g_strdup_vprintfPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<gchar> g_strndup(
    ffi.Pointer<gchar> str,
    int n,
  ) {
    return _g_strndup(
      str,
      n,
    );
  }

  late final _g_strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, gsize)>>('g_strndup');
  late final _g_strndup = _g_strndupPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strnfill(
    int length,
    int fill_char,
  ) {
    return _g_strnfill(
      length,
      fill_char,
    );
  }

  late final _g_strnfillPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(gsize, gchar)>>(
          'g_strnfill');
  late final _g_strnfill =
      _g_strnfillPtr.asFunction<ffi.Pointer<gchar> Function(int, int)>();

  ffi.Pointer<gchar> g_strconcat(
    ffi.Pointer<gchar> string1,
  ) {
    return _g_strconcat(
      string1,
    );
  }

  late final _g_strconcatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strconcat');
  late final _g_strconcat = _g_strconcatPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strjoin(
    ffi.Pointer<gchar> separator,
  ) {
    return _g_strjoin(
      separator,
    );
  }

  late final _g_strjoinPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strjoin');
  late final _g_strjoin = _g_strjoinPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strcompress(
    ffi.Pointer<gchar> source,
  ) {
    return _g_strcompress(
      source,
    );
  }

  late final _g_strcompressPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_strcompress');
  late final _g_strcompress = _g_strcompressPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strescape(
    ffi.Pointer<gchar> source,
    ffi.Pointer<gchar> exceptions,
  ) {
    return _g_strescape(
      source,
      exceptions,
    );
  }

  late final _g_strescapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_strescape');
  late final _g_strescape = _g_strescapePtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  gpointer g_memdup(
    gconstpointer mem,
    int byte_size,
  ) {
    return _g_memdup(
      mem,
      byte_size,
    );
  }

  late final _g_memdupPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gconstpointer, guint)>>(
          'g_memdup');
  late final _g_memdup =
      _g_memdupPtr.asFunction<gpointer Function(gconstpointer, int)>();

  gpointer g_memdup2(
    gconstpointer mem,
    int byte_size,
  ) {
    return _g_memdup2(
      mem,
      byte_size,
    );
  }

  late final _g_memdup2Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(gconstpointer, gsize)>>(
          'g_memdup2');
  late final _g_memdup2 =
      _g_memdup2Ptr.asFunction<gpointer Function(gconstpointer, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_strsplit(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> delimiter,
    int max_tokens,
  ) {
    return _g_strsplit(
      string,
      delimiter,
      max_tokens,
    );
  }

  late final _g_strsplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gint)>>('g_strsplit');
  late final _g_strsplit = _g_strsplitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_strsplit_set(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> delimiters,
    int max_tokens,
  ) {
    return _g_strsplit_set(
      string,
      delimiters,
      max_tokens,
    );
  }

  late final _g_strsplit_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, gint)>>('g_strsplit_set');
  late final _g_strsplit_set = _g_strsplit_setPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_strjoinv(
    ffi.Pointer<gchar> separator,
    ffi.Pointer<ffi.Pointer<gchar>> str_array,
  ) {
    return _g_strjoinv(
      separator,
      str_array,
    );
  }

  late final _g_strjoinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strjoinv');
  late final _g_strjoinv = _g_strjoinvPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_strfreev(
    ffi.Pointer<ffi.Pointer<gchar>> str_array,
  ) {
    return _g_strfreev(
      str_array,
    );
  }

  late final _g_strfreevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strfreev');
  late final _g_strfreev = _g_strfreevPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_strdupv(
    ffi.Pointer<ffi.Pointer<gchar>> str_array,
  ) {
    return _g_strdupv(
      str_array,
    );
  }

  late final _g_strdupvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strdupv');
  late final _g_strdupv = _g_strdupvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_strv_length(
    ffi.Pointer<ffi.Pointer<gchar>> str_array,
  ) {
    return _g_strv_length(
      str_array,
    );
  }

  late final _g_strv_lengthPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_strv_length');
  late final _g_strv_length = _g_strv_lengthPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_stpcpy(
    ffi.Pointer<gchar> dest,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _g_stpcpy(
      dest,
      src,
    );
  }

  late final _g_stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Char>)>>('g_stpcpy');
  late final _g_stpcpy = _g_stpcpyPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<gchar> g_str_to_ascii(
    ffi.Pointer<gchar> str,
    ffi.Pointer<gchar> from_locale,
  ) {
    return _g_str_to_ascii(
      str,
      from_locale,
    );
  }

  late final _g_str_to_asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_str_to_ascii');
  late final _g_str_to_ascii = _g_str_to_asciiPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_str_tokenize_and_fold(
    ffi.Pointer<gchar> string,
    ffi.Pointer<gchar> translit_locale,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> ascii_alternates,
  ) {
    return _g_str_tokenize_and_fold(
      string,
      translit_locale,
      ascii_alternates,
    );
  }

  late final _g_str_tokenize_and_foldPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>>(
      'g_str_tokenize_and_fold');
  late final _g_str_tokenize_and_fold = _g_str_tokenize_and_foldPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>();

  int g_str_match_string(
    ffi.Pointer<gchar> search_term,
    ffi.Pointer<gchar> potential_hit,
    int accept_alternates,
  ) {
    return _g_str_match_string(
      search_term,
      potential_hit,
      accept_alternates,
    );
  }

  late final _g_str_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              gboolean)>>('g_str_match_string');
  late final _g_str_match_string = _g_str_match_stringPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  int g_strv_contains(
    ffi.Pointer<ffi.Pointer<gchar>> strv,
    ffi.Pointer<gchar> str,
  ) {
    return _g_strv_contains(
      strv,
      str,
    );
  }

  late final _g_strv_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gchar>)>>('g_strv_contains');
  late final _g_strv_contains = _g_strv_containsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<gchar>)>();

  int g_strv_equal(
    ffi.Pointer<ffi.Pointer<gchar>> strv1,
    ffi.Pointer<ffi.Pointer<gchar>> strv2,
  ) {
    return _g_strv_equal(
      strv1,
      strv2,
    );
  }

  late final _g_strv_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_strv_equal');
  late final _g_strv_equal = _g_strv_equalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_number_parser_error_quark() {
    return _g_number_parser_error_quark();
  }

  late final _g_number_parser_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_number_parser_error_quark');
  late final _g_number_parser_error_quark =
      _g_number_parser_error_quarkPtr.asFunction<int Function()>();

  int g_ascii_string_to_signed(
    ffi.Pointer<gchar> str,
    int base,
    int min,
    int max,
    ffi.Pointer<gint64> out_num,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ascii_string_to_signed(
      str,
      base,
      min,
      max,
      out_num,
      error,
    );
  }

  late final _g_ascii_string_to_signedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              guint,
              gint64,
              gint64,
              ffi.Pointer<gint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ascii_string_to_signed');
  late final _g_ascii_string_to_signed =
      _g_ascii_string_to_signedPtr.asFunction<
          int Function(ffi.Pointer<gchar>, int, int, int, ffi.Pointer<gint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_ascii_string_to_unsigned(
    ffi.Pointer<gchar> str,
    int base,
    int min,
    int max,
    ffi.Pointer<guint64> out_num,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ascii_string_to_unsigned(
      str,
      base,
      min,
      max,
      out_num,
      error,
    );
  }

  late final _g_ascii_string_to_unsignedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              guint,
              guint64,
              guint64,
              ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ascii_string_to_unsigned');
  late final _g_ascii_string_to_unsigned =
      _g_ascii_string_to_unsignedPtr.asFunction<
          int Function(ffi.Pointer<gchar>, int, int, int, ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GStringChunk> g_string_chunk_new(
    int size,
  ) {
    return _g_string_chunk_new(
      size,
    );
  }

  late final _g_string_chunk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GStringChunk> Function(gsize)>>(
          'g_string_chunk_new');
  late final _g_string_chunk_new = _g_string_chunk_newPtr
      .asFunction<ffi.Pointer<GStringChunk> Function(int)>();

  void g_string_chunk_free(
    ffi.Pointer<GStringChunk> chunk,
  ) {
    return _g_string_chunk_free(
      chunk,
    );
  }

  late final _g_string_chunk_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStringChunk>)>>(
          'g_string_chunk_free');
  late final _g_string_chunk_free = _g_string_chunk_freePtr
      .asFunction<void Function(ffi.Pointer<GStringChunk>)>();

  void g_string_chunk_clear(
    ffi.Pointer<GStringChunk> chunk,
  ) {
    return _g_string_chunk_clear(
      chunk,
    );
  }

  late final _g_string_chunk_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStringChunk>)>>(
          'g_string_chunk_clear');
  late final _g_string_chunk_clear = _g_string_chunk_clearPtr
      .asFunction<void Function(ffi.Pointer<GStringChunk>)>();

  ffi.Pointer<gchar> g_string_chunk_insert(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<gchar> string,
  ) {
    return _g_string_chunk_insert(
      chunk,
      string,
    );
  }

  late final _g_string_chunk_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<gchar>)>>('g_string_chunk_insert');
  late final _g_string_chunk_insert = _g_string_chunk_insertPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<GStringChunk>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_string_chunk_insert_len(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<gchar> string,
    int len,
  ) {
    return _g_string_chunk_insert_len(
      chunk,
      string,
      len,
    );
  }

  late final _g_string_chunk_insert_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<gchar>, gssize)>>('g_string_chunk_insert_len');
  late final _g_string_chunk_insert_len =
      _g_string_chunk_insert_lenPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GStringChunk>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_string_chunk_insert_const(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<gchar> string,
  ) {
    return _g_string_chunk_insert_const(
      chunk,
      string,
    );
  }

  late final _g_string_chunk_insert_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<gchar>)>>('g_string_chunk_insert_const');
  late final _g_string_chunk_insert_const =
      _g_string_chunk_insert_constPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GStringChunk>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GStrvBuilder> g_strv_builder_new() {
    return _g_strv_builder_new();
  }

  late final _g_strv_builder_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GStrvBuilder> Function()>>(
          'g_strv_builder_new');
  late final _g_strv_builder_new =
      _g_strv_builder_newPtr.asFunction<ffi.Pointer<GStrvBuilder> Function()>();

  void g_strv_builder_unref(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_unref(
      builder,
    );
  }

  late final _g_strv_builder_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_unref');
  late final _g_strv_builder_unref = _g_strv_builder_unrefPtr
      .asFunction<void Function(ffi.Pointer<GStrvBuilder>)>();

  ffi.Pointer<GStrvBuilder> g_strv_builder_ref(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_ref(
      builder,
    );
  }

  late final _g_strv_builder_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GStrvBuilder> Function(
              ffi.Pointer<GStrvBuilder>)>>('g_strv_builder_ref');
  late final _g_strv_builder_ref = _g_strv_builder_refPtr.asFunction<
      ffi.Pointer<GStrvBuilder> Function(ffi.Pointer<GStrvBuilder>)>();

  void g_strv_builder_add(
    ffi.Pointer<GStrvBuilder> builder,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _g_strv_builder_add(
      builder,
      value,
    );
  }

  late final _g_strv_builder_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStrvBuilder>,
              ffi.Pointer<ffi.Char>)>>('g_strv_builder_add');
  late final _g_strv_builder_add = _g_strv_builder_addPtr.asFunction<
      void Function(ffi.Pointer<GStrvBuilder>, ffi.Pointer<ffi.Char>)>();

  void g_strv_builder_addv(
    ffi.Pointer<GStrvBuilder> builder,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _g_strv_builder_addv(
      builder,
      value,
    );
  }

  late final _g_strv_builder_addvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStrvBuilder>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strv_builder_addv');
  late final _g_strv_builder_addv = _g_strv_builder_addvPtr.asFunction<
      void Function(
          ffi.Pointer<GStrvBuilder>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_strv_builder_add_many(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_add_many(
      builder,
    );
  }

  late final _g_strv_builder_add_manyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_add_many');
  late final _g_strv_builder_add_many = _g_strv_builder_add_manyPtr
      .asFunction<void Function(ffi.Pointer<GStrvBuilder>)>();

  GStrv g_strv_builder_end(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_end(
      builder,
    );
  }

  late final _g_strv_builder_endPtr =
      _lookup<ffi.NativeFunction<GStrv Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_end');
  late final _g_strv_builder_end = _g_strv_builder_endPtr
      .asFunction<GStrv Function(ffi.Pointer<GStrvBuilder>)>();

  int g_strcmp0(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _g_strcmp0(
      str1,
      str2,
    );
  }

  late final _g_strcmp0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_strcmp0');
  late final _g_strcmp0 = _g_strcmp0Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_test_minimized_result(
    double minimized_quantity,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_minimized_result(
      minimized_quantity,
      format,
    );
  }

  late final _g_test_minimized_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Char>)>>('g_test_minimized_result');
  late final _g_test_minimized_result = _g_test_minimized_resultPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Char>)>();

  void g_test_maximized_result(
    double maximized_quantity,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_maximized_result(
      maximized_quantity,
      format,
    );
  }

  late final _g_test_maximized_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Char>)>>('g_test_maximized_result');
  late final _g_test_maximized_result = _g_test_maximized_resultPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Char>)>();

  void g_test_init(
    ffi.Pointer<ffi.Int> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
  ) {
    return _g_test_init(
      argc,
      argv,
    );
  }

  late final _g_test_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>('g_test_init');
  late final _g_test_init = _g_test_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  int g_test_subprocess() {
    return _g_test_subprocess();
  }

  late final _g_test_subprocessPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('g_test_subprocess');
  late final _g_test_subprocess =
      _g_test_subprocessPtr.asFunction<int Function()>();

  int g_test_run() {
    return _g_test_run();
  }

  late final _g_test_runPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('g_test_run');
  late final _g_test_run = _g_test_runPtr.asFunction<int Function()>();

  void g_test_add_func(
    ffi.Pointer<ffi.Char> testpath,
    GTestFunc test_func,
  ) {
    return _g_test_add_func(
      testpath,
      test_func,
    );
  }

  late final _g_test_add_funcPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, GTestFunc)>>(
      'g_test_add_func');
  late final _g_test_add_func = _g_test_add_funcPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, GTestFunc)>();

  void g_test_add_data_func(
    ffi.Pointer<ffi.Char> testpath,
    gconstpointer test_data,
    GTestDataFunc test_func,
  ) {
    return _g_test_add_data_func(
      testpath,
      test_data,
      test_func,
    );
  }

  late final _g_test_add_data_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, gconstpointer,
              GTestDataFunc)>>('g_test_add_data_func');
  late final _g_test_add_data_func = _g_test_add_data_funcPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, gconstpointer, GTestDataFunc)>();

  void g_test_add_data_func_full(
    ffi.Pointer<ffi.Char> testpath,
    gpointer test_data,
    GTestDataFunc test_func,
    GDestroyNotify data_free_func,
  ) {
    return _g_test_add_data_func_full(
      testpath,
      test_data,
      test_func,
      data_free_func,
    );
  }

  late final _g_test_add_data_func_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, gpointer, GTestDataFunc,
              GDestroyNotify)>>('g_test_add_data_func_full');
  late final _g_test_add_data_func_full =
      _g_test_add_data_func_fullPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, gpointer, GTestDataFunc,
              GDestroyNotify)>();

  ffi.Pointer<ffi.Char> g_test_get_path() {
    return _g_test_get_path();
  }

  late final _g_test_get_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_test_get_path');
  late final _g_test_get_path =
      _g_test_get_pathPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_test_fail() {
    return _g_test_fail();
  }

  late final _g_test_failPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_test_fail');
  late final _g_test_fail = _g_test_failPtr.asFunction<void Function()>();

  void g_test_fail_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_fail_printf(
      format,
    );
  }

  late final _g_test_fail_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_fail_printf');
  late final _g_test_fail_printf =
      _g_test_fail_printfPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_incomplete(
    ffi.Pointer<gchar> msg,
  ) {
    return _g_test_incomplete(
      msg,
    );
  }

  late final _g_test_incompletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_test_incomplete');
  late final _g_test_incomplete =
      _g_test_incompletePtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  void g_test_incomplete_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_incomplete_printf(
      format,
    );
  }

  late final _g_test_incomplete_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_incomplete_printf');
  late final _g_test_incomplete_printf = _g_test_incomplete_printfPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_skip(
    ffi.Pointer<gchar> msg,
  ) {
    return _g_test_skip(
      msg,
    );
  }

  late final _g_test_skipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gchar>)>>(
          'g_test_skip');
  late final _g_test_skip =
      _g_test_skipPtr.asFunction<void Function(ffi.Pointer<gchar>)>();

  void g_test_skip_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_skip_printf(
      format,
    );
  }

  late final _g_test_skip_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_skip_printf');
  late final _g_test_skip_printf =
      _g_test_skip_printfPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int g_test_failed() {
    return _g_test_failed();
  }

  late final _g_test_failedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('g_test_failed');
  late final _g_test_failed = _g_test_failedPtr.asFunction<int Function()>();

  void g_test_set_nonfatal_assertions() {
    return _g_test_set_nonfatal_assertions();
  }

  late final _g_test_set_nonfatal_assertionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_test_set_nonfatal_assertions');
  late final _g_test_set_nonfatal_assertions =
      _g_test_set_nonfatal_assertionsPtr.asFunction<void Function()>();

  void g_test_message(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_message(
      format,
    );
  }

  late final _g_test_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_message');
  late final _g_test_message =
      _g_test_messagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_bug_base(
    ffi.Pointer<ffi.Char> uri_pattern,
  ) {
    return _g_test_bug_base(
      uri_pattern,
    );
  }

  late final _g_test_bug_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_bug_base');
  late final _g_test_bug_base =
      _g_test_bug_basePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_bug(
    ffi.Pointer<ffi.Char> bug_uri_snippet,
  ) {
    return _g_test_bug(
      bug_uri_snippet,
    );
  }

  late final _g_test_bugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_bug');
  late final _g_test_bug =
      _g_test_bugPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_summary(
    ffi.Pointer<ffi.Char> summary,
  ) {
    return _g_test_summary(
      summary,
    );
  }

  late final _g_test_summaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_summary');
  late final _g_test_summary =
      _g_test_summaryPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_timer_start() {
    return _g_test_timer_start();
  }

  late final _g_test_timer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_test_timer_start');
  late final _g_test_timer_start =
      _g_test_timer_startPtr.asFunction<void Function()>();

  double g_test_timer_elapsed() {
    return _g_test_timer_elapsed();
  }

  late final _g_test_timer_elapsedPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'g_test_timer_elapsed');
  late final _g_test_timer_elapsed =
      _g_test_timer_elapsedPtr.asFunction<double Function()>();

  double g_test_timer_last() {
    return _g_test_timer_last();
  }

  late final _g_test_timer_lastPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('g_test_timer_last');
  late final _g_test_timer_last =
      _g_test_timer_lastPtr.asFunction<double Function()>();

  void g_test_queue_free(
    gpointer gfree_pointer,
  ) {
    return _g_test_queue_free(
      gfree_pointer,
    );
  }

  late final _g_test_queue_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_test_queue_free');
  late final _g_test_queue_free =
      _g_test_queue_freePtr.asFunction<void Function(gpointer)>();

  void g_test_queue_destroy(
    GDestroyNotify destroy_func,
    gpointer destroy_data,
  ) {
    return _g_test_queue_destroy(
      destroy_func,
      destroy_data,
    );
  }

  late final _g_test_queue_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GDestroyNotify, gpointer)>>(
          'g_test_queue_destroy');
  late final _g_test_queue_destroy = _g_test_queue_destroyPtr
      .asFunction<void Function(GDestroyNotify, gpointer)>();

  int g_test_trap_fork(
    int usec_timeout,
    int test_trap_flags,
  ) {
    return _g_test_trap_fork(
      usec_timeout,
      test_trap_flags,
    );
  }

  late final _g_test_trap_forkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint64, ffi.Int32)>>(
          'g_test_trap_fork');
  late final _g_test_trap_fork =
      _g_test_trap_forkPtr.asFunction<int Function(int, int)>();

  void g_test_trap_subprocess(
    ffi.Pointer<ffi.Char> test_path,
    int usec_timeout,
    int test_flags,
  ) {
    return _g_test_trap_subprocess(
      test_path,
      usec_timeout,
      test_flags,
    );
  }

  late final _g_test_trap_subprocessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, guint64,
              ffi.Int32)>>('g_test_trap_subprocess');
  late final _g_test_trap_subprocess = _g_test_trap_subprocessPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  int g_test_trap_has_passed() {
    return _g_test_trap_has_passed();
  }

  late final _g_test_trap_has_passedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_test_trap_has_passed');
  late final _g_test_trap_has_passed =
      _g_test_trap_has_passedPtr.asFunction<int Function()>();

  int g_test_trap_reached_timeout() {
    return _g_test_trap_reached_timeout();
  }

  late final _g_test_trap_reached_timeoutPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_test_trap_reached_timeout');
  late final _g_test_trap_reached_timeout =
      _g_test_trap_reached_timeoutPtr.asFunction<int Function()>();

  int g_test_rand_int() {
    return _g_test_rand_int();
  }

  late final _g_test_rand_intPtr =
      _lookup<ffi.NativeFunction<gint32 Function()>>('g_test_rand_int');
  late final _g_test_rand_int =
      _g_test_rand_intPtr.asFunction<int Function()>();

  int g_test_rand_int_range(
    int begin,
    int end,
  ) {
    return _g_test_rand_int_range(
      begin,
      end,
    );
  }

  late final _g_test_rand_int_rangePtr =
      _lookup<ffi.NativeFunction<gint32 Function(gint32, gint32)>>(
          'g_test_rand_int_range');
  late final _g_test_rand_int_range =
      _g_test_rand_int_rangePtr.asFunction<int Function(int, int)>();

  double g_test_rand_double() {
    return _g_test_rand_double();
  }

  late final _g_test_rand_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('g_test_rand_double');
  late final _g_test_rand_double =
      _g_test_rand_doublePtr.asFunction<double Function()>();

  double g_test_rand_double_range(
    double range_start,
    double range_end,
  ) {
    return _g_test_rand_double_range(
      range_start,
      range_end,
    );
  }

  late final _g_test_rand_double_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'g_test_rand_double_range');
  late final _g_test_rand_double_range = _g_test_rand_double_rangePtr
      .asFunction<double Function(double, double)>();

  ffi.Pointer<GTestCase> g_test_create_case(
    ffi.Pointer<ffi.Char> test_name,
    int data_size,
    gconstpointer test_data,
    GTestFixtureFunc data_setup,
    GTestFixtureFunc data_test,
    GTestFixtureFunc data_teardown,
  ) {
    return _g_test_create_case(
      test_name,
      data_size,
      test_data,
      data_setup,
      data_test,
      data_teardown,
    );
  }

  late final _g_test_create_casePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestCase> Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              gconstpointer,
              GTestFixtureFunc,
              GTestFixtureFunc,
              GTestFixtureFunc)>>('g_test_create_case');
  late final _g_test_create_case = _g_test_create_casePtr.asFunction<
      ffi.Pointer<GTestCase> Function(ffi.Pointer<ffi.Char>, int, gconstpointer,
          GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)>();

  ffi.Pointer<GTestSuite> g_test_create_suite(
    ffi.Pointer<ffi.Char> suite_name,
  ) {
    return _g_test_create_suite(
      suite_name,
    );
  }

  late final _g_test_create_suitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestSuite> Function(
              ffi.Pointer<ffi.Char>)>>('g_test_create_suite');
  late final _g_test_create_suite = _g_test_create_suitePtr
      .asFunction<ffi.Pointer<GTestSuite> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GTestSuite> g_test_get_root() {
    return _g_test_get_root();
  }

  late final _g_test_get_rootPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTestSuite> Function()>>(
          'g_test_get_root');
  late final _g_test_get_root =
      _g_test_get_rootPtr.asFunction<ffi.Pointer<GTestSuite> Function()>();

  void g_test_suite_add(
    ffi.Pointer<GTestSuite> suite,
    ffi.Pointer<GTestCase> test_case,
  ) {
    return _g_test_suite_add(
      suite,
      test_case,
    );
  }

  late final _g_test_suite_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestSuite>,
              ffi.Pointer<GTestCase>)>>('g_test_suite_add');
  late final _g_test_suite_add = _g_test_suite_addPtr.asFunction<
      void Function(ffi.Pointer<GTestSuite>, ffi.Pointer<GTestCase>)>();

  void g_test_suite_add_suite(
    ffi.Pointer<GTestSuite> suite,
    ffi.Pointer<GTestSuite> nestedsuite,
  ) {
    return _g_test_suite_add_suite(
      suite,
      nestedsuite,
    );
  }

  late final _g_test_suite_add_suitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestSuite>,
              ffi.Pointer<GTestSuite>)>>('g_test_suite_add_suite');
  late final _g_test_suite_add_suite = _g_test_suite_add_suitePtr.asFunction<
      void Function(ffi.Pointer<GTestSuite>, ffi.Pointer<GTestSuite>)>();

  int g_test_run_suite(
    ffi.Pointer<GTestSuite> suite,
  ) {
    return _g_test_run_suite(
      suite,
    );
  }

  late final _g_test_run_suitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GTestSuite>)>>(
          'g_test_run_suite');
  late final _g_test_run_suite =
      _g_test_run_suitePtr.asFunction<int Function(ffi.Pointer<GTestSuite>)>();

  void g_test_case_free(
    ffi.Pointer<GTestCase> test_case,
  ) {
    return _g_test_case_free(
      test_case,
    );
  }

  late final _g_test_case_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestCase>)>>(
          'g_test_case_free');
  late final _g_test_case_free =
      _g_test_case_freePtr.asFunction<void Function(ffi.Pointer<GTestCase>)>();

  void g_test_suite_free(
    ffi.Pointer<GTestSuite> suite,
  ) {
    return _g_test_suite_free(
      suite,
    );
  }

  late final _g_test_suite_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestSuite>)>>(
          'g_test_suite_free');
  late final _g_test_suite_free = _g_test_suite_freePtr
      .asFunction<void Function(ffi.Pointer<GTestSuite>)>();

  void g_test_trap_assertions(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    int assertion_flags,
    ffi.Pointer<ffi.Char> pattern,
  ) {
    return _g_test_trap_assertions(
      domain,
      file,
      line,
      func,
      assertion_flags,
      pattern,
    );
  }

  late final _g_test_trap_assertionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              guint64,
              ffi.Pointer<ffi.Char>)>>('g_test_trap_assertions');
  late final _g_test_trap_assertions = _g_test_trap_assertionsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _g_assertion_message(
      domain,
      file,
      line,
      func,
      message,
    );
  }

  late final _g_assertion_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message');
  late final _g_assertion_message = _g_assertion_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_expr(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
  ) {
    return _g_assertion_message_expr(
      domain,
      file,
      line,
      func,
      expr,
    );
  }

  late final _g_assertion_message_exprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message_expr');
  late final _g_assertion_message_expr =
      _g_assertion_message_exprPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_cmpstr(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> cmp,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _g_assertion_message_cmpstr(
      domain,
      file,
      line,
      func,
      expr,
      arg1,
      cmp,
      arg2,
    );
  }

  late final _g_assertion_message_cmpstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message_cmpstr');
  late final _g_assertion_message_cmpstr =
      _g_assertion_message_cmpstrPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_cmpstrv(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    int first_wrong_idx,
  ) {
    return _g_assertion_message_cmpstrv(
      domain,
      file,
      line,
      func,
      expr,
      arg1,
      arg2,
      first_wrong_idx,
    );
  }

  late final _g_assertion_message_cmpstrvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gsize)>>('g_assertion_message_cmpstrv');
  late final _g_assertion_message_cmpstrv =
      _g_assertion_message_cmpstrvPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int)>();

  void g_assertion_message_error(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<GError> error,
    int error_domain,
    int error_code,
  ) {
    return _g_assertion_message_error(
      domain,
      file,
      line,
      func,
      expr,
      error,
      error_domain,
      error_code,
    );
  }

  late final _g_assertion_message_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GError>,
              GQuark,
              ffi.Int)>>('g_assertion_message_error');
  late final _g_assertion_message_error =
      _g_assertion_message_errorPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GError>,
              int,
              int)>();

  void g_test_add_vtable(
    ffi.Pointer<ffi.Char> testpath,
    int data_size,
    gconstpointer test_data,
    GTestFixtureFunc data_setup,
    GTestFixtureFunc data_test,
    GTestFixtureFunc data_teardown,
  ) {
    return _g_test_add_vtable(
      testpath,
      data_size,
      test_data,
      data_setup,
      data_test,
      data_teardown,
    );
  }

  late final _g_test_add_vtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              gconstpointer,
              GTestFixtureFunc,
              GTestFixtureFunc,
              GTestFixtureFunc)>>('g_test_add_vtable');
  late final _g_test_add_vtable = _g_test_add_vtablePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, gconstpointer, GTestFixtureFunc,
          GTestFixtureFunc, GTestFixtureFunc)>();

  late final ffi.Pointer<ffi.Pointer<GTestConfig>> _g_test_config_vars =
      _lookup<ffi.Pointer<GTestConfig>>('g_test_config_vars');

  ffi.Pointer<GTestConfig> get g_test_config_vars => _g_test_config_vars.value;

  ffi.Pointer<ffi.Char> g_test_log_type_name(
    int log_type,
  ) {
    return _g_test_log_type_name(
      log_type,
    );
  }

  late final _g_test_log_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'g_test_log_type_name');
  late final _g_test_log_type_name = _g_test_log_type_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<GTestLogBuffer> g_test_log_buffer_new() {
    return _g_test_log_buffer_new();
  }

  late final _g_test_log_buffer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTestLogBuffer> Function()>>(
          'g_test_log_buffer_new');
  late final _g_test_log_buffer_new = _g_test_log_buffer_newPtr
      .asFunction<ffi.Pointer<GTestLogBuffer> Function()>();

  void g_test_log_buffer_free(
    ffi.Pointer<GTestLogBuffer> tbuffer,
  ) {
    return _g_test_log_buffer_free(
      tbuffer,
    );
  }

  late final _g_test_log_buffer_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestLogBuffer>)>>(
      'g_test_log_buffer_free');
  late final _g_test_log_buffer_free = _g_test_log_buffer_freePtr
      .asFunction<void Function(ffi.Pointer<GTestLogBuffer>)>();

  void g_test_log_buffer_push(
    ffi.Pointer<GTestLogBuffer> tbuffer,
    int n_bytes,
    ffi.Pointer<guint8> bytes,
  ) {
    return _g_test_log_buffer_push(
      tbuffer,
      n_bytes,
      bytes,
    );
  }

  late final _g_test_log_buffer_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestLogBuffer>, guint,
              ffi.Pointer<guint8>)>>('g_test_log_buffer_push');
  late final _g_test_log_buffer_push = _g_test_log_buffer_pushPtr.asFunction<
      void Function(ffi.Pointer<GTestLogBuffer>, int, ffi.Pointer<guint8>)>();

  ffi.Pointer<GTestLogMsg> g_test_log_buffer_pop(
    ffi.Pointer<GTestLogBuffer> tbuffer,
  ) {
    return _g_test_log_buffer_pop(
      tbuffer,
    );
  }

  late final _g_test_log_buffer_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestLogMsg> Function(
              ffi.Pointer<GTestLogBuffer>)>>('g_test_log_buffer_pop');
  late final _g_test_log_buffer_pop = _g_test_log_buffer_popPtr.asFunction<
      ffi.Pointer<GTestLogMsg> Function(ffi.Pointer<GTestLogBuffer>)>();

  void g_test_log_msg_free(
    ffi.Pointer<GTestLogMsg> tmsg,
  ) {
    return _g_test_log_msg_free(
      tmsg,
    );
  }

  late final _g_test_log_msg_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestLogMsg>)>>(
          'g_test_log_msg_free');
  late final _g_test_log_msg_free = _g_test_log_msg_freePtr
      .asFunction<void Function(ffi.Pointer<GTestLogMsg>)>();

  void g_test_log_set_fatal_handler(
    GTestLogFatalFunc log_func,
    gpointer user_data,
  ) {
    return _g_test_log_set_fatal_handler(
      log_func,
      user_data,
    );
  }

  late final _g_test_log_set_fatal_handlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GTestLogFatalFunc, gpointer)>>(
      'g_test_log_set_fatal_handler');
  late final _g_test_log_set_fatal_handler = _g_test_log_set_fatal_handlerPtr
      .asFunction<void Function(GTestLogFatalFunc, gpointer)>();

  void g_test_expect_message(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> pattern,
  ) {
    return _g_test_expect_message(
      log_domain,
      log_level,
      pattern,
    );
  }

  late final _g_test_expect_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<gchar>)>>('g_test_expect_message');
  late final _g_test_expect_message = _g_test_expect_messagePtr
      .asFunction<void Function(ffi.Pointer<gchar>, int, ffi.Pointer<gchar>)>();

  void g_test_assert_expected_messages_internal(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
  ) {
    return _g_test_assert_expected_messages_internal(
      domain,
      file,
      line,
      func,
    );
  }

  late final _g_test_assert_expected_messages_internalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'g_test_assert_expected_messages_internal');
  late final _g_test_assert_expected_messages_internal =
      _g_test_assert_expected_messages_internalPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<gchar> g_test_build_filename(
    int file_type,
    ffi.Pointer<gchar> first_path,
  ) {
    return _g_test_build_filename(
      file_type,
      first_path,
    );
  }

  late final _g_test_build_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Int32, ffi.Pointer<gchar>)>>('g_test_build_filename');
  late final _g_test_build_filename = _g_test_build_filenamePtr
      .asFunction<ffi.Pointer<gchar> Function(int, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_test_get_dir(
    int file_type,
  ) {
    return _g_test_get_dir(
      file_type,
    );
  }

  late final _g_test_get_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Int32)>>(
          'g_test_get_dir');
  late final _g_test_get_dir =
      _g_test_get_dirPtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  ffi.Pointer<gchar> g_test_get_filename(
    int file_type,
    ffi.Pointer<gchar> first_path,
  ) {
    return _g_test_get_filename(
      file_type,
      first_path,
    );
  }

  late final _g_test_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Int32, ffi.Pointer<gchar>)>>('g_test_get_filename');
  late final _g_test_get_filename = _g_test_get_filenamePtr
      .asFunction<ffi.Pointer<gchar> Function(int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GThreadPool> g_thread_pool_new(
    GFunc func,
    gpointer user_data,
    int max_threads,
    int exclusive,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_new(
      func,
      user_data,
      max_threads,
      exclusive,
      error,
    );
  }

  late final _g_thread_pool_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThreadPool> Function(GFunc, gpointer, gint, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_new');
  late final _g_thread_pool_new = _g_thread_pool_newPtr.asFunction<
      ffi.Pointer<GThreadPool> Function(
          GFunc, gpointer, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThreadPool> g_thread_pool_new_full(
    GFunc func,
    gpointer user_data,
    GDestroyNotify item_free_func,
    int max_threads,
    int exclusive,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_new_full(
      func,
      user_data,
      item_free_func,
      max_threads,
      exclusive,
      error,
    );
  }

  late final _g_thread_pool_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThreadPool> Function(
              GFunc,
              gpointer,
              GDestroyNotify,
              gint,
              gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_new_full');
  late final _g_thread_pool_new_full = _g_thread_pool_new_fullPtr.asFunction<
      ffi.Pointer<GThreadPool> Function(GFunc, gpointer, GDestroyNotify, int,
          int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_thread_pool_free(
    ffi.Pointer<GThreadPool> pool,
    int immediate,
    int wait_,
  ) {
    return _g_thread_pool_free(
      pool,
      immediate,
      wait_,
    );
  }

  late final _g_thread_pool_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThreadPool>, gboolean,
              gboolean)>>('g_thread_pool_free');
  late final _g_thread_pool_free = _g_thread_pool_freePtr
      .asFunction<void Function(ffi.Pointer<GThreadPool>, int, int)>();

  int g_thread_pool_push(
    ffi.Pointer<GThreadPool> pool,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_push(
      pool,
      data,
      error,
    );
  }

  late final _g_thread_pool_pushPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GThreadPool>, gpointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_push');
  late final _g_thread_pool_push = _g_thread_pool_pushPtr.asFunction<
      int Function(ffi.Pointer<GThreadPool>, gpointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_thread_pool_unprocessed(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_unprocessed(
      pool,
    );
  }

  late final _g_thread_pool_unprocessedPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_unprocessed');
  late final _g_thread_pool_unprocessed = _g_thread_pool_unprocessedPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  void g_thread_pool_set_sort_function(
    ffi.Pointer<GThreadPool> pool,
    GCompareDataFunc func,
    gpointer user_data,
  ) {
    return _g_thread_pool_set_sort_function(
      pool,
      func,
      user_data,
    );
  }

  late final _g_thread_pool_set_sort_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThreadPool>, GCompareDataFunc,
              gpointer)>>('g_thread_pool_set_sort_function');
  late final _g_thread_pool_set_sort_function =
      _g_thread_pool_set_sort_functionPtr.asFunction<
          void Function(
              ffi.Pointer<GThreadPool>, GCompareDataFunc, gpointer)>();

  int g_thread_pool_move_to_front(
    ffi.Pointer<GThreadPool> pool,
    gpointer data,
  ) {
    return _g_thread_pool_move_to_front(
      pool,
      data,
    );
  }

  late final _g_thread_pool_move_to_frontPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GThreadPool>,
              gpointer)>>('g_thread_pool_move_to_front');
  late final _g_thread_pool_move_to_front = _g_thread_pool_move_to_frontPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>, gpointer)>();

  int g_thread_pool_set_max_threads(
    ffi.Pointer<GThreadPool> pool,
    int max_threads,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_set_max_threads(
      pool,
      max_threads,
      error,
    );
  }

  late final _g_thread_pool_set_max_threadsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GThreadPool>, gint,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_thread_pool_set_max_threads');
  late final _g_thread_pool_set_max_threads =
      _g_thread_pool_set_max_threadsPtr.asFunction<
          int Function(ffi.Pointer<GThreadPool>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_thread_pool_get_max_threads(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_get_max_threads(
      pool,
    );
  }

  late final _g_thread_pool_get_max_threadsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_get_max_threads');
  late final _g_thread_pool_get_max_threads = _g_thread_pool_get_max_threadsPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  int g_thread_pool_get_num_threads(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_get_num_threads(
      pool,
    );
  }

  late final _g_thread_pool_get_num_threadsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_get_num_threads');
  late final _g_thread_pool_get_num_threads = _g_thread_pool_get_num_threadsPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  void g_thread_pool_set_max_unused_threads(
    int max_threads,
  ) {
    return _g_thread_pool_set_max_unused_threads(
      max_threads,
    );
  }

  late final _g_thread_pool_set_max_unused_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gint)>>(
          'g_thread_pool_set_max_unused_threads');
  late final _g_thread_pool_set_max_unused_threads =
      _g_thread_pool_set_max_unused_threadsPtr.asFunction<void Function(int)>();

  int g_thread_pool_get_max_unused_threads() {
    return _g_thread_pool_get_max_unused_threads();
  }

  late final _g_thread_pool_get_max_unused_threadsPtr =
      _lookup<ffi.NativeFunction<gint Function()>>(
          'g_thread_pool_get_max_unused_threads');
  late final _g_thread_pool_get_max_unused_threads =
      _g_thread_pool_get_max_unused_threadsPtr.asFunction<int Function()>();

  int g_thread_pool_get_num_unused_threads() {
    return _g_thread_pool_get_num_unused_threads();
  }

  late final _g_thread_pool_get_num_unused_threadsPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_thread_pool_get_num_unused_threads');
  late final _g_thread_pool_get_num_unused_threads =
      _g_thread_pool_get_num_unused_threadsPtr.asFunction<int Function()>();

  void g_thread_pool_stop_unused_threads() {
    return _g_thread_pool_stop_unused_threads();
  }

  late final _g_thread_pool_stop_unused_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_thread_pool_stop_unused_threads');
  late final _g_thread_pool_stop_unused_threads =
      _g_thread_pool_stop_unused_threadsPtr.asFunction<void Function()>();

  void g_thread_pool_set_max_idle_time(
    int interval,
  ) {
    return _g_thread_pool_set_max_idle_time(
      interval,
    );
  }

  late final _g_thread_pool_set_max_idle_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint)>>(
          'g_thread_pool_set_max_idle_time');
  late final _g_thread_pool_set_max_idle_time =
      _g_thread_pool_set_max_idle_timePtr.asFunction<void Function(int)>();

  int g_thread_pool_get_max_idle_time() {
    return _g_thread_pool_get_max_idle_time();
  }

  late final _g_thread_pool_get_max_idle_timePtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_thread_pool_get_max_idle_time');
  late final _g_thread_pool_get_max_idle_time =
      _g_thread_pool_get_max_idle_timePtr.asFunction<int Function()>();

  ffi.Pointer<GTimer> g_timer_new() {
    return _g_timer_new();
  }

  late final _g_timer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimer> Function()>>(
          'g_timer_new');
  late final _g_timer_new =
      _g_timer_newPtr.asFunction<ffi.Pointer<GTimer> Function()>();

  void g_timer_destroy(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_destroy(
      timer,
    );
  }

  late final _g_timer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_destroy');
  late final _g_timer_destroy =
      _g_timer_destroyPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_start(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_start(
      timer,
    );
  }

  late final _g_timer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_start');
  late final _g_timer_start =
      _g_timer_startPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_stop(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_stop(
      timer,
    );
  }

  late final _g_timer_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_stop');
  late final _g_timer_stop =
      _g_timer_stopPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_reset(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_reset(
      timer,
    );
  }

  late final _g_timer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_reset');
  late final _g_timer_reset =
      _g_timer_resetPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_continue(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_continue(
      timer,
    );
  }

  late final _g_timer_continuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_continue');
  late final _g_timer_continue =
      _g_timer_continuePtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  double g_timer_elapsed(
    ffi.Pointer<GTimer> timer,
    ffi.Pointer<gulong> microseconds,
  ) {
    return _g_timer_elapsed(
      timer,
      microseconds,
    );
  }

  late final _g_timer_elapsedPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GTimer>, ffi.Pointer<gulong>)>>('g_timer_elapsed');
  late final _g_timer_elapsed = _g_timer_elapsedPtr
      .asFunction<double Function(ffi.Pointer<GTimer>, ffi.Pointer<gulong>)>();

  int g_timer_is_active(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_is_active(
      timer,
    );
  }

  late final _g_timer_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTimer>)>>(
          'g_timer_is_active');
  late final _g_timer_is_active =
      _g_timer_is_activePtr.asFunction<int Function(ffi.Pointer<GTimer>)>();

  void g_usleep(
    int microseconds,
  ) {
    return _g_usleep(
      microseconds,
    );
  }

  late final _g_usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gulong)>>('g_usleep');
  late final _g_usleep = _g_usleepPtr.asFunction<void Function(int)>();

  void g_time_val_add(
    ffi.Pointer<GTimeVal> time_,
    int microseconds,
  ) {
    return _g_time_val_add(
      time_,
      microseconds,
    );
  }

  late final _g_time_val_addPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeVal>, glong)>>(
      'g_time_val_add');
  late final _g_time_val_add = _g_time_val_addPtr
      .asFunction<void Function(ffi.Pointer<GTimeVal>, int)>();

  int g_time_val_from_iso8601(
    ffi.Pointer<gchar> iso_date,
    ffi.Pointer<GTimeVal> time_,
  ) {
    return _g_time_val_from_iso8601(
      iso_date,
      time_,
    );
  }

  late final _g_time_val_from_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>,
              ffi.Pointer<GTimeVal>)>>('g_time_val_from_iso8601');
  late final _g_time_val_from_iso8601 = _g_time_val_from_iso8601Ptr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<gchar> g_time_val_to_iso8601(
    ffi.Pointer<GTimeVal> time_,
  ) {
    return _g_time_val_to_iso8601(
      time_,
    );
  }

  late final _g_time_val_to_iso8601Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTimeVal>)>>(
      'g_time_val_to_iso8601');
  late final _g_time_val_to_iso8601 = _g_time_val_to_iso8601Ptr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTimeVal>)>();

  void g_trash_stack_push(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
    gpointer data_p,
  ) {
    return _g_trash_stack_push(
      stack_p,
      data_p,
    );
  }

  late final _g_trash_stack_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GTrashStack>>,
              gpointer)>>('g_trash_stack_push');
  late final _g_trash_stack_push = _g_trash_stack_pushPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GTrashStack>>, gpointer)>();

  gpointer g_trash_stack_pop(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_pop(
      stack_p,
    );
  }

  late final _g_trash_stack_popPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_pop');
  late final _g_trash_stack_pop = _g_trash_stack_popPtr
      .asFunction<gpointer Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  gpointer g_trash_stack_peek(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_peek(
      stack_p,
    );
  }

  late final _g_trash_stack_peekPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_peek');
  late final _g_trash_stack_peek = _g_trash_stack_peekPtr
      .asFunction<gpointer Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  int g_trash_stack_height(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_height(
      stack_p,
    );
  }

  late final _g_trash_stack_heightPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_height');
  late final _g_trash_stack_height = _g_trash_stack_heightPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  ffi.Pointer<GTree> g_tree_new(
    GCompareFunc key_compare_func,
  ) {
    return _g_tree_new(
      key_compare_func,
    );
  }

  late final _g_tree_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTree> Function(GCompareFunc)>>(
          'g_tree_new');
  late final _g_tree_new =
      _g_tree_newPtr.asFunction<ffi.Pointer<GTree> Function(GCompareFunc)>();

  ffi.Pointer<GTree> g_tree_new_with_data(
    GCompareDataFunc key_compare_func,
    gpointer key_compare_data,
  ) {
    return _g_tree_new_with_data(
      key_compare_func,
      key_compare_data,
    );
  }

  late final _g_tree_new_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTree> Function(
              GCompareDataFunc, gpointer)>>('g_tree_new_with_data');
  late final _g_tree_new_with_data = _g_tree_new_with_dataPtr
      .asFunction<ffi.Pointer<GTree> Function(GCompareDataFunc, gpointer)>();

  ffi.Pointer<GTree> g_tree_new_full(
    GCompareDataFunc key_compare_func,
    gpointer key_compare_data,
    GDestroyNotify key_destroy_func,
    GDestroyNotify value_destroy_func,
  ) {
    return _g_tree_new_full(
      key_compare_func,
      key_compare_data,
      key_destroy_func,
      value_destroy_func,
    );
  }

  late final _g_tree_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTree> Function(GCompareDataFunc, gpointer,
              GDestroyNotify, GDestroyNotify)>>('g_tree_new_full');
  late final _g_tree_new_full = _g_tree_new_fullPtr.asFunction<
      ffi.Pointer<GTree> Function(
          GCompareDataFunc, gpointer, GDestroyNotify, GDestroyNotify)>();

  ffi.Pointer<GTreeNode> g_tree_node_first(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_node_first(
      tree,
    );
  }

  late final _g_tree_node_firstPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>>(
      'g_tree_node_first');
  late final _g_tree_node_first = _g_tree_node_firstPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_node_last(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_node_last(
      tree,
    );
  }

  late final _g_tree_node_lastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>>(
      'g_tree_node_last');
  late final _g_tree_node_last = _g_tree_node_lastPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_node_previous(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_previous(
      node,
    );
  }

  late final _g_tree_node_previousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTreeNode>)>>('g_tree_node_previous');
  late final _g_tree_node_previous = _g_tree_node_previousPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTreeNode> g_tree_node_next(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_next(
      node,
    );
  }

  late final _g_tree_node_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTreeNode>)>>('g_tree_node_next');
  late final _g_tree_node_next = _g_tree_node_nextPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTree> g_tree_ref(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_ref(
      tree,
    );
  }

  late final _g_tree_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GTree> Function(ffi.Pointer<GTree>)>>(
      'g_tree_ref');
  late final _g_tree_ref = _g_tree_refPtr
      .asFunction<ffi.Pointer<GTree> Function(ffi.Pointer<GTree>)>();

  void g_tree_unref(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_unref(
      tree,
    );
  }

  late final _g_tree_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_unref');
  late final _g_tree_unref =
      _g_tree_unrefPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  void g_tree_destroy(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_destroy(
      tree,
    );
  }

  late final _g_tree_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_destroy');
  late final _g_tree_destroy =
      _g_tree_destroyPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_insert_node(
    ffi.Pointer<GTree> tree,
    gpointer key,
    gpointer value,
  ) {
    return _g_tree_insert_node(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_insert_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gpointer, gpointer)>>('g_tree_insert_node');
  late final _g_tree_insert_node = _g_tree_insert_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, gpointer, gpointer)>();

  void g_tree_insert(
    ffi.Pointer<GTree> tree,
    gpointer key,
    gpointer value,
  ) {
    return _g_tree_insert(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTree>, gpointer, gpointer)>>('g_tree_insert');
  late final _g_tree_insert = _g_tree_insertPtr
      .asFunction<void Function(ffi.Pointer<GTree>, gpointer, gpointer)>();

  ffi.Pointer<GTreeNode> g_tree_replace_node(
    ffi.Pointer<GTree> tree,
    gpointer key,
    gpointer value,
  ) {
    return _g_tree_replace_node(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_replace_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gpointer, gpointer)>>('g_tree_replace_node');
  late final _g_tree_replace_node = _g_tree_replace_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, gpointer, gpointer)>();

  void g_tree_replace(
    ffi.Pointer<GTree> tree,
    gpointer key,
    gpointer value,
  ) {
    return _g_tree_replace(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTree>, gpointer, gpointer)>>('g_tree_replace');
  late final _g_tree_replace = _g_tree_replacePtr
      .asFunction<void Function(ffi.Pointer<GTree>, gpointer, gpointer)>();

  int g_tree_remove(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_remove(
      tree,
      key,
    );
  }

  late final _g_tree_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_remove');
  late final _g_tree_remove = _g_tree_removePtr
      .asFunction<int Function(ffi.Pointer<GTree>, gconstpointer)>();

  void g_tree_remove_all(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_remove_all(
      tree,
    );
  }

  late final _g_tree_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_remove_all');
  late final _g_tree_remove_all =
      _g_tree_remove_allPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  int g_tree_steal(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_steal(
      tree,
      key,
    );
  }

  late final _g_tree_stealPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_steal');
  late final _g_tree_steal = _g_tree_stealPtr
      .asFunction<int Function(ffi.Pointer<GTree>, gconstpointer)>();

  gpointer g_tree_node_key(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_key(
      node,
    );
  }

  late final _g_tree_node_keyPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GTreeNode>)>>(
          'g_tree_node_key');
  late final _g_tree_node_key = _g_tree_node_keyPtr
      .asFunction<gpointer Function(ffi.Pointer<GTreeNode>)>();

  gpointer g_tree_node_value(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_value(
      node,
    );
  }

  late final _g_tree_node_valuePtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GTreeNode>)>>(
          'g_tree_node_value');
  late final _g_tree_node_value = _g_tree_node_valuePtr
      .asFunction<gpointer Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTreeNode> g_tree_lookup_node(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lookup_node(
      tree,
      key,
    );
  }

  late final _g_tree_lookup_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lookup_node');
  late final _g_tree_lookup_node = _g_tree_lookup_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  gpointer g_tree_lookup(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lookup(
      tree,
      key,
    );
  }

  late final _g_tree_lookupPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lookup');
  late final _g_tree_lookup = _g_tree_lookupPtr
      .asFunction<gpointer Function(ffi.Pointer<GTree>, gconstpointer)>();

  int g_tree_lookup_extended(
    ffi.Pointer<GTree> tree,
    gconstpointer lookup_key,
    ffi.Pointer<gpointer> orig_key,
    ffi.Pointer<gpointer> value,
  ) {
    return _g_tree_lookup_extended(
      tree,
      lookup_key,
      orig_key,
      value,
    );
  }

  late final _g_tree_lookup_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>,
              gconstpointer,
              ffi.Pointer<gpointer>,
              ffi.Pointer<gpointer>)>>('g_tree_lookup_extended');
  late final _g_tree_lookup_extended = _g_tree_lookup_extendedPtr.asFunction<
      int Function(ffi.Pointer<GTree>, gconstpointer, ffi.Pointer<gpointer>,
          ffi.Pointer<gpointer>)>();

  void g_tree_foreach(
    ffi.Pointer<GTree> tree,
    GTraverseFunc func,
    gpointer user_data,
  ) {
    return _g_tree_foreach(
      tree,
      func,
      user_data,
    );
  }

  late final _g_tree_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTree>, GTraverseFunc, gpointer)>>('g_tree_foreach');
  late final _g_tree_foreach = _g_tree_foreachPtr
      .asFunction<void Function(ffi.Pointer<GTree>, GTraverseFunc, gpointer)>();

  void g_tree_foreach_node(
    ffi.Pointer<GTree> tree,
    GTraverseNodeFunc func,
    gpointer user_data,
  ) {
    return _g_tree_foreach_node(
      tree,
      func,
      user_data,
    );
  }

  late final _g_tree_foreach_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTree>, GTraverseNodeFunc,
              gpointer)>>('g_tree_foreach_node');
  late final _g_tree_foreach_node = _g_tree_foreach_nodePtr.asFunction<
      void Function(ffi.Pointer<GTree>, GTraverseNodeFunc, gpointer)>();

  void g_tree_traverse(
    ffi.Pointer<GTree> tree,
    GTraverseFunc traverse_func,
    int traverse_type,
    gpointer user_data,
  ) {
    return _g_tree_traverse(
      tree,
      traverse_func,
      traverse_type,
      user_data,
    );
  }

  late final _g_tree_traversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTree>, GTraverseFunc, ffi.Int32,
              gpointer)>>('g_tree_traverse');
  late final _g_tree_traverse = _g_tree_traversePtr.asFunction<
      void Function(ffi.Pointer<GTree>, GTraverseFunc, int, gpointer)>();

  ffi.Pointer<GTreeNode> g_tree_search_node(
    ffi.Pointer<GTree> tree,
    GCompareFunc search_func,
    gconstpointer user_data,
  ) {
    return _g_tree_search_node(
      tree,
      search_func,
      user_data,
    );
  }

  late final _g_tree_search_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, GCompareFunc,
              gconstpointer)>>('g_tree_search_node');
  late final _g_tree_search_node = _g_tree_search_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, GCompareFunc, gconstpointer)>();

  gpointer g_tree_search(
    ffi.Pointer<GTree> tree,
    GCompareFunc search_func,
    gconstpointer user_data,
  ) {
    return _g_tree_search(
      tree,
      search_func,
      user_data,
    );
  }

  late final _g_tree_searchPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GTree>, GCompareFunc,
              gconstpointer)>>('g_tree_search');
  late final _g_tree_search = _g_tree_searchPtr.asFunction<
      gpointer Function(ffi.Pointer<GTree>, GCompareFunc, gconstpointer)>();

  ffi.Pointer<GTreeNode> g_tree_lower_bound(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lower_bound(
      tree,
      key,
    );
  }

  late final _g_tree_lower_boundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lower_bound');
  late final _g_tree_lower_bound = _g_tree_lower_boundPtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  ffi.Pointer<GTreeNode> g_tree_upper_bound(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_upper_bound(
      tree,
      key,
    );
  }

  late final _g_tree_upper_boundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_upper_bound');
  late final _g_tree_upper_bound = _g_tree_upper_boundPtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  int g_tree_height(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_height(
      tree,
    );
  }

  late final _g_tree_heightPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GTree>)>>(
          'g_tree_height');
  late final _g_tree_height =
      _g_tree_heightPtr.asFunction<int Function(ffi.Pointer<GTree>)>();

  int g_tree_nnodes(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_nnodes(
      tree,
    );
  }

  late final _g_tree_nnodesPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GTree>)>>(
          'g_tree_nnodes');
  late final _g_tree_nnodes =
      _g_tree_nnodesPtr.asFunction<int Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GUri> g_uri_ref(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_ref(
      uri,
    );
  }

  late final _g_uri_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GUri> Function(ffi.Pointer<GUri>)>>(
      'g_uri_ref');
  late final _g_uri_ref =
      _g_uri_refPtr.asFunction<ffi.Pointer<GUri> Function(ffi.Pointer<GUri>)>();

  void g_uri_unref(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_unref(
      uri,
    );
  }

  late final _g_uri_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GUri>)>>(
          'g_uri_unref');
  late final _g_uri_unref =
      _g_uri_unrefPtr.asFunction<void Function(ffi.Pointer<GUri>)>();

  int g_uri_split(
    ffi.Pointer<gchar> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<gchar>> scheme,
    ffi.Pointer<ffi.Pointer<gchar>> userinfo,
    ffi.Pointer<ffi.Pointer<gchar>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<gchar>> path,
    ffi.Pointer<ffi.Pointer<gchar>> query,
    ffi.Pointer<ffi.Pointer<gchar>> fragment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split(
      uri_ref,
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
      error,
    );
  }

  late final _g_uri_splitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split');
  late final _g_uri_split = _g_uri_splitPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_split_with_user(
    ffi.Pointer<gchar> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<gchar>> scheme,
    ffi.Pointer<ffi.Pointer<gchar>> user,
    ffi.Pointer<ffi.Pointer<gchar>> password,
    ffi.Pointer<ffi.Pointer<gchar>> auth_params,
    ffi.Pointer<ffi.Pointer<gchar>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<gchar>> path,
    ffi.Pointer<ffi.Pointer<gchar>> query,
    ffi.Pointer<ffi.Pointer<gchar>> fragment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split_with_user(
      uri_ref,
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
      error,
    );
  }

  late final _g_uri_split_with_userPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split_with_user');
  late final _g_uri_split_with_user = _g_uri_split_with_userPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_split_network(
    ffi.Pointer<gchar> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<gchar>> scheme,
    ffi.Pointer<ffi.Pointer<gchar>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split_network(
      uri_string,
      flags,
      scheme,
      host,
      port,
      error,
    );
  }

  late final _g_uri_split_networkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split_network');
  late final _g_uri_split_network = _g_uri_split_networkPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_is_valid(
    ffi.Pointer<gchar> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_is_valid(
      uri_string,
      flags,
      error,
    );
  }

  late final _g_uri_is_validPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_is_valid');
  late final _g_uri_is_valid = _g_uri_is_validPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_uri_join(
    int flags,
    ffi.Pointer<gchar> scheme,
    ffi.Pointer<gchar> userinfo,
    ffi.Pointer<gchar> host,
    int port,
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> query,
    ffi.Pointer<gchar> fragment,
  ) {
    return _g_uri_join(
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_uri_join');
  late final _g_uri_join = _g_uri_joinPtr.asFunction<
      ffi.Pointer<gchar> Function(
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_uri_join_with_user(
    int flags,
    ffi.Pointer<gchar> scheme,
    ffi.Pointer<gchar> user,
    ffi.Pointer<gchar> password,
    ffi.Pointer<gchar> auth_params,
    ffi.Pointer<gchar> host,
    int port,
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> query,
    ffi.Pointer<gchar> fragment,
  ) {
    return _g_uri_join_with_user(
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_join_with_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_uri_join_with_user');
  late final _g_uri_join_with_user = _g_uri_join_with_userPtr.asFunction<
      ffi.Pointer<gchar> Function(
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  ffi.Pointer<GUri> g_uri_parse(
    ffi.Pointer<gchar> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse(
      uri_string,
      flags,
      error,
    );
  }

  late final _g_uri_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse');
  late final _g_uri_parse = _g_uri_parsePtr.asFunction<
      ffi.Pointer<GUri> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GUri> g_uri_parse_relative(
    ffi.Pointer<GUri> base_uri,
    ffi.Pointer<gchar> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse_relative(
      base_uri,
      uri_ref,
      flags,
      error,
    );
  }

  late final _g_uri_parse_relativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Pointer<GUri>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse_relative');
  late final _g_uri_parse_relative = _g_uri_parse_relativePtr.asFunction<
      ffi.Pointer<GUri> Function(ffi.Pointer<GUri>, ffi.Pointer<gchar>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_uri_resolve_relative(
    ffi.Pointer<gchar> base_uri_string,
    ffi.Pointer<gchar> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_resolve_relative(
      base_uri_string,
      uri_ref,
      flags,
      error,
    );
  }

  late final _g_uri_resolve_relativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_resolve_relative');
  late final _g_uri_resolve_relative = _g_uri_resolve_relativePtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GUri> g_uri_build(
    int flags,
    ffi.Pointer<gchar> scheme,
    ffi.Pointer<gchar> userinfo,
    ffi.Pointer<gchar> host,
    int port,
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> query,
    ffi.Pointer<gchar> fragment,
  ) {
    return _g_uri_build(
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_buildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_uri_build');
  late final _g_uri_build = _g_uri_buildPtr.asFunction<
      ffi.Pointer<GUri> Function(
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  ffi.Pointer<GUri> g_uri_build_with_user(
    int flags,
    ffi.Pointer<gchar> scheme,
    ffi.Pointer<gchar> user,
    ffi.Pointer<gchar> password,
    ffi.Pointer<gchar> auth_params,
    ffi.Pointer<gchar> host,
    int port,
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> query,
    ffi.Pointer<gchar> fragment,
  ) {
    return _g_uri_build_with_user(
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_build_with_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_uri_build_with_user');
  late final _g_uri_build_with_user = _g_uri_build_with_userPtr.asFunction<
      ffi.Pointer<GUri> Function(
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Char> g_uri_to_string(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_to_string(
      uri,
    );
  }

  late final _g_uri_to_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_to_string');
  late final _g_uri_to_string = _g_uri_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_to_string_partial(
    ffi.Pointer<GUri> uri,
    int flags,
  ) {
    return _g_uri_to_string_partial(
      uri,
      flags,
    );
  }

  late final _g_uri_to_string_partialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GUri>, ffi.Int32)>>('g_uri_to_string_partial');
  late final _g_uri_to_string_partial = _g_uri_to_string_partialPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>, int)>();

  ffi.Pointer<gchar> g_uri_get_scheme(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_scheme(
      uri,
    );
  }

  late final _g_uri_get_schemePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_scheme');
  late final _g_uri_get_scheme = _g_uri_get_schemePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_userinfo(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_userinfo(
      uri,
    );
  }

  late final _g_uri_get_userinfoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_userinfo');
  late final _g_uri_get_userinfo = _g_uri_get_userinfoPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_user(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_user(
      uri,
    );
  }

  late final _g_uri_get_userPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_user');
  late final _g_uri_get_user = _g_uri_get_userPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_password(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_password(
      uri,
    );
  }

  late final _g_uri_get_passwordPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_password');
  late final _g_uri_get_password = _g_uri_get_passwordPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_auth_params(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_auth_params(
      uri,
    );
  }

  late final _g_uri_get_auth_paramsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_auth_params');
  late final _g_uri_get_auth_params = _g_uri_get_auth_paramsPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_host(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_host(
      uri,
    );
  }

  late final _g_uri_get_hostPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_host');
  late final _g_uri_get_host = _g_uri_get_hostPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  int g_uri_get_port(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_port(
      uri,
    );
  }

  late final _g_uri_get_portPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GUri>)>>(
          'g_uri_get_port');
  late final _g_uri_get_port =
      _g_uri_get_portPtr.asFunction<int Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_path(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_path(
      uri,
    );
  }

  late final _g_uri_get_pathPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_path');
  late final _g_uri_get_path = _g_uri_get_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_query(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_query(
      uri,
    );
  }

  late final _g_uri_get_queryPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_query');
  late final _g_uri_get_query = _g_uri_get_queryPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<gchar> g_uri_get_fragment(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_fragment(
      uri,
    );
  }

  late final _g_uri_get_fragmentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_fragment');
  late final _g_uri_get_fragment = _g_uri_get_fragmentPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GUri>)>();

  int g_uri_get_flags(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_flags(
      uri,
    );
  }

  late final _g_uri_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GUri>)>>(
          'g_uri_get_flags');
  late final _g_uri_get_flags =
      _g_uri_get_flagsPtr.asFunction<int Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<GHashTable> g_uri_parse_params(
    ffi.Pointer<gchar> params,
    int length,
    ffi.Pointer<gchar> separators,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse_params(
      params,
      length,
      separators,
      flags,
      error,
    );
  }

  late final _g_uri_parse_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse_params');
  late final _g_uri_parse_params = _g_uri_parse_paramsPtr.asFunction<
      ffi.Pointer<GHashTable> Function(ffi.Pointer<gchar>, int,
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_uri_params_iter_init(
    ffi.Pointer<GUriParamsIter> iter,
    ffi.Pointer<gchar> params,
    int length,
    ffi.Pointer<gchar> separators,
    int flags,
  ) {
    return _g_uri_params_iter_init(
      iter,
      params,
      length,
      separators,
      flags,
    );
  }

  late final _g_uri_params_iter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GUriParamsIter>,
              ffi.Pointer<gchar>,
              gssize,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_uri_params_iter_init');
  late final _g_uri_params_iter_init = _g_uri_params_iter_initPtr.asFunction<
      void Function(ffi.Pointer<GUriParamsIter>, ffi.Pointer<gchar>, int,
          ffi.Pointer<gchar>, int)>();

  int g_uri_params_iter_next(
    ffi.Pointer<GUriParamsIter> iter,
    ffi.Pointer<ffi.Pointer<gchar>> attribute,
    ffi.Pointer<ffi.Pointer<gchar>> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_params_iter_next(
      iter,
      attribute,
      value,
      error,
    );
  }

  late final _g_uri_params_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GUriParamsIter>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_params_iter_next');
  late final _g_uri_params_iter_next = _g_uri_params_iter_nextPtr.asFunction<
      int Function(ffi.Pointer<GUriParamsIter>, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<gchar>>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_error_quark() {
    return _g_uri_error_quark();
  }

  late final _g_uri_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_uri_error_quark');
  late final _g_uri_error_quark =
      _g_uri_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> g_uri_unescape_string(
    ffi.Pointer<ffi.Char> escaped_string,
    ffi.Pointer<ffi.Char> illegal_characters,
  ) {
    return _g_uri_unescape_string(
      escaped_string,
      illegal_characters,
    );
  }

  late final _g_uri_unescape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_unescape_string');
  late final _g_uri_unescape_string = _g_uri_unescape_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_unescape_segment(
    ffi.Pointer<ffi.Char> escaped_string,
    ffi.Pointer<ffi.Char> escaped_string_end,
    ffi.Pointer<ffi.Char> illegal_characters,
  ) {
    return _g_uri_unescape_segment(
      escaped_string,
      escaped_string_end,
      illegal_characters,
    );
  }

  late final _g_uri_unescape_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_unescape_segment');
  late final _g_uri_unescape_segment = _g_uri_unescape_segmentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_parse_scheme(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_uri_parse_scheme(
      uri,
    );
  }

  late final _g_uri_parse_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_uri_parse_scheme');
  late final _g_uri_parse_scheme = _g_uri_parse_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_peek_scheme(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_uri_peek_scheme(
      uri,
    );
  }

  late final _g_uri_peek_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_uri_peek_scheme');
  late final _g_uri_peek_scheme = _g_uri_peek_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_escape_string(
    ffi.Pointer<ffi.Char> unescaped,
    ffi.Pointer<ffi.Char> reserved_chars_allowed,
    int allow_utf8,
  ) {
    return _g_uri_escape_string(
      unescaped,
      reserved_chars_allowed,
      allow_utf8,
    );
  }

  late final _g_uri_escape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gboolean)>>('g_uri_escape_string');
  late final _g_uri_escape_string = _g_uri_escape_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GBytes> g_uri_unescape_bytes(
    ffi.Pointer<ffi.Char> escaped_string,
    int length,
    ffi.Pointer<ffi.Char> illegal_characters,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_unescape_bytes(
      escaped_string,
      length,
      illegal_characters,
      error,
    );
  }

  late final _g_uri_unescape_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_unescape_bytes');
  late final _g_uri_unescape_bytes = _g_uri_unescape_bytesPtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_uri_escape_bytes(
    ffi.Pointer<guint8> unescaped,
    int length,
    ffi.Pointer<ffi.Char> reserved_chars_allowed,
  ) {
    return _g_uri_escape_bytes(
      unescaped,
      length,
      reserved_chars_allowed,
    );
  }

  late final _g_uri_escape_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<guint8>, gsize,
              ffi.Pointer<ffi.Char>)>>('g_uri_escape_bytes');
  late final _g_uri_escape_bytes = _g_uri_escape_bytesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<guint8>, int, ffi.Pointer<ffi.Char>)>();

  int g_uuid_string_is_valid(
    ffi.Pointer<gchar> str,
  ) {
    return _g_uuid_string_is_valid(
      str,
    );
  }

  late final _g_uuid_string_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_uuid_string_is_valid');
  late final _g_uuid_string_is_valid =
      _g_uuid_string_is_validPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_uuid_string_random() {
    return _g_uuid_string_random();
  }

  late final _g_uuid_string_randomPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_uuid_string_random');
  late final _g_uuid_string_random =
      _g_uuid_string_randomPtr.asFunction<ffi.Pointer<gchar> Function()>();

  late final ffi.Pointer<guint> _glib_major_version =
      _lookup<guint>('glib_major_version');

  int get glib_major_version => _glib_major_version.value;

  late final ffi.Pointer<guint> _glib_minor_version =
      _lookup<guint>('glib_minor_version');

  int get glib_minor_version => _glib_minor_version.value;

  late final ffi.Pointer<guint> _glib_micro_version =
      _lookup<guint>('glib_micro_version');

  int get glib_micro_version => _glib_micro_version.value;

  late final ffi.Pointer<guint> _glib_interface_age =
      _lookup<guint>('glib_interface_age');

  int get glib_interface_age => _glib_interface_age.value;

  late final ffi.Pointer<guint> _glib_binary_age =
      _lookup<guint>('glib_binary_age');

  int get glib_binary_age => _glib_binary_age.value;

  ffi.Pointer<gchar> glib_check_version(
    int required_major,
    int required_minor,
    int required_micro,
  ) {
    return _glib_check_version(
      required_major,
      required_minor,
      required_micro,
    );
  }

  late final _glib_check_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(guint, guint, guint)>>(
      'glib_check_version');
  late final _glib_check_version = _glib_check_versionPtr
      .asFunction<ffi.Pointer<gchar> Function(int, int, int)>();

  ffi.Pointer<GMemChunk> g_mem_chunk_new(
    ffi.Pointer<gchar> name,
    int atom_size,
    int area_size,
    int type,
  ) {
    return _g_mem_chunk_new(
      name,
      atom_size,
      area_size,
      type,
    );
  }

  late final _g_mem_chunk_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMemChunk> Function(
              ffi.Pointer<gchar>, gint, gsize, gint)>>('g_mem_chunk_new');
  late final _g_mem_chunk_new = _g_mem_chunk_newPtr.asFunction<
      ffi.Pointer<GMemChunk> Function(ffi.Pointer<gchar>, int, int, int)>();

  void g_mem_chunk_destroy(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_destroy(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_destroy');
  late final _g_mem_chunk_destroy = _g_mem_chunk_destroyPtr
      .asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  gpointer g_mem_chunk_alloc(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_alloc(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_allocPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_alloc');
  late final _g_mem_chunk_alloc = _g_mem_chunk_allocPtr
      .asFunction<gpointer Function(ffi.Pointer<GMemChunk>)>();

  gpointer g_mem_chunk_alloc0(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_alloc0(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_alloc0Ptr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_alloc0');
  late final _g_mem_chunk_alloc0 = _g_mem_chunk_alloc0Ptr
      .asFunction<gpointer Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_free(
    ffi.Pointer<GMemChunk> mem_chunk,
    gpointer mem,
  ) {
    return _g_mem_chunk_free(
      mem_chunk,
      mem,
    );
  }

  late final _g_mem_chunk_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>, gpointer)>>(
      'g_mem_chunk_free');
  late final _g_mem_chunk_free = _g_mem_chunk_freePtr
      .asFunction<void Function(ffi.Pointer<GMemChunk>, gpointer)>();

  void g_mem_chunk_clean(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_clean(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_clean');
  late final _g_mem_chunk_clean =
      _g_mem_chunk_cleanPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_reset(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_reset(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_reset');
  late final _g_mem_chunk_reset =
      _g_mem_chunk_resetPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_print(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_print(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_print');
  late final _g_mem_chunk_print =
      _g_mem_chunk_printPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_info() {
    return _g_mem_chunk_info();
  }

  late final _g_mem_chunk_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_mem_chunk_info');
  late final _g_mem_chunk_info =
      _g_mem_chunk_infoPtr.asFunction<void Function()>();

  void g_blow_chunks() {
    return _g_blow_chunks();
  }

  late final _g_blow_chunksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_blow_chunks');
  late final _g_blow_chunks = _g_blow_chunksPtr.asFunction<void Function()>();

  ffi.Pointer<GAllocator> g_allocator_new(
    ffi.Pointer<gchar> name,
    int n_preallocs,
  ) {
    return _g_allocator_new(
      name,
      n_preallocs,
    );
  }

  late final _g_allocator_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAllocator> Function(
              ffi.Pointer<gchar>, guint)>>('g_allocator_new');
  late final _g_allocator_new = _g_allocator_newPtr
      .asFunction<ffi.Pointer<GAllocator> Function(ffi.Pointer<gchar>, int)>();

  void g_allocator_free(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_allocator_free(
      allocator,
    );
  }

  late final _g_allocator_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_allocator_free');
  late final _g_allocator_free =
      _g_allocator_freePtr.asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_list_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_list_push_allocator(
      allocator,
    );
  }

  late final _g_list_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_list_push_allocator');
  late final _g_list_push_allocator = _g_list_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_list_pop_allocator() {
    return _g_list_pop_allocator();
  }

  late final _g_list_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_list_pop_allocator');
  late final _g_list_pop_allocator =
      _g_list_pop_allocatorPtr.asFunction<void Function()>();

  void g_slist_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_slist_push_allocator(
      allocator,
    );
  }

  late final _g_slist_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_slist_push_allocator');
  late final _g_slist_push_allocator = _g_slist_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_slist_pop_allocator() {
    return _g_slist_pop_allocator();
  }

  late final _g_slist_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_slist_pop_allocator');
  late final _g_slist_pop_allocator =
      _g_slist_pop_allocatorPtr.asFunction<void Function()>();

  void g_node_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_node_push_allocator(
      allocator,
    );
  }

  late final _g_node_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_node_push_allocator');
  late final _g_node_push_allocator = _g_node_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_node_pop_allocator() {
    return _g_node_pop_allocator();
  }

  late final _g_node_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_node_pop_allocator');
  late final _g_node_pop_allocator =
      _g_node_pop_allocatorPtr.asFunction<void Function()>();

  ffi.Pointer<GCache> g_cache_new(
    GCacheNewFunc value_new_func,
    GCacheDestroyFunc value_destroy_func,
    GCacheDupFunc key_dup_func,
    GCacheDestroyFunc key_destroy_func,
    GHashFunc hash_key_func,
    GHashFunc hash_value_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_cache_new(
      value_new_func,
      value_destroy_func,
      key_dup_func,
      key_destroy_func,
      hash_key_func,
      hash_value_func,
      key_equal_func,
    );
  }

  late final _g_cache_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GCache> Function(
              GCacheNewFunc,
              GCacheDestroyFunc,
              GCacheDupFunc,
              GCacheDestroyFunc,
              GHashFunc,
              GHashFunc,
              GEqualFunc)>>('g_cache_new');
  late final _g_cache_new = _g_cache_newPtr.asFunction<
      ffi.Pointer<GCache> Function(
          GCacheNewFunc,
          GCacheDestroyFunc,
          GCacheDupFunc,
          GCacheDestroyFunc,
          GHashFunc,
          GHashFunc,
          GEqualFunc)>();

  void g_cache_destroy(
    ffi.Pointer<GCache> cache,
  ) {
    return _g_cache_destroy(
      cache,
    );
  }

  late final _g_cache_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCache>)>>(
          'g_cache_destroy');
  late final _g_cache_destroy =
      _g_cache_destroyPtr.asFunction<void Function(ffi.Pointer<GCache>)>();

  gpointer g_cache_insert(
    ffi.Pointer<GCache> cache,
    gpointer key,
  ) {
    return _g_cache_insert(
      cache,
      key,
    );
  }

  late final _g_cache_insertPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GCache>, gpointer)>>(
      'g_cache_insert');
  late final _g_cache_insert = _g_cache_insertPtr
      .asFunction<gpointer Function(ffi.Pointer<GCache>, gpointer)>();

  void g_cache_remove(
    ffi.Pointer<GCache> cache,
    gconstpointer value,
  ) {
    return _g_cache_remove(
      cache,
      value,
    );
  }

  late final _g_cache_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCache>, gconstpointer)>>('g_cache_remove');
  late final _g_cache_remove = _g_cache_removePtr
      .asFunction<void Function(ffi.Pointer<GCache>, gconstpointer)>();

  void g_cache_key_foreach(
    ffi.Pointer<GCache> cache,
    GHFunc func,
    gpointer user_data,
  ) {
    return _g_cache_key_foreach(
      cache,
      func,
      user_data,
    );
  }

  late final _g_cache_key_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCache>, GHFunc, gpointer)>>('g_cache_key_foreach');
  late final _g_cache_key_foreach = _g_cache_key_foreachPtr
      .asFunction<void Function(ffi.Pointer<GCache>, GHFunc, gpointer)>();

  void g_cache_value_foreach(
    ffi.Pointer<GCache> cache,
    GHFunc func,
    gpointer user_data,
  ) {
    return _g_cache_value_foreach(
      cache,
      func,
      user_data,
    );
  }

  late final _g_cache_value_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCache>, GHFunc, gpointer)>>('g_cache_value_foreach');
  late final _g_cache_value_foreach = _g_cache_value_foreachPtr
      .asFunction<void Function(ffi.Pointer<GCache>, GHFunc, gpointer)>();

  ffi.Pointer<GCompletion> g_completion_new(
    GCompletionFunc func,
  ) {
    return _g_completion_new(
      func,
    );
  }

  late final _g_completion_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GCompletion> Function(GCompletionFunc)>>(
      'g_completion_new');
  late final _g_completion_new = _g_completion_newPtr
      .asFunction<ffi.Pointer<GCompletion> Function(GCompletionFunc)>();

  void g_completion_add_items(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<GList> items,
  ) {
    return _g_completion_add_items(
      cmp,
      items,
    );
  }

  late final _g_completion_add_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<GList>)>>('g_completion_add_items');
  late final _g_completion_add_items = _g_completion_add_itemsPtr.asFunction<
      void Function(ffi.Pointer<GCompletion>, ffi.Pointer<GList>)>();

  void g_completion_remove_items(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<GList> items,
  ) {
    return _g_completion_remove_items(
      cmp,
      items,
    );
  }

  late final _g_completion_remove_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<GList>)>>('g_completion_remove_items');
  late final _g_completion_remove_items =
      _g_completion_remove_itemsPtr.asFunction<
          void Function(ffi.Pointer<GCompletion>, ffi.Pointer<GList>)>();

  void g_completion_clear_items(
    ffi.Pointer<GCompletion> cmp,
  ) {
    return _g_completion_clear_items(
      cmp,
    );
  }

  late final _g_completion_clear_itemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCompletion>)>>(
          'g_completion_clear_items');
  late final _g_completion_clear_items = _g_completion_clear_itemsPtr
      .asFunction<void Function(ffi.Pointer<GCompletion>)>();

  ffi.Pointer<GList> g_completion_complete(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<gchar> prefix,
    ffi.Pointer<ffi.Pointer<gchar>> new_prefix,
  ) {
    return _g_completion_complete(
      cmp,
      prefix,
      new_prefix,
    );
  }

  late final _g_completion_completePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GCompletion>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_completion_complete');
  late final _g_completion_complete = _g_completion_completePtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GCompletion>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<GList> g_completion_complete_utf8(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<gchar> prefix,
    ffi.Pointer<ffi.Pointer<gchar>> new_prefix,
  ) {
    return _g_completion_complete_utf8(
      cmp,
      prefix,
      new_prefix,
    );
  }

  late final _g_completion_complete_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GCompletion>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_completion_complete_utf8');
  late final _g_completion_complete_utf8 =
      _g_completion_complete_utf8Ptr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_completion_set_compare(
    ffi.Pointer<GCompletion> cmp,
    GCompletionStrncmpFunc strncmp_func,
  ) {
    return _g_completion_set_compare(
      cmp,
      strncmp_func,
    );
  }

  late final _g_completion_set_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              GCompletionStrncmpFunc)>>('g_completion_set_compare');
  late final _g_completion_set_compare =
      _g_completion_set_comparePtr.asFunction<
          void Function(ffi.Pointer<GCompletion>, GCompletionStrncmpFunc)>();

  void g_completion_free(
    ffi.Pointer<GCompletion> cmp,
  ) {
    return _g_completion_free(
      cmp,
    );
  }

  late final _g_completion_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCompletion>)>>(
          'g_completion_free');
  late final _g_completion_free = _g_completion_freePtr
      .asFunction<void Function(ffi.Pointer<GCompletion>)>();

  ffi.Pointer<GRelation> g_relation_new(
    int fields,
  ) {
    return _g_relation_new(
      fields,
    );
  }

  late final _g_relation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRelation> Function(gint)>>(
          'g_relation_new');
  late final _g_relation_new =
      _g_relation_newPtr.asFunction<ffi.Pointer<GRelation> Function(int)>();

  void g_relation_destroy(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_destroy(
      relation,
    );
  }

  late final _g_relation_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_destroy');
  late final _g_relation_destroy = _g_relation_destroyPtr
      .asFunction<void Function(ffi.Pointer<GRelation>)>();

  void g_relation_index(
    ffi.Pointer<GRelation> relation,
    int field,
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_relation_index(
      relation,
      field,
      hash_func,
      key_equal_func,
    );
  }

  late final _g_relation_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GRelation>, gint, GHashFunc,
              GEqualFunc)>>('g_relation_index');
  late final _g_relation_index = _g_relation_indexPtr.asFunction<
      void Function(ffi.Pointer<GRelation>, int, GHashFunc, GEqualFunc)>();

  void g_relation_insert(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_insert(
      relation,
    );
  }

  late final _g_relation_insertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_insert');
  late final _g_relation_insert =
      _g_relation_insertPtr.asFunction<void Function(ffi.Pointer<GRelation>)>();

  int g_relation_delete(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_delete(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_deletePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_delete');
  late final _g_relation_delete = _g_relation_deletePtr
      .asFunction<int Function(ffi.Pointer<GRelation>, gconstpointer, int)>();

  ffi.Pointer<GTuples> g_relation_select(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_select(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTuples> Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_select');
  late final _g_relation_select = _g_relation_selectPtr.asFunction<
      ffi.Pointer<GTuples> Function(
          ffi.Pointer<GRelation>, gconstpointer, int)>();

  int g_relation_count(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_count(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_countPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_count');
  late final _g_relation_count = _g_relation_countPtr
      .asFunction<int Function(ffi.Pointer<GRelation>, gconstpointer, int)>();

  int g_relation_exists(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_exists(
      relation,
    );
  }

  late final _g_relation_existsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRelation>)>>(
          'g_relation_exists');
  late final _g_relation_exists =
      _g_relation_existsPtr.asFunction<int Function(ffi.Pointer<GRelation>)>();

  void g_relation_print(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_print(
      relation,
    );
  }

  late final _g_relation_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_print');
  late final _g_relation_print =
      _g_relation_printPtr.asFunction<void Function(ffi.Pointer<GRelation>)>();

  void g_tuples_destroy(
    ffi.Pointer<GTuples> tuples,
  ) {
    return _g_tuples_destroy(
      tuples,
    );
  }

  late final _g_tuples_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTuples>)>>(
          'g_tuples_destroy');
  late final _g_tuples_destroy =
      _g_tuples_destroyPtr.asFunction<void Function(ffi.Pointer<GTuples>)>();

  gpointer g_tuples_index(
    ffi.Pointer<GTuples> tuples,
    int index_,
    int field,
  ) {
    return _g_tuples_index(
      tuples,
      index_,
      field,
    );
  }

  late final _g_tuples_indexPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GTuples>, gint, gint)>>(
      'g_tuples_index');
  late final _g_tuples_index = _g_tuples_indexPtr
      .asFunction<gpointer Function(ffi.Pointer<GTuples>, int, int)>();

  late final ffi.Pointer<GThreadFunctions> _g_thread_functions_for_glib_use =
      _lookup<GThreadFunctions>('g_thread_functions_for_glib_use');

  GThreadFunctions get g_thread_functions_for_glib_use =>
      _g_thread_functions_for_glib_use.ref;

  late final ffi.Pointer<gboolean> _g_thread_use_default_impl =
      _lookup<gboolean>('g_thread_use_default_impl');

  int get g_thread_use_default_impl => _g_thread_use_default_impl.value;

  set g_thread_use_default_impl(int value) =>
      _g_thread_use_default_impl.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<guint64 Function()>>>
      _g_thread_gettime =
      _lookup<ffi.Pointer<ffi.NativeFunction<guint64 Function()>>>(
          'g_thread_gettime');

  ffi.Pointer<ffi.NativeFunction<guint64 Function()>> get g_thread_gettime =>
      _g_thread_gettime.value;

  set g_thread_gettime(
          ffi.Pointer<ffi.NativeFunction<guint64 Function()>> value) =>
      _g_thread_gettime.value = value;

  ffi.Pointer<GThread> g_thread_create(
    GThreadFunc func,
    gpointer data,
    int joinable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_create(
      func,
      data,
      joinable,
      error,
    );
  }

  late final _g_thread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(GThreadFunc, gpointer, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_create');
  late final _g_thread_create = _g_thread_createPtr.asFunction<
      ffi.Pointer<GThread> Function(
          GThreadFunc, gpointer, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThread> g_thread_create_full(
    GThreadFunc func,
    gpointer data,
    int stack_size,
    int joinable,
    int bound,
    int priority,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_create_full(
      func,
      data,
      stack_size,
      joinable,
      bound,
      priority,
      error,
    );
  }

  late final _g_thread_create_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(
              GThreadFunc,
              gpointer,
              gulong,
              gboolean,
              gboolean,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_create_full');
  late final _g_thread_create_full = _g_thread_create_fullPtr.asFunction<
      ffi.Pointer<GThread> Function(GThreadFunc, gpointer, int, int, int, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_thread_set_priority(
    ffi.Pointer<GThread> thread,
    int priority,
  ) {
    return _g_thread_set_priority(
      thread,
      priority,
    );
  }

  late final _g_thread_set_priorityPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GThread>, ffi.Int32)>>(
      'g_thread_set_priority');
  late final _g_thread_set_priority = _g_thread_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GThread>, int)>();

  void g_thread_foreach(
    GFunc thread_func,
    gpointer user_data,
  ) {
    return _g_thread_foreach(
      thread_func,
      user_data,
    );
  }

  late final _g_thread_foreachPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GFunc, gpointer)>>(
          'g_thread_foreach');
  late final _g_thread_foreach =
      _g_thread_foreachPtr.asFunction<void Function(GFunc, gpointer)>();

  void g_static_mutex_init(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_init(
      mutex,
    );
  }

  late final _g_static_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticMutex>)>>(
          'g_static_mutex_init');
  late final _g_static_mutex_init = _g_static_mutex_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticMutex>)>();

  void g_static_mutex_free(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_free(
      mutex,
    );
  }

  late final _g_static_mutex_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticMutex>)>>(
          'g_static_mutex_free');
  late final _g_static_mutex_free = _g_static_mutex_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticMutex>)>();

  ffi.Pointer<GMutex> g_static_mutex_get_mutex_impl(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_get_mutex_impl(
      mutex,
    );
  }

  late final _g_static_mutex_get_mutex_implPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMutex> Function(
              ffi.Pointer<GStaticMutex>)>>('g_static_mutex_get_mutex_impl');
  late final _g_static_mutex_get_mutex_impl = _g_static_mutex_get_mutex_implPtr
      .asFunction<ffi.Pointer<GMutex> Function(ffi.Pointer<GStaticMutex>)>();

  void g_static_rec_mutex_init(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_init(
      mutex,
    );
  }

  late final _g_static_rec_mutex_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_init');
  late final _g_static_rec_mutex_init = _g_static_rec_mutex_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_lock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_lock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_lock');
  late final _g_static_rec_mutex_lock = _g_static_rec_mutex_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  int g_static_rec_mutex_trylock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_trylock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_trylock');
  late final _g_static_rec_mutex_trylock = _g_static_rec_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_unlock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_unlock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_unlock');
  late final _g_static_rec_mutex_unlock = _g_static_rec_mutex_unlockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_lock_full(
    ffi.Pointer<GStaticRecMutex> mutex,
    int depth,
  ) {
    return _g_static_rec_mutex_lock_full(
      mutex,
      depth,
    );
  }

  late final _g_static_rec_mutex_lock_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStaticRecMutex>,
              guint)>>('g_static_rec_mutex_lock_full');
  late final _g_static_rec_mutex_lock_full = _g_static_rec_mutex_lock_fullPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>, int)>();

  int g_static_rec_mutex_unlock_full(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_unlock_full(
      mutex,
    );
  }

  late final _g_static_rec_mutex_unlock_fullPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GStaticRecMutex>)>>(
          'g_static_rec_mutex_unlock_full');
  late final _g_static_rec_mutex_unlock_full =
      _g_static_rec_mutex_unlock_fullPtr
          .asFunction<int Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_free(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_free(
      mutex,
    );
  }

  late final _g_static_rec_mutex_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_free');
  late final _g_static_rec_mutex_free = _g_static_rec_mutex_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rw_lock_init(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_init(
      lock,
    );
  }

  late final _g_static_rw_lock_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_init');
  late final _g_static_rw_lock_init = _g_static_rw_lock_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_reader_lock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_lock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_lock');
  late final _g_static_rw_lock_reader_lock = _g_static_rw_lock_reader_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  int g_static_rw_lock_reader_trylock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_trylock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_trylock');
  late final _g_static_rw_lock_reader_trylock =
      _g_static_rw_lock_reader_trylockPtr
          .asFunction<int Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_reader_unlock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_unlock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_unlock');
  late final _g_static_rw_lock_reader_unlock =
      _g_static_rw_lock_reader_unlockPtr
          .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_writer_lock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_lock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_lock');
  late final _g_static_rw_lock_writer_lock = _g_static_rw_lock_writer_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  int g_static_rw_lock_writer_trylock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_trylock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_trylock');
  late final _g_static_rw_lock_writer_trylock =
      _g_static_rw_lock_writer_trylockPtr
          .asFunction<int Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_writer_unlock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_unlock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_unlock');
  late final _g_static_rw_lock_writer_unlock =
      _g_static_rw_lock_writer_unlockPtr
          .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_free(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_free(
      lock,
    );
  }

  late final _g_static_rw_lock_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_free');
  late final _g_static_rw_lock_free = _g_static_rw_lock_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  ffi.Pointer<GPrivate> g_private_new(
    GDestroyNotify notify,
  ) {
    return _g_private_new(
      notify,
    );
  }

  late final _g_private_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GPrivate> Function(GDestroyNotify)>>(
      'g_private_new');
  late final _g_private_new = _g_private_newPtr
      .asFunction<ffi.Pointer<GPrivate> Function(GDestroyNotify)>();

  void g_static_private_init(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_init(
      private_key,
    );
  }

  late final _g_static_private_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_init');
  late final _g_static_private_init = _g_static_private_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticPrivate>)>();

  gpointer g_static_private_get(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_get(
      private_key,
    );
  }

  late final _g_static_private_getPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_get');
  late final _g_static_private_get = _g_static_private_getPtr
      .asFunction<gpointer Function(ffi.Pointer<GStaticPrivate>)>();

  void g_static_private_set(
    ffi.Pointer<GStaticPrivate> private_key,
    gpointer data,
    GDestroyNotify notify,
  ) {
    return _g_static_private_set(
      private_key,
      data,
      notify,
    );
  }

  late final _g_static_private_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStaticPrivate>, gpointer,
              GDestroyNotify)>>('g_static_private_set');
  late final _g_static_private_set = _g_static_private_setPtr.asFunction<
      void Function(ffi.Pointer<GStaticPrivate>, gpointer, GDestroyNotify)>();

  void g_static_private_free(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_free(
      private_key,
    );
  }

  late final _g_static_private_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_free');
  late final _g_static_private_free = _g_static_private_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticPrivate>)>();

  int g_once_init_enter_impl(
    ffi.Pointer<gsize> location,
  ) {
    return _g_once_init_enter_impl(
      location,
    );
  }

  late final _g_once_init_enter_implPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gsize>)>>(
          'g_once_init_enter_impl');
  late final _g_once_init_enter_impl =
      _g_once_init_enter_implPtr.asFunction<int Function(ffi.Pointer<gsize>)>();

  void g_thread_init(
    gpointer vtable,
  ) {
    return _g_thread_init(
      vtable,
    );
  }

  late final _g_thread_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>('g_thread_init');
  late final _g_thread_init =
      _g_thread_initPtr.asFunction<void Function(gpointer)>();

  void g_thread_init_with_errorcheck_mutexes(
    gpointer vtable,
  ) {
    return _g_thread_init_with_errorcheck_mutexes(
      vtable,
    );
  }

  late final _g_thread_init_with_errorcheck_mutexesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_thread_init_with_errorcheck_mutexes');
  late final _g_thread_init_with_errorcheck_mutexes =
      _g_thread_init_with_errorcheck_mutexesPtr
          .asFunction<void Function(gpointer)>();

  int g_thread_get_initialized() {
    return _g_thread_get_initialized();
  }

  late final _g_thread_get_initializedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_thread_get_initialized');
  late final _g_thread_get_initialized =
      _g_thread_get_initializedPtr.asFunction<int Function()>();

  late final ffi.Pointer<gboolean> _g_threads_got_initialized =
      _lookup<gboolean>('g_threads_got_initialized');

  int get g_threads_got_initialized => _g_threads_got_initialized.value;

  set g_threads_got_initialized(int value) =>
      _g_threads_got_initialized.value = value;

  ffi.Pointer<GMutex> g_mutex_new() {
    return _g_mutex_new();
  }

  late final _g_mutex_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMutex> Function()>>(
          'g_mutex_new');
  late final _g_mutex_new =
      _g_mutex_newPtr.asFunction<ffi.Pointer<GMutex> Function()>();

  void g_mutex_free(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_free(
      mutex,
    );
  }

  late final _g_mutex_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_free');
  late final _g_mutex_free =
      _g_mutex_freePtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  ffi.Pointer<GCond> g_cond_new() {
    return _g_cond_new();
  }

  late final _g_cond_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GCond> Function()>>('g_cond_new');
  late final _g_cond_new =
      _g_cond_newPtr.asFunction<ffi.Pointer<GCond> Function()>();

  void g_cond_free(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_free(
      cond,
    );
  }

  late final _g_cond_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_free');
  late final _g_cond_free =
      _g_cond_freePtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  int g_cond_timed_wait(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
    ffi.Pointer<GTimeVal> timeval,
  ) {
    return _g_cond_timed_wait(
      cond,
      mutex,
      timeval,
    );
  }

  late final _g_cond_timed_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>,
              ffi.Pointer<GTimeVal>)>>('g_cond_timed_wait');
  late final _g_cond_timed_wait = _g_cond_timed_waitPtr.asFunction<
      int Function(
          ffi.Pointer<GCond>, ffi.Pointer<GMutex>, ffi.Pointer<GTimeVal>)>();

  void g_type_init() {
    return _g_type_init();
  }

  late final _g_type_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_type_init');
  late final _g_type_init = _g_type_initPtr.asFunction<void Function()>();

  void g_type_init_with_debug_flags(
    int debug_flags,
  ) {
    return _g_type_init_with_debug_flags(
      debug_flags,
    );
  }

  late final _g_type_init_with_debug_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'g_type_init_with_debug_flags');
  late final _g_type_init_with_debug_flags =
      _g_type_init_with_debug_flagsPtr.asFunction<void Function(int)>();

  ffi.Pointer<gchar> g_type_name(
    int type,
  ) {
    return _g_type_name(
      type,
    );
  }

  late final _g_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType)>>(
          'g_type_name');
  late final _g_type_name =
      _g_type_namePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  int g_type_qname(
    int type,
  ) {
    return _g_type_qname(
      type,
    );
  }

  late final _g_type_qnamePtr =
      _lookup<ffi.NativeFunction<GQuark Function(GType)>>('g_type_qname');
  late final _g_type_qname = _g_type_qnamePtr.asFunction<int Function(int)>();

  int g_type_from_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_type_from_name(
      name,
    );
  }

  late final _g_type_from_namePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<gchar>)>>(
          'g_type_from_name');
  late final _g_type_from_name =
      _g_type_from_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_type_parent(
    int type,
  ) {
    return _g_type_parent(
      type,
    );
  }

  late final _g_type_parentPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_parent');
  late final _g_type_parent = _g_type_parentPtr.asFunction<int Function(int)>();

  int g_type_depth(
    int type,
  ) {
    return _g_type_depth(
      type,
    );
  }

  late final _g_type_depthPtr =
      _lookup<ffi.NativeFunction<guint Function(GType)>>('g_type_depth');
  late final _g_type_depth = _g_type_depthPtr.asFunction<int Function(int)>();

  int g_type_next_base(
    int leaf_type,
    int root_type,
  ) {
    return _g_type_next_base(
      leaf_type,
      root_type,
    );
  }

  late final _g_type_next_basePtr =
      _lookup<ffi.NativeFunction<GType Function(GType, GType)>>(
          'g_type_next_base');
  late final _g_type_next_base =
      _g_type_next_basePtr.asFunction<int Function(int, int)>();

  int g_type_is_a(
    int type,
    int is_a_type,
  ) {
    return _g_type_is_a(
      type,
      is_a_type,
    );
  }

  late final _g_type_is_aPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_type_is_a');
  late final _g_type_is_a =
      _g_type_is_aPtr.asFunction<int Function(int, int)>();

  gpointer g_type_class_ref(
    int type,
  ) {
    return _g_type_class_ref(
      type,
    );
  }

  late final _g_type_class_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>('g_type_class_ref');
  late final _g_type_class_ref =
      _g_type_class_refPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_class_peek(
    int type,
  ) {
    return _g_type_class_peek(
      type,
    );
  }

  late final _g_type_class_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_class_peek');
  late final _g_type_class_peek =
      _g_type_class_peekPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_class_peek_static(
    int type,
  ) {
    return _g_type_class_peek_static(
      type,
    );
  }

  late final _g_type_class_peek_staticPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_class_peek_static');
  late final _g_type_class_peek_static =
      _g_type_class_peek_staticPtr.asFunction<gpointer Function(int)>();

  void g_type_class_unref(
    gpointer g_class,
  ) {
    return _g_type_class_unref(
      g_class,
    );
  }

  late final _g_type_class_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_class_unref');
  late final _g_type_class_unref =
      _g_type_class_unrefPtr.asFunction<void Function(gpointer)>();

  gpointer g_type_class_peek_parent(
    gpointer g_class,
  ) {
    return _g_type_class_peek_parent(
      g_class,
    );
  }

  late final _g_type_class_peek_parentPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_type_class_peek_parent');
  late final _g_type_class_peek_parent =
      _g_type_class_peek_parentPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_type_interface_peek(
    gpointer instance_class,
    int iface_type,
  ) {
    return _g_type_interface_peek(
      instance_class,
      iface_type,
    );
  }

  late final _g_type_interface_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer, GType)>>(
          'g_type_interface_peek');
  late final _g_type_interface_peek =
      _g_type_interface_peekPtr.asFunction<gpointer Function(gpointer, int)>();

  gpointer g_type_interface_peek_parent(
    gpointer g_iface,
  ) {
    return _g_type_interface_peek_parent(
      g_iface,
    );
  }

  late final _g_type_interface_peek_parentPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_type_interface_peek_parent');
  late final _g_type_interface_peek_parent = _g_type_interface_peek_parentPtr
      .asFunction<gpointer Function(gpointer)>();

  gpointer g_type_default_interface_ref(
    int g_type,
  ) {
    return _g_type_default_interface_ref(
      g_type,
    );
  }

  late final _g_type_default_interface_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_default_interface_ref');
  late final _g_type_default_interface_ref =
      _g_type_default_interface_refPtr.asFunction<gpointer Function(int)>();

  gpointer g_type_default_interface_peek(
    int g_type,
  ) {
    return _g_type_default_interface_peek(
      g_type,
    );
  }

  late final _g_type_default_interface_peekPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType)>>(
          'g_type_default_interface_peek');
  late final _g_type_default_interface_peek =
      _g_type_default_interface_peekPtr.asFunction<gpointer Function(int)>();

  void g_type_default_interface_unref(
    gpointer g_iface,
  ) {
    return _g_type_default_interface_unref(
      g_iface,
    );
  }

  late final _g_type_default_interface_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_default_interface_unref');
  late final _g_type_default_interface_unref =
      _g_type_default_interface_unrefPtr.asFunction<void Function(gpointer)>();

  ffi.Pointer<GType> g_type_children(
    int type,
    ffi.Pointer<guint> n_children,
  ) {
    return _g_type_children(
      type,
      n_children,
    );
  }

  late final _g_type_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_children');
  late final _g_type_children = _g_type_childrenPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  ffi.Pointer<GType> g_type_interfaces(
    int type,
    ffi.Pointer<guint> n_interfaces,
  ) {
    return _g_type_interfaces(
      type,
      n_interfaces,
    );
  }

  late final _g_type_interfacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interfaces');
  late final _g_type_interfaces = _g_type_interfacesPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  void g_type_set_qdata(
    int type,
    int quark,
    gpointer data,
  ) {
    return _g_type_set_qdata(
      type,
      quark,
      data,
    );
  }

  late final _g_type_set_qdataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, GQuark, gpointer)>>(
          'g_type_set_qdata');
  late final _g_type_set_qdata =
      _g_type_set_qdataPtr.asFunction<void Function(int, int, gpointer)>();

  gpointer g_type_get_qdata(
    int type,
    int quark,
  ) {
    return _g_type_get_qdata(
      type,
      quark,
    );
  }

  late final _g_type_get_qdataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, GQuark)>>(
          'g_type_get_qdata');
  late final _g_type_get_qdata =
      _g_type_get_qdataPtr.asFunction<gpointer Function(int, int)>();

  void g_type_query(
    int type,
    ffi.Pointer<GTypeQuery> query,
  ) {
    return _g_type_query(
      type,
      query,
    );
  }

  late final _g_type_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeQuery>)>>('g_type_query');
  late final _g_type_query = _g_type_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GTypeQuery>)>();

  int g_type_get_instance_count(
    int type,
  ) {
    return _g_type_get_instance_count(
      type,
    );
  }

  late final _g_type_get_instance_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(GType)>>(
          'g_type_get_instance_count');
  late final _g_type_get_instance_count =
      _g_type_get_instance_countPtr.asFunction<int Function(int)>();

  int g_type_register_static(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> info,
    int flags,
  ) {
    return _g_type_register_static(
      parent_type,
      type_name,
      info,
      flags,
    );
  }

  late final _g_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_register_static');
  late final _g_type_register_static = _g_type_register_staticPtr.asFunction<
      int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>, int)>();

  int g_type_register_static_simple(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    int class_size,
    GClassInitFunc class_init,
    int instance_size,
    GInstanceInitFunc instance_init,
    int flags,
  ) {
    return _g_type_register_static_simple(
      parent_type,
      type_name,
      class_size,
      class_init,
      instance_size,
      instance_init,
      flags,
    );
  }

  late final _g_type_register_static_simplePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<gchar>,
              guint,
              GClassInitFunc,
              guint,
              GInstanceInitFunc,
              ffi.Int32)>>('g_type_register_static_simple');
  late final _g_type_register_static_simple =
      _g_type_register_static_simplePtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, int, GClassInitFunc, int,
              GInstanceInitFunc, int)>();

  int g_type_register_dynamic(
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypePlugin> plugin,
    int flags,
  ) {
    return _g_type_register_dynamic(
      parent_type,
      type_name,
      plugin,
      flags,
    );
  }

  late final _g_type_register_dynamicPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<gchar>, ffi.Pointer<GTypePlugin>,
              ffi.Int32)>>('g_type_register_dynamic');
  late final _g_type_register_dynamic = _g_type_register_dynamicPtr.asFunction<
      int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypePlugin>, int)>();

  int g_type_register_fundamental(
    int type_id,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeFundamentalInfo> finfo,
    int flags,
  ) {
    return _g_type_register_fundamental(
      type_id,
      type_name,
      info,
      finfo,
      flags,
    );
  }

  late final _g_type_register_fundamentalPtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>,
              ffi.Int32)>>('g_type_register_fundamental');
  late final _g_type_register_fundamental =
      _g_type_register_fundamentalPtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>, int)>();

  void g_type_add_interface_static(
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_add_interface_static(
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_add_interface_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_add_interface_static');
  late final _g_type_add_interface_static = _g_type_add_interface_staticPtr
      .asFunction<void Function(int, int, ffi.Pointer<GInterfaceInfo>)>();

  void g_type_add_interface_dynamic(
    int instance_type,
    int interface_type,
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_add_interface_dynamic(
      instance_type,
      interface_type,
      plugin,
    );
  }

  late final _g_type_add_interface_dynamicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GTypePlugin>)>>('g_type_add_interface_dynamic');
  late final _g_type_add_interface_dynamic = _g_type_add_interface_dynamicPtr
      .asFunction<void Function(int, int, ffi.Pointer<GTypePlugin>)>();

  void g_type_interface_add_prerequisite(
    int interface_type,
    int prerequisite_type,
  ) {
    return _g_type_interface_add_prerequisite(
      interface_type,
      prerequisite_type,
    );
  }

  late final _g_type_interface_add_prerequisitePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, GType)>>(
          'g_type_interface_add_prerequisite');
  late final _g_type_interface_add_prerequisite =
      _g_type_interface_add_prerequisitePtr
          .asFunction<void Function(int, int)>();

  ffi.Pointer<GType> g_type_interface_prerequisites(
    int interface_type,
    ffi.Pointer<guint> n_prerequisites,
  ) {
    return _g_type_interface_prerequisites(
      interface_type,
      n_prerequisites,
    );
  }

  late final _g_type_interface_prerequisitesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interface_prerequisites');
  late final _g_type_interface_prerequisites =
      _g_type_interface_prerequisitesPtr
          .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  int g_type_interface_instantiatable_prerequisite(
    int interface_type,
  ) {
    return _g_type_interface_instantiatable_prerequisite(
      interface_type,
    );
  }

  late final _g_type_interface_instantiatable_prerequisitePtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>(
          'g_type_interface_instantiatable_prerequisite');
  late final _g_type_interface_instantiatable_prerequisite =
      _g_type_interface_instantiatable_prerequisitePtr
          .asFunction<int Function(int)>();

  void g_type_class_add_private(
    gpointer g_class,
    int private_size,
  ) {
    return _g_type_class_add_private(
      g_class,
      private_size,
    );
  }

  late final _g_type_class_add_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gsize)>>(
          'g_type_class_add_private');
  late final _g_type_class_add_private =
      _g_type_class_add_privatePtr.asFunction<void Function(gpointer, int)>();

  int g_type_add_instance_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_instance_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_instance_privatePtr =
      _lookup<ffi.NativeFunction<gint Function(GType, gsize)>>(
          'g_type_add_instance_private');
  late final _g_type_add_instance_private =
      _g_type_add_instance_privatePtr.asFunction<int Function(int, int)>();

  gpointer g_type_instance_get_private(
    ffi.Pointer<GTypeInstance> instance,
    int private_type,
  ) {
    return _g_type_instance_get_private(
      instance,
      private_type,
    );
  }

  late final _g_type_instance_get_privatePtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_instance_get_private');
  late final _g_type_instance_get_private = _g_type_instance_get_privatePtr
      .asFunction<gpointer Function(ffi.Pointer<GTypeInstance>, int)>();

  void g_type_class_adjust_private_offset(
    gpointer g_class,
    ffi.Pointer<gint> private_size_or_offset,
  ) {
    return _g_type_class_adjust_private_offset(
      g_class,
      private_size_or_offset,
    );
  }

  late final _g_type_class_adjust_private_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gint>)>>(
      'g_type_class_adjust_private_offset');
  late final _g_type_class_adjust_private_offset =
      _g_type_class_adjust_private_offsetPtr
          .asFunction<void Function(gpointer, ffi.Pointer<gint>)>();

  void g_type_add_class_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_class_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_class_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, gsize)>>(
          'g_type_add_class_private');
  late final _g_type_add_class_private =
      _g_type_add_class_privatePtr.asFunction<void Function(int, int)>();

  gpointer g_type_class_get_private(
    ffi.Pointer<GTypeClass> klass,
    int private_type,
  ) {
    return _g_type_class_get_private(
      klass,
      private_type,
    );
  }

  late final _g_type_class_get_privatePtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GTypeClass>, GType)>>(
      'g_type_class_get_private');
  late final _g_type_class_get_private = _g_type_class_get_privatePtr
      .asFunction<gpointer Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_class_get_instance_private_offset(
    gpointer g_class,
  ) {
    return _g_type_class_get_instance_private_offset(
      g_class,
    );
  }

  late final _g_type_class_get_instance_private_offsetPtr =
      _lookup<ffi.NativeFunction<gint Function(gpointer)>>(
          'g_type_class_get_instance_private_offset');
  late final _g_type_class_get_instance_private_offset =
      _g_type_class_get_instance_private_offsetPtr
          .asFunction<int Function(gpointer)>();

  void g_type_ensure(
    int type,
  ) {
    return _g_type_ensure(
      type,
    );
  }

  late final _g_type_ensurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>('g_type_ensure');
  late final _g_type_ensure =
      _g_type_ensurePtr.asFunction<void Function(int)>();

  int g_type_get_type_registration_serial() {
    return _g_type_get_type_registration_serial();
  }

  late final _g_type_get_type_registration_serialPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_type_get_type_registration_serial');
  late final _g_type_get_type_registration_serial =
      _g_type_get_type_registration_serialPtr.asFunction<int Function()>();

  ffi.Pointer<GTypePlugin> g_type_get_plugin(
    int type,
  ) {
    return _g_type_get_plugin(
      type,
    );
  }

  late final _g_type_get_pluginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType)>>(
          'g_type_get_plugin');
  late final _g_type_get_plugin = _g_type_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int)>();

  ffi.Pointer<GTypePlugin> g_type_interface_get_plugin(
    int instance_type,
    int interface_type,
  ) {
    return _g_type_interface_get_plugin(
      instance_type,
      interface_type,
    );
  }

  late final _g_type_interface_get_pluginPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType, GType)>>(
      'g_type_interface_get_plugin');
  late final _g_type_interface_get_plugin = _g_type_interface_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int, int)>();

  int g_type_fundamental_next() {
    return _g_type_fundamental_next();
  }

  late final _g_type_fundamental_nextPtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_fundamental_next');
  late final _g_type_fundamental_next =
      _g_type_fundamental_nextPtr.asFunction<int Function()>();

  int g_type_fundamental(
    int type_id,
  ) {
    return _g_type_fundamental(
      type_id,
    );
  }

  late final _g_type_fundamentalPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_fundamental');
  late final _g_type_fundamental =
      _g_type_fundamentalPtr.asFunction<int Function(int)>();

  ffi.Pointer<GTypeInstance> g_type_create_instance(
    int type,
  ) {
    return _g_type_create_instance(
      type,
    );
  }

  late final _g_type_create_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeInstance> Function(GType)>>(
          'g_type_create_instance');
  late final _g_type_create_instance = _g_type_create_instancePtr
      .asFunction<ffi.Pointer<GTypeInstance> Function(int)>();

  void g_type_free_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_free_instance(
      instance,
    );
  }

  late final _g_type_free_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_free_instance');
  late final _g_type_free_instance = _g_type_free_instancePtr
      .asFunction<void Function(ffi.Pointer<GTypeInstance>)>();

  void g_type_add_class_cache_func(
    gpointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_add_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_add_class_cache_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, GTypeClassCacheFunc)>>(
      'g_type_add_class_cache_func');
  late final _g_type_add_class_cache_func = _g_type_add_class_cache_funcPtr
      .asFunction<void Function(gpointer, GTypeClassCacheFunc)>();

  void g_type_remove_class_cache_func(
    gpointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_remove_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_remove_class_cache_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, GTypeClassCacheFunc)>>(
      'g_type_remove_class_cache_func');
  late final _g_type_remove_class_cache_func =
      _g_type_remove_class_cache_funcPtr
          .asFunction<void Function(gpointer, GTypeClassCacheFunc)>();

  void g_type_class_unref_uncached(
    gpointer g_class,
  ) {
    return _g_type_class_unref_uncached(
      g_class,
    );
  }

  late final _g_type_class_unref_uncachedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_type_class_unref_uncached');
  late final _g_type_class_unref_uncached =
      _g_type_class_unref_uncachedPtr.asFunction<void Function(gpointer)>();

  void g_type_add_interface_check(
    gpointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_add_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_add_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              GTypeInterfaceCheckFunc)>>('g_type_add_interface_check');
  late final _g_type_add_interface_check = _g_type_add_interface_checkPtr
      .asFunction<void Function(gpointer, GTypeInterfaceCheckFunc)>();

  void g_type_remove_interface_check(
    gpointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_remove_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_remove_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              GTypeInterfaceCheckFunc)>>('g_type_remove_interface_check');
  late final _g_type_remove_interface_check = _g_type_remove_interface_checkPtr
      .asFunction<void Function(gpointer, GTypeInterfaceCheckFunc)>();

  ffi.Pointer<GTypeValueTable> g_type_value_table_peek(
    int type,
  ) {
    return _g_type_value_table_peek(
      type,
    );
  }

  late final _g_type_value_table_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeValueTable> Function(GType)>>(
          'g_type_value_table_peek');
  late final _g_type_value_table_peek = _g_type_value_table_peekPtr
      .asFunction<ffi.Pointer<GTypeValueTable> Function(int)>();

  int g_type_check_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_check_instance(
      instance,
    );
  }

  late final _g_type_check_instancePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_check_instance');
  late final _g_type_check_instance = _g_type_check_instancePtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<GTypeInstance> g_type_check_instance_cast(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_cast(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeInstance> Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_cast');
  late final _g_type_check_instance_cast =
      _g_type_check_instance_castPtr.asFunction<
          ffi.Pointer<GTypeInstance> Function(
              ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_a(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_is_a(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_is_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_a');
  late final _g_type_check_instance_is_a = _g_type_check_instance_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_fundamentally_a(
    ffi.Pointer<GTypeInstance> instance,
    int fundamental_type,
  ) {
    return _g_type_check_instance_is_fundamentally_a(
      instance,
      fundamental_type,
    );
  }

  late final _g_type_check_instance_is_fundamentally_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_fundamentally_a');
  late final _g_type_check_instance_is_fundamentally_a =
      _g_type_check_instance_is_fundamentally_aPtr
          .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  ffi.Pointer<GTypeClass> g_type_check_class_cast(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_cast(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeClass> Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_check_class_cast');
  late final _g_type_check_class_cast = _g_type_check_class_castPtr.asFunction<
      ffi.Pointer<GTypeClass> Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_class_is_a(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_is_a(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_is_aPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GTypeClass>, GType)>>(
      'g_type_check_class_is_a');
  late final _g_type_check_class_is_a = _g_type_check_class_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_is_value_type(
    int type,
  ) {
    return _g_type_check_is_value_type(
      type,
    );
  }

  late final _g_type_check_is_value_typePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType)>>(
          'g_type_check_is_value_type');
  late final _g_type_check_is_value_type =
      _g_type_check_is_value_typePtr.asFunction<int Function(int)>();

  int g_type_check_value(
    ffi.Pointer<GValue> value,
  ) {
    return _g_type_check_value(
      value,
    );
  }

  late final _g_type_check_valuePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_type_check_value');
  late final _g_type_check_value =
      _g_type_check_valuePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_type_check_value_holds(
    ffi.Pointer<GValue> value,
    int type,
  ) {
    return _g_type_check_value_holds(
      value,
      type,
    );
  }

  late final _g_type_check_value_holdsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>, GType)>>(
      'g_type_check_value_holds');
  late final _g_type_check_value_holds = _g_type_check_value_holdsPtr
      .asFunction<int Function(ffi.Pointer<GValue>, int)>();

  int g_type_test_flags(
    int type,
    int flags,
  ) {
    return _g_type_test_flags(
      type,
      flags,
    );
  }

  late final _g_type_test_flagsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, guint)>>(
          'g_type_test_flags');
  late final _g_type_test_flags =
      _g_type_test_flagsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<gchar> g_type_name_from_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_name_from_instance(
      instance,
    );
  }

  late final _g_type_name_from_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTypeInstance>)>>('g_type_name_from_instance');
  late final _g_type_name_from_instance = _g_type_name_from_instancePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<gchar> g_type_name_from_class(
    ffi.Pointer<GTypeClass> g_class,
  ) {
    return _g_type_name_from_class(
      g_class,
    );
  }

  late final _g_type_name_from_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTypeClass>)>>('g_type_name_from_class');
  late final _g_type_name_from_class = _g_type_name_from_classPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTypeClass>)>();

  ffi.Pointer<GValue> g_value_init(
    ffi.Pointer<GValue> value,
    int g_type,
  ) {
    return _g_value_init(
      value,
      g_type,
    );
  }

  late final _g_value_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, GType)>>('g_value_init');
  late final _g_value_init = _g_value_initPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  void g_value_copy(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_copy(
      src_value,
      dest_value,
    );
  }

  late final _g_value_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_copy');
  late final _g_value_copy = _g_value_copyPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> g_value_reset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_reset(
      value,
    );
  }

  late final _g_value_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>>('g_value_reset');
  late final _g_value_reset = _g_value_resetPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>();

  void g_value_unset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_unset(
      value,
    );
  }

  late final _g_value_unsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>)>>(
          'g_value_unset');
  late final _g_value_unset =
      _g_value_unsetPtr.asFunction<void Function(ffi.Pointer<GValue>)>();

  void g_value_set_instance(
    ffi.Pointer<GValue> value,
    gpointer instance,
  ) {
    return _g_value_set_instance(
      value,
      instance,
    );
  }

  late final _g_value_set_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_instance');
  late final _g_value_set_instance = _g_value_set_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  void g_value_init_from_instance(
    ffi.Pointer<GValue> value,
    gpointer instance,
  ) {
    return _g_value_init_from_instance(
      value,
      instance,
    );
  }

  late final _g_value_init_from_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_init_from_instance');
  late final _g_value_init_from_instance = _g_value_init_from_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  int g_value_fits_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_fits_pointer(
      value,
    );
  }

  late final _g_value_fits_pointerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_fits_pointer');
  late final _g_value_fits_pointer =
      _g_value_fits_pointerPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  gpointer g_value_peek_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_peek_pointer(
      value,
    );
  }

  late final _g_value_peek_pointerPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_peek_pointer');
  late final _g_value_peek_pointer = _g_value_peek_pointerPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_value_type_compatible(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_compatible(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_compatiblePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_compatible');
  late final _g_value_type_compatible =
      _g_value_type_compatiblePtr.asFunction<int Function(int, int)>();

  int g_value_type_transformable(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_transformable(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_transformablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_transformable');
  late final _g_value_type_transformable =
      _g_value_type_transformablePtr.asFunction<int Function(int, int)>();

  int g_value_transform(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_transform(
      src_value,
      dest_value,
    );
  }

  late final _g_value_transformPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_transform');
  late final _g_value_transform = _g_value_transformPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_value_register_transform_func(
    int src_type,
    int dest_type,
    GValueTransform transform_func,
  ) {
    return _g_value_register_transform_func(
      src_type,
      dest_type,
      transform_func,
    );
  }

  late final _g_value_register_transform_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GType, GType, GValueTransform)>>(
      'g_value_register_transform_func');
  late final _g_value_register_transform_func =
      _g_value_register_transform_funcPtr
          .asFunction<void Function(int, int, GValueTransform)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref(
      pspec,
    );
  }

  late final _g_param_spec_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref');
  late final _g_param_spec_ref = _g_param_spec_refPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_unref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_unref(
      pspec,
    );
  }

  late final _g_param_spec_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_unref');
  late final _g_param_spec_unref = _g_param_spec_unrefPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_sink(
      pspec,
    );
  }

  late final _g_param_spec_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_sink');
  late final _g_param_spec_sink = _g_param_spec_sinkPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref_sink(
      pspec,
    );
  }

  late final _g_param_spec_ref_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref_sink');
  late final _g_param_spec_ref_sink = _g_param_spec_ref_sinkPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  gpointer g_param_spec_get_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_get_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_get_qdataPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GParamSpec>, GQuark)>>(
      'g_param_spec_get_qdata');
  late final _g_param_spec_get_qdata = _g_param_spec_get_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_set_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    gpointer data,
  ) {
    return _g_param_spec_set_qdata(
      pspec,
      quark,
      data,
    );
  }

  late final _g_param_spec_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark,
              gpointer)>>('g_param_spec_set_qdata');
  late final _g_param_spec_set_qdata = _g_param_spec_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>, int, gpointer)>();

  void g_param_spec_set_qdata_full(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_param_spec_set_qdata_full(
      pspec,
      quark,
      data,
      destroy,
    );
  }

  late final _g_param_spec_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark, gpointer,
              GDestroyNotify)>>('g_param_spec_set_qdata_full');
  late final _g_param_spec_set_qdata_full =
      _g_param_spec_set_qdata_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpec>, int, gpointer, GDestroyNotify)>();

  gpointer g_param_spec_steal_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_steal_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_steal_qdataPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GParamSpec>, GQuark)>>(
      'g_param_spec_steal_qdata');
  late final _g_param_spec_steal_qdata = _g_param_spec_steal_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GParamSpec>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_get_redirect_target(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_redirect_target(
      pspec,
    );
  }

  late final _g_param_spec_get_redirect_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_redirect_target');
  late final _g_param_spec_get_redirect_target =
      _g_param_spec_get_redirect_targetPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_value_set_default(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_set_default(
      pspec,
      value,
    );
  }

  late final _g_param_value_set_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_set_default');
  late final _g_param_value_set_default =
      _g_param_value_set_defaultPtr.asFunction<
          void Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_defaults(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_defaults(
      pspec,
      value,
    );
  }

  late final _g_param_value_defaultsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_defaults');
  late final _g_param_value_defaults = _g_param_value_defaultsPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_validate(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_validate(
      pspec,
      value,
    );
  }

  late final _g_param_value_validatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_validate');
  late final _g_param_value_validate = _g_param_value_validatePtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_convert(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
    int strict_validation,
  ) {
    return _g_param_value_convert(
      pspec,
      src_value,
      dest_value,
      strict_validation,
    );
  }

  late final _g_param_value_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gboolean)>>('g_param_value_convert');
  late final _g_param_value_convert = _g_param_value_convertPtr.asFunction<
      int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
          ffi.Pointer<GValue>, int)>();

  int g_param_values_cmp(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _g_param_values_cmp(
      pspec,
      value1,
      value2,
    );
  }

  late final _g_param_values_cmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_param_values_cmp');
  late final _g_param_values_cmp = _g_param_values_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<gchar> g_param_spec_get_name(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name(
      pspec,
    );
  }

  late final _g_param_spec_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_name');
  late final _g_param_spec_get_name = _g_param_spec_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<gchar> g_param_spec_get_nick(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_nick(
      pspec,
    );
  }

  late final _g_param_spec_get_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_nick');
  late final _g_param_spec_get_nick = _g_param_spec_get_nickPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<gchar> g_param_spec_get_blurb(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_blurb(
      pspec,
    );
  }

  late final _g_param_spec_get_blurbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_blurb');
  late final _g_param_spec_get_blurb = _g_param_spec_get_blurbPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GParamSpec>)>();

  void g_value_set_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param(
      value,
      param,
    );
  }

  late final _g_value_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param');
  late final _g_value_set_param = _g_value_set_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_value_get_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_param(
      value,
    );
  }

  late final _g_value_get_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_get_param');
  late final _g_value_get_param = _g_value_get_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GParamSpec> g_value_dup_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_param(
      value,
    );
  }

  late final _g_value_dup_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_dup_param');
  late final _g_value_dup_param = _g_value_dup_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  void g_value_take_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_take_param(
      value,
      param,
    );
  }

  late final _g_value_take_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_take_param');
  late final _g_value_take_param = _g_value_take_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  void g_value_set_param_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param_take_ownership(
      value,
      param,
    );
  }

  late final _g_value_set_param_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param_take_ownership');
  late final _g_value_set_param_take_ownership =
      _g_value_set_param_take_ownershipPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GValue> g_param_spec_get_default_value(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_default_value(
      pspec,
    );
  }

  late final _g_param_spec_get_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_default_value');
  late final _g_param_spec_get_default_value =
      _g_param_spec_get_default_valuePtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GParamSpec>)>();

  int g_param_spec_get_name_quark(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name_quark(
      pspec,
    );
  }

  late final _g_param_spec_get_name_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_get_name_quark');
  late final _g_param_spec_get_name_quark = _g_param_spec_get_name_quarkPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>)>();

  int g_param_type_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GParamSpecTypeInfo> pspec_info,
  ) {
    return _g_param_type_register_static(
      name,
      pspec_info,
    );
  }

  late final _g_param_type_register_staticPtr = _lookup<
          ffi.NativeFunction<
              GType Function(
                  ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>)>>(
      'g_param_type_register_static');
  late final _g_param_type_register_static =
      _g_param_type_register_staticPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>)>();

  int g_param_spec_is_valid_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_param_spec_is_valid_name(
      name,
    );
  }

  late final _g_param_spec_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_param_spec_is_valid_name');
  late final _g_param_spec_is_valid_name = _g_param_spec_is_valid_namePtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  int _g_param_type_register_static_constant(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GParamSpecTypeInfo> pspec_info,
    int opt_type,
  ) {
    return __g_param_type_register_static_constant(
      name,
      pspec_info,
      opt_type,
    );
  }

  late final __g_param_type_register_static_constantPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>,
              GType)>>('_g_param_type_register_static_constant');
  late final __g_param_type_register_static_constant =
      __g_param_type_register_static_constantPtr.asFunction<
          int Function(
              ffi.Pointer<gchar>, ffi.Pointer<GParamSpecTypeInfo>, int)>();

  gpointer g_param_spec_internal(
    int param_type,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags,
  ) {
    return _g_param_spec_internal(
      param_type,
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_internalPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(GType, ffi.Pointer<gchar>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Int32)>>('g_param_spec_internal');
  late final _g_param_spec_internal = _g_param_spec_internalPtr.asFunction<
      gpointer Function(int, ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpecPool> g_param_spec_pool_new(
    int type_prefixing,
  ) {
    return _g_param_spec_pool_new(
      type_prefixing,
    );
  }

  late final _g_param_spec_pool_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GParamSpecPool> Function(gboolean)>>(
      'g_param_spec_pool_new');
  late final _g_param_spec_pool_new = _g_param_spec_pool_newPtr
      .asFunction<ffi.Pointer<GParamSpecPool> Function(int)>();

  void g_param_spec_pool_insert(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
    int owner_type,
  ) {
    return _g_param_spec_pool_insert(
      pool,
      pspec,
      owner_type,
    );
  }

  late final _g_param_spec_pool_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>, GType)>>('g_param_spec_pool_insert');
  late final _g_param_spec_pool_insert =
      _g_param_spec_pool_insertPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_pool_remove(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_pool_remove(
      pool,
      pspec,
    );
  }

  late final _g_param_spec_pool_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_pool_remove');
  late final _g_param_spec_pool_remove =
      _g_param_spec_pool_removePtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_pool_lookup(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<gchar> param_name,
    int owner_type,
    int walk_ancestors,
  ) {
    return _g_param_spec_pool_lookup(
      pool,
      param_name,
      owner_type,
      walk_ancestors,
    );
  }

  late final _g_param_spec_pool_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<gchar>,
              GType,
              gboolean)>>('g_param_spec_pool_lookup');
  late final _g_param_spec_pool_lookup =
      _g_param_spec_pool_lookupPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GList> g_param_spec_pool_list_owned(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
  ) {
    return _g_param_spec_pool_list_owned(
      pool,
      owner_type,
    );
  }

  late final _g_param_spec_pool_list_ownedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>,
              GType)>>('g_param_spec_pool_list_owned');
  late final _g_param_spec_pool_list_owned =
      _g_param_spec_pool_list_ownedPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>, int)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_param_spec_pool_list(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
    ffi.Pointer<guint> n_pspecs_p,
  ) {
    return _g_param_spec_pool_list(
      pool,
      owner_type,
      n_pspecs_p,
    );
  }

  late final _g_param_spec_pool_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GParamSpecPool>,
              GType,
              ffi.Pointer<guint>)>>('g_param_spec_pool_list');
  late final _g_param_spec_pool_list = _g_param_spec_pool_listPtr.asFunction<
      ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
          ffi.Pointer<GParamSpecPool>, int, ffi.Pointer<guint>)>();

  ffi.Pointer<GClosure> g_cclosure_new(
    GCallback callback_func,
    gpointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, gpointer, GClosureNotify)>>('g_cclosure_new');
  late final _g_cclosure_new = _g_cclosure_newPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, gpointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_cclosure_new_swap(
    GCallback callback_func,
    gpointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new_swap(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_new_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, gpointer, GClosureNotify)>>('g_cclosure_new_swap');
  late final _g_cclosure_new_swap = _g_cclosure_new_swapPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, gpointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_signal_type_cclosure_new(
    int itype,
    int struct_offset,
  ) {
    return _g_signal_type_cclosure_new(
      itype,
      struct_offset,
    );
  }

  late final _g_signal_type_cclosure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GClosure> Function(GType, guint)>>(
          'g_signal_type_cclosure_new');
  late final _g_signal_type_cclosure_new = _g_signal_type_cclosure_newPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, int)>();

  ffi.Pointer<GClosure> g_closure_ref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_ref(
      closure,
    );
  }

  late final _g_closure_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              ffi.Pointer<GClosure>)>>('g_closure_ref');
  late final _g_closure_ref = _g_closure_refPtr
      .asFunction<ffi.Pointer<GClosure> Function(ffi.Pointer<GClosure>)>();

  void g_closure_sink(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_sink(
      closure,
    );
  }

  late final _g_closure_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_sink');
  late final _g_closure_sink =
      _g_closure_sinkPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_unref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_unref(
      closure,
    );
  }

  late final _g_closure_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_unref');
  late final _g_closure_unref =
      _g_closure_unrefPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_closure_new_simple(
    int sizeof_closure,
    gpointer data,
  ) {
    return _g_closure_new_simple(
      sizeof_closure,
      data,
    );
  }

  late final _g_closure_new_simplePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GClosure> Function(guint, gpointer)>>(
      'g_closure_new_simple');
  late final _g_closure_new_simple = _g_closure_new_simplePtr
      .asFunction<ffi.Pointer<GClosure> Function(int, gpointer)>();

  void g_closure_add_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_add_finalize_notifier');
  late final _g_closure_add_finalize_notifier =
      _g_closure_add_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_remove_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_remove_finalize_notifier');
  late final _g_closure_remove_finalize_notifier =
      _g_closure_remove_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_add_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_add_invalidate_notifier');
  late final _g_closure_add_invalidate_notifier =
      _g_closure_add_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_remove_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    gpointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureNotify)>>('g_closure_remove_invalidate_notifier');
  late final _g_closure_remove_invalidate_notifier =
      _g_closure_remove_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify)>();

  void g_closure_add_marshal_guards(
    ffi.Pointer<GClosure> closure,
    gpointer pre_marshal_data,
    GClosureNotify pre_marshal_notify,
    gpointer post_marshal_data,
    GClosureNotify post_marshal_notify,
  ) {
    return _g_closure_add_marshal_guards(
      closure,
      pre_marshal_data,
      pre_marshal_notify,
      post_marshal_data,
      post_marshal_notify,
    );
  }

  late final _g_closure_add_marshal_guardsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify,
              gpointer, GClosureNotify)>>('g_closure_add_marshal_guards');
  late final _g_closure_add_marshal_guards =
      _g_closure_add_marshal_guardsPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureNotify,
              gpointer, GClosureNotify)>();

  void g_closure_set_marshal(
    ffi.Pointer<GClosure> closure,
    GClosureMarshal marshal,
  ) {
    return _g_closure_set_marshal(
      closure,
      marshal,
    );
  }

  late final _g_closure_set_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>,
              GClosureMarshal)>>('g_closure_set_marshal');
  late final _g_closure_set_marshal = _g_closure_set_marshalPtr
      .asFunction<void Function(ffi.Pointer<GClosure>, GClosureMarshal)>();

  void g_closure_set_meta_marshal(
    ffi.Pointer<GClosure> closure,
    gpointer marshal_data,
    GClosureMarshal meta_marshal,
  ) {
    return _g_closure_set_meta_marshal(
      closure,
      marshal_data,
      meta_marshal,
    );
  }

  late final _g_closure_set_meta_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, gpointer,
              GClosureMarshal)>>('g_closure_set_meta_marshal');
  late final _g_closure_set_meta_marshal =
      _g_closure_set_meta_marshalPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, gpointer, GClosureMarshal)>();

  void g_closure_invalidate(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_invalidate(
      closure,
    );
  }

  late final _g_closure_invalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_invalidate');
  late final _g_closure_invalidate = _g_closure_invalidatePtr
      .asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_invoke(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
  ) {
    return _g_closure_invoke(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
    );
  }

  late final _g_closure_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, guint,
              ffi.Pointer<GValue>, gpointer)>>('g_closure_invoke');
  late final _g_closure_invoke = _g_closure_invokePtr.asFunction<
      void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
          ffi.Pointer<GValue>, gpointer)>();

  void g_cclosure_marshal_generic(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_gvalue,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_generic(
      closure,
      return_gvalue,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_genericPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_generic');
  late final _g_cclosure_marshal_generic =
      _g_cclosure_marshal_genericPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_generic_va(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args_list,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_generic_va(
      closure,
      return_value,
      instance,
      args_list,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_generic_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_generic_va');
  late final _g_cclosure_marshal_generic_va =
      _g_cclosure_marshal_generic_vaPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VOID(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VOID(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__VOID');
  late final _g_cclosure_marshal_VOID__VOID =
      _g_cclosure_marshal_VOID__VOIDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__VOIDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VOIDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VOIDv');
  late final _g_cclosure_marshal_VOID__VOIDv =
      _g_cclosure_marshal_VOID__VOIDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOOLEAN(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEAN(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__BOOLEAN');
  late final _g_cclosure_marshal_VOID__BOOLEAN =
      _g_cclosure_marshal_VOID__BOOLEANPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__BOOLEANv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEANv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOOLEANv');
  late final _g_cclosure_marshal_VOID__BOOLEANv =
      _g_cclosure_marshal_VOID__BOOLEANvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__CHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__CHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__CHAR');
  late final _g_cclosure_marshal_VOID__CHAR =
      _g_cclosure_marshal_VOID__CHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__CHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__CHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__CHARv');
  late final _g_cclosure_marshal_VOID__CHARv =
      _g_cclosure_marshal_VOID__CHARvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UCHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UCHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UCHAR');
  late final _g_cclosure_marshal_VOID__UCHAR =
      _g_cclosure_marshal_VOID__UCHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UCHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UCHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UCHARv');
  late final _g_cclosure_marshal_VOID__UCHARv =
      _g_cclosure_marshal_VOID__UCHARvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__INT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__INT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__INTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__INT');
  late final _g_cclosure_marshal_VOID__INT =
      _g_cclosure_marshal_VOID__INTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__INTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__INTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__INTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__INTv');
  late final _g_cclosure_marshal_VOID__INTv =
      _g_cclosure_marshal_VOID__INTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UINT');
  late final _g_cclosure_marshal_VOID__UINT =
      _g_cclosure_marshal_VOID__UINTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UINTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINTv');
  late final _g_cclosure_marshal_VOID__UINTv =
      _g_cclosure_marshal_VOID__UINTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__LONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__LONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__LONG');
  late final _g_cclosure_marshal_VOID__LONG =
      _g_cclosure_marshal_VOID__LONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__LONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__LONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__LONGv');
  late final _g_cclosure_marshal_VOID__LONGv =
      _g_cclosure_marshal_VOID__LONGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ULONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ULONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__ULONG');
  late final _g_cclosure_marshal_VOID__ULONG =
      _g_cclosure_marshal_VOID__ULONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__ULONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ULONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ULONGv');
  late final _g_cclosure_marshal_VOID__ULONGv =
      _g_cclosure_marshal_VOID__ULONGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ENUM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ENUM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__ENUM');
  late final _g_cclosure_marshal_VOID__ENUM =
      _g_cclosure_marshal_VOID__ENUMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__ENUMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ENUMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ENUMv');
  late final _g_cclosure_marshal_VOID__ENUMv =
      _g_cclosure_marshal_VOID__ENUMvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__FLAGS');
  late final _g_cclosure_marshal_VOID__FLAGS =
      _g_cclosure_marshal_VOID__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLAGSv');
  late final _g_cclosure_marshal_VOID__FLAGSv =
      _g_cclosure_marshal_VOID__FLAGSvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLOAT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLOAT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__FLOAT');
  late final _g_cclosure_marshal_VOID__FLOAT =
      _g_cclosure_marshal_VOID__FLOATPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__FLOATv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLOATv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLOATv');
  late final _g_cclosure_marshal_VOID__FLOATv =
      _g_cclosure_marshal_VOID__FLOATvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__DOUBLE(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLE(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__DOUBLE');
  late final _g_cclosure_marshal_VOID__DOUBLE =
      _g_cclosure_marshal_VOID__DOUBLEPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__DOUBLEv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLEv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__DOUBLEv');
  late final _g_cclosure_marshal_VOID__DOUBLEv =
      _g_cclosure_marshal_VOID__DOUBLEvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__STRING(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__STRING(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__STRING');
  late final _g_cclosure_marshal_VOID__STRING =
      _g_cclosure_marshal_VOID__STRINGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__STRINGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__STRINGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__STRINGv');
  late final _g_cclosure_marshal_VOID__STRINGv =
      _g_cclosure_marshal_VOID__STRINGvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__PARAM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__PARAM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__PARAM');
  late final _g_cclosure_marshal_VOID__PARAM =
      _g_cclosure_marshal_VOID__PARAMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__PARAMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__PARAMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__PARAMv');
  late final _g_cclosure_marshal_VOID__PARAMv =
      _g_cclosure_marshal_VOID__PARAMvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__BOXED');
  late final _g_cclosure_marshal_VOID__BOXED =
      _g_cclosure_marshal_VOID__BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOXEDv');
  late final _g_cclosure_marshal_VOID__BOXEDv =
      _g_cclosure_marshal_VOID__BOXEDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__POINTER');
  late final _g_cclosure_marshal_VOID__POINTER =
      _g_cclosure_marshal_VOID__POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__POINTERv');
  late final _g_cclosure_marshal_VOID__POINTERv =
      _g_cclosure_marshal_VOID__POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__OBJECT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__OBJECT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__OBJECT');
  late final _g_cclosure_marshal_VOID__OBJECT =
      _g_cclosure_marshal_VOID__OBJECTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__OBJECTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__OBJECTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__OBJECTv');
  late final _g_cclosure_marshal_VOID__OBJECTv =
      _g_cclosure_marshal_VOID__OBJECTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VARIANT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VARIANT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__VARIANT');
  late final _g_cclosure_marshal_VOID__VARIANT =
      _g_cclosure_marshal_VOID__VARIANTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__VARIANTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VARIANTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VARIANTv');
  late final _g_cclosure_marshal_VOID__VARIANTv =
      _g_cclosure_marshal_VOID__VARIANTvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_VOID__UINT_POINTER');
  late final _g_cclosure_marshal_VOID__UINT_POINTER =
      _g_cclosure_marshal_VOID__UINT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_VOID__UINT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINT_POINTERv');
  late final _g_cclosure_marshal_VOID__UINT_POINTERv =
      _g_cclosure_marshal_VOID__UINT_POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_BOOLEAN__FLAGS');
  late final _g_cclosure_marshal_BOOLEAN__FLAGS =
      _g_cclosure_marshal_BOOLEAN__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_BOOLEAN__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__FLAGSv');
  late final _g_cclosure_marshal_BOOLEAN__FLAGSv =
      _g_cclosure_marshal_BOOLEAN__FLAGSvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_STRING__OBJECT_POINTER');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTER =
      _g_cclosure_marshal_STRING__OBJECT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<GValue>,
                  gpointer,
                  ffi.Pointer<__va_list_tag>,
                  gpointer,
                  ffi.Int,
                  ffi.Pointer<GType>)>>(
      'g_cclosure_marshal_STRING__OBJECT_POINTERv');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTERv =
      _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              gpointer,
              gpointer)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXED');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXED =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, gpointer, gpointer)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              gpointer,
              ffi.Pointer<__va_list_tag>,
              gpointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, gpointer,
              ffi.Pointer<__va_list_tag>, gpointer, int, ffi.Pointer<GType>)>();

  int g_signal_newv(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_signal_newv(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      param_types,
    );
  }

  late final _g_signal_newvPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<GType>)>>('g_signal_newv');
  late final _g_signal_newv = _g_signal_newvPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          gpointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<GType>)>();

  int g_signal_new_valist(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_signal_new_valist(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      args,
    );
  }

  late final _g_signal_new_valistPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<__va_list_tag>)>>('g_signal_new_valist');
  late final _g_signal_new_valist = _g_signal_new_valistPtr.asFunction<
      int Function(
          ffi.Pointer<gchar>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          gpointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<__va_list_tag>)>();

  int g_signal_new(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    int class_offset,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new(
      signal_name,
      itype,
      signal_flags,
      class_offset,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_newPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              guint,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new');
  late final _g_signal_new = _g_signal_newPtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, int, int, GSignalAccumulator,
          gpointer, GSignalCMarshaller, int, int)>();

  int g_signal_new_class_handler(
    ffi.Pointer<gchar> signal_name,
    int itype,
    int signal_flags,
    GCallback class_handler,
    GSignalAccumulator accumulator,
    gpointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new_class_handler(
      signal_name,
      itype,
      signal_flags,
      class_handler,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_new_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32,
              GCallback,
              GSignalAccumulator,
              gpointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new_class_handler');
  late final _g_signal_new_class_handler =
      _g_signal_new_class_handlerPtr.asFunction<
          int Function(ffi.Pointer<gchar>, int, int, GCallback,
              GSignalAccumulator, gpointer, GSignalCMarshaller, int, int)>();

  void g_signal_set_va_marshaller(
    int signal_id,
    int instance_type,
    GSignalCVaMarshaller va_marshaller,
  ) {
    return _g_signal_set_va_marshaller(
      signal_id,
      instance_type,
      va_marshaller,
    );
  }

  late final _g_signal_set_va_marshallerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              GSignalCVaMarshaller)>>('g_signal_set_va_marshaller');
  late final _g_signal_set_va_marshaller = _g_signal_set_va_marshallerPtr
      .asFunction<void Function(int, int, GSignalCVaMarshaller)>();

  void g_signal_emitv(
    ffi.Pointer<GValue> instance_and_params,
    int signal_id,
    int detail,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_emitv(
      instance_and_params,
      signal_id,
      detail,
      return_value,
    );
  }

  late final _g_signal_emitvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, guint, GQuark,
              ffi.Pointer<GValue>)>>('g_signal_emitv');
  late final _g_signal_emitv = _g_signal_emitvPtr.asFunction<
      void Function(ffi.Pointer<GValue>, int, int, ffi.Pointer<GValue>)>();

  void g_signal_emit_valist(
    gpointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_signal_emit_valist(
      instance,
      signal_id,
      detail,
      var_args,
    );
  }

  late final _g_signal_emit_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer, guint, GQuark,
              ffi.Pointer<__va_list_tag>)>>('g_signal_emit_valist');
  late final _g_signal_emit_valist = _g_signal_emit_valistPtr.asFunction<
      void Function(gpointer, int, int, ffi.Pointer<__va_list_tag>)>();

  void g_signal_emit(
    gpointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_emit(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_emitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, guint, GQuark)>>(
          'g_signal_emit');
  late final _g_signal_emit =
      _g_signal_emitPtr.asFunction<void Function(gpointer, int, int)>();

  void g_signal_emit_by_name(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
  ) {
    return _g_signal_emit_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_emit_by_namePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_signal_emit_by_name');
  late final _g_signal_emit_by_name = _g_signal_emit_by_namePtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  int g_signal_lookup(
    ffi.Pointer<gchar> name,
    int itype,
  ) {
    return _g_signal_lookup(
      name,
      itype,
    );
  }

  late final _g_signal_lookupPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<gchar>, GType)>>(
          'g_signal_lookup');
  late final _g_signal_lookup =
      _g_signal_lookupPtr.asFunction<int Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_signal_name(
    int signal_id,
  ) {
    return _g_signal_name(
      signal_id,
    );
  }

  late final _g_signal_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(guint)>>(
          'g_signal_name');
  late final _g_signal_name =
      _g_signal_namePtr.asFunction<ffi.Pointer<gchar> Function(int)>();

  void g_signal_query(
    int signal_id,
    ffi.Pointer<GSignalQuery> query,
  ) {
    return _g_signal_query(
      signal_id,
      query,
    );
  }

  late final _g_signal_queryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(guint, ffi.Pointer<GSignalQuery>)>>(
      'g_signal_query');
  late final _g_signal_query = _g_signal_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GSignalQuery>)>();

  ffi.Pointer<guint> g_signal_list_ids(
    int itype,
    ffi.Pointer<guint> n_ids,
  ) {
    return _g_signal_list_ids(
      itype,
      n_ids,
    );
  }

  late final _g_signal_list_idsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint> Function(
              GType, ffi.Pointer<guint>)>>('g_signal_list_ids');
  late final _g_signal_list_ids = _g_signal_list_idsPtr
      .asFunction<ffi.Pointer<guint> Function(int, ffi.Pointer<guint>)>();

  int g_signal_is_valid_name(
    ffi.Pointer<gchar> name,
  ) {
    return _g_signal_is_valid_name(
      name,
    );
  }

  late final _g_signal_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_signal_is_valid_name');
  late final _g_signal_is_valid_name =
      _g_signal_is_valid_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_signal_parse_name(
    ffi.Pointer<gchar> detailed_signal,
    int itype,
    ffi.Pointer<guint> signal_id_p,
    ffi.Pointer<GQuark> detail_p,
    int force_detail_quark,
  ) {
    return _g_signal_parse_name(
      detailed_signal,
      itype,
      signal_id_p,
      detail_p,
      force_detail_quark,
    );
  }

  late final _g_signal_parse_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>, GType, ffi.Pointer<guint>,
              ffi.Pointer<GQuark>, gboolean)>>('g_signal_parse_name');
  late final _g_signal_parse_name = _g_signal_parse_namePtr.asFunction<
      int Function(ffi.Pointer<gchar>, int, ffi.Pointer<guint>,
          ffi.Pointer<GQuark>, int)>();

  ffi.Pointer<GSignalInvocationHint> g_signal_get_invocation_hint(
    gpointer instance,
  ) {
    return _g_signal_get_invocation_hint(
      instance,
    );
  }

  late final _g_signal_get_invocation_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSignalInvocationHint> Function(
              gpointer)>>('g_signal_get_invocation_hint');
  late final _g_signal_get_invocation_hint = _g_signal_get_invocation_hintPtr
      .asFunction<ffi.Pointer<GSignalInvocationHint> Function(gpointer)>();

  void g_signal_stop_emission(
    gpointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_stop_emission(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_stop_emissionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, guint, GQuark)>>(
          'g_signal_stop_emission');
  late final _g_signal_stop_emission = _g_signal_stop_emissionPtr
      .asFunction<void Function(gpointer, int, int)>();

  void g_signal_stop_emission_by_name(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
  ) {
    return _g_signal_stop_emission_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_stop_emission_by_namePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_signal_stop_emission_by_name');
  late final _g_signal_stop_emission_by_name =
      _g_signal_stop_emission_by_namePtr
          .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  int g_signal_add_emission_hook(
    int signal_id,
    int detail,
    GSignalEmissionHook hook_func,
    gpointer hook_data,
    GDestroyNotify data_destroy,
  ) {
    return _g_signal_add_emission_hook(
      signal_id,
      detail,
      hook_func,
      hook_data,
      data_destroy,
    );
  }

  late final _g_signal_add_emission_hookPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(guint, GQuark, GSignalEmissionHook, gpointer,
              GDestroyNotify)>>('g_signal_add_emission_hook');
  late final _g_signal_add_emission_hook =
      _g_signal_add_emission_hookPtr.asFunction<
          int Function(
              int, int, GSignalEmissionHook, gpointer, GDestroyNotify)>();

  void g_signal_remove_emission_hook(
    int signal_id,
    int hook_id,
  ) {
    return _g_signal_remove_emission_hook(
      signal_id,
      hook_id,
    );
  }

  late final _g_signal_remove_emission_hookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint, gulong)>>(
          'g_signal_remove_emission_hook');
  late final _g_signal_remove_emission_hook =
      _g_signal_remove_emission_hookPtr.asFunction<void Function(int, int)>();

  int g_signal_has_handler_pending(
    gpointer instance,
    int signal_id,
    int detail,
    int may_be_blocked,
  ) {
    return _g_signal_has_handler_pending(
      instance,
      signal_id,
      detail,
      may_be_blocked,
    );
  }

  late final _g_signal_has_handler_pendingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gpointer, guint, GQuark,
              gboolean)>>('g_signal_has_handler_pending');
  late final _g_signal_has_handler_pending = _g_signal_has_handler_pendingPtr
      .asFunction<int Function(gpointer, int, int, int)>();

  int g_signal_connect_closure_by_id(
    gpointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure_by_id(
      instance,
      signal_id,
      detail,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closure_by_idPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, guint, GQuark, ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_connect_closure_by_id');
  late final _g_signal_connect_closure_by_id =
      _g_signal_connect_closure_by_idPtr.asFunction<
          int Function(gpointer, int, int, ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_closure(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure(
      instance,
      detailed_signal,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closurePtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_connect_closure');
  late final _g_signal_connect_closure =
      _g_signal_connect_closurePtr.asFunction<
          int Function(
              gpointer, ffi.Pointer<gchar>, ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_data(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
    GClosureNotify destroy_data,
    int connect_flags,
  ) {
    return _g_signal_connect_data(
      instance,
      detailed_signal,
      c_handler,
      data,
      destroy_data,
      connect_flags,
    );
  }

  late final _g_signal_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
              GClosureNotify, ffi.Int32)>>('g_signal_connect_data');
  late final _g_signal_connect_data = _g_signal_connect_dataPtr.asFunction<
      int Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
          GClosureNotify, int)>();

  void g_signal_handler_block(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_block(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_block');
  late final _g_signal_handler_block =
      _g_signal_handler_blockPtr.asFunction<void Function(gpointer, int)>();

  void g_signal_handler_unblock(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_unblock(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_unblock');
  late final _g_signal_handler_unblock =
      _g_signal_handler_unblockPtr.asFunction<void Function(gpointer, int)>();

  void g_signal_handler_disconnect(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_disconnect(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer, gulong)>>(
          'g_signal_handler_disconnect');
  late final _g_signal_handler_disconnect = _g_signal_handler_disconnectPtr
      .asFunction<void Function(gpointer, int)>();

  int g_signal_handler_is_connected(
    gpointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_is_connected(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_is_connectedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer, gulong)>>(
          'g_signal_handler_is_connected');
  late final _g_signal_handler_is_connected = _g_signal_handler_is_connectedPtr
      .asFunction<int Function(gpointer, int)>();

  int g_signal_handler_find(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handler_find(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handler_findPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handler_find');
  late final _g_signal_handler_find = _g_signal_handler_findPtr.asFunction<
      int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
          gpointer)>();

  int g_signal_handlers_block_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_block_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_block_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_block_matched');
  late final _g_signal_handlers_block_matched =
      _g_signal_handlers_block_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  int g_signal_handlers_unblock_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_unblock_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_unblock_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_unblock_matched');
  late final _g_signal_handlers_unblock_matched =
      _g_signal_handlers_unblock_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  int g_signal_handlers_disconnect_matched(
    gpointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    gpointer func,
    gpointer data,
  ) {
    return _g_signal_handlers_disconnect_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_disconnect_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              gpointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              gpointer,
              gpointer)>>('g_signal_handlers_disconnect_matched');
  late final _g_signal_handlers_disconnect_matched =
      _g_signal_handlers_disconnect_matchedPtr.asFunction<
          int Function(gpointer, int, int, int, ffi.Pointer<GClosure>, gpointer,
              gpointer)>();

  void g_clear_signal_handler(
    ffi.Pointer<gulong> handler_id_ptr,
    gpointer instance,
  ) {
    return _g_clear_signal_handler(
      handler_id_ptr,
      instance,
    );
  }

  late final _g_clear_signal_handlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gulong>, gpointer)>>(
      'g_clear_signal_handler');
  late final _g_clear_signal_handler = _g_clear_signal_handlerPtr
      .asFunction<void Function(ffi.Pointer<gulong>, gpointer)>();

  void g_signal_override_class_closure(
    int signal_id,
    int instance_type,
    ffi.Pointer<GClosure> class_closure,
  ) {
    return _g_signal_override_class_closure(
      signal_id,
      instance_type,
      class_closure,
    );
  }

  late final _g_signal_override_class_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              ffi.Pointer<GClosure>)>>('g_signal_override_class_closure');
  late final _g_signal_override_class_closure =
      _g_signal_override_class_closurePtr
          .asFunction<void Function(int, int, ffi.Pointer<GClosure>)>();

  void g_signal_override_class_handler(
    ffi.Pointer<gchar> signal_name,
    int instance_type,
    GCallback class_handler,
  ) {
    return _g_signal_override_class_handler(
      signal_name,
      instance_type,
      class_handler,
    );
  }

  late final _g_signal_override_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, GType,
              GCallback)>>('g_signal_override_class_handler');
  late final _g_signal_override_class_handler =
      _g_signal_override_class_handlerPtr
          .asFunction<void Function(ffi.Pointer<gchar>, int, GCallback)>();

  void g_signal_chain_from_overridden(
    ffi.Pointer<GValue> instance_and_params,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_chain_from_overridden(
      instance_and_params,
      return_value,
    );
  }

  late final _g_signal_chain_from_overriddenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_signal_chain_from_overridden');
  late final _g_signal_chain_from_overridden =
      _g_signal_chain_from_overriddenPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_signal_chain_from_overridden_handler(
    gpointer instance,
  ) {
    return _g_signal_chain_from_overridden_handler(
      instance,
    );
  }

  late final _g_signal_chain_from_overridden_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_signal_chain_from_overridden_handler');
  late final _g_signal_chain_from_overridden_handler =
      _g_signal_chain_from_overridden_handlerPtr
          .asFunction<void Function(gpointer)>();

  int g_signal_accumulator_true_handled(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer dummy,
  ) {
    return _g_signal_accumulator_true_handled(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_true_handledPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              gpointer)>>('g_signal_accumulator_true_handled');
  late final _g_signal_accumulator_true_handled =
      _g_signal_accumulator_true_handledPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gpointer)>();

  int g_signal_accumulator_first_wins(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer dummy,
  ) {
    return _g_signal_accumulator_first_wins(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_first_winsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              gpointer)>>('g_signal_accumulator_first_wins');
  late final _g_signal_accumulator_first_wins =
      _g_signal_accumulator_first_winsPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gpointer)>();

  void g_signal_handlers_destroy(
    gpointer instance,
  ) {
    return _g_signal_handlers_destroy(
      instance,
    );
  }

  late final _g_signal_handlers_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_signal_handlers_destroy');
  late final _g_signal_handlers_destroy =
      _g_signal_handlers_destroyPtr.asFunction<void Function(gpointer)>();

  void _g_signals_destroy(
    int itype,
  ) {
    return __g_signals_destroy(
      itype,
    );
  }

  late final __g_signals_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>(
          '_g_signals_destroy');
  late final __g_signals_destroy =
      __g_signals_destroyPtr.asFunction<void Function(int)>();

  int g_date_get_type() {
    return _g_date_get_type();
  }

  late final _g_date_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_get_type');
  late final _g_date_get_type =
      _g_date_get_typePtr.asFunction<int Function()>();

  int g_strv_get_type() {
    return _g_strv_get_type();
  }

  late final _g_strv_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_strv_get_type');
  late final _g_strv_get_type =
      _g_strv_get_typePtr.asFunction<int Function()>();

  int g_gstring_get_type() {
    return _g_gstring_get_type();
  }

  late final _g_gstring_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gstring_get_type');
  late final _g_gstring_get_type =
      _g_gstring_get_typePtr.asFunction<int Function()>();

  int g_hash_table_get_type() {
    return _g_hash_table_get_type();
  }

  late final _g_hash_table_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_hash_table_get_type');
  late final _g_hash_table_get_type =
      _g_hash_table_get_typePtr.asFunction<int Function()>();

  int g_array_get_type() {
    return _g_array_get_type();
  }

  late final _g_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_array_get_type');
  late final _g_array_get_type =
      _g_array_get_typePtr.asFunction<int Function()>();

  int g_byte_array_get_type() {
    return _g_byte_array_get_type();
  }

  late final _g_byte_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_byte_array_get_type');
  late final _g_byte_array_get_type =
      _g_byte_array_get_typePtr.asFunction<int Function()>();

  int g_ptr_array_get_type() {
    return _g_ptr_array_get_type();
  }

  late final _g_ptr_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_ptr_array_get_type');
  late final _g_ptr_array_get_type =
      _g_ptr_array_get_typePtr.asFunction<int Function()>();

  int g_bytes_get_type() {
    return _g_bytes_get_type();
  }

  late final _g_bytes_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bytes_get_type');
  late final _g_bytes_get_type =
      _g_bytes_get_typePtr.asFunction<int Function()>();

  int g_variant_type_get_gtype() {
    return _g_variant_type_get_gtype();
  }

  late final _g_variant_type_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_type_get_gtype');
  late final _g_variant_type_get_gtype =
      _g_variant_type_get_gtypePtr.asFunction<int Function()>();

  int g_regex_get_type() {
    return _g_regex_get_type();
  }

  late final _g_regex_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_regex_get_type');
  late final _g_regex_get_type =
      _g_regex_get_typePtr.asFunction<int Function()>();

  int g_match_info_get_type() {
    return _g_match_info_get_type();
  }

  late final _g_match_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_match_info_get_type');
  late final _g_match_info_get_type =
      _g_match_info_get_typePtr.asFunction<int Function()>();

  int g_error_get_type() {
    return _g_error_get_type();
  }

  late final _g_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_error_get_type');
  late final _g_error_get_type =
      _g_error_get_typePtr.asFunction<int Function()>();

  int g_date_time_get_type() {
    return _g_date_time_get_type();
  }

  late final _g_date_time_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_time_get_type');
  late final _g_date_time_get_type =
      _g_date_time_get_typePtr.asFunction<int Function()>();

  int g_time_zone_get_type() {
    return _g_time_zone_get_type();
  }

  late final _g_time_zone_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_time_zone_get_type');
  late final _g_time_zone_get_type =
      _g_time_zone_get_typePtr.asFunction<int Function()>();

  int g_io_channel_get_type() {
    return _g_io_channel_get_type();
  }

  late final _g_io_channel_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_channel_get_type');
  late final _g_io_channel_get_type =
      _g_io_channel_get_typePtr.asFunction<int Function()>();

  int g_io_condition_get_type() {
    return _g_io_condition_get_type();
  }

  late final _g_io_condition_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_condition_get_type');
  late final _g_io_condition_get_type =
      _g_io_condition_get_typePtr.asFunction<int Function()>();

  int g_variant_builder_get_type() {
    return _g_variant_builder_get_type();
  }

  late final _g_variant_builder_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_variant_builder_get_type');
  late final _g_variant_builder_get_type =
      _g_variant_builder_get_typePtr.asFunction<int Function()>();

  int g_variant_dict_get_type() {
    return _g_variant_dict_get_type();
  }

  late final _g_variant_dict_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_dict_get_type');
  late final _g_variant_dict_get_type =
      _g_variant_dict_get_typePtr.asFunction<int Function()>();

  int g_key_file_get_type() {
    return _g_key_file_get_type();
  }

  late final _g_key_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_key_file_get_type');
  late final _g_key_file_get_type =
      _g_key_file_get_typePtr.asFunction<int Function()>();

  int g_main_loop_get_type() {
    return _g_main_loop_get_type();
  }

  late final _g_main_loop_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_loop_get_type');
  late final _g_main_loop_get_type =
      _g_main_loop_get_typePtr.asFunction<int Function()>();

  int g_main_context_get_type() {
    return _g_main_context_get_type();
  }

  late final _g_main_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_context_get_type');
  late final _g_main_context_get_type =
      _g_main_context_get_typePtr.asFunction<int Function()>();

  int g_source_get_type() {
    return _g_source_get_type();
  }

  late final _g_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_source_get_type');
  late final _g_source_get_type =
      _g_source_get_typePtr.asFunction<int Function()>();

  int g_pollfd_get_type() {
    return _g_pollfd_get_type();
  }

  late final _g_pollfd_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pollfd_get_type');
  late final _g_pollfd_get_type =
      _g_pollfd_get_typePtr.asFunction<int Function()>();

  int g_thread_get_type() {
    return _g_thread_get_type();
  }

  late final _g_thread_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_thread_get_type');
  late final _g_thread_get_type =
      _g_thread_get_typePtr.asFunction<int Function()>();

  int g_checksum_get_type() {
    return _g_checksum_get_type();
  }

  late final _g_checksum_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_checksum_get_type');
  late final _g_checksum_get_type =
      _g_checksum_get_typePtr.asFunction<int Function()>();

  int g_markup_parse_context_get_type() {
    return _g_markup_parse_context_get_type();
  }

  late final _g_markup_parse_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_markup_parse_context_get_type');
  late final _g_markup_parse_context_get_type =
      _g_markup_parse_context_get_typePtr.asFunction<int Function()>();

  int g_mapped_file_get_type() {
    return _g_mapped_file_get_type();
  }

  late final _g_mapped_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_mapped_file_get_type');
  late final _g_mapped_file_get_type =
      _g_mapped_file_get_typePtr.asFunction<int Function()>();

  int g_option_group_get_type() {
    return _g_option_group_get_type();
  }

  late final _g_option_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_option_group_get_type');
  late final _g_option_group_get_type =
      _g_option_group_get_typePtr.asFunction<int Function()>();

  int g_uri_get_type() {
    return _g_uri_get_type();
  }

  late final _g_uri_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_uri_get_type');
  late final _g_uri_get_type = _g_uri_get_typePtr.asFunction<int Function()>();

  int g_tree_get_type() {
    return _g_tree_get_type();
  }

  late final _g_tree_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tree_get_type');
  late final _g_tree_get_type =
      _g_tree_get_typePtr.asFunction<int Function()>();

  int g_pattern_spec_get_type() {
    return _g_pattern_spec_get_type();
  }

  late final _g_pattern_spec_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pattern_spec_get_type');
  late final _g_pattern_spec_get_type =
      _g_pattern_spec_get_typePtr.asFunction<int Function()>();

  int g_variant_get_gtype() {
    return _g_variant_get_gtype();
  }

  late final _g_variant_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_get_gtype');
  late final _g_variant_get_gtype =
      _g_variant_get_gtypePtr.asFunction<int Function()>();

  gpointer g_boxed_copy(
    int boxed_type,
    gconstpointer src_boxed,
  ) {
    return _g_boxed_copy(
      boxed_type,
      src_boxed,
    );
  }

  late final _g_boxed_copyPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, gconstpointer)>>(
          'g_boxed_copy');
  late final _g_boxed_copy =
      _g_boxed_copyPtr.asFunction<gpointer Function(int, gconstpointer)>();

  void g_boxed_free(
    int boxed_type,
    gpointer boxed,
  ) {
    return _g_boxed_free(
      boxed_type,
      boxed,
    );
  }

  late final _g_boxed_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, gpointer)>>(
          'g_boxed_free');
  late final _g_boxed_free =
      _g_boxed_freePtr.asFunction<void Function(int, gpointer)>();

  void g_value_set_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_boxed');
  late final _g_value_set_boxed = _g_value_set_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_static_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_static_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_static_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_static_boxed');
  late final _g_value_set_static_boxed = _g_value_set_static_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_take_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_take_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_take_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_take_boxed');
  late final _g_value_take_boxed = _g_value_take_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_boxed_take_ownership(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed_take_ownership(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxed_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              gconstpointer)>>('g_value_set_boxed_take_ownership');
  late final _g_value_set_boxed_take_ownership =
      _g_value_set_boxed_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  gpointer g_value_get_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boxed(
      value,
    );
  }

  late final _g_value_get_boxedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boxed');
  late final _g_value_get_boxed = _g_value_get_boxedPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  gpointer g_value_dup_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_boxed(
      value,
    );
  }

  late final _g_value_dup_boxedPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_boxed');
  late final _g_value_dup_boxed = _g_value_dup_boxedPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_boxed_type_register_static(
    ffi.Pointer<gchar> name,
    GBoxedCopyFunc boxed_copy,
    GBoxedFreeFunc boxed_free,
  ) {
    return _g_boxed_type_register_static(
      name,
      boxed_copy,
      boxed_free,
    );
  }

  late final _g_boxed_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>, GBoxedCopyFunc,
              GBoxedFreeFunc)>>('g_boxed_type_register_static');
  late final _g_boxed_type_register_static =
      _g_boxed_type_register_staticPtr.asFunction<
          int Function(ffi.Pointer<gchar>, GBoxedCopyFunc, GBoxedFreeFunc)>();

  int g_closure_get_type() {
    return _g_closure_get_type();
  }

  late final _g_closure_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_closure_get_type');
  late final _g_closure_get_type =
      _g_closure_get_typePtr.asFunction<int Function()>();

  int g_value_get_type() {
    return _g_value_get_type();
  }

  late final _g_value_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_get_type');
  late final _g_value_get_type =
      _g_value_get_typePtr.asFunction<int Function()>();

  /// GInitiallyUnowned:
  ///
  /// A type for objects that have an initially floating reference.
  ///
  /// All the fields in the `GInitiallyUnowned` structure are private to the
  /// implementation and should never be accessed directly.
  /// /
  /// /**
  /// GInitiallyUnownedClass:
  ///
  /// The class structure for the GInitiallyUnowned type.
  int g_initially_unowned_get_type() {
    return _g_initially_unowned_get_type();
  }

  late final _g_initially_unowned_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_initially_unowned_get_type');
  late final _g_initially_unowned_get_type =
      _g_initially_unowned_get_typePtr.asFunction<int Function()>();

  void g_object_class_install_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_class_install_property(
      oclass,
      property_id,
      pspec,
    );
  }

  late final _g_object_class_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<GParamSpec>)>>('g_object_class_install_property');
  late final _g_object_class_install_property =
      _g_object_class_install_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GObjectClass>, int, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_class_find_property(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_class_find_property(
      oclass,
      property_name,
    );
  }

  late final _g_object_class_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GObjectClass>,
              ffi.Pointer<gchar>)>>('g_object_class_find_property');
  late final _g_object_class_find_property =
      _g_object_class_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_class_list_properties(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<guint> n_properties,
  ) {
    return _g_object_class_list_properties(
      oclass,
      n_properties,
    );
  }

  late final _g_object_class_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>,
              ffi.Pointer<guint>)>>('g_object_class_list_properties');
  late final _g_object_class_list_properties =
      _g_object_class_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<guint>)>();

  void g_object_class_override_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<gchar> name,
  ) {
    return _g_object_class_override_property(
      oclass,
      property_id,
      name,
    );
  }

  late final _g_object_class_override_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<gchar>)>>('g_object_class_override_property');
  late final _g_object_class_override_property =
      _g_object_class_override_propertyPtr.asFunction<
          void Function(ffi.Pointer<GObjectClass>, int, ffi.Pointer<gchar>)>();

  void g_object_class_install_properties(
    ffi.Pointer<GObjectClass> oclass,
    int n_pspecs,
    ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs,
  ) {
    return _g_object_class_install_properties(
      oclass,
      n_pspecs,
      pspecs,
    );
  }

  late final _g_object_class_install_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
                  ffi.Pointer<ffi.Pointer<GParamSpec>>)>>(
      'g_object_class_install_properties');
  late final _g_object_class_install_properties =
      _g_object_class_install_propertiesPtr.asFunction<
          void Function(ffi.Pointer<GObjectClass>, int,
              ffi.Pointer<ffi.Pointer<GParamSpec>>)>();

  void g_object_interface_install_property(
    gpointer g_iface,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_interface_install_property(
      g_iface,
      pspec,
    );
  }

  late final _g_object_interface_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer,
              ffi.Pointer<GParamSpec>)>>('g_object_interface_install_property');
  late final _g_object_interface_install_property =
      _g_object_interface_install_propertyPtr
          .asFunction<void Function(gpointer, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_interface_find_property(
    gpointer g_iface,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_interface_find_property(
      g_iface,
      property_name,
    );
  }

  late final _g_object_interface_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(gpointer,
              ffi.Pointer<gchar>)>>('g_object_interface_find_property');
  late final _g_object_interface_find_property =
      _g_object_interface_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(gpointer, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_interface_list_properties(
    gpointer g_iface,
    ffi.Pointer<guint> n_properties_p,
  ) {
    return _g_object_interface_list_properties(
      g_iface,
      n_properties_p,
    );
  }

  late final _g_object_interface_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(gpointer,
              ffi.Pointer<guint>)>>('g_object_interface_list_properties');
  late final _g_object_interface_list_properties =
      _g_object_interface_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              gpointer, ffi.Pointer<guint>)>();

  int g_object_get_type() {
    return _g_object_get_type();
  }

  late final _g_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_object_get_type');
  late final _g_object_get_type =
      _g_object_get_typePtr.asFunction<int Function()>();

  gpointer g_object_new(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_new(
      object_type,
      first_property_name,
    );
  }

  late final _g_object_newPtr =
      _lookup<ffi.NativeFunction<gpointer Function(GType, ffi.Pointer<gchar>)>>(
          'g_object_new');
  late final _g_object_new =
      _g_object_newPtr.asFunction<gpointer Function(int, ffi.Pointer<gchar>)>();

  ffi.Pointer<GObject> g_object_new_with_properties(
    int object_type,
    int n_properties,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_new_with_properties(
      object_type,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_new_with_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              GType,
              guint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GValue>)>>('g_object_new_with_properties');
  late final _g_object_new_with_properties =
      _g_object_new_with_propertiesPtr.asFunction<
          ffi.Pointer<GObject> Function(int, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  gpointer g_object_newv(
    int object_type,
    int n_parameters,
    ffi.Pointer<GParameter> parameters,
  ) {
    return _g_object_newv(
      object_type,
      n_parameters,
      parameters,
    );
  }

  late final _g_object_newvPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              GType, guint, ffi.Pointer<GParameter>)>>('g_object_newv');
  late final _g_object_newv = _g_object_newvPtr
      .asFunction<gpointer Function(int, int, ffi.Pointer<GParameter>)>();

  ffi.Pointer<GObject> g_object_new_valist(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_new_valist(
      object_type,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(GType, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_new_valist');
  late final _g_object_new_valist = _g_object_new_valistPtr.asFunction<
      ffi.Pointer<GObject> Function(
          int, ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  void g_object_set(
    gpointer object,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_set(
      object,
      first_property_name,
    );
  }

  late final _g_object_setPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_set');
  late final _g_object_set = _g_object_setPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_get(
    gpointer object,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_object_get(
      object,
      first_property_name,
    );
  }

  late final _g_object_getPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_get');
  late final _g_object_get = _g_object_getPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  gpointer g_object_connect(
    gpointer object,
    ffi.Pointer<gchar> signal_spec,
  ) {
    return _g_object_connect(
      object,
      signal_spec,
    );
  }

  late final _g_object_connectPtr = _lookup<
          ffi.NativeFunction<gpointer Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_connect');
  late final _g_object_connect = _g_object_connectPtr
      .asFunction<gpointer Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_disconnect(
    gpointer object,
    ffi.Pointer<gchar> signal_spec,
  ) {
    return _g_object_disconnect(
      object,
      signal_spec,
    );
  }

  late final _g_object_disconnectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_object_disconnect');
  late final _g_object_disconnect = _g_object_disconnectPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  void g_object_setv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<gchar>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_setv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_setvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<GValue>)>>('g_object_setv');
  late final _g_object_setv = _g_object_setvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<GValue>)>();

  void g_object_set_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_set_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_set_valist');
  late final _g_object_set_valist = _g_object_set_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_getv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<gchar>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_getv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_getvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<GValue>)>>('g_object_getv');
  late final _g_object_getv = _g_object_getvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<GValue>)>();

  void g_object_get_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_get_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_get_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_object_get_valist');
  late final _g_object_get_valist = _g_object_get_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_set_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_set_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<GValue>)>>('g_object_set_property');
  late final _g_object_set_property = _g_object_set_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<gchar>, ffi.Pointer<GValue>)>();

  void g_object_get_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_get_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              ffi.Pointer<GValue>)>>('g_object_get_property');
  late final _g_object_get_property = _g_object_get_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<gchar>, ffi.Pointer<GValue>)>();

  void g_object_freeze_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_freeze_notify(
      object,
    );
  }

  late final _g_object_freeze_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_freeze_notify');
  late final _g_object_freeze_notify = _g_object_freeze_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_notify(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_object_notify(
      object,
      property_name,
    );
  }

  late final _g_object_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>, ffi.Pointer<gchar>)>>('g_object_notify');
  late final _g_object_notify = _g_object_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  void g_object_notify_by_pspec(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_notify_by_pspec(
      object,
      pspec,
    );
  }

  late final _g_object_notify_by_pspecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GParamSpec>)>>('g_object_notify_by_pspec');
  late final _g_object_notify_by_pspec =
      _g_object_notify_by_pspecPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<GParamSpec>)>();

  void g_object_thaw_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_thaw_notify(
      object,
    );
  }

  late final _g_object_thaw_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_thaw_notify');
  late final _g_object_thaw_notify = _g_object_thaw_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  int g_object_is_floating(
    gpointer object,
  ) {
    return _g_object_is_floating(
      object,
    );
  }

  late final _g_object_is_floatingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer)>>(
          'g_object_is_floating');
  late final _g_object_is_floating =
      _g_object_is_floatingPtr.asFunction<int Function(gpointer)>();

  gpointer g_object_ref_sink(
    gpointer object,
  ) {
    return _g_object_ref_sink(
      object,
    );
  }

  late final _g_object_ref_sinkPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_object_ref_sink');
  late final _g_object_ref_sink =
      _g_object_ref_sinkPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_object_take_ref(
    gpointer object,
  ) {
    return _g_object_take_ref(
      object,
    );
  }

  late final _g_object_take_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>(
          'g_object_take_ref');
  late final _g_object_take_ref =
      _g_object_take_refPtr.asFunction<gpointer Function(gpointer)>();

  gpointer g_object_ref(
    gpointer object,
  ) {
    return _g_object_ref(
      object,
    );
  }

  late final _g_object_refPtr =
      _lookup<ffi.NativeFunction<gpointer Function(gpointer)>>('g_object_ref');
  late final _g_object_ref =
      _g_object_refPtr.asFunction<gpointer Function(gpointer)>();

  void g_object_unref(
    gpointer object,
  ) {
    return _g_object_unref(
      object,
    );
  }

  late final _g_object_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gpointer)>>(
          'g_object_unref');
  late final _g_object_unref =
      _g_object_unrefPtr.asFunction<void Function(gpointer)>();

  void g_object_weak_ref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    gpointer data,
  ) {
    return _g_object_weak_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              gpointer)>>('g_object_weak_ref');
  late final _g_object_weak_ref = _g_object_weak_refPtr
      .asFunction<void Function(ffi.Pointer<GObject>, GWeakNotify, gpointer)>();

  void g_object_weak_unref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    gpointer data,
  ) {
    return _g_object_weak_unref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              gpointer)>>('g_object_weak_unref');
  late final _g_object_weak_unref = _g_object_weak_unrefPtr
      .asFunction<void Function(ffi.Pointer<GObject>, GWeakNotify, gpointer)>();

  void g_object_add_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gpointer> weak_pointer_location,
  ) {
    return _g_object_add_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_add_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<gpointer>)>>('g_object_add_weak_pointer');
  late final _g_object_add_weak_pointer = _g_object_add_weak_pointerPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gpointer>)>();

  void g_object_remove_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gpointer> weak_pointer_location,
  ) {
    return _g_object_remove_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_remove_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<gpointer>)>>('g_object_remove_weak_pointer');
  late final _g_object_remove_weak_pointer = _g_object_remove_weak_pointerPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<gpointer>)>();

  void g_object_add_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    gpointer data,
  ) {
    return _g_object_add_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_add_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              gpointer)>>('g_object_add_toggle_ref');
  late final _g_object_add_toggle_ref = _g_object_add_toggle_refPtr.asFunction<
      void Function(ffi.Pointer<GObject>, GToggleNotify, gpointer)>();

  void g_object_remove_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    gpointer data,
  ) {
    return _g_object_remove_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_remove_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              gpointer)>>('g_object_remove_toggle_ref');
  late final _g_object_remove_toggle_ref =
      _g_object_remove_toggle_refPtr.asFunction<
          void Function(ffi.Pointer<GObject>, GToggleNotify, gpointer)>();

  gpointer g_object_get_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_get_qdata(
      object,
      quark,
    );
  }

  late final _g_object_get_qdataPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_get_qdata');
  late final _g_object_get_qdata = _g_object_get_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GObject>, int)>();

  void g_object_set_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer data,
  ) {
    return _g_object_set_qdata(
      object,
      quark,
      data,
    );
  }

  late final _g_object_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>, GQuark, gpointer)>>('g_object_set_qdata');
  late final _g_object_set_qdata = _g_object_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GObject>, int, gpointer)>();

  void g_object_set_qdata_full(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_qdata_full(
      object,
      quark,
      data,
      destroy,
    );
  }

  late final _g_object_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GQuark, gpointer,
              GDestroyNotify)>>('g_object_set_qdata_full');
  late final _g_object_set_qdata_full = _g_object_set_qdata_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, gpointer, GDestroyNotify)>();

  gpointer g_object_steal_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_steal_qdata(
      object,
      quark,
    );
  }

  late final _g_object_steal_qdataPtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_steal_qdata');
  late final _g_object_steal_qdata = _g_object_steal_qdataPtr
      .asFunction<gpointer Function(ffi.Pointer<GObject>, int)>();

  gpointer g_object_dup_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    GDuplicateFunc dup_func,
    gpointer user_data,
  ) {
    return _g_object_dup_qdata(
      object,
      quark,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_qdataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>, GQuark, GDuplicateFunc,
              gpointer)>>('g_object_dup_qdata');
  late final _g_object_dup_qdata = _g_object_dup_qdataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, int, GDuplicateFunc, gpointer)>();

  int g_object_replace_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    gpointer oldval,
    gpointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_qdata(
      object,
      quark,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_qdataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              GQuark,
              gpointer,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_qdata');
  late final _g_object_replace_qdata = _g_object_replace_qdataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, int, gpointer, gpointer,
          GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  gpointer g_object_get_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
  ) {
    return _g_object_get_data(
      object,
      key,
    );
  }

  late final _g_object_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              ffi.Pointer<GObject>, ffi.Pointer<gchar>)>>('g_object_get_data');
  late final _g_object_get_data = _g_object_get_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  void g_object_set_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer data,
  ) {
    return _g_object_set_data(
      object,
      key,
      data,
    );
  }

  late final _g_object_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              gpointer)>>('g_object_set_data');
  late final _g_object_set_data = _g_object_set_dataPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer)>();

  void g_object_set_data_full(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_data_full(
      object,
      key,
      data,
      destroy,
    );
  }

  late final _g_object_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer,
              GDestroyNotify)>>('g_object_set_data_full');
  late final _g_object_set_data_full = _g_object_set_data_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer,
          GDestroyNotify)>();

  gpointer g_object_steal_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
  ) {
    return _g_object_steal_data(
      object,
      key,
    );
  }

  late final _g_object_steal_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>,
              ffi.Pointer<gchar>)>>('g_object_steal_data');
  late final _g_object_steal_data = _g_object_steal_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>)>();

  gpointer g_object_dup_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    GDuplicateFunc dup_func,
    gpointer user_data,
  ) {
    return _g_object_dup_data(
      object,
      key,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_dataPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
              GDuplicateFunc, gpointer)>>('g_object_dup_data');
  late final _g_object_dup_data = _g_object_dup_dataPtr.asFunction<
      gpointer Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>,
          GDuplicateFunc, gpointer)>();

  int g_object_replace_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<gchar> key,
    gpointer oldval,
    gpointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_data(
      object,
      key,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              ffi.Pointer<gchar>,
              gpointer,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_data');
  late final _g_object_replace_data = _g_object_replace_dataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, ffi.Pointer<gchar>, gpointer, gpointer,
          GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  void g_object_watch_closure(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_object_watch_closure(
      object,
      closure,
    );
  }

  late final _g_object_watch_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GClosure>)>>('g_object_watch_closure');
  late final _g_object_watch_closure = _g_object_watch_closurePtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object');
  late final _g_cclosure_new_object = _g_cclosure_new_objectPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object_swap(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object_swap(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_object_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object_swap');
  late final _g_cclosure_new_object_swap =
      _g_cclosure_new_object_swapPtr.asFunction<
          ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_closure_new_object(
    int sizeof_closure,
    ffi.Pointer<GObject> object,
  ) {
    return _g_closure_new_object(
      sizeof_closure,
      object,
    );
  }

  late final _g_closure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              guint, ffi.Pointer<GObject>)>>('g_closure_new_object');
  late final _g_closure_new_object = _g_closure_new_objectPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, ffi.Pointer<GObject>)>();

  void g_value_set_object(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_set_object(
      value,
      v_object,
    );
  }

  late final _g_value_set_objectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_object');
  late final _g_value_set_object = _g_value_set_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  gpointer g_value_get_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_object(
      value,
    );
  }

  late final _g_value_get_objectPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_object');
  late final _g_value_get_object = _g_value_get_objectPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  gpointer g_value_dup_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_object(
      value,
    );
  }

  late final _g_value_dup_objectPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_object');
  late final _g_value_dup_object = _g_value_dup_objectPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_signal_connect_object(
    gpointer instance,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer gobject,
    int connect_flags,
  ) {
    return _g_signal_connect_object(
      instance,
      detailed_signal,
      c_handler,
      gobject,
      connect_flags,
    );
  }

  late final _g_signal_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer,
              ffi.Int32)>>('g_signal_connect_object');
  late final _g_signal_connect_object = _g_signal_connect_objectPtr.asFunction<
      int Function(gpointer, ffi.Pointer<gchar>, GCallback, gpointer, int)>();

  void g_object_force_floating(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_force_floating(
      object,
    );
  }

  late final _g_object_force_floatingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_force_floating');
  late final _g_object_force_floating = _g_object_force_floatingPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_run_dispose(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_run_dispose(
      object,
    );
  }

  late final _g_object_run_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_run_dispose');
  late final _g_object_run_dispose = _g_object_run_disposePtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_value_take_object(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_take_object(
      value,
      v_object,
    );
  }

  late final _g_value_take_objectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_take_object');
  late final _g_value_take_object = _g_value_take_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  void g_value_set_object_take_ownership(
    ffi.Pointer<GValue> value,
    gpointer v_object,
  ) {
    return _g_value_set_object_take_ownership(
      value,
      v_object,
    );
  }

  late final _g_value_set_object_take_ownershipPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_object_take_ownership');
  late final _g_value_set_object_take_ownership =
      _g_value_set_object_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  int g_object_compat_control(
    int what,
    gpointer data,
  ) {
    return _g_object_compat_control(
      what,
      data,
    );
  }

  late final _g_object_compat_controlPtr =
      _lookup<ffi.NativeFunction<gsize Function(gsize, gpointer)>>(
          'g_object_compat_control');
  late final _g_object_compat_control =
      _g_object_compat_controlPtr.asFunction<int Function(int, gpointer)>();

  void g_clear_object(
    ffi.Pointer<ffi.Pointer<GObject>> object_ptr,
  ) {
    return _g_clear_object(
      object_ptr,
    );
  }

  late final _g_clear_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GObject>>)>>('g_clear_object');
  late final _g_clear_object = _g_clear_objectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GObject>>)>();

  void g_weak_ref_init(
    ffi.Pointer<GWeakRef> weak_ref,
    gpointer object,
  ) {
    return _g_weak_ref_init(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GWeakRef>, gpointer)>>(
      'g_weak_ref_init');
  late final _g_weak_ref_init = _g_weak_ref_initPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, gpointer)>();

  void g_weak_ref_clear(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_clear(
      weak_ref,
    );
  }

  late final _g_weak_ref_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_clear');
  late final _g_weak_ref_clear =
      _g_weak_ref_clearPtr.asFunction<void Function(ffi.Pointer<GWeakRef>)>();

  gpointer g_weak_ref_get(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_get(
      weak_ref,
    );
  }

  late final _g_weak_ref_getPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_get');
  late final _g_weak_ref_get =
      _g_weak_ref_getPtr.asFunction<gpointer Function(ffi.Pointer<GWeakRef>)>();

  void g_weak_ref_set(
    ffi.Pointer<GWeakRef> weak_ref,
    gpointer object,
  ) {
    return _g_weak_ref_set(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_setPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GWeakRef>, gpointer)>>(
      'g_weak_ref_set');
  late final _g_weak_ref_set = _g_weak_ref_setPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, gpointer)>();

  int g_binding_flags_get_type() {
    return _g_binding_flags_get_type();
  }

  late final _g_binding_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_flags_get_type');
  late final _g_binding_flags_get_type =
      _g_binding_flags_get_typePtr.asFunction<int Function()>();

  int g_binding_get_type() {
    return _g_binding_get_type();
  }

  late final _g_binding_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_get_type');
  late final _g_binding_get_type =
      _g_binding_get_typePtr.asFunction<int Function()>();

  int g_binding_get_flags(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_flags(
      binding,
    );
  }

  late final _g_binding_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GBinding>)>>(
          'g_binding_get_flags');
  late final _g_binding_get_flags =
      _g_binding_get_flagsPtr.asFunction<int Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source(
      binding,
    );
  }

  late final _g_binding_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_source');
  late final _g_binding_get_source = _g_binding_get_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_source(
      binding,
    );
  }

  late final _g_binding_dup_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_source');
  late final _g_binding_dup_source = _g_binding_dup_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target(
      binding,
    );
  }

  late final _g_binding_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_target');
  late final _g_binding_get_target = _g_binding_get_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_target(
      binding,
    );
  }

  late final _g_binding_dup_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_target');
  late final _g_binding_dup_target = _g_binding_dup_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<gchar> g_binding_get_source_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source_property(
      binding,
    );
  }

  late final _g_binding_get_source_propertyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>>(
      'g_binding_get_source_property');
  late final _g_binding_get_source_property = _g_binding_get_source_propertyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<gchar> g_binding_get_target_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target_property(
      binding,
    );
  }

  late final _g_binding_get_target_propertyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>>(
      'g_binding_get_target_property');
  late final _g_binding_get_target_property = _g_binding_get_target_propertyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GBinding>)>();

  void g_binding_unbind(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_unbind(
      binding,
    );
  }

  late final _g_binding_unbindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBinding>)>>(
          'g_binding_unbind');
  late final _g_binding_unbind =
      _g_binding_unbindPtr.asFunction<void Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GBinding> g_object_bind_property(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
  ) {
    return _g_object_bind_property(
      source,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_object_bind_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(gpointer, ffi.Pointer<gchar>, gpointer,
              ffi.Pointer<gchar>, ffi.Int32)>>('g_object_bind_property');
  late final _g_object_bind_property = _g_object_bind_propertyPtr.asFunction<
      ffi.Pointer<GBinding> Function(
          gpointer, ffi.Pointer<gchar>, gpointer, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GBinding> g_object_bind_property_full(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    gpointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_object_bind_property_full(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      notify,
    );
  }

  late final _g_object_bind_property_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>>('g_object_bind_property_full');
  late final _g_object_bind_property_full =
      _g_object_bind_property_fullPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>();

  ffi.Pointer<GBinding> g_object_bind_property_with_closures(
    gpointer source,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_object_bind_property_with_closures(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_object_bind_property_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_object_bind_property_with_closures');
  late final _g_object_bind_property_with_closures =
      _g_object_bind_property_with_closuresPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              gpointer,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  int g_binding_group_get_type() {
    return _g_binding_group_get_type();
  }

  late final _g_binding_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_group_get_type');
  late final _g_binding_group_get_type =
      _g_binding_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GBindingGroup> g_binding_group_new() {
    return _g_binding_group_new();
  }

  late final _g_binding_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GBindingGroup> Function()>>(
          'g_binding_group_new');
  late final _g_binding_group_new = _g_binding_group_newPtr
      .asFunction<ffi.Pointer<GBindingGroup> Function()>();

  gpointer g_binding_group_dup_source(
    ffi.Pointer<GBindingGroup> self,
  ) {
    return _g_binding_group_dup_source(
      self,
    );
  }

  late final _g_binding_group_dup_sourcePtr = _lookup<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GBindingGroup>)>>(
      'g_binding_group_dup_source');
  late final _g_binding_group_dup_source = _g_binding_group_dup_sourcePtr
      .asFunction<gpointer Function(ffi.Pointer<GBindingGroup>)>();

  void g_binding_group_set_source(
    ffi.Pointer<GBindingGroup> self,
    gpointer source,
  ) {
    return _g_binding_group_set_source(
      self,
      source,
    );
  }

  late final _g_binding_group_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBindingGroup>,
              gpointer)>>('g_binding_group_set_source');
  late final _g_binding_group_set_source = _g_binding_group_set_sourcePtr
      .asFunction<void Function(ffi.Pointer<GBindingGroup>, gpointer)>();

  void g_binding_group_bind(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
  ) {
    return _g_binding_group_bind(
      self,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_binding_group_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_binding_group_bind');
  late final _g_binding_group_bind = _g_binding_group_bindPtr.asFunction<
      void Function(ffi.Pointer<GBindingGroup>, ffi.Pointer<gchar>, gpointer,
          ffi.Pointer<gchar>, int)>();

  void g_binding_group_bind_full(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    gpointer user_data,
    GDestroyNotify user_data_destroy,
  ) {
    return _g_binding_group_bind_full(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      user_data_destroy,
    );
  }

  late final _g_binding_group_bind_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>>('g_binding_group_bind_full');
  late final _g_binding_group_bind_full =
      _g_binding_group_bind_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              gpointer,
              GDestroyNotify)>();

  void g_binding_group_bind_with_closures(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<gchar> source_property,
    gpointer target,
    ffi.Pointer<gchar> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_binding_group_bind_with_closures(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_binding_group_bind_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_binding_group_bind_with_closures');
  late final _g_binding_group_bind_with_closures =
      _g_binding_group_bind_with_closuresPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value(
    ffi.Pointer<GEnumClass> enum_class,
    int value,
  ) {
    return _g_enum_get_value(
      enum_class,
      value,
    );
  }

  late final _g_enum_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, gint)>>('g_enum_get_value');
  late final _g_enum_get_value = _g_enum_get_valuePtr.asFunction<
      ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>, int)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_name(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<gchar> name,
  ) {
    return _g_enum_get_value_by_name(
      enum_class,
      name,
    );
  }

  late final _g_enum_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<gchar>)>>('g_enum_get_value_by_name');
  late final _g_enum_get_value_by_name =
      _g_enum_get_value_by_namePtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_nick(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<gchar> nick,
  ) {
    return _g_enum_get_value_by_nick(
      enum_class,
      nick,
    );
  }

  late final _g_enum_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<gchar>)>>('g_enum_get_value_by_nick');
  late final _g_enum_get_value_by_nick =
      _g_enum_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_first_value(
    ffi.Pointer<GFlagsClass> flags_class,
    int value,
  ) {
    return _g_flags_get_first_value(
      flags_class,
      value,
    );
  }

  late final _g_flags_get_first_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, guint)>>('g_flags_get_first_value');
  late final _g_flags_get_first_value = _g_flags_get_first_valuePtr.asFunction<
      ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>, int)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_name(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<gchar> name,
  ) {
    return _g_flags_get_value_by_name(
      flags_class,
      name,
    );
  }

  late final _g_flags_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<gchar>)>>('g_flags_get_value_by_name');
  late final _g_flags_get_value_by_name =
      _g_flags_get_value_by_namePtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_nick(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<gchar> nick,
  ) {
    return _g_flags_get_value_by_nick(
      flags_class,
      nick,
    );
  }

  late final _g_flags_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<gchar>)>>('g_flags_get_value_by_nick');
  late final _g_flags_get_value_by_nick =
      _g_flags_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_enum_to_string(
    int g_enum_type,
    int value,
  ) {
    return _g_enum_to_string(
      g_enum_type,
      value,
    );
  }

  late final _g_enum_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType, gint)>>(
          'g_enum_to_string');
  late final _g_enum_to_string =
      _g_enum_to_stringPtr.asFunction<ffi.Pointer<gchar> Function(int, int)>();

  ffi.Pointer<gchar> g_flags_to_string(
    int flags_type,
    int value,
  ) {
    return _g_flags_to_string(
      flags_type,
      value,
    );
  }

  late final _g_flags_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function(GType, guint)>>(
          'g_flags_to_string');
  late final _g_flags_to_string =
      _g_flags_to_stringPtr.asFunction<ffi.Pointer<gchar> Function(int, int)>();

  void g_value_set_enum(
    ffi.Pointer<GValue> value,
    int v_enum,
  ) {
    return _g_value_set_enum(
      value,
      v_enum,
    );
  }

  late final _g_value_set_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_enum');
  late final _g_value_set_enum = _g_value_set_enumPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_enum(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_enum(
      value,
    );
  }

  late final _g_value_get_enumPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_enum');
  late final _g_value_get_enum =
      _g_value_get_enumPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_flags(
    ffi.Pointer<GValue> value,
    int v_flags,
  ) {
    return _g_value_set_flags(
      value,
      v_flags,
    );
  }

  late final _g_value_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_flags');
  late final _g_value_set_flags = _g_value_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_flags(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_flags(
      value,
    );
  }

  late final _g_value_get_flagsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_flags');
  late final _g_value_get_flags =
      _g_value_get_flagsPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_enum_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_enum_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_enum_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>>('g_enum_register_static');
  late final _g_enum_register_static = _g_enum_register_staticPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<GEnumValue>)>();

  int g_flags_register_static(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_flags_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_flags_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_register_static');
  late final _g_flags_register_static = _g_flags_register_staticPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<GFlagsValue>)>();

  void g_enum_complete_type_info(
    int g_enum_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GEnumValue> const_values,
  ) {
    return _g_enum_complete_type_info(
      g_enum_type,
      info,
      const_values,
    );
  }

  late final _g_enum_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GEnumValue>)>>('g_enum_complete_type_info');
  late final _g_enum_complete_type_info =
      _g_enum_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GEnumValue>)>();

  void g_flags_complete_type_info(
    int g_flags_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GFlagsValue> const_values,
  ) {
    return _g_flags_complete_type_info(
      g_flags_type,
      info,
      const_values,
    );
  }

  late final _g_flags_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_complete_type_info');
  late final _g_flags_complete_type_info =
      _g_flags_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GFlagsValue>)>();

  int g_unicode_type_get_type() {
    return _g_unicode_type_get_type();
  }

  late final _g_unicode_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_unicode_type_get_type');
  late final _g_unicode_type_get_type =
      _g_unicode_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_break_type_get_type() {
    return _g_unicode_break_type_get_type();
  }

  late final _g_unicode_break_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_break_type_get_type');
  late final _g_unicode_break_type_get_type =
      _g_unicode_break_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_script_get_type() {
    return _g_unicode_script_get_type();
  }

  late final _g_unicode_script_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_script_get_type');
  late final _g_unicode_script_get_type =
      _g_unicode_script_get_typePtr.asFunction<int Function()>();

  int g_normalize_mode_get_type() {
    return _g_normalize_mode_get_type();
  }

  late final _g_normalize_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_normalize_mode_get_type');
  late final _g_normalize_mode_get_type =
      _g_normalize_mode_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GParamSpec> g_param_spec_char(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_char(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint8,
              gint8,
              gint8,
              ffi.Int32)>>('g_param_spec_char');
  late final _g_param_spec_char = _g_param_spec_charPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uchar(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uchar(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint8,
              guint8,
              guint8,
              ffi.Int32)>>('g_param_spec_uchar');
  late final _g_param_spec_uchar = _g_param_spec_ucharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boolean(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_boolean(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gboolean,
              ffi.Int32)>>('g_param_spec_boolean');
  late final _g_param_spec_boolean = _g_param_spec_booleanPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint,
              gint,
              gint,
              ffi.Int32)>>('g_param_spec_int');
  late final _g_param_spec_int = _g_param_spec_intPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint,
              guint,
              guint,
              ffi.Int32)>>('g_param_spec_uint');
  late final _g_param_spec_uint = _g_param_spec_uintPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_long(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_long(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              glong,
              glong,
              glong,
              ffi.Int32)>>('g_param_spec_long');
  late final _g_param_spec_long = _g_param_spec_longPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_ulong(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_ulong(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gulong,
              gulong,
              gulong,
              ffi.Int32)>>('g_param_spec_ulong');
  late final _g_param_spec_ulong = _g_param_spec_ulongPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int64(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gint64,
              gint64,
              gint64,
              ffi.Int32)>>('g_param_spec_int64');
  late final _g_param_spec_int64 = _g_param_spec_int64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint64(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint64,
              guint64,
              guint64,
              ffi.Int32)>>('g_param_spec_uint64');
  late final _g_param_spec_uint64 = _g_param_spec_uint64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_unichar(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_unichar(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gunichar,
              ffi.Int32)>>('g_param_spec_unichar');
  late final _g_param_spec_unichar = _g_param_spec_unicharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_enum(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int enum_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_enum(
      name,
      nick,
      blurb,
      enum_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_enumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              gint,
              ffi.Int32)>>('g_param_spec_enum');
  late final _g_param_spec_enum = _g_param_spec_enumPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_flags(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_flags(
      name,
      nick,
      blurb,
      flags_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              guint,
              ffi.Int32)>>('g_param_spec_flags');
  late final _g_param_spec_flags = _g_param_spec_flagsPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_float(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_float(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gfloat,
              gfloat,
              gfloat,
              ffi.Int32)>>('g_param_spec_float');
  late final _g_param_spec_float = _g_param_spec_floatPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, double, double, double, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_double(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_double(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gdouble,
              gdouble,
              gdouble,
              ffi.Int32)>>('g_param_spec_double');
  late final _g_param_spec_double = _g_param_spec_doublePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, double, double, double, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_string(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<gchar> default_value,
    int flags,
  ) {
    return _g_param_spec_string(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_param_spec_string');
  late final _g_param_spec_string = _g_param_spec_stringPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_param(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int param_type,
    int flags,
  ) {
    return _g_param_spec_param(
      name,
      nick,
      blurb,
      param_type,
      flags,
    );
  }

  late final _g_param_spec_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_param');
  late final _g_param_spec_param = _g_param_spec_paramPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boxed(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int boxed_type,
    int flags,
  ) {
    return _g_param_spec_boxed(
      name,
      nick,
      blurb,
      boxed_type,
      flags,
    );
  }

  late final _g_param_spec_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_boxed');
  late final _g_param_spec_boxed = _g_param_spec_boxedPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_pointer(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int flags,
  ) {
    return _g_param_spec_pointer(
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32)>>('g_param_spec_pointer');
  late final _g_param_spec_pointer = _g_param_spec_pointerPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_value_array(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<GParamSpec> element_spec,
    int flags,
  ) {
    return _g_param_spec_value_array(
      name,
      nick,
      blurb,
      element_spec,
      flags,
    );
  }

  late final _g_param_spec_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>,
              ffi.Int32)>>('g_param_spec_value_array');
  late final _g_param_spec_value_array =
      _g_param_spec_value_arrayPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>,
              int)>();

  ffi.Pointer<GParamSpec> g_param_spec_object(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int object_type,
    int flags,
  ) {
    return _g_param_spec_object(
      name,
      nick,
      blurb,
      object_type,
      flags,
    );
  }

  late final _g_param_spec_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_object');
  late final _g_param_spec_object = _g_param_spec_objectPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_override(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GParamSpec> overridden,
  ) {
    return _g_param_spec_override(
      name,
      overridden,
    );
  }

  late final _g_param_spec_overridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_override');
  late final _g_param_spec_override = _g_param_spec_overridePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_gtype(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    int is_a_type,
    int flags,
  ) {
    return _g_param_spec_gtype(
      name,
      nick,
      blurb,
      is_a_type,
      flags,
    );
  }

  late final _g_param_spec_gtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GType,
              ffi.Int32)>>('g_param_spec_gtype');
  late final _g_param_spec_gtype = _g_param_spec_gtypePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_variant(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> nick,
    ffi.Pointer<gchar> blurb,
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GVariant> default_value,
    int flags,
  ) {
    return _g_param_spec_variant(
      name,
      nick,
      blurb,
      type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>,
              ffi.Int32)>>('g_param_spec_variant');
  late final _g_param_spec_variant = _g_param_spec_variantPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GVariantType>,
          ffi.Pointer<GVariant>,
          int)>();

  late final ffi.Pointer<ffi.Pointer<GType>> _g_param_spec_types =
      _lookup<ffi.Pointer<GType>>('g_param_spec_types');

  ffi.Pointer<GType> get g_param_spec_types => _g_param_spec_types.value;

  set g_param_spec_types(ffi.Pointer<GType> value) =>
      _g_param_spec_types.value = value;

  int g_signal_group_get_type() {
    return _g_signal_group_get_type();
  }

  late final _g_signal_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_signal_group_get_type');
  late final _g_signal_group_get_type =
      _g_signal_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSignalGroup> g_signal_group_new(
    int target_type,
  ) {
    return _g_signal_group_new(
      target_type,
    );
  }

  late final _g_signal_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSignalGroup> Function(GType)>>(
          'g_signal_group_new');
  late final _g_signal_group_new = _g_signal_group_newPtr
      .asFunction<ffi.Pointer<GSignalGroup> Function(int)>();

  void g_signal_group_set_target(
    ffi.Pointer<GSignalGroup> self,
    gpointer target,
  ) {
    return _g_signal_group_set_target(
      self,
      target,
    );
  }

  late final _g_signal_group_set_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>,
              gpointer)>>('g_signal_group_set_target');
  late final _g_signal_group_set_target = _g_signal_group_set_targetPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>, gpointer)>();

  gpointer g_signal_group_dup_target(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_dup_target(
      self,
    );
  }

  late final _g_signal_group_dup_targetPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_dup_target');
  late final _g_signal_group_dup_target = _g_signal_group_dup_targetPtr
      .asFunction<gpointer Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_block(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_block(
      self,
    );
  }

  late final _g_signal_group_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_block');
  late final _g_signal_group_block = _g_signal_group_blockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_unblock(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_unblock(
      self,
    );
  }

  late final _g_signal_group_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_unblock');
  late final _g_signal_group_unblock = _g_signal_group_unblockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_connect_object(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer object,
    int flags,
  ) {
    return _g_signal_group_connect_object(
      self,
      detailed_signal,
      c_handler,
      object,
      flags,
    );
  }

  late final _g_signal_group_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<gchar>,
              GCallback,
              gpointer,
              ffi.Int32)>>('g_signal_group_connect_object');
  late final _g_signal_group_connect_object =
      _g_signal_group_connect_objectPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer, int)>();

  void g_signal_group_connect_data(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
    GClosureNotify notify,
    int flags,
  ) {
    return _g_signal_group_connect_data(
      self,
      detailed_signal,
      c_handler,
      data,
      notify,
      flags,
    );
  }

  late final _g_signal_group_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<gchar>,
              GCallback,
              gpointer,
              GClosureNotify,
              ffi.Int32)>>('g_signal_group_connect_data');
  late final _g_signal_group_connect_data =
      _g_signal_group_connect_dataPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer, GClosureNotify, int)>();

  void g_signal_group_connect(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect');
  late final _g_signal_group_connect = _g_signal_group_connectPtr.asFunction<
      void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>, GCallback,
          gpointer)>();

  void g_signal_group_connect_after(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect_after(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect_after');
  late final _g_signal_group_connect_after =
      _g_signal_group_connect_afterPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>();

  void g_signal_group_connect_swapped(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<gchar> detailed_signal,
    GCallback c_handler,
    gpointer data,
  ) {
    return _g_signal_group_connect_swapped(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>>('g_signal_group_connect_swapped');
  late final _g_signal_group_connect_swapped =
      _g_signal_group_connect_swappedPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<gchar>,
              GCallback, gpointer)>();

  void g_source_set_closure(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_source_set_closure(
      source,
      closure,
    );
  }

  late final _g_source_set_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GClosure>)>>('g_source_set_closure');
  late final _g_source_set_closure = _g_source_set_closurePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GClosure>)>();

  void g_source_set_dummy_callback(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_set_dummy_callback(
      source,
    );
  }

  late final _g_source_set_dummy_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_set_dummy_callback');
  late final _g_source_set_dummy_callback = _g_source_set_dummy_callbackPtr
      .asFunction<void Function(ffi.Pointer<GSource>)>();

  int g_type_module_get_type() {
    return _g_type_module_get_type();
  }

  late final _g_type_module_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_module_get_type');
  late final _g_type_module_get_type =
      _g_type_module_get_typePtr.asFunction<int Function()>();

  int g_type_module_use(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_use(
      module,
    );
  }

  late final _g_type_module_usePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_use');
  late final _g_type_module_use = _g_type_module_usePtr
      .asFunction<int Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_unuse(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_unuse(
      module,
    );
  }

  late final _g_type_module_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_unuse');
  late final _g_type_module_unuse = _g_type_module_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_set_name(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
  ) {
    return _g_type_module_set_name(
      module,
      name,
    );
  }

  late final _g_type_module_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>,
              ffi.Pointer<gchar>)>>('g_type_module_set_name');
  late final _g_type_module_set_name = _g_type_module_set_namePtr.asFunction<
      void Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>)>();

  int g_type_module_register_type(
    ffi.Pointer<GTypeModule> module,
    int parent_type,
    ffi.Pointer<gchar> type_name,
    ffi.Pointer<GTypeInfo> type_info,
    int flags,
  ) {
    return _g_type_module_register_type(
      module,
      parent_type,
      type_name,
      type_info,
      flags,
    );
  }

  late final _g_type_module_register_typePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              ffi.Pointer<GTypeModule>,
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_module_register_type');
  late final _g_type_module_register_type =
      _g_type_module_register_typePtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, int, ffi.Pointer<gchar>,
              ffi.Pointer<GTypeInfo>, int)>();

  void g_type_module_add_interface(
    ffi.Pointer<GTypeModule> module,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> interface_info,
  ) {
    return _g_type_module_add_interface(
      module,
      instance_type,
      interface_type,
      interface_info,
    );
  }

  late final _g_type_module_add_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>, GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_module_add_interface');
  late final _g_type_module_add_interface =
      _g_type_module_add_interfacePtr.asFunction<
          void Function(ffi.Pointer<GTypeModule>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_type_module_register_enum(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_type_module_register_enum(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_enumPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>>('g_type_module_register_enum');
  late final _g_type_module_register_enum =
      _g_type_module_register_enumPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GEnumValue>)>();

  int g_type_module_register_flags(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<gchar> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_type_module_register_flags(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_flagsPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>>('g_type_module_register_flags');
  late final _g_type_module_register_flags =
      _g_type_module_register_flagsPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<gchar>,
              ffi.Pointer<GFlagsValue>)>();

  int g_type_plugin_get_type() {
    return _g_type_plugin_get_type();
  }

  late final _g_type_plugin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_plugin_get_type');
  late final _g_type_plugin_get_type =
      _g_type_plugin_get_typePtr.asFunction<int Function()>();

  void g_type_plugin_use(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_use(
      plugin,
    );
  }

  late final _g_type_plugin_usePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_use');
  late final _g_type_plugin_use = _g_type_plugin_usePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_unuse(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_unuse(
      plugin,
    );
  }

  late final _g_type_plugin_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_unuse');
  late final _g_type_plugin_unuse = _g_type_plugin_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_complete_type_info(
    ffi.Pointer<GTypePlugin> plugin,
    int g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table,
  ) {
    return _g_type_plugin_complete_type_info(
      plugin,
      g_type,
      info,
      value_table,
    );
  }

  late final _g_type_plugin_complete_type_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType,
                  ffi.Pointer<GTypeInfo>, ffi.Pointer<GTypeValueTable>)>>(
      'g_type_plugin_complete_type_info');
  late final _g_type_plugin_complete_type_info =
      _g_type_plugin_complete_type_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeValueTable>)>();

  void g_type_plugin_complete_interface_info(
    ffi.Pointer<GTypePlugin> plugin,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_plugin_complete_interface_info(
      plugin,
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_plugin_complete_interface_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType, GType,
                  ffi.Pointer<GInterfaceInfo>)>>(
      'g_type_plugin_complete_interface_info');
  late final _g_type_plugin_complete_interface_info =
      _g_type_plugin_complete_interface_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_value_array_get_type() {
    return _g_value_array_get_type();
  }

  late final _g_value_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_array_get_type');
  late final _g_value_array_get_type =
      _g_value_array_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GValue> g_value_array_get_nth(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_get_nth(
      value_array,
      index_,
    );
  }

  late final _g_value_array_get_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_get_nth');
  late final _g_value_array_get_nth = _g_value_array_get_nthPtr.asFunction<
      ffi.Pointer<GValue> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_new(
    int n_prealloced,
  ) {
    return _g_value_array_new(
      n_prealloced,
    );
  }

  late final _g_value_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GValueArray> Function(guint)>>(
          'g_value_array_new');
  late final _g_value_array_new = _g_value_array_newPtr
      .asFunction<ffi.Pointer<GValueArray> Function(int)>();

  void g_value_array_free(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_free(
      value_array,
    );
  }

  late final _g_value_array_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValueArray>)>>(
          'g_value_array_free');
  late final _g_value_array_free = _g_value_array_freePtr
      .asFunction<void Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_copy(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_copy(
      value_array,
    );
  }

  late final _g_value_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>)>>('g_value_array_copy');
  late final _g_value_array_copy = _g_value_array_copyPtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_prepend(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_prepend(
      value_array,
      value,
    );
  }

  late final _g_value_array_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_prepend');
  late final _g_value_array_prepend = _g_value_array_prependPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_append(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_append(
      value_array,
      value,
    );
  }

  late final _g_value_array_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_append');
  late final _g_value_array_append = _g_value_array_appendPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_insert(
    ffi.Pointer<GValueArray> value_array,
    int index_,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_insert(
      value_array,
      index_,
      value,
    );
  }

  late final _g_value_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, guint,
              ffi.Pointer<GValue>)>>('g_value_array_insert');
  late final _g_value_array_insert = _g_value_array_insertPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, int, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_remove(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_remove(
      value_array,
      index_,
    );
  }

  late final _g_value_array_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_remove');
  late final _g_value_array_remove = _g_value_array_removePtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_sort(
    ffi.Pointer<GValueArray> value_array,
    GCompareFunc compare_func,
  ) {
    return _g_value_array_sort(
      value_array,
      compare_func,
    );
  }

  late final _g_value_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareFunc)>>('g_value_array_sort');
  late final _g_value_array_sort = _g_value_array_sortPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, GCompareFunc)>();

  ffi.Pointer<GValueArray> g_value_array_sort_with_data(
    ffi.Pointer<GValueArray> value_array,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_value_array_sort_with_data(
      value_array,
      compare_func,
      user_data,
    );
  }

  late final _g_value_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              GCompareDataFunc, gpointer)>>('g_value_array_sort_with_data');
  late final _g_value_array_sort_with_data =
      _g_value_array_sort_with_dataPtr.asFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareDataFunc, gpointer)>();

  void g_value_set_char(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_char(
      value,
      v_char,
    );
  }

  late final _g_value_set_charPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gchar)>>(
      'g_value_set_char');
  late final _g_value_set_char = _g_value_set_charPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_char(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_char(
      value,
    );
  }

  late final _g_value_get_charPtr =
      _lookup<ffi.NativeFunction<gchar Function(ffi.Pointer<GValue>)>>(
          'g_value_get_char');
  late final _g_value_get_char =
      _g_value_get_charPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_schar(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_schar(
      value,
      v_char,
    );
  }

  late final _g_value_set_scharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint8)>>(
      'g_value_set_schar');
  late final _g_value_set_schar = _g_value_set_scharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_schar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_schar(
      value,
    );
  }

  late final _g_value_get_scharPtr =
      _lookup<ffi.NativeFunction<gint8 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_schar');
  late final _g_value_get_schar =
      _g_value_get_scharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uchar(
    ffi.Pointer<GValue> value,
    int v_uchar,
  ) {
    return _g_value_set_uchar(
      value,
      v_uchar,
    );
  }

  late final _g_value_set_ucharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guchar)>>(
      'g_value_set_uchar');
  late final _g_value_set_uchar = _g_value_set_ucharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uchar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uchar(
      value,
    );
  }

  late final _g_value_get_ucharPtr =
      _lookup<ffi.NativeFunction<guchar Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uchar');
  late final _g_value_get_uchar =
      _g_value_get_ucharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_boolean(
    ffi.Pointer<GValue> value,
    int v_boolean,
  ) {
    return _g_value_set_boolean(
      value,
      v_boolean,
    );
  }

  late final _g_value_set_booleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gboolean)>>(
      'g_value_set_boolean');
  late final _g_value_set_boolean = _g_value_set_booleanPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_boolean(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boolean(
      value,
    );
  }

  late final _g_value_get_booleanPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boolean');
  late final _g_value_get_boolean =
      _g_value_get_booleanPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int(
    ffi.Pointer<GValue> value,
    int v_int,
  ) {
    return _g_value_set_int(
      value,
      v_int,
    );
  }

  late final _g_value_set_intPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_int');
  late final _g_value_set_int =
      _g_value_set_intPtr.asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int(
      value,
    );
  }

  late final _g_value_get_intPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int');
  late final _g_value_get_int =
      _g_value_get_intPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint(
    ffi.Pointer<GValue> value,
    int v_uint,
  ) {
    return _g_value_set_uint(
      value,
      v_uint,
    );
  }

  late final _g_value_set_uintPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_uint');
  late final _g_value_set_uint = _g_value_set_uintPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint(
      value,
    );
  }

  late final _g_value_get_uintPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint');
  late final _g_value_get_uint =
      _g_value_get_uintPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_long(
    ffi.Pointer<GValue> value,
    int v_long,
  ) {
    return _g_value_set_long(
      value,
      v_long,
    );
  }

  late final _g_value_set_longPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, glong)>>(
      'g_value_set_long');
  late final _g_value_set_long = _g_value_set_longPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_long(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_long(
      value,
    );
  }

  late final _g_value_get_longPtr =
      _lookup<ffi.NativeFunction<glong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_long');
  late final _g_value_get_long =
      _g_value_get_longPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_ulong(
    ffi.Pointer<GValue> value,
    int v_ulong,
  ) {
    return _g_value_set_ulong(
      value,
      v_ulong,
    );
  }

  late final _g_value_set_ulongPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gulong)>>(
      'g_value_set_ulong');
  late final _g_value_set_ulong = _g_value_set_ulongPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_ulong(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_ulong(
      value,
    );
  }

  late final _g_value_get_ulongPtr =
      _lookup<ffi.NativeFunction<gulong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_ulong');
  late final _g_value_get_ulong =
      _g_value_get_ulongPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int64(
    ffi.Pointer<GValue> value,
    int v_int64,
  ) {
    return _g_value_set_int64(
      value,
      v_int64,
    );
  }

  late final _g_value_set_int64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint64)>>(
      'g_value_set_int64');
  late final _g_value_set_int64 = _g_value_set_int64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int64(
      value,
    );
  }

  late final _g_value_get_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int64');
  late final _g_value_get_int64 =
      _g_value_get_int64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint64(
    ffi.Pointer<GValue> value,
    int v_uint64,
  ) {
    return _g_value_set_uint64(
      value,
      v_uint64,
    );
  }

  late final _g_value_set_uint64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint64)>>(
      'g_value_set_uint64');
  late final _g_value_set_uint64 = _g_value_set_uint64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint64(
      value,
    );
  }

  late final _g_value_get_uint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint64');
  late final _g_value_get_uint64 =
      _g_value_get_uint64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_float(
    ffi.Pointer<GValue> value,
    double v_float,
  ) {
    return _g_value_set_float(
      value,
      v_float,
    );
  }

  late final _g_value_set_floatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gfloat)>>(
      'g_value_set_float');
  late final _g_value_set_float = _g_value_set_floatPtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_float(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_float(
      value,
    );
  }

  late final _g_value_get_floatPtr =
      _lookup<ffi.NativeFunction<gfloat Function(ffi.Pointer<GValue>)>>(
          'g_value_get_float');
  late final _g_value_get_float =
      _g_value_get_floatPtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_double(
    ffi.Pointer<GValue> value,
    double v_double,
  ) {
    return _g_value_set_double(
      value,
      v_double,
    );
  }

  late final _g_value_set_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gdouble)>>(
      'g_value_set_double');
  late final _g_value_set_double = _g_value_set_doublePtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_double(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_double(
      value,
    );
  }

  late final _g_value_get_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GValue>)>>(
          'g_value_get_double');
  late final _g_value_get_double =
      _g_value_get_doublePtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<gchar>)>>('g_value_set_string');
  late final _g_value_set_string = _g_value_set_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_static_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_static_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_static_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_static_string');
  late final _g_value_set_static_string = _g_value_set_static_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_interned_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_interned_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_interned_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_interned_string');
  late final _g_value_set_interned_string = _g_value_set_interned_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_value_get_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_string(
      value,
    );
  }

  late final _g_value_get_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_value_get_string');
  late final _g_value_get_string = _g_value_get_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<gchar> g_value_dup_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_string(
      value,
    );
  }

  late final _g_value_dup_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_value_dup_string');
  late final _g_value_dup_string = _g_value_dup_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  void g_value_set_pointer(
    ffi.Pointer<GValue> value,
    gpointer v_pointer,
  ) {
    return _g_value_set_pointer(
      value,
      v_pointer,
    );
  }

  late final _g_value_set_pointerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gpointer)>>(
      'g_value_set_pointer');
  late final _g_value_set_pointer = _g_value_set_pointerPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gpointer)>();

  gpointer g_value_get_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_pointer(
      value,
    );
  }

  late final _g_value_get_pointerPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_pointer');
  late final _g_value_get_pointer = _g_value_get_pointerPtr
      .asFunction<gpointer Function(ffi.Pointer<GValue>)>();

  int g_gtype_get_type() {
    return _g_gtype_get_type();
  }

  late final _g_gtype_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gtype_get_type');
  late final _g_gtype_get_type =
      _g_gtype_get_typePtr.asFunction<int Function()>();

  void g_value_set_gtype(
    ffi.Pointer<GValue> value,
    int v_gtype,
  ) {
    return _g_value_set_gtype(
      value,
      v_gtype,
    );
  }

  late final _g_value_set_gtypePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, GType)>>(
      'g_value_set_gtype');
  late final _g_value_set_gtype = _g_value_set_gtypePtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_gtype(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_gtype(
      value,
    );
  }

  late final _g_value_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GValue>)>>(
          'g_value_get_gtype');
  late final _g_value_get_gtype =
      _g_value_get_gtypePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_set_variant(
      value,
      variant,
    );
  }

  late final _g_value_set_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_set_variant');
  late final _g_value_set_variant = _g_value_set_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  void g_value_take_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_take_variant(
      value,
      variant,
    );
  }

  late final _g_value_take_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_take_variant');
  late final _g_value_take_variant = _g_value_take_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_value_get_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_variant(
      value,
    );
  }

  late final _g_value_get_variantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>>(
      'g_value_get_variant');
  late final _g_value_get_variant = _g_value_get_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GVariant> g_value_dup_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_variant(
      value,
    );
  }

  late final _g_value_dup_variantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>>(
      'g_value_dup_variant');
  late final _g_value_dup_variant = _g_value_dup_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  int g_pointer_type_register_static(
    ffi.Pointer<gchar> name,
  ) {
    return _g_pointer_type_register_static(
      name,
    );
  }

  late final _g_pointer_type_register_staticPtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<gchar>)>>(
          'g_pointer_type_register_static');
  late final _g_pointer_type_register_static =
      _g_pointer_type_register_staticPtr
          .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_strdup_value_contents(
    ffi.Pointer<GValue> value,
  ) {
    return _g_strdup_value_contents(
      value,
    );
  }

  late final _g_strdup_value_contentsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>>(
      'g_strdup_value_contents');
  late final _g_strdup_value_contents = _g_strdup_value_contentsPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GValue>)>();

  void g_value_take_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_take_string(
      value,
      v_string,
    );
  }

  late final _g_value_take_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<gchar>)>>('g_value_take_string');
  late final _g_value_take_string = _g_value_take_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  void g_value_set_string_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<gchar> v_string,
  ) {
    return _g_value_set_string_take_ownership(
      value,
      v_string,
    );
  }

  late final _g_value_set_string_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<gchar>)>>('g_value_set_string_take_ownership');
  late final _g_value_set_string_take_ownership =
      _g_value_set_string_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<gchar>)>();

  int g_action_get_type() {
    return _g_action_get_type();
  }

  late final _g_action_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_action_get_type');
  late final _g_action_get_type =
      _g_action_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<gchar> g_action_get_name(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_name(
      action,
    );
  }

  late final _g_action_get_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GAction>)>>(
      'g_action_get_name');
  late final _g_action_get_name = _g_action_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GAction>)>();

  ffi.Pointer<GVariantType> g_action_get_parameter_type(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_parameter_type(
      action,
    );
  }

  late final _g_action_get_parameter_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GAction>)>>('g_action_get_parameter_type');
  late final _g_action_get_parameter_type = _g_action_get_parameter_typePtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<GAction>)>();

  ffi.Pointer<GVariantType> g_action_get_state_type(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_state_type(
      action,
    );
  }

  late final _g_action_get_state_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GAction>)>>('g_action_get_state_type');
  late final _g_action_get_state_type = _g_action_get_state_typePtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<GAction>)>();

  ffi.Pointer<GVariant> g_action_get_state_hint(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_state_hint(
      action,
    );
  }

  late final _g_action_get_state_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GAction>)>>('g_action_get_state_hint');
  late final _g_action_get_state_hint = _g_action_get_state_hintPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GAction>)>();

  int g_action_get_enabled(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_enabled(
      action,
    );
  }

  late final _g_action_get_enabledPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAction>)>>(
          'g_action_get_enabled');
  late final _g_action_get_enabled =
      _g_action_get_enabledPtr.asFunction<int Function(ffi.Pointer<GAction>)>();

  ffi.Pointer<GVariant> g_action_get_state(
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_get_state(
      action,
    );
  }

  late final _g_action_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GAction>)>>('g_action_get_state');
  late final _g_action_get_state = _g_action_get_statePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GAction>)>();

  void g_action_change_state(
    ffi.Pointer<GAction> action,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_action_change_state(
      action,
      value,
    );
  }

  late final _g_action_change_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAction>,
              ffi.Pointer<GVariant>)>>('g_action_change_state');
  late final _g_action_change_state = _g_action_change_statePtr
      .asFunction<void Function(ffi.Pointer<GAction>, ffi.Pointer<GVariant>)>();

  void g_action_activate(
    ffi.Pointer<GAction> action,
    ffi.Pointer<GVariant> parameter,
  ) {
    return _g_action_activate(
      action,
      parameter,
    );
  }

  late final _g_action_activatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAction>,
              ffi.Pointer<GVariant>)>>('g_action_activate');
  late final _g_action_activate = _g_action_activatePtr
      .asFunction<void Function(ffi.Pointer<GAction>, ffi.Pointer<GVariant>)>();

  int g_action_name_is_valid(
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_name_is_valid(
      action_name,
    );
  }

  late final _g_action_name_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_action_name_is_valid');
  late final _g_action_name_is_valid =
      _g_action_name_is_validPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_action_parse_detailed_name(
    ffi.Pointer<gchar> detailed_name,
    ffi.Pointer<ffi.Pointer<gchar>> action_name,
    ffi.Pointer<ffi.Pointer<GVariant>> target_value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_action_parse_detailed_name(
      detailed_name,
      action_name,
      target_value,
      error,
    );
  }

  late final _g_action_parse_detailed_namePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GVariant>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_action_parse_detailed_name');
  late final _g_action_parse_detailed_name =
      _g_action_parse_detailed_namePtr.asFunction<
          int Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GVariant>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_action_print_detailed_name(
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> target_value,
  ) {
    return _g_action_print_detailed_name(
      action_name,
      target_value,
    );
  }

  late final _g_action_print_detailed_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_action_print_detailed_name');
  late final _g_action_print_detailed_name =
      _g_action_print_detailed_namePtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<GVariant>)>();

  int g_action_group_get_type() {
    return _g_action_group_get_type();
  }

  late final _g_action_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_action_group_get_type');
  late final _g_action_group_get_type =
      _g_action_group_get_typePtr.asFunction<int Function()>();

  int g_action_group_has_action(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_has_action(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_has_actionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_has_action');
  late final _g_action_group_has_action =
      _g_action_group_has_actionPtr.asFunction<
          int Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_action_group_list_actions(
    ffi.Pointer<GActionGroup> action_group,
  ) {
    return _g_action_group_list_actions(
      action_group,
    );
  }

  late final _g_action_group_list_actionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GActionGroup>)>>('g_action_group_list_actions');
  late final _g_action_group_list_actions =
      _g_action_group_list_actionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GActionGroup>)>();

  ffi.Pointer<GVariantType> g_action_group_get_action_parameter_type(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_get_action_parameter_type(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_get_action_parameter_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_get_action_parameter_type');
  late final _g_action_group_get_action_parameter_type =
      _g_action_group_get_action_parameter_typePtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariantType> g_action_group_get_action_state_type(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_get_action_state_type(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_get_action_state_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_get_action_state_type');
  late final _g_action_group_get_action_state_type =
      _g_action_group_get_action_state_typePtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_action_group_get_action_state_hint(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_get_action_state_hint(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_get_action_state_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_get_action_state_hint');
  late final _g_action_group_get_action_state_hint =
      _g_action_group_get_action_state_hintPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  int g_action_group_get_action_enabled(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_get_action_enabled(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_get_action_enabledPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_get_action_enabled');
  late final _g_action_group_get_action_enabled =
      _g_action_group_get_action_enabledPtr.asFunction<
          int Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_action_group_get_action_state(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_get_action_state(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_get_action_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_get_action_state');
  late final _g_action_group_get_action_state =
      _g_action_group_get_action_statePtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  void g_action_group_change_action_state(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_action_group_change_action_state(
      action_group,
      action_name,
      value,
    );
  }

  late final _g_action_group_change_action_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_action_group_change_action_state');
  late final _g_action_group_change_action_state =
      _g_action_group_change_action_statePtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  void g_action_group_activate_action(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> parameter,
  ) {
    return _g_action_group_activate_action(
      action_group,
      action_name,
      parameter,
    );
  }

  late final _g_action_group_activate_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_action_group_activate_action');
  late final _g_action_group_activate_action =
      _g_action_group_activate_actionPtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  void g_action_group_action_added(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_action_added(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_action_addedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_action_added');
  late final _g_action_group_action_added =
      _g_action_group_action_addedPtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  void g_action_group_action_removed(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_group_action_removed(
      action_group,
      action_name,
    );
  }

  late final _g_action_group_action_removedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>)>>('g_action_group_action_removed');
  late final _g_action_group_action_removed =
      _g_action_group_action_removedPtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>)>();

  void g_action_group_action_enabled_changed(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
    int enabled,
  ) {
    return _g_action_group_action_enabled_changed(
      action_group,
      action_name,
      enabled,
    );
  }

  late final _g_action_group_action_enabled_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              gboolean)>>('g_action_group_action_enabled_changed');
  late final _g_action_group_action_enabled_changed =
      _g_action_group_action_enabled_changedPtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>, int)>();

  void g_action_group_action_state_changed(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> state,
  ) {
    return _g_action_group_action_state_changed(
      action_group,
      action_name,
      state,
    );
  }

  late final _g_action_group_action_state_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_action_group_action_state_changed');
  late final _g_action_group_action_state_changed =
      _g_action_group_action_state_changedPtr.asFunction<
          void Function(ffi.Pointer<GActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  int g_action_group_query_action(
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<gboolean> enabled,
    ffi.Pointer<ffi.Pointer<GVariantType>> parameter_type,
    ffi.Pointer<ffi.Pointer<GVariantType>> state_type,
    ffi.Pointer<ffi.Pointer<GVariant>> state_hint,
    ffi.Pointer<ffi.Pointer<GVariant>> state,
  ) {
    return _g_action_group_query_action(
      action_group,
      action_name,
      enabled,
      parameter_type,
      state_type,
      state_hint,
      state,
    );
  }

  late final _g_action_group_query_actionPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GActionGroup>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gboolean>,
                  ffi.Pointer<ffi.Pointer<GVariantType>>,
                  ffi.Pointer<ffi.Pointer<GVariantType>>,
                  ffi.Pointer<ffi.Pointer<GVariant>>,
                  ffi.Pointer<ffi.Pointer<GVariant>>)>>(
      'g_action_group_query_action');
  late final _g_action_group_query_action =
      _g_action_group_query_actionPtr.asFunction<
          int Function(
              ffi.Pointer<GActionGroup>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GVariantType>>,
              ffi.Pointer<ffi.Pointer<GVariantType>>,
              ffi.Pointer<ffi.Pointer<GVariant>>,
              ffi.Pointer<ffi.Pointer<GVariant>>)>();

  int g_dbus_connection_export_action_group(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<GActionGroup> action_group,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_export_action_group(
      connection,
      object_path,
      action_group,
      error,
    );
  }

  late final _g_dbus_connection_export_action_groupPtr = _lookup<
          ffi.NativeFunction<
              guint Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GActionGroup>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_export_action_group');
  late final _g_dbus_connection_export_action_group =
      _g_dbus_connection_export_action_groupPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>,
              ffi.Pointer<GActionGroup>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_unexport_action_group(
    ffi.Pointer<GDBusConnection> connection,
    int export_id,
  ) {
    return _g_dbus_connection_unexport_action_group(
      connection,
      export_id,
    );
  }

  late final _g_dbus_connection_unexport_action_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_unexport_action_group');
  late final _g_dbus_connection_unexport_action_group =
      _g_dbus_connection_unexport_action_groupPtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_action_map_get_type() {
    return _g_action_map_get_type();
  }

  late final _g_action_map_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_action_map_get_type');
  late final _g_action_map_get_type =
      _g_action_map_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GAction> g_action_map_lookup_action(
    ffi.Pointer<GActionMap> action_map,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_map_lookup_action(
      action_map,
      action_name,
    );
  }

  late final _g_action_map_lookup_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAction> Function(ffi.Pointer<GActionMap>,
              ffi.Pointer<gchar>)>>('g_action_map_lookup_action');
  late final _g_action_map_lookup_action =
      _g_action_map_lookup_actionPtr.asFunction<
          ffi.Pointer<GAction> Function(
              ffi.Pointer<GActionMap>, ffi.Pointer<gchar>)>();

  void g_action_map_add_action(
    ffi.Pointer<GActionMap> action_map,
    ffi.Pointer<GAction> action,
  ) {
    return _g_action_map_add_action(
      action_map,
      action,
    );
  }

  late final _g_action_map_add_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionMap>,
              ffi.Pointer<GAction>)>>('g_action_map_add_action');
  late final _g_action_map_add_action = _g_action_map_add_actionPtr.asFunction<
      void Function(ffi.Pointer<GActionMap>, ffi.Pointer<GAction>)>();

  void g_action_map_remove_action(
    ffi.Pointer<GActionMap> action_map,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_action_map_remove_action(
      action_map,
      action_name,
    );
  }

  late final _g_action_map_remove_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionMap>,
              ffi.Pointer<gchar>)>>('g_action_map_remove_action');
  late final _g_action_map_remove_action = _g_action_map_remove_actionPtr
      .asFunction<void Function(ffi.Pointer<GActionMap>, ffi.Pointer<gchar>)>();

  void g_action_map_add_action_entries(
    ffi.Pointer<GActionMap> action_map,
    ffi.Pointer<GActionEntry> entries,
    int n_entries,
    gpointer user_data,
  ) {
    return _g_action_map_add_action_entries(
      action_map,
      entries,
      n_entries,
      user_data,
    );
  }

  late final _g_action_map_add_action_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionMap>, ffi.Pointer<GActionEntry>,
              gint, gpointer)>>('g_action_map_add_action_entries');
  late final _g_action_map_add_action_entries =
      _g_action_map_add_action_entriesPtr.asFunction<
          void Function(ffi.Pointer<GActionMap>, ffi.Pointer<GActionEntry>, int,
              gpointer)>();

  int g_app_info_get_type() {
    return _g_app_info_get_type();
  }

  late final _g_app_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_app_info_get_type');
  late final _g_app_info_get_type =
      _g_app_info_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GAppInfo> g_app_info_create_from_commandline(
    ffi.Pointer<ffi.Char> commandline,
    ffi.Pointer<ffi.Char> application_name,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_create_from_commandline(
      commandline,
      application_name,
      flags,
      error,
    );
  }

  late final _g_app_info_create_from_commandlinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GAppInfo> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_create_from_commandline');
  late final _g_app_info_create_from_commandline =
      _g_app_info_create_from_commandlinePtr.asFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GAppInfo> g_app_info_dup(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_dup(
      appinfo,
    );
  }

  late final _g_app_info_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAppInfo> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_dup');
  late final _g_app_info_dup = _g_app_info_dupPtr
      .asFunction<ffi.Pointer<GAppInfo> Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_equal(
    ffi.Pointer<GAppInfo> appinfo1,
    ffi.Pointer<GAppInfo> appinfo2,
  ) {
    return _g_app_info_equal(
      appinfo1,
      appinfo2,
    );
  }

  late final _g_app_info_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAppInfo>,
              ffi.Pointer<GAppInfo>)>>('g_app_info_equal');
  late final _g_app_info_equal = _g_app_info_equalPtr
      .asFunction<int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_id(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_id(
      appinfo,
    );
  }

  late final _g_app_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_id');
  late final _g_app_info_get_id = _g_app_info_get_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_name(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_name(
      appinfo,
    );
  }

  late final _g_app_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_name');
  late final _g_app_info_get_name = _g_app_info_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_display_name(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_display_name(
      appinfo,
    );
  }

  late final _g_app_info_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_display_name');
  late final _g_app_info_get_display_name = _g_app_info_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_description(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_description(
      appinfo,
    );
  }

  late final _g_app_info_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_description');
  late final _g_app_info_get_description = _g_app_info_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_executable(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_executable(
      appinfo,
    );
  }

  late final _g_app_info_get_executablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_executable');
  late final _g_app_info_get_executable = _g_app_info_get_executablePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<ffi.Char> g_app_info_get_commandline(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_commandline(
      appinfo,
    );
  }

  late final _g_app_info_get_commandlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_commandline');
  late final _g_app_info_get_commandline = _g_app_info_get_commandlinePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo>)>();

  ffi.Pointer<GIcon> g_app_info_get_icon(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_icon(
      appinfo,
    );
  }

  late final _g_app_info_get_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GAppInfo>)>>(
      'g_app_info_get_icon');
  late final _g_app_info_get_icon = _g_app_info_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_launch(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<GList> files,
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch(
      appinfo,
      files,
      context,
      error,
    );
  }

  late final _g_app_info_launchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo>,
              ffi.Pointer<GList>,
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_app_info_launch');
  late final _g_app_info_launch = _g_app_info_launchPtr.asFunction<
      int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<GList>,
          ffi.Pointer<GAppLaunchContext>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_info_supports_uris(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_supports_uris(
      appinfo,
    );
  }

  late final _g_app_info_supports_urisPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_supports_uris');
  late final _g_app_info_supports_uris = _g_app_info_supports_urisPtr
      .asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_supports_files(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_supports_files(
      appinfo,
    );
  }

  late final _g_app_info_supports_filesPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_supports_files');
  late final _g_app_info_supports_files = _g_app_info_supports_filesPtr
      .asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_launch_uris(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<GList> uris,
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch_uris(
      appinfo,
      uris,
      context,
      error,
    );
  }

  late final _g_app_info_launch_urisPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo>,
              ffi.Pointer<GList>,
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_app_info_launch_uris');
  late final _g_app_info_launch_uris = _g_app_info_launch_urisPtr.asFunction<
      int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<GList>,
          ffi.Pointer<GAppLaunchContext>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_app_info_launch_uris_async(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<GList> uris,
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_app_info_launch_uris_async(
      appinfo,
      uris,
      context,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_app_info_launch_uris_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAppInfo>,
              ffi.Pointer<GList>,
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_app_info_launch_uris_async');
  late final _g_app_info_launch_uris_async =
      _g_app_info_launch_uris_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GAppInfo>,
              ffi.Pointer<GList>,
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_app_info_launch_uris_finish(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch_uris_finish(
      appinfo,
      result,
      error,
    );
  }

  late final _g_app_info_launch_uris_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GAppInfo>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_launch_uris_finish');
  late final _g_app_info_launch_uris_finish =
      _g_app_info_launch_uris_finishPtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_info_should_show(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_should_show(
      appinfo,
    );
  }

  late final _g_app_info_should_showPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_should_show');
  late final _g_app_info_should_show = _g_app_info_should_showPtr
      .asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_set_as_default_for_type(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<ffi.Char> content_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_set_as_default_for_type(
      appinfo,
      content_type,
      error,
    );
  }

  late final _g_app_info_set_as_default_for_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_set_as_default_for_type');
  late final _g_app_info_set_as_default_for_type =
      _g_app_info_set_as_default_for_typePtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_info_set_as_default_for_extension(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<ffi.Char> extension1,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_set_as_default_for_extension(
      appinfo,
      extension1,
      error,
    );
  }

  late final _g_app_info_set_as_default_for_extensionPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_set_as_default_for_extension');
  late final _g_app_info_set_as_default_for_extension =
      _g_app_info_set_as_default_for_extensionPtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_info_add_supports_type(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<ffi.Char> content_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_add_supports_type(
      appinfo,
      content_type,
      error,
    );
  }

  late final _g_app_info_add_supports_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_add_supports_type');
  late final _g_app_info_add_supports_type =
      _g_app_info_add_supports_typePtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_info_can_remove_supports_type(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_can_remove_supports_type(
      appinfo,
    );
  }

  late final _g_app_info_can_remove_supports_typePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_can_remove_supports_type');
  late final _g_app_info_can_remove_supports_type =
      _g_app_info_can_remove_supports_typePtr
          .asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_remove_supports_type(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<ffi.Char> content_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_remove_supports_type(
      appinfo,
      content_type,
      error,
    );
  }

  late final _g_app_info_remove_supports_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_remove_supports_type');
  late final _g_app_info_remove_supports_type =
      _g_app_info_remove_supports_typePtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_app_info_get_supported_types(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_get_supported_types(
      appinfo,
    );
  }

  late final _g_app_info_get_supported_typesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GAppInfo>)>>('g_app_info_get_supported_types');
  late final _g_app_info_get_supported_types =
      _g_app_info_get_supported_typesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_can_delete(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_can_delete(
      appinfo,
    );
  }

  late final _g_app_info_can_deletePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_can_delete');
  late final _g_app_info_can_delete = _g_app_info_can_deletePtr
      .asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_delete(
    ffi.Pointer<GAppInfo> appinfo,
  ) {
    return _g_app_info_delete(
      appinfo,
    );
  }

  late final _g_app_info_deletePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo>)>>(
          'g_app_info_delete');
  late final _g_app_info_delete =
      _g_app_info_deletePtr.asFunction<int Function(ffi.Pointer<GAppInfo>)>();

  int g_app_info_set_as_last_used_for_type(
    ffi.Pointer<GAppInfo> appinfo,
    ffi.Pointer<ffi.Char> content_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_set_as_last_used_for_type(
      appinfo,
      content_type,
      error,
    );
  }

  late final _g_app_info_set_as_last_used_for_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_set_as_last_used_for_type');
  late final _g_app_info_set_as_last_used_for_type =
      _g_app_info_set_as_last_used_for_typePtr.asFunction<
          int Function(ffi.Pointer<GAppInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_app_info_get_all() {
    return _g_app_info_get_all();
  }

  late final _g_app_info_get_allPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'g_app_info_get_all');
  late final _g_app_info_get_all =
      _g_app_info_get_allPtr.asFunction<ffi.Pointer<GList> Function()>();

  ffi.Pointer<GList> g_app_info_get_all_for_type(
    ffi.Pointer<ffi.Char> content_type,
  ) {
    return _g_app_info_get_all_for_type(
      content_type,
    );
  }

  late final _g_app_info_get_all_for_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<ffi.Char>)>>(
      'g_app_info_get_all_for_type');
  late final _g_app_info_get_all_for_type = _g_app_info_get_all_for_typePtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> g_app_info_get_recommended_for_type(
    ffi.Pointer<gchar> content_type,
  ) {
    return _g_app_info_get_recommended_for_type(
      content_type,
    );
  }

  late final _g_app_info_get_recommended_for_typePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>>(
      'g_app_info_get_recommended_for_type');
  late final _g_app_info_get_recommended_for_type =
      _g_app_info_get_recommended_for_typePtr
          .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GList> g_app_info_get_fallback_for_type(
    ffi.Pointer<gchar> content_type,
  ) {
    return _g_app_info_get_fallback_for_type(
      content_type,
    );
  }

  late final _g_app_info_get_fallback_for_typePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>>(
      'g_app_info_get_fallback_for_type');
  late final _g_app_info_get_fallback_for_type =
      _g_app_info_get_fallback_for_typePtr
          .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>();

  void g_app_info_reset_type_associations(
    ffi.Pointer<ffi.Char> content_type,
  ) {
    return _g_app_info_reset_type_associations(
      content_type,
    );
  }

  late final _g_app_info_reset_type_associationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_app_info_reset_type_associations');
  late final _g_app_info_reset_type_associations =
      _g_app_info_reset_type_associationsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GAppInfo> g_app_info_get_default_for_type(
    ffi.Pointer<ffi.Char> content_type,
    int must_support_uris,
  ) {
    return _g_app_info_get_default_for_type(
      content_type,
      must_support_uris,
    );
  }

  late final _g_app_info_get_default_for_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<ffi.Char>,
              gboolean)>>('g_app_info_get_default_for_type');
  late final _g_app_info_get_default_for_type =
      _g_app_info_get_default_for_typePtr.asFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GAppInfo> g_app_info_get_default_for_uri_scheme(
    ffi.Pointer<ffi.Char> uri_scheme,
  ) {
    return _g_app_info_get_default_for_uri_scheme(
      uri_scheme,
    );
  }

  late final _g_app_info_get_default_for_uri_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAppInfo> Function(
              ffi.Pointer<ffi.Char>)>>('g_app_info_get_default_for_uri_scheme');
  late final _g_app_info_get_default_for_uri_scheme =
      _g_app_info_get_default_for_uri_schemePtr
          .asFunction<ffi.Pointer<GAppInfo> Function(ffi.Pointer<ffi.Char>)>();

  int g_app_info_launch_default_for_uri(
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch_default_for_uri(
      uri,
      context,
      error,
    );
  }

  late final _g_app_info_launch_default_for_uriPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GAppLaunchContext>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_launch_default_for_uri');
  late final _g_app_info_launch_default_for_uri =
      _g_app_info_launch_default_for_uriPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_app_info_launch_default_for_uri_async(
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_app_info_launch_default_for_uri_async(
      uri,
      context,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_app_info_launch_default_for_uri_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_app_info_launch_default_for_uri_async');
  late final _g_app_info_launch_default_for_uri_async =
      _g_app_info_launch_default_for_uri_asyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_app_info_launch_default_for_uri_finish(
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_app_info_launch_default_for_uri_finish(
      result,
      error,
    );
  }

  late final _g_app_info_launch_default_for_uri_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_app_info_launch_default_for_uri_finish');
  late final _g_app_info_launch_default_for_uri_finish =
      _g_app_info_launch_default_for_uri_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_app_launch_context_get_type() {
    return _g_app_launch_context_get_type();
  }

  late final _g_app_launch_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_app_launch_context_get_type');
  late final _g_app_launch_context_get_type =
      _g_app_launch_context_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GAppLaunchContext> g_app_launch_context_new() {
    return _g_app_launch_context_new();
  }

  late final _g_app_launch_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GAppLaunchContext> Function()>>(
          'g_app_launch_context_new');
  late final _g_app_launch_context_new = _g_app_launch_context_newPtr
      .asFunction<ffi.Pointer<GAppLaunchContext> Function()>();

  void g_app_launch_context_setenv(
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Char> variable,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _g_app_launch_context_setenv(
      context,
      variable,
      value,
    );
  }

  late final _g_app_launch_context_setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_app_launch_context_setenv');
  late final _g_app_launch_context_setenv =
      _g_app_launch_context_setenvPtr.asFunction<
          void Function(ffi.Pointer<GAppLaunchContext>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_app_launch_context_unsetenv(
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _g_app_launch_context_unsetenv(
      context,
      variable,
    );
  }

  late final _g_app_launch_context_unsetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Char>)>>('g_app_launch_context_unsetenv');
  late final _g_app_launch_context_unsetenv =
      _g_app_launch_context_unsetenvPtr.asFunction<
          void Function(
              ffi.Pointer<GAppLaunchContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_app_launch_context_get_environment(
    ffi.Pointer<GAppLaunchContext> context,
  ) {
    return _g_app_launch_context_get_environment(
      context,
    );
  }

  late final _g_app_launch_context_get_environmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GAppLaunchContext>)>>(
      'g_app_launch_context_get_environment');
  late final _g_app_launch_context_get_environment =
      _g_app_launch_context_get_environmentPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GAppLaunchContext>)>();

  ffi.Pointer<ffi.Char> g_app_launch_context_get_display(
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<GAppInfo> info,
    ffi.Pointer<GList> files,
  ) {
    return _g_app_launch_context_get_display(
      context,
      info,
      files,
    );
  }

  late final _g_app_launch_context_get_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GAppInfo>,
              ffi.Pointer<GList>)>>('g_app_launch_context_get_display');
  late final _g_app_launch_context_get_display =
      _g_app_launch_context_get_displayPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GAppInfo>, ffi.Pointer<GList>)>();

  ffi.Pointer<ffi.Char> g_app_launch_context_get_startup_notify_id(
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<GAppInfo> info,
    ffi.Pointer<GList> files,
  ) {
    return _g_app_launch_context_get_startup_notify_id(
      context,
      info,
      files,
    );
  }

  late final _g_app_launch_context_get_startup_notify_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppLaunchContext>,
                  ffi.Pointer<GAppInfo>, ffi.Pointer<GList>)>>(
      'g_app_launch_context_get_startup_notify_id');
  late final _g_app_launch_context_get_startup_notify_id =
      _g_app_launch_context_get_startup_notify_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<GAppInfo>, ffi.Pointer<GList>)>();

  void g_app_launch_context_launch_failed(
    ffi.Pointer<GAppLaunchContext> context,
    ffi.Pointer<ffi.Char> startup_notify_id,
  ) {
    return _g_app_launch_context_launch_failed(
      context,
      startup_notify_id,
    );
  }

  late final _g_app_launch_context_launch_failedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAppLaunchContext>,
              ffi.Pointer<ffi.Char>)>>('g_app_launch_context_launch_failed');
  late final _g_app_launch_context_launch_failed =
      _g_app_launch_context_launch_failedPtr.asFunction<
          void Function(
              ffi.Pointer<GAppLaunchContext>, ffi.Pointer<ffi.Char>)>();

  int g_app_info_monitor_get_type() {
    return _g_app_info_monitor_get_type();
  }

  late final _g_app_info_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_app_info_monitor_get_type');
  late final _g_app_info_monitor_get_type =
      _g_app_info_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GAppInfoMonitor> g_app_info_monitor_get() {
    return _g_app_info_monitor_get();
  }

  late final _g_app_info_monitor_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GAppInfoMonitor> Function()>>(
          'g_app_info_monitor_get');
  late final _g_app_info_monitor_get = _g_app_info_monitor_getPtr
      .asFunction<ffi.Pointer<GAppInfoMonitor> Function()>();

  int g_application_get_type() {
    return _g_application_get_type();
  }

  late final _g_application_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_application_get_type');
  late final _g_application_get_type =
      _g_application_get_typePtr.asFunction<int Function()>();

  int g_application_id_is_valid(
    ffi.Pointer<gchar> application_id,
  ) {
    return _g_application_id_is_valid(
      application_id,
    );
  }

  late final _g_application_id_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_application_id_is_valid');
  late final _g_application_id_is_valid = _g_application_id_is_validPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GApplication> g_application_new(
    ffi.Pointer<gchar> application_id,
    int flags,
  ) {
    return _g_application_new(
      application_id,
      flags,
    );
  }

  late final _g_application_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GApplication> Function(
              ffi.Pointer<gchar>, ffi.Int32)>>('g_application_new');
  late final _g_application_new = _g_application_newPtr.asFunction<
      ffi.Pointer<GApplication> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_application_get_application_id(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_application_id(
      application,
    );
  }

  late final _g_application_get_application_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GApplication>)>>('g_application_get_application_id');
  late final _g_application_get_application_id =
      _g_application_get_application_idPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GApplication>)>();

  void g_application_set_application_id(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> application_id,
  ) {
    return _g_application_set_application_id(
      application,
      application_id,
    );
  }

  late final _g_application_set_application_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<gchar>)>>('g_application_set_application_id');
  late final _g_application_set_application_id =
      _g_application_set_application_idPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusConnection> g_application_get_dbus_connection(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_dbus_connection(
      application,
    );
  }

  late final _g_application_get_dbus_connectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GApplication>)>>('g_application_get_dbus_connection');
  late final _g_application_get_dbus_connection =
      _g_application_get_dbus_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(ffi.Pointer<GApplication>)>();

  ffi.Pointer<gchar> g_application_get_dbus_object_path(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_dbus_object_path(
      application,
    );
  }

  late final _g_application_get_dbus_object_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GApplication>)>>(
      'g_application_get_dbus_object_path');
  late final _g_application_get_dbus_object_path =
      _g_application_get_dbus_object_pathPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GApplication>)>();

  int g_application_get_inactivity_timeout(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_inactivity_timeout(
      application,
    );
  }

  late final _g_application_get_inactivity_timeoutPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GApplication>)>>(
          'g_application_get_inactivity_timeout');
  late final _g_application_get_inactivity_timeout =
      _g_application_get_inactivity_timeoutPtr
          .asFunction<int Function(ffi.Pointer<GApplication>)>();

  void g_application_set_inactivity_timeout(
    ffi.Pointer<GApplication> application,
    int inactivity_timeout,
  ) {
    return _g_application_set_inactivity_timeout(
      application,
      inactivity_timeout,
    );
  }

  late final _g_application_set_inactivity_timeoutPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>, guint)>>(
      'g_application_set_inactivity_timeout');
  late final _g_application_set_inactivity_timeout =
      _g_application_set_inactivity_timeoutPtr
          .asFunction<void Function(ffi.Pointer<GApplication>, int)>();

  int g_application_get_flags(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_flags(
      application,
    );
  }

  late final _g_application_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GApplication>)>>(
      'g_application_get_flags');
  late final _g_application_get_flags = _g_application_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GApplication>)>();

  void g_application_set_flags(
    ffi.Pointer<GApplication> application,
    int flags,
  ) {
    return _g_application_set_flags(
      application,
      flags,
    );
  }

  late final _g_application_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Int32)>>('g_application_set_flags');
  late final _g_application_set_flags = _g_application_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GApplication>, int)>();

  ffi.Pointer<gchar> g_application_get_resource_base_path(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_resource_base_path(
      application,
    );
  }

  late final _g_application_get_resource_base_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GApplication>)>>(
      'g_application_get_resource_base_path');
  late final _g_application_get_resource_base_path =
      _g_application_get_resource_base_pathPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GApplication>)>();

  void g_application_set_resource_base_path(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> resource_path,
  ) {
    return _g_application_set_resource_base_path(
      application,
      resource_path,
    );
  }

  late final _g_application_set_resource_base_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<gchar>)>>('g_application_set_resource_base_path');
  late final _g_application_set_resource_base_path =
      _g_application_set_resource_base_pathPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  void g_application_set_action_group(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<GActionGroup> action_group,
  ) {
    return _g_application_set_action_group(
      application,
      action_group,
    );
  }

  late final _g_application_set_action_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<GActionGroup>)>>('g_application_set_action_group');
  late final _g_application_set_action_group =
      _g_application_set_action_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GApplication>, ffi.Pointer<GActionGroup>)>();

  void g_application_add_main_option_entries(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<GOptionEntry> entries,
  ) {
    return _g_application_add_main_option_entries(
      application,
      entries,
    );
  }

  late final _g_application_add_main_option_entriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GApplication>, ffi.Pointer<GOptionEntry>)>>(
      'g_application_add_main_option_entries');
  late final _g_application_add_main_option_entries =
      _g_application_add_main_option_entriesPtr.asFunction<
          void Function(
              ffi.Pointer<GApplication>, ffi.Pointer<GOptionEntry>)>();

  void g_application_add_main_option(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<ffi.Char> long_name,
    int short_name,
    int flags,
    int arg,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> arg_description,
  ) {
    return _g_application_add_main_option(
      application,
      long_name,
      short_name,
      flags,
      arg,
      description,
      arg_description,
    );
  }

  late final _g_application_add_main_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GApplication>,
              ffi.Pointer<ffi.Char>,
              ffi.Char,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_application_add_main_option');
  late final _g_application_add_main_option =
      _g_application_add_main_optionPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<ffi.Char>, int,
              int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_application_add_option_group(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_application_add_option_group(
      application,
      group,
    );
  }

  late final _g_application_add_option_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<GOptionGroup>)>>('g_application_add_option_group');
  late final _g_application_add_option_group =
      _g_application_add_option_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GApplication>, ffi.Pointer<GOptionGroup>)>();

  void g_application_set_option_context_parameter_string(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> parameter_string,
  ) {
    return _g_application_set_option_context_parameter_string(
      application,
      parameter_string,
    );
  }

  late final _g_application_set_option_context_parameter_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>>(
      'g_application_set_option_context_parameter_string');
  late final _g_application_set_option_context_parameter_string =
      _g_application_set_option_context_parameter_stringPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  void g_application_set_option_context_summary(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> summary,
  ) {
    return _g_application_set_option_context_summary(
      application,
      summary,
    );
  }

  late final _g_application_set_option_context_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<gchar>)>>('g_application_set_option_context_summary');
  late final _g_application_set_option_context_summary =
      _g_application_set_option_context_summaryPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  void g_application_set_option_context_description(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> description,
  ) {
    return _g_application_set_option_context_description(
      application,
      description,
    );
  }

  late final _g_application_set_option_context_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>>(
      'g_application_set_option_context_description');
  late final _g_application_set_option_context_description =
      _g_application_set_option_context_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  int g_application_get_is_registered(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_is_registered(
      application,
    );
  }

  late final _g_application_get_is_registeredPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GApplication>)>>(
          'g_application_get_is_registered');
  late final _g_application_get_is_registered =
      _g_application_get_is_registeredPtr
          .asFunction<int Function(ffi.Pointer<GApplication>)>();

  int g_application_get_is_remote(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_is_remote(
      application,
    );
  }

  late final _g_application_get_is_remotePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GApplication>)>>(
          'g_application_get_is_remote');
  late final _g_application_get_is_remote = _g_application_get_is_remotePtr
      .asFunction<int Function(ffi.Pointer<GApplication>)>();

  int g_application_register(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_application_register(
      application,
      cancellable,
      error,
    );
  }

  late final _g_application_registerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GApplication>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_application_register');
  late final _g_application_register = _g_application_registerPtr.asFunction<
      int Function(ffi.Pointer<GApplication>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_application_hold(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_hold(
      application,
    );
  }

  late final _g_application_holdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_hold');
  late final _g_application_hold = _g_application_holdPtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  void g_application_release(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_release(
      application,
    );
  }

  late final _g_application_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_release');
  late final _g_application_release = _g_application_releasePtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  void g_application_activate(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_activate(
      application,
    );
  }

  late final _g_application_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_activate');
  late final _g_application_activate = _g_application_activatePtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  void g_application_open(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<ffi.Pointer<GFile>> files,
    int n_files,
    ffi.Pointer<gchar> hint,
  ) {
    return _g_application_open(
      application,
      files,
      n_files,
      hint,
    );
  }

  late final _g_application_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GApplication>,
              ffi.Pointer<ffi.Pointer<GFile>>,
              gint,
              ffi.Pointer<gchar>)>>('g_application_open');
  late final _g_application_open = _g_application_openPtr.asFunction<
      void Function(ffi.Pointer<GApplication>, ffi.Pointer<ffi.Pointer<GFile>>,
          int, ffi.Pointer<gchar>)>();

  int g_application_run(
    ffi.Pointer<GApplication> application,
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _g_application_run(
      application,
      argc,
      argv,
    );
  }

  late final _g_application_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GApplication>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_application_run');
  late final _g_application_run = _g_application_runPtr.asFunction<
      int Function(ffi.Pointer<GApplication>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_application_quit(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_quit(
      application,
    );
  }

  late final _g_application_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_quit');
  late final _g_application_quit = _g_application_quitPtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  ffi.Pointer<GApplication> g_application_get_default() {
    return _g_application_get_default();
  }

  late final _g_application_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GApplication> Function()>>(
          'g_application_get_default');
  late final _g_application_get_default = _g_application_get_defaultPtr
      .asFunction<ffi.Pointer<GApplication> Function()>();

  void g_application_set_default(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_set_default(
      application,
    );
  }

  late final _g_application_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_set_default');
  late final _g_application_set_default = _g_application_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  void g_application_mark_busy(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_mark_busy(
      application,
    );
  }

  late final _g_application_mark_busyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_mark_busy');
  late final _g_application_mark_busy = _g_application_mark_busyPtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  void g_application_unmark_busy(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_unmark_busy(
      application,
    );
  }

  late final _g_application_unmark_busyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GApplication>)>>(
          'g_application_unmark_busy');
  late final _g_application_unmark_busy = _g_application_unmark_busyPtr
      .asFunction<void Function(ffi.Pointer<GApplication>)>();

  int g_application_get_is_busy(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_is_busy(
      application,
    );
  }

  late final _g_application_get_is_busyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GApplication>)>>(
          'g_application_get_is_busy');
  late final _g_application_get_is_busy = _g_application_get_is_busyPtr
      .asFunction<int Function(ffi.Pointer<GApplication>)>();

  void g_application_send_notification(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> id,
    ffi.Pointer<GNotification> notification,
  ) {
    return _g_application_send_notification(
      application,
      id,
      notification,
    );
  }

  late final _g_application_send_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>,
              ffi.Pointer<GNotification>)>>('g_application_send_notification');
  late final _g_application_send_notification =
      _g_application_send_notificationPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>,
              ffi.Pointer<GNotification>)>();

  void g_application_withdraw_notification(
    ffi.Pointer<GApplication> application,
    ffi.Pointer<gchar> id,
  ) {
    return _g_application_withdraw_notification(
      application,
      id,
    );
  }

  late final _g_application_withdraw_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>,
              ffi.Pointer<gchar>)>>('g_application_withdraw_notification');
  late final _g_application_withdraw_notification =
      _g_application_withdraw_notificationPtr.asFunction<
          void Function(ffi.Pointer<GApplication>, ffi.Pointer<gchar>)>();

  void g_application_bind_busy_property(
    ffi.Pointer<GApplication> application,
    gpointer object,
    ffi.Pointer<gchar> property,
  ) {
    return _g_application_bind_busy_property(
      application,
      object,
      property,
    );
  }

  late final _g_application_bind_busy_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>, gpointer,
              ffi.Pointer<gchar>)>>('g_application_bind_busy_property');
  late final _g_application_bind_busy_property =
      _g_application_bind_busy_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GApplication>, gpointer, ffi.Pointer<gchar>)>();

  void g_application_unbind_busy_property(
    ffi.Pointer<GApplication> application,
    gpointer object,
    ffi.Pointer<gchar> property,
  ) {
    return _g_application_unbind_busy_property(
      application,
      object,
      property,
    );
  }

  late final _g_application_unbind_busy_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication>, gpointer,
              ffi.Pointer<gchar>)>>('g_application_unbind_busy_property');
  late final _g_application_unbind_busy_property =
      _g_application_unbind_busy_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GApplication>, gpointer, ffi.Pointer<gchar>)>();

  int g_application_command_line_get_type() {
    return _g_application_command_line_get_type();
  }

  late final _g_application_command_line_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_application_command_line_get_type');
  late final _g_application_command_line_get_type =
      _g_application_command_line_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_application_command_line_get_arguments(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    ffi.Pointer<ffi.Int> argc,
  ) {
    return _g_application_command_line_get_arguments(
      cmdline,
      argc,
    );
  }

  late final _g_application_command_line_get_argumentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<ffi.Int>)>>(
      'g_application_command_line_get_arguments');
  late final _g_application_command_line_get_arguments =
      _g_application_command_line_get_argumentsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<GVariantDict> g_application_command_line_get_options_dict(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_options_dict(
      cmdline,
    );
  }

  late final _g_application_command_line_get_options_dictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariantDict> Function(
                  ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_options_dict');
  late final _g_application_command_line_get_options_dict =
      _g_application_command_line_get_options_dictPtr.asFunction<
          ffi.Pointer<GVariantDict> Function(
              ffi.Pointer<GApplicationCommandLine>)>();

  ffi.Pointer<GInputStream> g_application_command_line_get_stdin(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_stdin(
      cmdline,
    );
  }

  late final _g_application_command_line_get_stdinPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInputStream> Function(
                  ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_stdin');
  late final _g_application_command_line_get_stdin =
      _g_application_command_line_get_stdinPtr.asFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GApplicationCommandLine>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_application_command_line_get_environ(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_environ(
      cmdline,
    );
  }

  late final _g_application_command_line_get_environPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_environ');
  late final _g_application_command_line_get_environ =
      _g_application_command_line_get_environPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GApplicationCommandLine>)>();

  ffi.Pointer<gchar> g_application_command_line_getenv(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    ffi.Pointer<gchar> name,
  ) {
    return _g_application_command_line_getenv(
      cmdline,
      name,
    );
  }

  late final _g_application_command_line_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GApplicationCommandLine>,
              ffi.Pointer<gchar>)>>('g_application_command_line_getenv');
  late final _g_application_command_line_getenv =
      _g_application_command_line_getenvPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_application_command_line_get_cwd(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_cwd(
      cmdline,
    );
  }

  late final _g_application_command_line_get_cwdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_cwd');
  late final _g_application_command_line_get_cwd =
      _g_application_command_line_get_cwdPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GApplicationCommandLine>)>();

  int g_application_command_line_get_is_remote(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_is_remote(
      cmdline,
    );
  }

  late final _g_application_command_line_get_is_remotePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_is_remote');
  late final _g_application_command_line_get_is_remote =
      _g_application_command_line_get_is_remotePtr
          .asFunction<int Function(ffi.Pointer<GApplicationCommandLine>)>();

  void g_application_command_line_print(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    ffi.Pointer<gchar> format,
  ) {
    return _g_application_command_line_print(
      cmdline,
      format,
    );
  }

  late final _g_application_command_line_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplicationCommandLine>,
              ffi.Pointer<gchar>)>>('g_application_command_line_print');
  late final _g_application_command_line_print =
      _g_application_command_line_printPtr.asFunction<
          void Function(
              ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<gchar>)>();

  void g_application_command_line_printerr(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    ffi.Pointer<gchar> format,
  ) {
    return _g_application_command_line_printerr(
      cmdline,
      format,
    );
  }

  late final _g_application_command_line_printerrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplicationCommandLine>,
              ffi.Pointer<gchar>)>>('g_application_command_line_printerr');
  late final _g_application_command_line_printerr =
      _g_application_command_line_printerrPtr.asFunction<
          void Function(
              ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<gchar>)>();

  int g_application_command_line_get_exit_status(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_exit_status(
      cmdline,
    );
  }

  late final _g_application_command_line_get_exit_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_exit_status');
  late final _g_application_command_line_get_exit_status =
      _g_application_command_line_get_exit_statusPtr
          .asFunction<int Function(ffi.Pointer<GApplicationCommandLine>)>();

  void g_application_command_line_set_exit_status(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    int exit_status,
  ) {
    return _g_application_command_line_set_exit_status(
      cmdline,
      exit_status,
    );
  }

  late final _g_application_command_line_set_exit_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplicationCommandLine>,
              ffi.Int)>>('g_application_command_line_set_exit_status');
  late final _g_application_command_line_set_exit_status =
      _g_application_command_line_set_exit_statusPtr.asFunction<
          void Function(ffi.Pointer<GApplicationCommandLine>, int)>();

  ffi.Pointer<GVariant> g_application_command_line_get_platform_data(
    ffi.Pointer<GApplicationCommandLine> cmdline,
  ) {
    return _g_application_command_line_get_platform_data(
      cmdline,
    );
  }

  late final _g_application_command_line_get_platform_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GApplicationCommandLine>)>>(
      'g_application_command_line_get_platform_data');
  late final _g_application_command_line_get_platform_data =
      _g_application_command_line_get_platform_dataPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GApplicationCommandLine>)>();

  ffi.Pointer<GFile> g_application_command_line_create_file_for_arg(
    ffi.Pointer<GApplicationCommandLine> cmdline,
    ffi.Pointer<gchar> arg,
  ) {
    return _g_application_command_line_create_file_for_arg(
      cmdline,
      arg,
    );
  }

  late final _g_application_command_line_create_file_for_argPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<gchar>)>>(
      'g_application_command_line_create_file_for_arg');
  late final _g_application_command_line_create_file_for_arg =
      _g_application_command_line_create_file_for_argPtr.asFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GApplicationCommandLine>, ffi.Pointer<gchar>)>();

  int g_initable_get_type() {
    return _g_initable_get_type();
  }

  late final _g_initable_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_initable_get_type');
  late final _g_initable_get_type =
      _g_initable_get_typePtr.asFunction<int Function()>();

  int g_initable_init(
    ffi.Pointer<GInitable> initable,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_initable_init(
      initable,
      cancellable,
      error,
    );
  }

  late final _g_initable_initPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GInitable>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_initable_init');
  late final _g_initable_init = _g_initable_initPtr.asFunction<
      int Function(ffi.Pointer<GInitable>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  gpointer g_initable_new(
    int object_type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_initable_new(
      object_type,
      cancellable,
      error,
      first_property_name,
    );
  }

  late final _g_initable_newPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              GType,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_initable_new');
  late final _g_initable_new = _g_initable_newPtr.asFunction<
      gpointer Function(int, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>)>();

  gpointer g_initable_newv(
    int object_type,
    int n_parameters,
    ffi.Pointer<GParameter> parameters,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_initable_newv(
      object_type,
      n_parameters,
      parameters,
      cancellable,
      error,
    );
  }

  late final _g_initable_newvPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(
              GType,
              guint,
              ffi.Pointer<GParameter>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_initable_newv');
  late final _g_initable_newv = _g_initable_newvPtr.asFunction<
      gpointer Function(int, int, ffi.Pointer<GParameter>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GObject> g_initable_new_valist(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_initable_new_valist(
      object_type,
      first_property_name,
      var_args,
      cancellable,
      error,
    );
  }

  late final _g_initable_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_initable_new_valist');
  late final _g_initable_new_valist = _g_initable_new_valistPtr.asFunction<
      ffi.Pointer<GObject> Function(
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_async_initable_get_type() {
    return _g_async_initable_get_type();
  }

  late final _g_async_initable_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_async_initable_get_type');
  late final _g_async_initable_get_type =
      _g_async_initable_get_typePtr.asFunction<int Function()>();

  void g_async_initable_init_async(
    ffi.Pointer<GAsyncInitable> initable,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_async_initable_init_async(
      initable,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_async_initable_init_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncInitable>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_async_initable_init_async');
  late final _g_async_initable_init_async =
      _g_async_initable_init_asyncPtr.asFunction<
          void Function(ffi.Pointer<GAsyncInitable>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_async_initable_init_finish(
    ffi.Pointer<GAsyncInitable> initable,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_async_initable_init_finish(
      initable,
      res,
      error,
    );
  }

  late final _g_async_initable_init_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GAsyncInitable>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_async_initable_init_finish');
  late final _g_async_initable_init_finish =
      _g_async_initable_init_finishPtr.asFunction<
          int Function(ffi.Pointer<GAsyncInitable>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_async_initable_new_async(
    int object_type,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
    ffi.Pointer<gchar> first_property_name,
  ) {
    return _g_async_initable_new_async(
      object_type,
      io_priority,
      cancellable,
      callback,
      user_data,
      first_property_name,
    );
  }

  late final _g_async_initable_new_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GType,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer,
              ffi.Pointer<gchar>)>>('g_async_initable_new_async');
  late final _g_async_initable_new_async =
      _g_async_initable_new_asyncPtr.asFunction<
          void Function(int, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer, ffi.Pointer<gchar>)>();

  void g_async_initable_newv_async(
    int object_type,
    int n_parameters,
    ffi.Pointer<GParameter> parameters,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_async_initable_newv_async(
      object_type,
      n_parameters,
      parameters,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_async_initable_newv_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GType,
              guint,
              ffi.Pointer<GParameter>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_async_initable_newv_async');
  late final _g_async_initable_newv_async =
      _g_async_initable_newv_asyncPtr.asFunction<
          void Function(int, int, ffi.Pointer<GParameter>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  void g_async_initable_new_valist_async(
    int object_type,
    ffi.Pointer<gchar> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_async_initable_new_valist_async(
      object_type,
      first_property_name,
      var_args,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_async_initable_new_valist_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GType,
              ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_async_initable_new_valist_async');
  late final _g_async_initable_new_valist_async =
      _g_async_initable_new_valist_asyncPtr.asFunction<
          void Function(int, ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GObject> g_async_initable_new_finish(
    ffi.Pointer<GAsyncInitable> initable,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_async_initable_new_finish(
      initable,
      res,
      error,
    );
  }

  late final _g_async_initable_new_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  ffi.Pointer<GAsyncInitable>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_async_initable_new_finish');
  late final _g_async_initable_new_finish =
      _g_async_initable_new_finishPtr.asFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GAsyncInitable>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_async_result_get_type() {
    return _g_async_result_get_type();
  }

  late final _g_async_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_async_result_get_type');
  late final _g_async_result_get_type =
      _g_async_result_get_typePtr.asFunction<int Function()>();

  gpointer g_async_result_get_user_data(
    ffi.Pointer<GAsyncResult> res,
  ) {
    return _g_async_result_get_user_data(
      res,
    );
  }

  late final _g_async_result_get_user_dataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncResult>)>>(
          'g_async_result_get_user_data');
  late final _g_async_result_get_user_data = _g_async_result_get_user_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<GAsyncResult>)>();

  ffi.Pointer<GObject> g_async_result_get_source_object(
    ffi.Pointer<GAsyncResult> res,
  ) {
    return _g_async_result_get_source_object(
      res,
    );
  }

  late final _g_async_result_get_source_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GAsyncResult>)>>('g_async_result_get_source_object');
  late final _g_async_result_get_source_object =
      _g_async_result_get_source_objectPtr.asFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GAsyncResult>)>();

  int g_async_result_legacy_propagate_error(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_async_result_legacy_propagate_error(
      res,
      error,
    );
  }

  late final _g_async_result_legacy_propagate_errorPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_async_result_legacy_propagate_error');
  late final _g_async_result_legacy_propagate_error =
      _g_async_result_legacy_propagate_errorPtr.asFunction<
          int Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_async_result_is_tagged(
    ffi.Pointer<GAsyncResult> res,
    gpointer source_tag,
  ) {
    return _g_async_result_is_tagged(
      res,
      source_tag,
    );
  }

  late final _g_async_result_is_taggedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAsyncResult>,
              gpointer)>>('g_async_result_is_tagged');
  late final _g_async_result_is_tagged = _g_async_result_is_taggedPtr
      .asFunction<int Function(ffi.Pointer<GAsyncResult>, gpointer)>();

  int g_input_stream_get_type() {
    return _g_input_stream_get_type();
  }

  late final _g_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_input_stream_get_type');
  late final _g_input_stream_get_type =
      _g_input_stream_get_typePtr.asFunction<int Function()>();

  int g_input_stream_read(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read(
      stream,
      buffer,
      count,
      cancellable,
      error,
    );
  }

  late final _g_input_stream_readPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_read');
  late final _g_input_stream_read = _g_input_stream_readPtr.asFunction<
      int Function(ffi.Pointer<GInputStream>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_input_stream_read_all(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read_all(
      stream,
      buffer,
      count,
      bytes_read,
      cancellable,
      error,
    );
  }

  late final _g_input_stream_read_allPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_read_all');
  late final _g_input_stream_read_all = _g_input_stream_read_allPtr.asFunction<
      int Function(
          ffi.Pointer<GInputStream>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GBytes> g_input_stream_read_bytes(
    ffi.Pointer<GInputStream> stream,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read_bytes(
      stream,
      count,
      cancellable,
      error,
    );
  }

  late final _g_input_stream_read_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GInputStream>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_read_bytes');
  late final _g_input_stream_read_bytes =
      _g_input_stream_read_bytesPtr.asFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<GInputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_input_stream_skip(
    ffi.Pointer<GInputStream> stream,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_skip(
      stream,
      count,
      cancellable,
      error,
    );
  }

  late final _g_input_stream_skipPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_skip');
  late final _g_input_stream_skip = _g_input_stream_skipPtr.asFunction<
      int Function(ffi.Pointer<GInputStream>, int, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_input_stream_close(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_close(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_input_stream_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_close');
  late final _g_input_stream_close = _g_input_stream_closePtr.asFunction<
      int Function(ffi.Pointer<GInputStream>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_read_async(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_input_stream_read_async(
      stream,
      buffer,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_input_stream_read_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_input_stream_read_async');
  late final _g_input_stream_read_async =
      _g_input_stream_read_asyncPtr.asFunction<
          void Function(ffi.Pointer<GInputStream>, ffi.Pointer<ffi.Void>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_input_stream_read_finish(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_input_stream_read_finishPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_read_finish');
  late final _g_input_stream_read_finish =
      _g_input_stream_read_finishPtr.asFunction<
          int Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_read_all_async(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_input_stream_read_all_async(
      stream,
      buffer,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_input_stream_read_all_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_input_stream_read_all_async');
  late final _g_input_stream_read_all_async =
      _g_input_stream_read_all_asyncPtr.asFunction<
          void Function(ffi.Pointer<GInputStream>, ffi.Pointer<ffi.Void>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_input_stream_read_all_finish(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read_all_finish(
      stream,
      result,
      bytes_read,
      error,
    );
  }

  late final _g_input_stream_read_all_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_input_stream_read_all_finish');
  late final _g_input_stream_read_all_finish =
      _g_input_stream_read_all_finishPtr.asFunction<
          int Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_read_bytes_async(
    ffi.Pointer<GInputStream> stream,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_input_stream_read_bytes_async(
      stream,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_input_stream_read_bytes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_input_stream_read_bytes_async');
  late final _g_input_stream_read_bytes_async =
      _g_input_stream_read_bytes_asyncPtr.asFunction<
          void Function(ffi.Pointer<GInputStream>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GBytes> g_input_stream_read_bytes_finish(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_read_bytes_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_input_stream_read_bytes_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GBytes> Function(
                  ffi.Pointer<GInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_input_stream_read_bytes_finish');
  late final _g_input_stream_read_bytes_finish =
      _g_input_stream_read_bytes_finishPtr.asFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<GInputStream>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_skip_async(
    ffi.Pointer<GInputStream> stream,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_input_stream_skip_async(
      stream,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_input_stream_skip_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_input_stream_skip_async');
  late final _g_input_stream_skip_async =
      _g_input_stream_skip_asyncPtr.asFunction<
          void Function(ffi.Pointer<GInputStream>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_input_stream_skip_finish(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_skip_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_input_stream_skip_finishPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_skip_finish');
  late final _g_input_stream_skip_finish =
      _g_input_stream_skip_finishPtr.asFunction<
          int Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_close_async(
    ffi.Pointer<GInputStream> stream,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_input_stream_close_async(
      stream,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_input_stream_close_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_input_stream_close_async');
  late final _g_input_stream_close_async =
      _g_input_stream_close_asyncPtr.asFunction<
          void Function(ffi.Pointer<GInputStream>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_input_stream_close_finish(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_close_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_input_stream_close_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_input_stream_close_finish');
  late final _g_input_stream_close_finish =
      _g_input_stream_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GInputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_input_stream_is_closed(
    ffi.Pointer<GInputStream> stream,
  ) {
    return _g_input_stream_is_closed(
      stream,
    );
  }

  late final _g_input_stream_is_closedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInputStream>)>>(
          'g_input_stream_is_closed');
  late final _g_input_stream_is_closed = _g_input_stream_is_closedPtr
      .asFunction<int Function(ffi.Pointer<GInputStream>)>();

  int g_input_stream_has_pending(
    ffi.Pointer<GInputStream> stream,
  ) {
    return _g_input_stream_has_pending(
      stream,
    );
  }

  late final _g_input_stream_has_pendingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInputStream>)>>(
          'g_input_stream_has_pending');
  late final _g_input_stream_has_pending = _g_input_stream_has_pendingPtr
      .asFunction<int Function(ffi.Pointer<GInputStream>)>();

  int g_input_stream_set_pending(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_input_stream_set_pending(
      stream,
      error,
    );
  }

  late final _g_input_stream_set_pendingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_input_stream_set_pending');
  late final _g_input_stream_set_pending =
      _g_input_stream_set_pendingPtr.asFunction<
          int Function(
              ffi.Pointer<GInputStream>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_input_stream_clear_pending(
    ffi.Pointer<GInputStream> stream,
  ) {
    return _g_input_stream_clear_pending(
      stream,
    );
  }

  late final _g_input_stream_clear_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GInputStream>)>>(
          'g_input_stream_clear_pending');
  late final _g_input_stream_clear_pending = _g_input_stream_clear_pendingPtr
      .asFunction<void Function(ffi.Pointer<GInputStream>)>();

  int g_filter_input_stream_get_type() {
    return _g_filter_input_stream_get_type();
  }

  late final _g_filter_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_filter_input_stream_get_type');
  late final _g_filter_input_stream_get_type =
      _g_filter_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_filter_input_stream_get_base_stream(
    ffi.Pointer<GFilterInputStream> stream,
  ) {
    return _g_filter_input_stream_get_base_stream(
      stream,
    );
  }

  late final _g_filter_input_stream_get_base_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInputStream> Function(
                  ffi.Pointer<GFilterInputStream>)>>(
      'g_filter_input_stream_get_base_stream');
  late final _g_filter_input_stream_get_base_stream =
      _g_filter_input_stream_get_base_streamPtr.asFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GFilterInputStream>)>();

  int g_filter_input_stream_get_close_base_stream(
    ffi.Pointer<GFilterInputStream> stream,
  ) {
    return _g_filter_input_stream_get_close_base_stream(
      stream,
    );
  }

  late final _g_filter_input_stream_get_close_base_streamPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GFilterInputStream>)>>(
      'g_filter_input_stream_get_close_base_stream');
  late final _g_filter_input_stream_get_close_base_stream =
      _g_filter_input_stream_get_close_base_streamPtr
          .asFunction<int Function(ffi.Pointer<GFilterInputStream>)>();

  void g_filter_input_stream_set_close_base_stream(
    ffi.Pointer<GFilterInputStream> stream,
    int close_base,
  ) {
    return _g_filter_input_stream_set_close_base_stream(
      stream,
      close_base,
    );
  }

  late final _g_filter_input_stream_set_close_base_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFilterInputStream>,
              gboolean)>>('g_filter_input_stream_set_close_base_stream');
  late final _g_filter_input_stream_set_close_base_stream =
      _g_filter_input_stream_set_close_base_streamPtr
          .asFunction<void Function(ffi.Pointer<GFilterInputStream>, int)>();

  int g_buffered_input_stream_get_type() {
    return _g_buffered_input_stream_get_type();
  }

  late final _g_buffered_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_buffered_input_stream_get_type');
  late final _g_buffered_input_stream_get_type =
      _g_buffered_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_buffered_input_stream_new(
    ffi.Pointer<GInputStream> base_stream,
  ) {
    return _g_buffered_input_stream_new(
      base_stream,
    );
  }

  late final _g_buffered_input_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GInputStream>)>>('g_buffered_input_stream_new');
  late final _g_buffered_input_stream_new =
      _g_buffered_input_stream_newPtr.asFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GInputStream>)>();

  ffi.Pointer<GInputStream> g_buffered_input_stream_new_sized(
    ffi.Pointer<GInputStream> base_stream,
    int size,
  ) {
    return _g_buffered_input_stream_new_sized(
      base_stream,
      size,
    );
  }

  late final _g_buffered_input_stream_new_sizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GInputStream>,
              gsize)>>('g_buffered_input_stream_new_sized');
  late final _g_buffered_input_stream_new_sized =
      _g_buffered_input_stream_new_sizedPtr.asFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GInputStream>, int)>();

  int g_buffered_input_stream_get_buffer_size(
    ffi.Pointer<GBufferedInputStream> stream,
  ) {
    return _g_buffered_input_stream_get_buffer_size(
      stream,
    );
  }

  late final _g_buffered_input_stream_get_buffer_sizePtr = _lookup<
          ffi
          .NativeFunction<gsize Function(ffi.Pointer<GBufferedInputStream>)>>(
      'g_buffered_input_stream_get_buffer_size');
  late final _g_buffered_input_stream_get_buffer_size =
      _g_buffered_input_stream_get_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<GBufferedInputStream>)>();

  void g_buffered_input_stream_set_buffer_size(
    ffi.Pointer<GBufferedInputStream> stream,
    int size,
  ) {
    return _g_buffered_input_stream_set_buffer_size(
      stream,
      size,
    );
  }

  late final _g_buffered_input_stream_set_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBufferedInputStream>,
              gsize)>>('g_buffered_input_stream_set_buffer_size');
  late final _g_buffered_input_stream_set_buffer_size =
      _g_buffered_input_stream_set_buffer_sizePtr
          .asFunction<void Function(ffi.Pointer<GBufferedInputStream>, int)>();

  int g_buffered_input_stream_get_available(
    ffi.Pointer<GBufferedInputStream> stream,
  ) {
    return _g_buffered_input_stream_get_available(
      stream,
    );
  }

  late final _g_buffered_input_stream_get_availablePtr = _lookup<
          ffi
          .NativeFunction<gsize Function(ffi.Pointer<GBufferedInputStream>)>>(
      'g_buffered_input_stream_get_available');
  late final _g_buffered_input_stream_get_available =
      _g_buffered_input_stream_get_availablePtr
          .asFunction<int Function(ffi.Pointer<GBufferedInputStream>)>();

  int g_buffered_input_stream_peek(
    ffi.Pointer<GBufferedInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int offset,
    int count,
  ) {
    return _g_buffered_input_stream_peek(
      stream,
      buffer,
      offset,
      count,
    );
  }

  late final _g_buffered_input_stream_peekPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<GBufferedInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              gsize)>>('g_buffered_input_stream_peek');
  late final _g_buffered_input_stream_peek =
      _g_buffered_input_stream_peekPtr.asFunction<
          int Function(ffi.Pointer<GBufferedInputStream>, ffi.Pointer<ffi.Void>,
              int, int)>();

  ffi.Pointer<ffi.Void> g_buffered_input_stream_peek_buffer(
    ffi.Pointer<GBufferedInputStream> stream,
    ffi.Pointer<gsize> count,
  ) {
    return _g_buffered_input_stream_peek_buffer(
      stream,
      count,
    );
  }

  late final _g_buffered_input_stream_peek_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<GBufferedInputStream>,
              ffi.Pointer<gsize>)>>('g_buffered_input_stream_peek_buffer');
  late final _g_buffered_input_stream_peek_buffer =
      _g_buffered_input_stream_peek_bufferPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<GBufferedInputStream>, ffi.Pointer<gsize>)>();

  int g_buffered_input_stream_fill(
    ffi.Pointer<GBufferedInputStream> stream,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_buffered_input_stream_fill(
      stream,
      count,
      cancellable,
      error,
    );
  }

  late final _g_buffered_input_stream_fillPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GBufferedInputStream>,
                  gssize,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_buffered_input_stream_fill');
  late final _g_buffered_input_stream_fill =
      _g_buffered_input_stream_fillPtr.asFunction<
          int Function(ffi.Pointer<GBufferedInputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_buffered_input_stream_fill_async(
    ffi.Pointer<GBufferedInputStream> stream,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_buffered_input_stream_fill_async(
      stream,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_buffered_input_stream_fill_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBufferedInputStream>,
              gssize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_buffered_input_stream_fill_async');
  late final _g_buffered_input_stream_fill_async =
      _g_buffered_input_stream_fill_asyncPtr.asFunction<
          void Function(ffi.Pointer<GBufferedInputStream>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_buffered_input_stream_fill_finish(
    ffi.Pointer<GBufferedInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_buffered_input_stream_fill_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_buffered_input_stream_fill_finishPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GBufferedInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_buffered_input_stream_fill_finish');
  late final _g_buffered_input_stream_fill_finish =
      _g_buffered_input_stream_fill_finishPtr.asFunction<
          int Function(ffi.Pointer<GBufferedInputStream>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_buffered_input_stream_read_byte(
    ffi.Pointer<GBufferedInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_buffered_input_stream_read_byte(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_buffered_input_stream_read_bytePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<GBufferedInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_buffered_input_stream_read_byte');
  late final _g_buffered_input_stream_read_byte =
      _g_buffered_input_stream_read_bytePtr.asFunction<
          int Function(ffi.Pointer<GBufferedInputStream>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_get_type() {
    return _g_output_stream_get_type();
  }

  late final _g_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_output_stream_get_type');
  late final _g_output_stream_get_type =
      _g_output_stream_get_typePtr.asFunction<int Function()>();

  int g_output_stream_write(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write(
      stream,
      buffer,
      count,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_writePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_write');
  late final _g_output_stream_write = _g_output_stream_writePtr.asFunction<
      int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_write_all(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write_all(
      stream,
      buffer,
      count,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_write_allPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_write_all');
  late final _g_output_stream_write_all =
      _g_output_stream_write_allPtr.asFunction<
          int Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_writev(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GOutputVector> vectors,
    int n_vectors,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_writev(
      stream,
      vectors,
      n_vectors,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_writevPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_writev');
  late final _g_output_stream_writev = _g_output_stream_writevPtr.asFunction<
      int Function(
          ffi.Pointer<GOutputStream>,
          ffi.Pointer<GOutputVector>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_writev_all(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GOutputVector> vectors,
    int n_vectors,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_writev_all(
      stream,
      vectors,
      n_vectors,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_writev_allPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_writev_all');
  late final _g_output_stream_writev_all =
      _g_output_stream_writev_allPtr.asFunction<
          int Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_printf(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> format,
  ) {
    return _g_output_stream_printf(
      stream,
      bytes_written,
      cancellable,
      error,
      format,
    );
  }

  late final _g_output_stream_printfPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_output_stream_printf');
  late final _g_output_stream_printf = _g_output_stream_printfPtr.asFunction<
      int Function(
          ffi.Pointer<GOutputStream>,
          ffi.Pointer<gsize>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>,
          ffi.Pointer<gchar>)>();

  int g_output_stream_vprintf(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_output_stream_vprintf(
      stream,
      bytes_written,
      cancellable,
      error,
      format,
      args,
    );
  }

  late final _g_output_stream_vprintfPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>>('g_output_stream_vprintf');
  late final _g_output_stream_vprintf = _g_output_stream_vprintfPtr.asFunction<
      int Function(
          ffi.Pointer<GOutputStream>,
          ffi.Pointer<gsize>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>,
          ffi.Pointer<gchar>,
          ffi.Pointer<__va_list_tag>)>();

  int g_output_stream_write_bytes(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write_bytes(
      stream,
      bytes,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_write_bytesPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GBytes>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_write_bytes');
  late final _g_output_stream_write_bytes =
      _g_output_stream_write_bytesPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GBytes>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_splice(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GInputStream> source,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_splice(
      stream,
      source,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_splicePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GInputStream>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_splice');
  late final _g_output_stream_splice = _g_output_stream_splicePtr.asFunction<
      int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GInputStream>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_flush(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_flush(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_flushPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_flush');
  late final _g_output_stream_flush = _g_output_stream_flushPtr.asFunction<
      int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_close(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_close(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_output_stream_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_output_stream_close');
  late final _g_output_stream_close = _g_output_stream_closePtr.asFunction<
      int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_write_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_write_async(
      stream,
      buffer,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_write_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_write_async');
  late final _g_output_stream_write_async =
      _g_output_stream_write_asyncPtr.asFunction<
          void Function(ffi.Pointer<GOutputStream>, ffi.Pointer<ffi.Void>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_output_stream_write_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_output_stream_write_finishPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_write_finish');
  late final _g_output_stream_write_finish =
      _g_output_stream_write_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_write_all_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_write_all_async(
      stream,
      buffer,
      count,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_write_all_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_write_all_async');
  late final _g_output_stream_write_all_async =
      _g_output_stream_write_all_asyncPtr.asFunction<
          void Function(ffi.Pointer<GOutputStream>, ffi.Pointer<ffi.Void>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_output_stream_write_all_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write_all_finish(
      stream,
      result,
      bytes_written,
      error,
    );
  }

  late final _g_output_stream_write_all_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_write_all_finish');
  late final _g_output_stream_write_all_finish =
      _g_output_stream_write_all_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_writev_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GOutputVector> vectors,
    int n_vectors,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_writev_async(
      stream,
      vectors,
      n_vectors,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_writev_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_writev_async');
  late final _g_output_stream_writev_async =
      _g_output_stream_writev_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_output_stream_writev_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_writev_finish(
      stream,
      result,
      bytes_written,
      error,
    );
  }

  late final _g_output_stream_writev_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_writev_finish');
  late final _g_output_stream_writev_finish =
      _g_output_stream_writev_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_writev_all_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GOutputVector> vectors,
    int n_vectors,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_writev_all_async(
      stream,
      vectors,
      n_vectors,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_writev_all_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              gsize,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_writev_all_async');
  late final _g_output_stream_writev_all_async =
      _g_output_stream_writev_all_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GOutputVector>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_output_stream_writev_all_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_writev_all_finish(
      stream,
      result,
      bytes_written,
      error,
    );
  }

  late final _g_output_stream_writev_all_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_writev_all_finish');
  late final _g_output_stream_writev_all_finish =
      _g_output_stream_writev_all_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_write_bytes_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GBytes> bytes,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_write_bytes_async(
      stream,
      bytes,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_write_bytes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GBytes>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_write_bytes_async');
  late final _g_output_stream_write_bytes_async =
      _g_output_stream_write_bytes_asyncPtr.asFunction<
          void Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GBytes>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_output_stream_write_bytes_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_write_bytes_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_output_stream_write_bytes_finishPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_write_bytes_finish');
  late final _g_output_stream_write_bytes_finish =
      _g_output_stream_write_bytes_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_splice_async(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GInputStream> source,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_splice_async(
      stream,
      source,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_splice_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GInputStream>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_splice_async');
  late final _g_output_stream_splice_async =
      _g_output_stream_splice_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<GInputStream>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_output_stream_splice_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_splice_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_output_stream_splice_finishPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_splice_finish');
  late final _g_output_stream_splice_finish =
      _g_output_stream_splice_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_flush_async(
    ffi.Pointer<GOutputStream> stream,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_flush_async(
      stream,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_flush_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_flush_async');
  late final _g_output_stream_flush_async =
      _g_output_stream_flush_asyncPtr.asFunction<
          void Function(ffi.Pointer<GOutputStream>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_output_stream_flush_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_flush_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_output_stream_flush_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_flush_finish');
  late final _g_output_stream_flush_finish =
      _g_output_stream_flush_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_close_async(
    ffi.Pointer<GOutputStream> stream,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_output_stream_close_async(
      stream,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_output_stream_close_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_output_stream_close_async');
  late final _g_output_stream_close_async =
      _g_output_stream_close_asyncPtr.asFunction<
          void Function(ffi.Pointer<GOutputStream>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_output_stream_close_finish(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_close_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_output_stream_close_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_close_finish');
  late final _g_output_stream_close_finish =
      _g_output_stream_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_output_stream_is_closed(
    ffi.Pointer<GOutputStream> stream,
  ) {
    return _g_output_stream_is_closed(
      stream,
    );
  }

  late final _g_output_stream_is_closedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOutputStream>)>>(
      'g_output_stream_is_closed');
  late final _g_output_stream_is_closed = _g_output_stream_is_closedPtr
      .asFunction<int Function(ffi.Pointer<GOutputStream>)>();

  int g_output_stream_is_closing(
    ffi.Pointer<GOutputStream> stream,
  ) {
    return _g_output_stream_is_closing(
      stream,
    );
  }

  late final _g_output_stream_is_closingPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOutputStream>)>>(
      'g_output_stream_is_closing');
  late final _g_output_stream_is_closing = _g_output_stream_is_closingPtr
      .asFunction<int Function(ffi.Pointer<GOutputStream>)>();

  int g_output_stream_has_pending(
    ffi.Pointer<GOutputStream> stream,
  ) {
    return _g_output_stream_has_pending(
      stream,
    );
  }

  late final _g_output_stream_has_pendingPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOutputStream>)>>(
      'g_output_stream_has_pending');
  late final _g_output_stream_has_pending = _g_output_stream_has_pendingPtr
      .asFunction<int Function(ffi.Pointer<GOutputStream>)>();

  int g_output_stream_set_pending(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_output_stream_set_pending(
      stream,
      error,
    );
  }

  late final _g_output_stream_set_pendingPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GOutputStream>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_output_stream_set_pending');
  late final _g_output_stream_set_pending =
      _g_output_stream_set_pendingPtr.asFunction<
          int Function(
              ffi.Pointer<GOutputStream>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_output_stream_clear_pending(
    ffi.Pointer<GOutputStream> stream,
  ) {
    return _g_output_stream_clear_pending(
      stream,
    );
  }

  late final _g_output_stream_clear_pendingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOutputStream>)>>(
      'g_output_stream_clear_pending');
  late final _g_output_stream_clear_pending = _g_output_stream_clear_pendingPtr
      .asFunction<void Function(ffi.Pointer<GOutputStream>)>();

  int g_filter_output_stream_get_type() {
    return _g_filter_output_stream_get_type();
  }

  late final _g_filter_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_filter_output_stream_get_type');
  late final _g_filter_output_stream_get_type =
      _g_filter_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GOutputStream> g_filter_output_stream_get_base_stream(
    ffi.Pointer<GFilterOutputStream> stream,
  ) {
    return _g_filter_output_stream_get_base_stream(
      stream,
    );
  }

  late final _g_filter_output_stream_get_base_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GOutputStream> Function(
                  ffi.Pointer<GFilterOutputStream>)>>(
      'g_filter_output_stream_get_base_stream');
  late final _g_filter_output_stream_get_base_stream =
      _g_filter_output_stream_get_base_streamPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GFilterOutputStream>)>();

  int g_filter_output_stream_get_close_base_stream(
    ffi.Pointer<GFilterOutputStream> stream,
  ) {
    return _g_filter_output_stream_get_close_base_stream(
      stream,
    );
  }

  late final _g_filter_output_stream_get_close_base_streamPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GFilterOutputStream>)>>(
      'g_filter_output_stream_get_close_base_stream');
  late final _g_filter_output_stream_get_close_base_stream =
      _g_filter_output_stream_get_close_base_streamPtr
          .asFunction<int Function(ffi.Pointer<GFilterOutputStream>)>();

  void g_filter_output_stream_set_close_base_stream(
    ffi.Pointer<GFilterOutputStream> stream,
    int close_base,
  ) {
    return _g_filter_output_stream_set_close_base_stream(
      stream,
      close_base,
    );
  }

  late final _g_filter_output_stream_set_close_base_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFilterOutputStream>,
              gboolean)>>('g_filter_output_stream_set_close_base_stream');
  late final _g_filter_output_stream_set_close_base_stream =
      _g_filter_output_stream_set_close_base_streamPtr
          .asFunction<void Function(ffi.Pointer<GFilterOutputStream>, int)>();

  int g_buffered_output_stream_get_type() {
    return _g_buffered_output_stream_get_type();
  }

  late final _g_buffered_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_buffered_output_stream_get_type');
  late final _g_buffered_output_stream_get_type =
      _g_buffered_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GOutputStream> g_buffered_output_stream_new(
    ffi.Pointer<GOutputStream> base_stream,
  ) {
    return _g_buffered_output_stream_new(
      base_stream,
    );
  }

  late final _g_buffered_output_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GOutputStream>)>>('g_buffered_output_stream_new');
  late final _g_buffered_output_stream_new =
      _g_buffered_output_stream_newPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(ffi.Pointer<GOutputStream>)>();

  ffi.Pointer<GOutputStream> g_buffered_output_stream_new_sized(
    ffi.Pointer<GOutputStream> base_stream,
    int size,
  ) {
    return _g_buffered_output_stream_new_sized(
      base_stream,
      size,
    );
  }

  late final _g_buffered_output_stream_new_sizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(ffi.Pointer<GOutputStream>,
              gsize)>>('g_buffered_output_stream_new_sized');
  late final _g_buffered_output_stream_new_sized =
      _g_buffered_output_stream_new_sizedPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GOutputStream>, int)>();

  int g_buffered_output_stream_get_buffer_size(
    ffi.Pointer<GBufferedOutputStream> stream,
  ) {
    return _g_buffered_output_stream_get_buffer_size(
      stream,
    );
  }

  late final _g_buffered_output_stream_get_buffer_sizePtr = _lookup<
          ffi
          .NativeFunction<gsize Function(ffi.Pointer<GBufferedOutputStream>)>>(
      'g_buffered_output_stream_get_buffer_size');
  late final _g_buffered_output_stream_get_buffer_size =
      _g_buffered_output_stream_get_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<GBufferedOutputStream>)>();

  void g_buffered_output_stream_set_buffer_size(
    ffi.Pointer<GBufferedOutputStream> stream,
    int size,
  ) {
    return _g_buffered_output_stream_set_buffer_size(
      stream,
      size,
    );
  }

  late final _g_buffered_output_stream_set_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBufferedOutputStream>,
              gsize)>>('g_buffered_output_stream_set_buffer_size');
  late final _g_buffered_output_stream_set_buffer_size =
      _g_buffered_output_stream_set_buffer_sizePtr
          .asFunction<void Function(ffi.Pointer<GBufferedOutputStream>, int)>();

  int g_buffered_output_stream_get_auto_grow(
    ffi.Pointer<GBufferedOutputStream> stream,
  ) {
    return _g_buffered_output_stream_get_auto_grow(
      stream,
    );
  }

  late final _g_buffered_output_stream_get_auto_growPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBufferedOutputStream>)>>(
      'g_buffered_output_stream_get_auto_grow');
  late final _g_buffered_output_stream_get_auto_grow =
      _g_buffered_output_stream_get_auto_growPtr
          .asFunction<int Function(ffi.Pointer<GBufferedOutputStream>)>();

  void g_buffered_output_stream_set_auto_grow(
    ffi.Pointer<GBufferedOutputStream> stream,
    int auto_grow,
  ) {
    return _g_buffered_output_stream_set_auto_grow(
      stream,
      auto_grow,
    );
  }

  late final _g_buffered_output_stream_set_auto_growPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBufferedOutputStream>,
              gboolean)>>('g_buffered_output_stream_set_auto_grow');
  late final _g_buffered_output_stream_set_auto_grow =
      _g_buffered_output_stream_set_auto_growPtr
          .asFunction<void Function(ffi.Pointer<GBufferedOutputStream>, int)>();

  /// GBytesIcon:
  ///
  /// Gets an icon for a #GBytes. Implements #GLoadableIcon.
  int g_bytes_icon_get_type() {
    return _g_bytes_icon_get_type();
  }

  late final _g_bytes_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bytes_icon_get_type');
  late final _g_bytes_icon_get_type =
      _g_bytes_icon_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIcon> g_bytes_icon_new(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_icon_new(
      bytes,
    );
  }

  late final _g_bytes_icon_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GBytes>)>>(
      'g_bytes_icon_new');
  late final _g_bytes_icon_new = _g_bytes_icon_newPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GBytes>)>();

  ffi.Pointer<GBytes> g_bytes_icon_get_bytes(
    ffi.Pointer<GBytesIcon> icon,
  ) {
    return _g_bytes_icon_get_bytes(
      icon,
    );
  }

  late final _g_bytes_icon_get_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GBytesIcon>)>>('g_bytes_icon_get_bytes');
  late final _g_bytes_icon_get_bytes = _g_bytes_icon_get_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GBytesIcon>)>();

  int g_cancellable_get_type() {
    return _g_cancellable_get_type();
  }

  late final _g_cancellable_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_cancellable_get_type');
  late final _g_cancellable_get_type =
      _g_cancellable_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GCancellable> g_cancellable_new() {
    return _g_cancellable_new();
  }

  late final _g_cancellable_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GCancellable> Function()>>(
          'g_cancellable_new');
  late final _g_cancellable_new =
      _g_cancellable_newPtr.asFunction<ffi.Pointer<GCancellable> Function()>();

  int g_cancellable_is_cancelled(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_is_cancelled(
      cancellable,
    );
  }

  late final _g_cancellable_is_cancelledPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_is_cancelled');
  late final _g_cancellable_is_cancelled = _g_cancellable_is_cancelledPtr
      .asFunction<int Function(ffi.Pointer<GCancellable>)>();

  int g_cancellable_set_error_if_cancelled(
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_cancellable_set_error_if_cancelled(
      cancellable,
      error,
    );
  }

  late final _g_cancellable_set_error_if_cancelledPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_cancellable_set_error_if_cancelled');
  late final _g_cancellable_set_error_if_cancelled =
      _g_cancellable_set_error_if_cancelledPtr.asFunction<
          int Function(
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_cancellable_get_fd(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_get_fd(
      cancellable,
    );
  }

  late final _g_cancellable_get_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_get_fd');
  late final _g_cancellable_get_fd = _g_cancellable_get_fdPtr
      .asFunction<int Function(ffi.Pointer<GCancellable>)>();

  int g_cancellable_make_pollfd(
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<GPollFD> pollfd,
  ) {
    return _g_cancellable_make_pollfd(
      cancellable,
      pollfd,
    );
  }

  late final _g_cancellable_make_pollfdPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCancellable>,
              ffi.Pointer<GPollFD>)>>('g_cancellable_make_pollfd');
  late final _g_cancellable_make_pollfd =
      _g_cancellable_make_pollfdPtr.asFunction<
          int Function(ffi.Pointer<GCancellable>, ffi.Pointer<GPollFD>)>();

  void g_cancellable_release_fd(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_release_fd(
      cancellable,
    );
  }

  late final _g_cancellable_release_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_release_fd');
  late final _g_cancellable_release_fd = _g_cancellable_release_fdPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>)>();

  ffi.Pointer<GSource> g_cancellable_source_new(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_source_new(
      cancellable,
    );
  }

  late final _g_cancellable_source_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GCancellable>)>>('g_cancellable_source_new');
  late final _g_cancellable_source_new = _g_cancellable_source_newPtr
      .asFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GCancellable>)>();

  ffi.Pointer<GCancellable> g_cancellable_get_current() {
    return _g_cancellable_get_current();
  }

  late final _g_cancellable_get_currentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GCancellable> Function()>>(
          'g_cancellable_get_current');
  late final _g_cancellable_get_current = _g_cancellable_get_currentPtr
      .asFunction<ffi.Pointer<GCancellable> Function()>();

  void g_cancellable_push_current(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_push_current(
      cancellable,
    );
  }

  late final _g_cancellable_push_currentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_push_current');
  late final _g_cancellable_push_current = _g_cancellable_push_currentPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>)>();

  void g_cancellable_pop_current(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_pop_current(
      cancellable,
    );
  }

  late final _g_cancellable_pop_currentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_pop_current');
  late final _g_cancellable_pop_current = _g_cancellable_pop_currentPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>)>();

  void g_cancellable_reset(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_reset(
      cancellable,
    );
  }

  late final _g_cancellable_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_reset');
  late final _g_cancellable_reset = _g_cancellable_resetPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>)>();

  int g_cancellable_connect(
    ffi.Pointer<GCancellable> cancellable,
    GCallback callback,
    gpointer data,
    GDestroyNotify data_destroy_func,
  ) {
    return _g_cancellable_connect(
      cancellable,
      callback,
      data,
      data_destroy_func,
    );
  }

  late final _g_cancellable_connectPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer<GCancellable>, GCallback, gpointer,
              GDestroyNotify)>>('g_cancellable_connect');
  late final _g_cancellable_connect = _g_cancellable_connectPtr.asFunction<
      int Function(
          ffi.Pointer<GCancellable>, GCallback, gpointer, GDestroyNotify)>();

  void g_cancellable_disconnect(
    ffi.Pointer<GCancellable> cancellable,
    int handler_id,
  ) {
    return _g_cancellable_disconnect(
      cancellable,
      handler_id,
    );
  }

  late final _g_cancellable_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCancellable>, gulong)>>('g_cancellable_disconnect');
  late final _g_cancellable_disconnect = _g_cancellable_disconnectPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>, int)>();

  void g_cancellable_cancel(
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_cancellable_cancel(
      cancellable,
    );
  }

  late final _g_cancellable_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCancellable>)>>(
          'g_cancellable_cancel');
  late final _g_cancellable_cancel = _g_cancellable_cancelPtr
      .asFunction<void Function(ffi.Pointer<GCancellable>)>();

  int g_converter_get_type() {
    return _g_converter_get_type();
  }

  late final _g_converter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_converter_get_type');
  late final _g_converter_get_type =
      _g_converter_get_typePtr.asFunction<int Function()>();

  int g_converter_convert(
    ffi.Pointer<GConverter> converter,
    ffi.Pointer<ffi.Void> inbuf,
    int inbuf_size,
    ffi.Pointer<ffi.Void> outbuf,
    int outbuf_size,
    int flags,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_converter_convert(
      converter,
      inbuf,
      inbuf_size,
      outbuf,
      outbuf_size,
      flags,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_converter_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GConverter>,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Pointer<ffi.Void>,
              gsize,
              ffi.Int32,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_converter_convert');
  late final _g_converter_convert = _g_converter_convertPtr.asFunction<
      int Function(
          ffi.Pointer<GConverter>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_converter_reset(
    ffi.Pointer<GConverter> converter,
  ) {
    return _g_converter_reset(
      converter,
    );
  }

  late final _g_converter_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GConverter>)>>(
          'g_converter_reset');
  late final _g_converter_reset = _g_converter_resetPtr
      .asFunction<void Function(ffi.Pointer<GConverter>)>();

  int g_charset_converter_get_type() {
    return _g_charset_converter_get_type();
  }

  late final _g_charset_converter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_charset_converter_get_type');
  late final _g_charset_converter_get_type =
      _g_charset_converter_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GCharsetConverter> g_charset_converter_new(
    ffi.Pointer<gchar> to_charset,
    ffi.Pointer<gchar> from_charset,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_charset_converter_new(
      to_charset,
      from_charset,
      error,
    );
  }

  late final _g_charset_converter_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GCharsetConverter> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_charset_converter_new');
  late final _g_charset_converter_new = _g_charset_converter_newPtr.asFunction<
      ffi.Pointer<GCharsetConverter> Function(ffi.Pointer<gchar>,
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_charset_converter_set_use_fallback(
    ffi.Pointer<GCharsetConverter> converter,
    int use_fallback,
  ) {
    return _g_charset_converter_set_use_fallback(
      converter,
      use_fallback,
    );
  }

  late final _g_charset_converter_set_use_fallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCharsetConverter>,
              gboolean)>>('g_charset_converter_set_use_fallback');
  late final _g_charset_converter_set_use_fallback =
      _g_charset_converter_set_use_fallbackPtr
          .asFunction<void Function(ffi.Pointer<GCharsetConverter>, int)>();

  int g_charset_converter_get_use_fallback(
    ffi.Pointer<GCharsetConverter> converter,
  ) {
    return _g_charset_converter_get_use_fallback(
      converter,
    );
  }

  late final _g_charset_converter_get_use_fallbackPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GCharsetConverter>)>>(
      'g_charset_converter_get_use_fallback');
  late final _g_charset_converter_get_use_fallback =
      _g_charset_converter_get_use_fallbackPtr
          .asFunction<int Function(ffi.Pointer<GCharsetConverter>)>();

  int g_charset_converter_get_num_fallbacks(
    ffi.Pointer<GCharsetConverter> converter,
  ) {
    return _g_charset_converter_get_num_fallbacks(
      converter,
    );
  }

  late final _g_charset_converter_get_num_fallbacksPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GCharsetConverter>)>>(
      'g_charset_converter_get_num_fallbacks');
  late final _g_charset_converter_get_num_fallbacks =
      _g_charset_converter_get_num_fallbacksPtr
          .asFunction<int Function(ffi.Pointer<GCharsetConverter>)>();

  int g_content_type_equals(
    ffi.Pointer<gchar> type1,
    ffi.Pointer<gchar> type2,
  ) {
    return _g_content_type_equals(
      type1,
      type2,
    );
  }

  late final _g_content_type_equalsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_content_type_equals');
  late final _g_content_type_equals = _g_content_type_equalsPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_content_type_is_a(
    ffi.Pointer<gchar> type,
    ffi.Pointer<gchar> supertype,
  ) {
    return _g_content_type_is_a(
      type,
      supertype,
    );
  }

  late final _g_content_type_is_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_content_type_is_a');
  late final _g_content_type_is_a = _g_content_type_is_aPtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_content_type_is_mime_type(
    ffi.Pointer<gchar> type,
    ffi.Pointer<gchar> mime_type,
  ) {
    return _g_content_type_is_mime_type(
      type,
      mime_type,
    );
  }

  late final _g_content_type_is_mime_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_content_type_is_mime_type');
  late final _g_content_type_is_mime_type = _g_content_type_is_mime_typePtr
      .asFunction<int Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_content_type_is_unknown(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_is_unknown(
      type,
    );
  }

  late final _g_content_type_is_unknownPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_content_type_is_unknown');
  late final _g_content_type_is_unknown = _g_content_type_is_unknownPtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_content_type_get_description(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_get_description(
      type,
    );
  }

  late final _g_content_type_get_descriptionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_get_description');
  late final _g_content_type_get_description =
      _g_content_type_get_descriptionPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_content_type_get_mime_type(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_get_mime_type(
      type,
    );
  }

  late final _g_content_type_get_mime_typePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_get_mime_type');
  late final _g_content_type_get_mime_type = _g_content_type_get_mime_typePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GIcon> g_content_type_get_icon(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_get_icon(
      type,
    );
  }

  late final _g_content_type_get_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_get_icon');
  late final _g_content_type_get_icon = _g_content_type_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GIcon> g_content_type_get_symbolic_icon(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_get_symbolic_icon(
      type,
    );
  }

  late final _g_content_type_get_symbolic_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_get_symbolic_icon');
  late final _g_content_type_get_symbolic_icon =
      _g_content_type_get_symbolic_iconPtr
          .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_content_type_get_generic_icon_name(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_get_generic_icon_name(
      type,
    );
  }

  late final _g_content_type_get_generic_icon_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_get_generic_icon_name');
  late final _g_content_type_get_generic_icon_name =
      _g_content_type_get_generic_icon_namePtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_content_type_can_be_executable(
    ffi.Pointer<gchar> type,
  ) {
    return _g_content_type_can_be_executable(
      type,
    );
  }

  late final _g_content_type_can_be_executablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_content_type_can_be_executable');
  late final _g_content_type_can_be_executable =
      _g_content_type_can_be_executablePtr
          .asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_content_type_from_mime_type(
    ffi.Pointer<gchar> mime_type,
  ) {
    return _g_content_type_from_mime_type(
      mime_type,
    );
  }

  late final _g_content_type_from_mime_typePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_content_type_from_mime_type');
  late final _g_content_type_from_mime_type = _g_content_type_from_mime_typePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_content_type_guess(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<guchar> data,
    int data_size,
    ffi.Pointer<gboolean> result_uncertain,
  ) {
    return _g_content_type_guess(
      filename,
      data,
      data_size,
      result_uncertain,
    );
  }

  late final _g_content_type_guessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<guchar>,
              gsize, ffi.Pointer<gboolean>)>>('g_content_type_guess');
  late final _g_content_type_guess = _g_content_type_guessPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<guchar>, int,
          ffi.Pointer<gboolean>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_content_type_guess_for_tree(
    ffi.Pointer<GFile> root,
  ) {
    return _g_content_type_guess_for_tree(
      root,
    );
  }

  late final _g_content_type_guess_for_treePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GFile>)>>('g_content_type_guess_for_tree');
  late final _g_content_type_guess_for_tree =
      _g_content_type_guess_for_treePtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<GList> g_content_types_get_registered() {
    return _g_content_types_get_registered();
  }

  late final _g_content_types_get_registeredPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'g_content_types_get_registered');
  late final _g_content_types_get_registered =
      _g_content_types_get_registeredPtr
          .asFunction<ffi.Pointer<GList> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_content_type_get_mime_dirs() {
    return _g_content_type_get_mime_dirs();
  }

  late final _g_content_type_get_mime_dirsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_content_type_get_mime_dirs');
  late final _g_content_type_get_mime_dirs = _g_content_type_get_mime_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  void g_content_type_set_mime_dirs(
    ffi.Pointer<ffi.Pointer<gchar>> dirs,
  ) {
    return _g_content_type_set_mime_dirs(
      dirs,
    );
  }

  late final _g_content_type_set_mime_dirsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_content_type_set_mime_dirs');
  late final _g_content_type_set_mime_dirs = _g_content_type_set_mime_dirsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_converter_input_stream_get_type() {
    return _g_converter_input_stream_get_type();
  }

  late final _g_converter_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_converter_input_stream_get_type');
  late final _g_converter_input_stream_get_type =
      _g_converter_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_converter_input_stream_new(
    ffi.Pointer<GInputStream> base_stream,
    ffi.Pointer<GConverter> converter,
  ) {
    return _g_converter_input_stream_new(
      base_stream,
      converter,
    );
  }

  late final _g_converter_input_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GInputStream>,
              ffi.Pointer<GConverter>)>>('g_converter_input_stream_new');
  late final _g_converter_input_stream_new =
      _g_converter_input_stream_newPtr.asFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GInputStream>, ffi.Pointer<GConverter>)>();

  ffi.Pointer<GConverter> g_converter_input_stream_get_converter(
    ffi.Pointer<GConverterInputStream> converter_stream,
  ) {
    return _g_converter_input_stream_get_converter(
      converter_stream,
    );
  }

  late final _g_converter_input_stream_get_converterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GConverter> Function(
                  ffi.Pointer<GConverterInputStream>)>>(
      'g_converter_input_stream_get_converter');
  late final _g_converter_input_stream_get_converter =
      _g_converter_input_stream_get_converterPtr.asFunction<
          ffi.Pointer<GConverter> Function(
              ffi.Pointer<GConverterInputStream>)>();

  int g_converter_output_stream_get_type() {
    return _g_converter_output_stream_get_type();
  }

  late final _g_converter_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_converter_output_stream_get_type');
  late final _g_converter_output_stream_get_type =
      _g_converter_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GOutputStream> g_converter_output_stream_new(
    ffi.Pointer<GOutputStream> base_stream,
    ffi.Pointer<GConverter> converter,
  ) {
    return _g_converter_output_stream_new(
      base_stream,
      converter,
    );
  }

  late final _g_converter_output_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(ffi.Pointer<GOutputStream>,
              ffi.Pointer<GConverter>)>>('g_converter_output_stream_new');
  late final _g_converter_output_stream_new =
      _g_converter_output_stream_newPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GOutputStream>, ffi.Pointer<GConverter>)>();

  ffi.Pointer<GConverter> g_converter_output_stream_get_converter(
    ffi.Pointer<GConverterOutputStream> converter_stream,
  ) {
    return _g_converter_output_stream_get_converter(
      converter_stream,
    );
  }

  late final _g_converter_output_stream_get_converterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GConverter> Function(
                  ffi.Pointer<GConverterOutputStream>)>>(
      'g_converter_output_stream_get_converter');
  late final _g_converter_output_stream_get_converter =
      _g_converter_output_stream_get_converterPtr.asFunction<
          ffi.Pointer<GConverter> Function(
              ffi.Pointer<GConverterOutputStream>)>();

  int g_credentials_get_type() {
    return _g_credentials_get_type();
  }

  late final _g_credentials_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_credentials_get_type');
  late final _g_credentials_get_type =
      _g_credentials_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GCredentials> g_credentials_new() {
    return _g_credentials_new();
  }

  late final _g_credentials_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GCredentials> Function()>>(
          'g_credentials_new');
  late final _g_credentials_new =
      _g_credentials_newPtr.asFunction<ffi.Pointer<GCredentials> Function()>();

  ffi.Pointer<gchar> g_credentials_to_string(
    ffi.Pointer<GCredentials> credentials,
  ) {
    return _g_credentials_to_string(
      credentials,
    );
  }

  late final _g_credentials_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GCredentials>)>>('g_credentials_to_string');
  late final _g_credentials_to_string = _g_credentials_to_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GCredentials>)>();

  gpointer g_credentials_get_native(
    ffi.Pointer<GCredentials> credentials,
    int native_type,
  ) {
    return _g_credentials_get_native(
      credentials,
      native_type,
    );
  }

  late final _g_credentials_get_nativePtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GCredentials>,
              ffi.Int32)>>('g_credentials_get_native');
  late final _g_credentials_get_native = _g_credentials_get_nativePtr
      .asFunction<gpointer Function(ffi.Pointer<GCredentials>, int)>();

  void g_credentials_set_native(
    ffi.Pointer<GCredentials> credentials,
    int native_type,
    gpointer native,
  ) {
    return _g_credentials_set_native(
      credentials,
      native_type,
      native,
    );
  }

  late final _g_credentials_set_nativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCredentials>, ffi.Int32,
              gpointer)>>('g_credentials_set_native');
  late final _g_credentials_set_native = _g_credentials_set_nativePtr
      .asFunction<void Function(ffi.Pointer<GCredentials>, int, gpointer)>();

  int g_credentials_is_same_user(
    ffi.Pointer<GCredentials> credentials,
    ffi.Pointer<GCredentials> other_credentials,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_credentials_is_same_user(
      credentials,
      other_credentials,
      error,
    );
  }

  late final _g_credentials_is_same_userPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GCredentials>,
              ffi.Pointer<GCredentials>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_credentials_is_same_user');
  late final _g_credentials_is_same_user =
      _g_credentials_is_same_userPtr.asFunction<
          int Function(ffi.Pointer<GCredentials>, ffi.Pointer<GCredentials>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_credentials_get_unix_pid(
    ffi.Pointer<GCredentials> credentials,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_credentials_get_unix_pid(
      credentials,
      error,
    );
  }

  late final _g_credentials_get_unix_pidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(ffi.Pointer<GCredentials>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_credentials_get_unix_pid');
  late final _g_credentials_get_unix_pid =
      _g_credentials_get_unix_pidPtr.asFunction<
          int Function(
              ffi.Pointer<GCredentials>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_credentials_get_unix_user(
    ffi.Pointer<GCredentials> credentials,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_credentials_get_unix_user(
      credentials,
      error,
    );
  }

  late final _g_credentials_get_unix_userPtr = _lookup<
          ffi.NativeFunction<
              uid_t Function(ffi.Pointer<GCredentials>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_credentials_get_unix_user');
  late final _g_credentials_get_unix_user =
      _g_credentials_get_unix_userPtr.asFunction<
          int Function(
              ffi.Pointer<GCredentials>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_credentials_set_unix_user(
    ffi.Pointer<GCredentials> credentials,
    int uid,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_credentials_set_unix_user(
      credentials,
      uid,
      error,
    );
  }

  late final _g_credentials_set_unix_userPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GCredentials>, uid_t,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_credentials_set_unix_user');
  late final _g_credentials_set_unix_user =
      _g_credentials_set_unix_userPtr.asFunction<
          int Function(ffi.Pointer<GCredentials>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_datagram_based_get_type() {
    return _g_datagram_based_get_type();
  }

  late final _g_datagram_based_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_datagram_based_get_type');
  late final _g_datagram_based_get_type =
      _g_datagram_based_get_typePtr.asFunction<int Function()>();

  int g_datagram_based_receive_messages(
    ffi.Pointer<GDatagramBased> datagram_based,
    ffi.Pointer<GInputMessage> messages,
    int num_messages,
    int flags,
    int timeout,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_datagram_based_receive_messages(
      datagram_based,
      messages,
      num_messages,
      flags,
      timeout,
      cancellable,
      error,
    );
  }

  late final _g_datagram_based_receive_messagesPtr = _lookup<
          ffi.NativeFunction<
              gint Function(
                  ffi.Pointer<GDatagramBased>,
                  ffi.Pointer<GInputMessage>,
                  guint,
                  gint,
                  gint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_datagram_based_receive_messages');
  late final _g_datagram_based_receive_messages =
      _g_datagram_based_receive_messagesPtr.asFunction<
          int Function(
              ffi.Pointer<GDatagramBased>,
              ffi.Pointer<GInputMessage>,
              int,
              int,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_datagram_based_send_messages(
    ffi.Pointer<GDatagramBased> datagram_based,
    ffi.Pointer<GOutputMessage> messages,
    int num_messages,
    int flags,
    int timeout,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_datagram_based_send_messages(
      datagram_based,
      messages,
      num_messages,
      flags,
      timeout,
      cancellable,
      error,
    );
  }

  late final _g_datagram_based_send_messagesPtr = _lookup<
          ffi.NativeFunction<
              gint Function(
                  ffi.Pointer<GDatagramBased>,
                  ffi.Pointer<GOutputMessage>,
                  guint,
                  gint,
                  gint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_datagram_based_send_messages');
  late final _g_datagram_based_send_messages =
      _g_datagram_based_send_messagesPtr.asFunction<
          int Function(
              ffi.Pointer<GDatagramBased>,
              ffi.Pointer<GOutputMessage>,
              int,
              int,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSource> g_datagram_based_create_source(
    ffi.Pointer<GDatagramBased> datagram_based,
    int condition,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_datagram_based_create_source(
      datagram_based,
      condition,
      cancellable,
    );
  }

  late final _g_datagram_based_create_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GDatagramBased>, ffi.Int32,
              ffi.Pointer<GCancellable>)>>('g_datagram_based_create_source');
  late final _g_datagram_based_create_source =
      _g_datagram_based_create_sourcePtr.asFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GDatagramBased>, int, ffi.Pointer<GCancellable>)>();

  int g_datagram_based_condition_check(
    ffi.Pointer<GDatagramBased> datagram_based,
    int condition,
  ) {
    return _g_datagram_based_condition_check(
      datagram_based,
      condition,
    );
  }

  late final _g_datagram_based_condition_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GDatagramBased>,
              ffi.Int32)>>('g_datagram_based_condition_check');
  late final _g_datagram_based_condition_check =
      _g_datagram_based_condition_checkPtr
          .asFunction<int Function(ffi.Pointer<GDatagramBased>, int)>();

  int g_datagram_based_condition_wait(
    ffi.Pointer<GDatagramBased> datagram_based,
    int condition,
    int timeout,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_datagram_based_condition_wait(
      datagram_based,
      condition,
      timeout,
      cancellable,
      error,
    );
  }

  late final _g_datagram_based_condition_waitPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDatagramBased>,
                  ffi.Int32,
                  gint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_datagram_based_condition_wait');
  late final _g_datagram_based_condition_wait =
      _g_datagram_based_condition_waitPtr.asFunction<
          int Function(ffi.Pointer<GDatagramBased>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_get_type() {
    return _g_data_input_stream_get_type();
  }

  late final _g_data_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_data_input_stream_get_type');
  late final _g_data_input_stream_get_type =
      _g_data_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDataInputStream> g_data_input_stream_new(
    ffi.Pointer<GInputStream> base_stream,
  ) {
    return _g_data_input_stream_new(
      base_stream,
    );
  }

  late final _g_data_input_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDataInputStream> Function(
              ffi.Pointer<GInputStream>)>>('g_data_input_stream_new');
  late final _g_data_input_stream_new = _g_data_input_stream_newPtr.asFunction<
      ffi.Pointer<GDataInputStream> Function(ffi.Pointer<GInputStream>)>();

  void g_data_input_stream_set_byte_order(
    ffi.Pointer<GDataInputStream> stream,
    int order,
  ) {
    return _g_data_input_stream_set_byte_order(
      stream,
      order,
    );
  }

  late final _g_data_input_stream_set_byte_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDataInputStream>,
              ffi.Int32)>>('g_data_input_stream_set_byte_order');
  late final _g_data_input_stream_set_byte_order =
      _g_data_input_stream_set_byte_orderPtr
          .asFunction<void Function(ffi.Pointer<GDataInputStream>, int)>();

  int g_data_input_stream_get_byte_order(
    ffi.Pointer<GDataInputStream> stream,
  ) {
    return _g_data_input_stream_get_byte_order(
      stream,
    );
  }

  late final _g_data_input_stream_get_byte_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GDataInputStream>)>>(
      'g_data_input_stream_get_byte_order');
  late final _g_data_input_stream_get_byte_order =
      _g_data_input_stream_get_byte_orderPtr
          .asFunction<int Function(ffi.Pointer<GDataInputStream>)>();

  void g_data_input_stream_set_newline_type(
    ffi.Pointer<GDataInputStream> stream,
    int type,
  ) {
    return _g_data_input_stream_set_newline_type(
      stream,
      type,
    );
  }

  late final _g_data_input_stream_set_newline_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDataInputStream>,
              ffi.Int32)>>('g_data_input_stream_set_newline_type');
  late final _g_data_input_stream_set_newline_type =
      _g_data_input_stream_set_newline_typePtr
          .asFunction<void Function(ffi.Pointer<GDataInputStream>, int)>();

  int g_data_input_stream_get_newline_type(
    ffi.Pointer<GDataInputStream> stream,
  ) {
    return _g_data_input_stream_get_newline_type(
      stream,
    );
  }

  late final _g_data_input_stream_get_newline_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GDataInputStream>)>>(
      'g_data_input_stream_get_newline_type');
  late final _g_data_input_stream_get_newline_type =
      _g_data_input_stream_get_newline_typePtr
          .asFunction<int Function(ffi.Pointer<GDataInputStream>)>();

  int g_data_input_stream_read_byte(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_byte(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_bytePtr = _lookup<
          ffi.NativeFunction<
              guchar Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_byte');
  late final _g_data_input_stream_read_byte =
      _g_data_input_stream_read_bytePtr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_int16(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_int16(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_int16Ptr = _lookup<
          ffi.NativeFunction<
              gint16 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_int16');
  late final _g_data_input_stream_read_int16 =
      _g_data_input_stream_read_int16Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_uint16(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_uint16(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_uint16Ptr = _lookup<
          ffi.NativeFunction<
              guint16 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_uint16');
  late final _g_data_input_stream_read_uint16 =
      _g_data_input_stream_read_uint16Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_int32(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_int32(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_int32Ptr = _lookup<
          ffi.NativeFunction<
              gint32 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_int32');
  late final _g_data_input_stream_read_int32 =
      _g_data_input_stream_read_int32Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_uint32(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_uint32(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_uint32Ptr = _lookup<
          ffi.NativeFunction<
              guint32 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_uint32');
  late final _g_data_input_stream_read_uint32 =
      _g_data_input_stream_read_uint32Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_int64(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_int64(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_int64Ptr = _lookup<
          ffi.NativeFunction<
              gint64 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_int64');
  late final _g_data_input_stream_read_int64 =
      _g_data_input_stream_read_int64Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_input_stream_read_uint64(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_uint64(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_uint64Ptr = _lookup<
          ffi.NativeFunction<
              guint64 Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_uint64');
  late final _g_data_input_stream_read_uint64 =
      _g_data_input_stream_read_uint64Ptr.asFunction<
          int Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_line(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gsize> length,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_line(
      stream,
      length,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_linePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_line');
  late final _g_data_input_stream_read_line =
      _g_data_input_stream_read_linePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_line_utf8(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gsize> length,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_line_utf8(
      stream,
      length,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_line_utf8Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_line_utf8');
  late final _g_data_input_stream_read_line_utf8 =
      _g_data_input_stream_read_line_utf8Ptr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_data_input_stream_read_line_async(
    ffi.Pointer<GDataInputStream> stream,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_data_input_stream_read_line_async(
      stream,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_data_input_stream_read_line_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDataInputStream>,
              gint,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_data_input_stream_read_line_async');
  late final _g_data_input_stream_read_line_async =
      _g_data_input_stream_read_line_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDataInputStream>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_line_finish(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_line_finish(
      stream,
      result,
      length,
      error,
    );
  }

  late final _g_data_input_stream_read_line_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_line_finish');
  late final _g_data_input_stream_read_line_finish =
      _g_data_input_stream_read_line_finishPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_line_finish_utf8(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_line_finish_utf8(
      stream,
      result,
      length,
      error,
    );
  }

  late final _g_data_input_stream_read_line_finish_utf8Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_line_finish_utf8');
  late final _g_data_input_stream_read_line_finish_utf8 =
      _g_data_input_stream_read_line_finish_utf8Ptr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_until(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gchar> stop_chars,
    ffi.Pointer<gsize> length,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_until(
      stream,
      stop_chars,
      length,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_untilPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_until');
  late final _g_data_input_stream_read_until =
      _g_data_input_stream_read_untilPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_data_input_stream_read_until_async(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gchar> stop_chars,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_data_input_stream_read_until_async(
      stream,
      stop_chars,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_data_input_stream_read_until_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gchar>,
              gint,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_data_input_stream_read_until_async');
  late final _g_data_input_stream_read_until_async =
      _g_data_input_stream_read_until_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_until_finish(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_until_finish(
      stream,
      result,
      length,
      error,
    );
  }

  late final _g_data_input_stream_read_until_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_until_finish');
  late final _g_data_input_stream_read_until_finish =
      _g_data_input_stream_read_until_finishPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_upto(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gchar> stop_chars,
    int stop_chars_len,
    ffi.Pointer<gsize> length,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_upto(
      stream,
      stop_chars,
      stop_chars_len,
      length,
      cancellable,
      error,
    );
  }

  late final _g_data_input_stream_read_uptoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<gchar>,
                  gssize,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_upto');
  late final _g_data_input_stream_read_upto =
      _g_data_input_stream_read_uptoPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_data_input_stream_read_upto_async(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<gchar> stop_chars,
    int stop_chars_len,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_data_input_stream_read_upto_async(
      stream,
      stop_chars,
      stop_chars_len,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_data_input_stream_read_upto_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<gchar>,
              gssize,
              gint,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_data_input_stream_read_upto_async');
  late final _g_data_input_stream_read_upto_async =
      _g_data_input_stream_read_upto_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDataInputStream>, ffi.Pointer<gchar>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<ffi.Char> g_data_input_stream_read_upto_finish(
    ffi.Pointer<GDataInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_input_stream_read_upto_finish(
      stream,
      result,
      length,
      error,
    );
  }

  late final _g_data_input_stream_read_upto_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDataInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_input_stream_read_upto_finish');
  late final _g_data_input_stream_read_upto_finish =
      _g_data_input_stream_read_upto_finishPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDataInputStream>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_get_type() {
    return _g_data_output_stream_get_type();
  }

  late final _g_data_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_data_output_stream_get_type');
  late final _g_data_output_stream_get_type =
      _g_data_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDataOutputStream> g_data_output_stream_new(
    ffi.Pointer<GOutputStream> base_stream,
  ) {
    return _g_data_output_stream_new(
      base_stream,
    );
  }

  late final _g_data_output_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDataOutputStream> Function(
              ffi.Pointer<GOutputStream>)>>('g_data_output_stream_new');
  late final _g_data_output_stream_new =
      _g_data_output_stream_newPtr.asFunction<
          ffi.Pointer<GDataOutputStream> Function(
              ffi.Pointer<GOutputStream>)>();

  void g_data_output_stream_set_byte_order(
    ffi.Pointer<GDataOutputStream> stream,
    int order,
  ) {
    return _g_data_output_stream_set_byte_order(
      stream,
      order,
    );
  }

  late final _g_data_output_stream_set_byte_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDataOutputStream>,
              ffi.Int32)>>('g_data_output_stream_set_byte_order');
  late final _g_data_output_stream_set_byte_order =
      _g_data_output_stream_set_byte_orderPtr
          .asFunction<void Function(ffi.Pointer<GDataOutputStream>, int)>();

  int g_data_output_stream_get_byte_order(
    ffi.Pointer<GDataOutputStream> stream,
  ) {
    return _g_data_output_stream_get_byte_order(
      stream,
    );
  }

  late final _g_data_output_stream_get_byte_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GDataOutputStream>)>>(
      'g_data_output_stream_get_byte_order');
  late final _g_data_output_stream_get_byte_order =
      _g_data_output_stream_get_byte_orderPtr
          .asFunction<int Function(ffi.Pointer<GDataOutputStream>)>();

  int g_data_output_stream_put_byte(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_byte(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_bytePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  guchar,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_byte');
  late final _g_data_output_stream_put_byte =
      _g_data_output_stream_put_bytePtr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_int16(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_int16(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_int16Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  gint16,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_int16');
  late final _g_data_output_stream_put_int16 =
      _g_data_output_stream_put_int16Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_uint16(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_uint16(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_uint16Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  guint16,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_uint16');
  late final _g_data_output_stream_put_uint16 =
      _g_data_output_stream_put_uint16Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_int32(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_int32(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_int32Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  gint32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_int32');
  late final _g_data_output_stream_put_int32 =
      _g_data_output_stream_put_int32Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_uint32(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_uint32(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_uint32Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  guint32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_uint32');
  late final _g_data_output_stream_put_uint32 =
      _g_data_output_stream_put_uint32Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_int64(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_int64(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_int64Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  gint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_int64');
  late final _g_data_output_stream_put_int64 =
      _g_data_output_stream_put_int64Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_uint64(
    ffi.Pointer<GDataOutputStream> stream,
    int data,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_uint64(
      stream,
      data,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_uint64Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  guint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_uint64');
  late final _g_data_output_stream_put_uint64 =
      _g_data_output_stream_put_uint64Ptr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_data_output_stream_put_string(
    ffi.Pointer<GDataOutputStream> stream,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_data_output_stream_put_string(
      stream,
      str,
      cancellable,
      error,
    );
  }

  late final _g_data_output_stream_put_stringPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDataOutputStream>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_data_output_stream_put_string');
  late final _g_data_output_stream_put_string =
      _g_data_output_stream_put_stringPtr.asFunction<
          int Function(ffi.Pointer<GDataOutputStream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_action_group_get_type() {
    return _g_dbus_action_group_get_type();
  }

  late final _g_dbus_action_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_action_group_get_type');
  late final _g_dbus_action_group_get_type =
      _g_dbus_action_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusActionGroup> g_dbus_action_group_get(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_action_group_get(
      connection,
      bus_name,
      object_path,
    );
  }

  late final _g_dbus_action_group_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusActionGroup> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_action_group_get');
  late final _g_dbus_action_group_get = _g_dbus_action_group_getPtr.asFunction<
      ffi.Pointer<GDBusActionGroup> Function(ffi.Pointer<GDBusConnection>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_address_escape_value(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_address_escape_value(
      string,
    );
  }

  late final _g_dbus_address_escape_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_dbus_address_escape_value');
  late final _g_dbus_address_escape_value = _g_dbus_address_escape_valuePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_address(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_address(
      string,
    );
  }

  late final _g_dbus_is_addressPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_address');
  late final _g_dbus_is_address =
      _g_dbus_is_addressPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_supported_address(
    ffi.Pointer<gchar> string,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_is_supported_address(
      string,
      error,
    );
  }

  late final _g_dbus_is_supported_addressPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_is_supported_address');
  late final _g_dbus_is_supported_address =
      _g_dbus_is_supported_addressPtr.asFunction<
          int Function(ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_address_get_stream(
    ffi.Pointer<gchar> address,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_address_get_stream(
      address,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_address_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gchar>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_dbus_address_get_stream');
  late final _g_dbus_address_get_stream =
      _g_dbus_address_get_streamPtr.asFunction<
          void Function(ffi.Pointer<gchar>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GIOStream> g_dbus_address_get_stream_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<gchar>> out_guid,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_address_get_stream_finish(
      res,
      out_guid,
      error,
    );
  }

  late final _g_dbus_address_get_stream_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOStream> Function(
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_address_get_stream_finish');
  late final _g_dbus_address_get_stream_finish =
      _g_dbus_address_get_stream_finishPtr.asFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GIOStream> g_dbus_address_get_stream_sync(
    ffi.Pointer<gchar> address,
    ffi.Pointer<ffi.Pointer<gchar>> out_guid,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_address_get_stream_sync(
      address,
      out_guid,
      cancellable,
      error,
    );
  }

  late final _g_dbus_address_get_stream_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOStream> Function(
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_address_get_stream_sync');
  late final _g_dbus_address_get_stream_sync =
      _g_dbus_address_get_stream_syncPtr.asFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_dbus_address_get_for_bus_sync(
    int bus_type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_address_get_for_bus_sync(
      bus_type,
      cancellable,
      error,
    );
  }

  late final _g_dbus_address_get_for_bus_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Int32, ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_address_get_for_bus_sync');
  late final _g_dbus_address_get_for_bus_sync =
      _g_dbus_address_get_for_bus_syncPtr.asFunction<
          ffi.Pointer<gchar> Function(int, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_auth_observer_get_type() {
    return _g_dbus_auth_observer_get_type();
  }

  late final _g_dbus_auth_observer_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_auth_observer_get_type');
  late final _g_dbus_auth_observer_get_type =
      _g_dbus_auth_observer_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusAuthObserver> g_dbus_auth_observer_new() {
    return _g_dbus_auth_observer_new();
  }

  late final _g_dbus_auth_observer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDBusAuthObserver> Function()>>(
          'g_dbus_auth_observer_new');
  late final _g_dbus_auth_observer_new = _g_dbus_auth_observer_newPtr
      .asFunction<ffi.Pointer<GDBusAuthObserver> Function()>();

  int g_dbus_auth_observer_authorize_authenticated_peer(
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<GCredentials> credentials,
  ) {
    return _g_dbus_auth_observer_authorize_authenticated_peer(
      observer,
      stream,
      credentials,
    );
  }

  late final _g_dbus_auth_observer_authorize_authenticated_peerPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDBusAuthObserver>,
                  ffi.Pointer<GIOStream>, ffi.Pointer<GCredentials>)>>(
      'g_dbus_auth_observer_authorize_authenticated_peer');
  late final _g_dbus_auth_observer_authorize_authenticated_peer =
      _g_dbus_auth_observer_authorize_authenticated_peerPtr.asFunction<
          int Function(ffi.Pointer<GDBusAuthObserver>, ffi.Pointer<GIOStream>,
              ffi.Pointer<GCredentials>)>();

  int g_dbus_auth_observer_allow_mechanism(
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<gchar> mechanism,
  ) {
    return _g_dbus_auth_observer_allow_mechanism(
      observer,
      mechanism,
    );
  }

  late final _g_dbus_auth_observer_allow_mechanismPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<gchar>)>>('g_dbus_auth_observer_allow_mechanism');
  late final _g_dbus_auth_observer_allow_mechanism =
      _g_dbus_auth_observer_allow_mechanismPtr.asFunction<
          int Function(ffi.Pointer<GDBusAuthObserver>, ffi.Pointer<gchar>)>();

  int g_dbus_connection_get_type() {
    return _g_dbus_connection_get_type();
  }

  late final _g_dbus_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_connection_get_type');
  late final _g_dbus_connection_get_type =
      _g_dbus_connection_get_typePtr.asFunction<int Function()>();

  void g_bus_get(
    int bus_type,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_bus_get(
      bus_type,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_bus_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_bus_get');
  late final _g_bus_get = _g_bus_getPtr.asFunction<
      void Function(
          int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GDBusConnection> g_bus_get_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bus_get_finish(
      res,
      error,
    );
  }

  late final _g_bus_get_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusConnection> Function(ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bus_get_finish');
  late final _g_bus_get_finish = _g_bus_get_finishPtr.asFunction<
      ffi.Pointer<GDBusConnection> Function(
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusConnection> g_bus_get_sync(
    int bus_type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bus_get_sync(
      bus_type,
      cancellable,
      error,
    );
  }

  late final _g_bus_get_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bus_get_sync');
  late final _g_bus_get_sync = _g_bus_get_syncPtr.asFunction<
      ffi.Pointer<GDBusConnection> Function(
          int, ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_new(
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<gchar> guid,
    int flags,
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_new(
      stream,
      guid,
      flags,
      observer,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_new');
  late final _g_dbus_connection_new = _g_dbus_connection_newPtr.asFunction<
      void Function(
          ffi.Pointer<GIOStream>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<GDBusAuthObserver>,
          ffi.Pointer<GCancellable>,
          GAsyncReadyCallback,
          gpointer)>();

  ffi.Pointer<GDBusConnection> g_dbus_connection_new_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_new_finish(
      res,
      error,
    );
  }

  late final _g_dbus_connection_new_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_new_finish');
  late final _g_dbus_connection_new_finish =
      _g_dbus_connection_new_finishPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusConnection> g_dbus_connection_new_sync(
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<gchar> guid,
    int flags,
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_new_sync(
      stream,
      guid,
      flags,
      observer,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_new_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_connection_new_sync');
  late final _g_dbus_connection_new_sync =
      _g_dbus_connection_new_syncPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_new_for_address(
    ffi.Pointer<gchar> address,
    int flags,
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_new_for_address(
      address,
      flags,
      observer,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_new_for_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_new_for_address');
  late final _g_dbus_connection_new_for_address =
      _g_dbus_connection_new_for_addressPtr.asFunction<
          void Function(ffi.Pointer<gchar>, int, ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GDBusConnection> g_dbus_connection_new_for_address_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_new_for_address_finish(
      res,
      error,
    );
  }

  late final _g_dbus_connection_new_for_address_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_new_for_address_finish');
  late final _g_dbus_connection_new_for_address_finish =
      _g_dbus_connection_new_for_address_finishPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusConnection> g_dbus_connection_new_for_address_sync(
    ffi.Pointer<gchar> address,
    int flags,
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_new_for_address_sync(
      address,
      flags,
      observer,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_new_for_address_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<gchar>,
                  ffi.Int32,
                  ffi.Pointer<GDBusAuthObserver>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_new_for_address_sync');
  late final _g_dbus_connection_new_for_address_sync =
      _g_dbus_connection_new_for_address_syncPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_start_message_processing(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_start_message_processing(
      connection,
    );
  }

  late final _g_dbus_connection_start_message_processingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_start_message_processing');
  late final _g_dbus_connection_start_message_processing =
      _g_dbus_connection_start_message_processingPtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>)>();

  int g_dbus_connection_is_closed(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_is_closed(
      connection,
    );
  }

  late final _g_dbus_connection_is_closedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_is_closed');
  late final _g_dbus_connection_is_closed = _g_dbus_connection_is_closedPtr
      .asFunction<int Function(ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<GIOStream> g_dbus_connection_get_stream(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_stream(
      connection,
    );
  }

  late final _g_dbus_connection_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GDBusConnection>)>>('g_dbus_connection_get_stream');
  late final _g_dbus_connection_get_stream =
      _g_dbus_connection_get_streamPtr.asFunction<
          ffi.Pointer<GIOStream> Function(ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<gchar> g_dbus_connection_get_guid(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_guid(
      connection,
    );
  }

  late final _g_dbus_connection_get_guidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusConnection>)>>('g_dbus_connection_get_guid');
  late final _g_dbus_connection_get_guid = _g_dbus_connection_get_guidPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<gchar> g_dbus_connection_get_unique_name(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_unique_name(
      connection,
    );
  }

  late final _g_dbus_connection_get_unique_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_unique_name');
  late final _g_dbus_connection_get_unique_name =
      _g_dbus_connection_get_unique_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<GCredentials> g_dbus_connection_get_peer_credentials(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_peer_credentials(
      connection,
    );
  }

  late final _g_dbus_connection_get_peer_credentialsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GCredentials> Function(
                  ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_peer_credentials');
  late final _g_dbus_connection_get_peer_credentials =
      _g_dbus_connection_get_peer_credentialsPtr.asFunction<
          ffi.Pointer<GCredentials> Function(ffi.Pointer<GDBusConnection>)>();

  int g_dbus_connection_get_last_serial(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_last_serial(
      connection,
    );
  }

  late final _g_dbus_connection_get_last_serialPtr = _lookup<
          ffi.NativeFunction<guint32 Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_last_serial');
  late final _g_dbus_connection_get_last_serial =
      _g_dbus_connection_get_last_serialPtr
          .asFunction<int Function(ffi.Pointer<GDBusConnection>)>();

  int g_dbus_connection_get_exit_on_close(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_exit_on_close(
      connection,
    );
  }

  late final _g_dbus_connection_get_exit_on_closePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_exit_on_close');
  late final _g_dbus_connection_get_exit_on_close =
      _g_dbus_connection_get_exit_on_closePtr
          .asFunction<int Function(ffi.Pointer<GDBusConnection>)>();

  void g_dbus_connection_set_exit_on_close(
    ffi.Pointer<GDBusConnection> connection,
    int exit_on_close,
  ) {
    return _g_dbus_connection_set_exit_on_close(
      connection,
      exit_on_close,
    );
  }

  late final _g_dbus_connection_set_exit_on_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusConnection>,
              gboolean)>>('g_dbus_connection_set_exit_on_close');
  late final _g_dbus_connection_set_exit_on_close =
      _g_dbus_connection_set_exit_on_closePtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_dbus_connection_get_capabilities(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_capabilities(
      connection,
    );
  }

  late final _g_dbus_connection_get_capabilitiesPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_capabilities');
  late final _g_dbus_connection_get_capabilities =
      _g_dbus_connection_get_capabilitiesPtr
          .asFunction<int Function(ffi.Pointer<GDBusConnection>)>();

  int g_dbus_connection_get_flags(
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_connection_get_flags(
      connection,
    );
  }

  late final _g_dbus_connection_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_connection_get_flags');
  late final _g_dbus_connection_get_flags = _g_dbus_connection_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GDBusConnection>)>();

  void g_dbus_connection_close(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_close(
      connection,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_close');
  late final _g_dbus_connection_close = _g_dbus_connection_closePtr.asFunction<
      void Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_dbus_connection_close_finish(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_close_finish(
      connection,
      res,
      error,
    );
  }

  late final _g_dbus_connection_close_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_close_finish');
  late final _g_dbus_connection_close_finish =
      _g_dbus_connection_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_close_sync(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_close_sync(
      connection,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_close_syncPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_close_sync');
  late final _g_dbus_connection_close_sync =
      _g_dbus_connection_close_syncPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_flush(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_flush(
      connection,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_flush');
  late final _g_dbus_connection_flush = _g_dbus_connection_flushPtr.asFunction<
      void Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_dbus_connection_flush_finish(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_flush_finish(
      connection,
      res,
      error,
    );
  }

  late final _g_dbus_connection_flush_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_flush_finish');
  late final _g_dbus_connection_flush_finish =
      _g_dbus_connection_flush_finishPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_flush_sync(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_flush_sync(
      connection,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_flush_syncPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_flush_sync');
  late final _g_dbus_connection_flush_sync =
      _g_dbus_connection_flush_syncPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_send_message(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GDBusMessage> message,
    int flags,
    ffi.Pointer<guint32> out_serial,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_send_message(
      connection,
      message,
      flags,
      out_serial,
      error,
    );
  }

  late final _g_dbus_connection_send_messagePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GDBusMessage>,
                  ffi.Int32,
                  ffi.Pointer<guint32>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_send_message');
  late final _g_dbus_connection_send_message =
      _g_dbus_connection_send_messagePtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<GDBusMessage>,
              int, ffi.Pointer<guint32>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_send_message_with_reply(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GDBusMessage> message,
    int flags,
    int timeout_msec,
    ffi.Pointer<guint32> out_serial,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_send_message_with_reply(
      connection,
      message,
      flags,
      timeout_msec,
      out_serial,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_send_message_with_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GDBusMessage>,
              ffi.Int32,
              gint,
              ffi.Pointer<guint32>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_send_message_with_reply');
  late final _g_dbus_connection_send_message_with_reply =
      _g_dbus_connection_send_message_with_replyPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GDBusMessage>,
              int,
              int,
              ffi.Pointer<guint32>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GDBusMessage> g_dbus_connection_send_message_with_reply_finish(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_send_message_with_reply_finish(
      connection,
      res,
      error,
    );
  }

  late final _g_dbus_connection_send_message_with_reply_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMessage> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_send_message_with_reply_finish');
  late final _g_dbus_connection_send_message_with_reply_finish =
      _g_dbus_connection_send_message_with_reply_finishPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusMessage> g_dbus_connection_send_message_with_reply_sync(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GDBusMessage> message,
    int flags,
    int timeout_msec,
    ffi.Pointer<guint32> out_serial,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_send_message_with_reply_sync(
      connection,
      message,
      flags,
      timeout_msec,
      out_serial,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_send_message_with_reply_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMessage> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GDBusMessage>,
                  ffi.Int32,
                  gint,
                  ffi.Pointer<guint32>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_send_message_with_reply_sync');
  late final _g_dbus_connection_send_message_with_reply_sync =
      _g_dbus_connection_send_message_with_reply_syncPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GDBusMessage>,
              int,
              int,
              ffi.Pointer<guint32>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_emit_signal(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> destination_bus_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> signal_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_emit_signal(
      connection,
      destination_bus_name,
      object_path,
      interface_name,
      signal_name,
      parameters,
      error,
    );
  }

  late final _g_dbus_connection_emit_signalPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_emit_signal');
  late final _g_dbus_connection_emit_signal =
      _g_dbus_connection_emit_signalPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_call(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GVariantType> reply_type,
    int flags,
    int timeout_msec,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_call(
      connection,
      bus_name,
      object_path,
      interface_name,
      method_name,
      parameters,
      reply_type,
      flags,
      timeout_msec,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>,
              ffi.Int32,
              gint,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_call');
  late final _g_dbus_connection_call = _g_dbus_connection_callPtr.asFunction<
      void Function(
          ffi.Pointer<GDBusConnection>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GVariant>,
          ffi.Pointer<GVariantType>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          GAsyncReadyCallback,
          gpointer)>();

  ffi.Pointer<GVariant> g_dbus_connection_call_finish(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_call_finish(
      connection,
      res,
      error,
    );
  }

  late final _g_dbus_connection_call_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_call_finish');
  late final _g_dbus_connection_call_finish =
      _g_dbus_connection_call_finishPtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_dbus_connection_call_sync(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GVariantType> reply_type,
    int flags,
    int timeout_msec,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_call_sync(
      connection,
      bus_name,
      object_path,
      interface_name,
      method_name,
      parameters,
      reply_type,
      flags,
      timeout_msec,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_call_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Pointer<GVariantType>,
                  ffi.Int32,
                  gint,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_call_sync');
  late final _g_dbus_connection_call_sync =
      _g_dbus_connection_call_syncPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_call_with_unix_fd_list(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GVariantType> reply_type,
    int flags,
    int timeout_msec,
    ffi.Pointer<GUnixFDList> fd_list,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_connection_call_with_unix_fd_list(
      connection,
      bus_name,
      object_path,
      interface_name,
      method_name,
      parameters,
      reply_type,
      flags,
      timeout_msec,
      fd_list,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_connection_call_with_unix_fd_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>,
              ffi.Int32,
              gint,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_connection_call_with_unix_fd_list');
  late final _g_dbus_connection_call_with_unix_fd_list =
      _g_dbus_connection_call_with_unix_fd_listPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>,
              int,
              int,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GVariant> g_dbus_connection_call_with_unix_fd_list_finish(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<ffi.Pointer<GUnixFDList>> out_fd_list,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_call_with_unix_fd_list_finish(
      connection,
      out_fd_list,
      res,
      error,
    );
  }

  late final _g_dbus_connection_call_with_unix_fd_list_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<ffi.Pointer<GUnixFDList>>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_call_with_unix_fd_list_finish');
  late final _g_dbus_connection_call_with_unix_fd_list_finish =
      _g_dbus_connection_call_with_unix_fd_list_finishPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<ffi.Pointer<GUnixFDList>>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_dbus_connection_call_with_unix_fd_list_sync(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GVariantType> reply_type,
    int flags,
    int timeout_msec,
    ffi.Pointer<GUnixFDList> fd_list,
    ffi.Pointer<ffi.Pointer<GUnixFDList>> out_fd_list,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_call_with_unix_fd_list_sync(
      connection,
      bus_name,
      object_path,
      interface_name,
      method_name,
      parameters,
      reply_type,
      flags,
      timeout_msec,
      fd_list,
      out_fd_list,
      cancellable,
      error,
    );
  }

  late final _g_dbus_connection_call_with_unix_fd_list_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Pointer<GVariantType>,
                  ffi.Int32,
                  gint,
                  ffi.Pointer<GUnixFDList>,
                  ffi.Pointer<ffi.Pointer<GUnixFDList>>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_call_with_unix_fd_list_sync');
  late final _g_dbus_connection_call_with_unix_fd_list_sync =
      _g_dbus_connection_call_with_unix_fd_list_syncPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>,
              int,
              int,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<ffi.Pointer<GUnixFDList>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_register_object(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<GDBusInterfaceInfo> interface_info,
    ffi.Pointer<GDBusInterfaceVTable> vtable,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_register_object(
      connection,
      object_path,
      interface_info,
      vtable,
      user_data,
      user_data_free_func,
      error,
    );
  }

  late final _g_dbus_connection_register_objectPtr = _lookup<
          ffi.NativeFunction<
              guint Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GDBusInterfaceInfo>,
                  ffi.Pointer<GDBusInterfaceVTable>,
                  gpointer,
                  GDestroyNotify,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_register_object');
  late final _g_dbus_connection_register_object =
      _g_dbus_connection_register_objectPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<GDBusInterfaceVTable>,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_register_object_with_closures(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<GDBusInterfaceInfo> interface_info,
    ffi.Pointer<GClosure> method_call_closure,
    ffi.Pointer<GClosure> get_property_closure,
    ffi.Pointer<GClosure> set_property_closure,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_register_object_with_closures(
      connection,
      object_path,
      interface_info,
      method_call_closure,
      get_property_closure,
      set_property_closure,
      error,
    );
  }

  late final _g_dbus_connection_register_object_with_closuresPtr = _lookup<
          ffi.NativeFunction<
              guint Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GDBusInterfaceInfo>,
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_register_object_with_closures');
  late final _g_dbus_connection_register_object_with_closures =
      _g_dbus_connection_register_object_with_closuresPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_unregister_object(
    ffi.Pointer<GDBusConnection> connection,
    int registration_id,
  ) {
    return _g_dbus_connection_unregister_object(
      connection,
      registration_id,
    );
  }

  late final _g_dbus_connection_unregister_objectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_unregister_object');
  late final _g_dbus_connection_unregister_object =
      _g_dbus_connection_unregister_objectPtr
          .asFunction<int Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_dbus_connection_register_subtree(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<GDBusSubtreeVTable> vtable,
    int flags,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_register_subtree(
      connection,
      object_path,
      vtable,
      flags,
      user_data,
      user_data_free_func,
      error,
    );
  }

  late final _g_dbus_connection_register_subtreePtr = _lookup<
          ffi.NativeFunction<
              guint Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GDBusSubtreeVTable>,
                  ffi.Int32,
                  gpointer,
                  GDestroyNotify,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_register_subtree');
  late final _g_dbus_connection_register_subtree =
      _g_dbus_connection_register_subtreePtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GDBusSubtreeVTable>,
              int,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_connection_unregister_subtree(
    ffi.Pointer<GDBusConnection> connection,
    int registration_id,
  ) {
    return _g_dbus_connection_unregister_subtree(
      connection,
      registration_id,
    );
  }

  late final _g_dbus_connection_unregister_subtreePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_unregister_subtree');
  late final _g_dbus_connection_unregister_subtree =
      _g_dbus_connection_unregister_subtreePtr
          .asFunction<int Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_dbus_connection_signal_subscribe(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> member,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> arg0,
    int flags,
    GDBusSignalCallback callback,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_dbus_connection_signal_subscribe(
      connection,
      sender,
      interface_name,
      member,
      object_path,
      arg0,
      flags,
      callback,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_dbus_connection_signal_subscribePtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GDBusSignalCallback,
              gpointer,
              GDestroyNotify)>>('g_dbus_connection_signal_subscribe');
  late final _g_dbus_connection_signal_subscribe =
      _g_dbus_connection_signal_subscribePtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              int,
              GDBusSignalCallback,
              gpointer,
              GDestroyNotify)>();

  void g_dbus_connection_signal_unsubscribe(
    ffi.Pointer<GDBusConnection> connection,
    int subscription_id,
  ) {
    return _g_dbus_connection_signal_unsubscribe(
      connection,
      subscription_id,
    );
  }

  late final _g_dbus_connection_signal_unsubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_signal_unsubscribe');
  late final _g_dbus_connection_signal_unsubscribe =
      _g_dbus_connection_signal_unsubscribePtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_dbus_connection_add_filter(
    ffi.Pointer<GDBusConnection> connection,
    GDBusMessageFilterFunction filter_function,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_dbus_connection_add_filter(
      connection,
      filter_function,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_dbus_connection_add_filterPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<GDBusConnection>,
              GDBusMessageFilterFunction,
              gpointer,
              GDestroyNotify)>>('g_dbus_connection_add_filter');
  late final _g_dbus_connection_add_filter =
      _g_dbus_connection_add_filterPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, GDBusMessageFilterFunction,
              gpointer, GDestroyNotify)>();

  void g_dbus_connection_remove_filter(
    ffi.Pointer<GDBusConnection> connection,
    int filter_id,
  ) {
    return _g_dbus_connection_remove_filter(
      connection,
      filter_id,
    );
  }

  late final _g_dbus_connection_remove_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_remove_filter');
  late final _g_dbus_connection_remove_filter =
      _g_dbus_connection_remove_filterPtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_dbus_error_quark() {
    return _g_dbus_error_quark();
  }

  late final _g_dbus_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_dbus_error_quark');
  late final _g_dbus_error_quark =
      _g_dbus_error_quarkPtr.asFunction<int Function()>();

  int g_dbus_error_is_remote_error(
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_error_is_remote_error(
      error,
    );
  }

  late final _g_dbus_error_is_remote_errorPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GError>)>>(
          'g_dbus_error_is_remote_error');
  late final _g_dbus_error_is_remote_error = _g_dbus_error_is_remote_errorPtr
      .asFunction<int Function(ffi.Pointer<GError>)>();

  ffi.Pointer<gchar> g_dbus_error_get_remote_error(
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_error_get_remote_error(
      error,
    );
  }

  late final _g_dbus_error_get_remote_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GError>)>>(
      'g_dbus_error_get_remote_error');
  late final _g_dbus_error_get_remote_error = _g_dbus_error_get_remote_errorPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GError>)>();

  int g_dbus_error_strip_remote_error(
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_error_strip_remote_error(
      error,
    );
  }

  late final _g_dbus_error_strip_remote_errorPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GError>)>>(
          'g_dbus_error_strip_remote_error');
  late final _g_dbus_error_strip_remote_error =
      _g_dbus_error_strip_remote_errorPtr
          .asFunction<int Function(ffi.Pointer<GError>)>();

  int g_dbus_error_register_error(
    int error_domain,
    int error_code,
    ffi.Pointer<gchar> dbus_error_name,
  ) {
    return _g_dbus_error_register_error(
      error_domain,
      error_code,
      dbus_error_name,
    );
  }

  late final _g_dbus_error_register_errorPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(GQuark, gint, ffi.Pointer<gchar>)>>(
      'g_dbus_error_register_error');
  late final _g_dbus_error_register_error = _g_dbus_error_register_errorPtr
      .asFunction<int Function(int, int, ffi.Pointer<gchar>)>();

  int g_dbus_error_unregister_error(
    int error_domain,
    int error_code,
    ffi.Pointer<gchar> dbus_error_name,
  ) {
    return _g_dbus_error_unregister_error(
      error_domain,
      error_code,
      dbus_error_name,
    );
  }

  late final _g_dbus_error_unregister_errorPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(GQuark, gint, ffi.Pointer<gchar>)>>(
      'g_dbus_error_unregister_error');
  late final _g_dbus_error_unregister_error = _g_dbus_error_unregister_errorPtr
      .asFunction<int Function(int, int, ffi.Pointer<gchar>)>();

  void g_dbus_error_register_error_domain(
    ffi.Pointer<gchar> error_domain_quark_name,
    ffi.Pointer<gsize> quark_volatile,
    ffi.Pointer<GDBusErrorEntry> entries,
    int num_entries,
  ) {
    return _g_dbus_error_register_error_domain(
      error_domain_quark_name,
      quark_volatile,
      entries,
      num_entries,
    );
  }

  late final _g_dbus_error_register_error_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gsize>,
              ffi.Pointer<GDBusErrorEntry>,
              guint)>>('g_dbus_error_register_error_domain');
  late final _g_dbus_error_register_error_domain =
      _g_dbus_error_register_error_domainPtr.asFunction<
          void Function(ffi.Pointer<gchar>, ffi.Pointer<gsize>,
              ffi.Pointer<GDBusErrorEntry>, int)>();

  ffi.Pointer<GError> g_dbus_error_new_for_dbus_error(
    ffi.Pointer<gchar> dbus_error_name,
    ffi.Pointer<gchar> dbus_error_message,
  ) {
    return _g_dbus_error_new_for_dbus_error(
      dbus_error_name,
      dbus_error_message,
    );
  }

  late final _g_dbus_error_new_for_dbus_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_error_new_for_dbus_error');
  late final _g_dbus_error_new_for_dbus_error =
      _g_dbus_error_new_for_dbus_errorPtr.asFunction<
          ffi.Pointer<GError> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_dbus_error_set_dbus_error(
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> dbus_error_name,
    ffi.Pointer<gchar> dbus_error_message,
    ffi.Pointer<gchar> format,
  ) {
    return _g_dbus_error_set_dbus_error(
      error,
      dbus_error_name,
      dbus_error_message,
      format,
    );
  }

  late final _g_dbus_error_set_dbus_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_error_set_dbus_error');
  late final _g_dbus_error_set_dbus_error =
      _g_dbus_error_set_dbus_errorPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_dbus_error_set_dbus_error_valist(
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> dbus_error_name,
    ffi.Pointer<gchar> dbus_error_message,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_dbus_error_set_dbus_error_valist(
      error,
      dbus_error_name,
      dbus_error_message,
      format,
      var_args,
    );
  }

  late final _g_dbus_error_set_dbus_error_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<GError>>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<__va_list_tag>)>>(
      'g_dbus_error_set_dbus_error_valist');
  late final _g_dbus_error_set_dbus_error_valist =
      _g_dbus_error_set_dbus_error_valistPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<gchar> g_dbus_error_encode_gerror(
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_error_encode_gerror(
      error,
    );
  }

  late final _g_dbus_error_encode_gerrorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GError>)>>(
      'g_dbus_error_encode_gerror');
  late final _g_dbus_error_encode_gerror = _g_dbus_error_encode_gerrorPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GError>)>();

  int g_dbus_interface_get_type() {
    return _g_dbus_interface_get_type();
  }

  late final _g_dbus_interface_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_interface_get_type');
  late final _g_dbus_interface_get_type =
      _g_dbus_interface_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusInterfaceInfo> g_dbus_interface_get_info(
    ffi.Pointer<GDBusInterface> interface_,
  ) {
    return _g_dbus_interface_get_info(
      interface_,
    );
  }

  late final _g_dbus_interface_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterface>)>>('g_dbus_interface_get_info');
  late final _g_dbus_interface_get_info =
      _g_dbus_interface_get_infoPtr.asFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterface>)>();

  ffi.Pointer<GDBusObject> g_dbus_interface_get_object(
    ffi.Pointer<GDBusInterface> interface_,
  ) {
    return _g_dbus_interface_get_object(
      interface_,
    );
  }

  late final _g_dbus_interface_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusInterface>)>>('g_dbus_interface_get_object');
  late final _g_dbus_interface_get_object =
      _g_dbus_interface_get_objectPtr.asFunction<
          ffi.Pointer<GDBusObject> Function(ffi.Pointer<GDBusInterface>)>();

  void g_dbus_interface_set_object(
    ffi.Pointer<GDBusInterface> interface_,
    ffi.Pointer<GDBusObject> object,
  ) {
    return _g_dbus_interface_set_object(
      interface_,
      object,
    );
  }

  late final _g_dbus_interface_set_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusInterface>,
              ffi.Pointer<GDBusObject>)>>('g_dbus_interface_set_object');
  late final _g_dbus_interface_set_object =
      _g_dbus_interface_set_objectPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusInterface>, ffi.Pointer<GDBusObject>)>();

  ffi.Pointer<GDBusObject> g_dbus_interface_dup_object(
    ffi.Pointer<GDBusInterface> interface_,
  ) {
    return _g_dbus_interface_dup_object(
      interface_,
    );
  }

  late final _g_dbus_interface_dup_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusInterface>)>>('g_dbus_interface_dup_object');
  late final _g_dbus_interface_dup_object =
      _g_dbus_interface_dup_objectPtr.asFunction<
          ffi.Pointer<GDBusObject> Function(ffi.Pointer<GDBusInterface>)>();

  int g_dbus_interface_skeleton_get_type() {
    return _g_dbus_interface_skeleton_get_type();
  }

  late final _g_dbus_interface_skeleton_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_interface_skeleton_get_type');
  late final _g_dbus_interface_skeleton_get_type =
      _g_dbus_interface_skeleton_get_typePtr.asFunction<int Function()>();

  int g_dbus_interface_skeleton_get_flags(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_flags(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_flags');
  late final _g_dbus_interface_skeleton_get_flags =
      _g_dbus_interface_skeleton_get_flagsPtr
          .asFunction<int Function(ffi.Pointer<GDBusInterfaceSkeleton>)>();

  void g_dbus_interface_skeleton_set_flags(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
    int flags,
  ) {
    return _g_dbus_interface_skeleton_set_flags(
      interface_,
      flags,
    );
  }

  late final _g_dbus_interface_skeleton_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusInterfaceSkeleton>,
              ffi.Int32)>>('g_dbus_interface_skeleton_set_flags');
  late final _g_dbus_interface_skeleton_set_flags =
      _g_dbus_interface_skeleton_set_flagsPtr.asFunction<
          void Function(ffi.Pointer<GDBusInterfaceSkeleton>, int)>();

  ffi.Pointer<GDBusInterfaceInfo> g_dbus_interface_skeleton_get_info(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_info(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusInterfaceInfo> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_info');
  late final _g_dbus_interface_skeleton_get_info =
      _g_dbus_interface_skeleton_get_infoPtr.asFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  ffi.Pointer<GDBusInterfaceVTable> g_dbus_interface_skeleton_get_vtable(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_vtable(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_vtablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusInterfaceVTable> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_vtable');
  late final _g_dbus_interface_skeleton_get_vtable =
      _g_dbus_interface_skeleton_get_vtablePtr.asFunction<
          ffi.Pointer<GDBusInterfaceVTable> Function(
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  ffi.Pointer<GVariant> g_dbus_interface_skeleton_get_properties(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_properties(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_properties');
  late final _g_dbus_interface_skeleton_get_properties =
      _g_dbus_interface_skeleton_get_propertiesPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  void g_dbus_interface_skeleton_flush(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_flush(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_flushPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_flush');
  late final _g_dbus_interface_skeleton_flush =
      _g_dbus_interface_skeleton_flushPtr
          .asFunction<void Function(ffi.Pointer<GDBusInterfaceSkeleton>)>();

  int g_dbus_interface_skeleton_export(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_interface_skeleton_export(
      interface_,
      connection,
      object_path,
      error,
    );
  }

  late final _g_dbus_interface_skeleton_exportPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>,
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_interface_skeleton_export');
  late final _g_dbus_interface_skeleton_export =
      _g_dbus_interface_skeleton_exportPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusInterfaceSkeleton>,
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_interface_skeleton_unexport(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_unexport(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_unexportPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_unexport');
  late final _g_dbus_interface_skeleton_unexport =
      _g_dbus_interface_skeleton_unexportPtr
          .asFunction<void Function(ffi.Pointer<GDBusInterfaceSkeleton>)>();

  void g_dbus_interface_skeleton_unexport_from_connection(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_interface_skeleton_unexport_from_connection(
      interface_,
      connection,
    );
  }

  late final _g_dbus_interface_skeleton_unexport_from_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusInterfaceSkeleton>,
                  ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_interface_skeleton_unexport_from_connection');
  late final _g_dbus_interface_skeleton_unexport_from_connection =
      _g_dbus_interface_skeleton_unexport_from_connectionPtr.asFunction<
          void Function(ffi.Pointer<GDBusInterfaceSkeleton>,
              ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<GDBusConnection> g_dbus_interface_skeleton_get_connection(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_connection(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_connection');
  late final _g_dbus_interface_skeleton_get_connection =
      _g_dbus_interface_skeleton_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  ffi.Pointer<GList> g_dbus_interface_skeleton_get_connections(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_connections(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_connectionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_connections');
  late final _g_dbus_interface_skeleton_get_connections =
      _g_dbus_interface_skeleton_get_connectionsPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GDBusInterfaceSkeleton>)>();

  int g_dbus_interface_skeleton_has_connection(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_interface_skeleton_has_connection(
      interface_,
      connection,
    );
  }

  late final _g_dbus_interface_skeleton_has_connectionPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDBusInterfaceSkeleton>,
                  ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_interface_skeleton_has_connection');
  late final _g_dbus_interface_skeleton_has_connection =
      _g_dbus_interface_skeleton_has_connectionPtr.asFunction<
          int Function(ffi.Pointer<GDBusInterfaceSkeleton>,
              ffi.Pointer<GDBusConnection>)>();

  ffi.Pointer<gchar> g_dbus_interface_skeleton_get_object_path(
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_interface_skeleton_get_object_path(
      interface_,
    );
  }

  late final _g_dbus_interface_skeleton_get_object_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_interface_skeleton_get_object_path');
  late final _g_dbus_interface_skeleton_get_object_path =
      _g_dbus_interface_skeleton_get_object_pathPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusInterfaceSkeleton>)>();

  ffi.Pointer<gchar> g_dbus_annotation_info_lookup(
    ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations,
    ffi.Pointer<gchar> name,
  ) {
    return _g_dbus_annotation_info_lookup(
      annotations,
      name,
    );
  }

  late final _g_dbus_annotation_info_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>>,
              ffi.Pointer<gchar>)>>('g_dbus_annotation_info_lookup');
  late final _g_dbus_annotation_info_lookup =
      _g_dbus_annotation_info_lookupPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusMethodInfo> g_dbus_interface_info_lookup_method(
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
  ) {
    return _g_dbus_interface_info_lookup_method(
      info,
      name,
    );
  }

  late final _g_dbus_interface_info_lookup_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMethodInfo> Function(ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>)>>('g_dbus_interface_info_lookup_method');
  late final _g_dbus_interface_info_lookup_method =
      _g_dbus_interface_info_lookup_methodPtr.asFunction<
          ffi.Pointer<GDBusMethodInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusSignalInfo> g_dbus_interface_info_lookup_signal(
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
  ) {
    return _g_dbus_interface_info_lookup_signal(
      info,
      name,
    );
  }

  late final _g_dbus_interface_info_lookup_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusSignalInfo> Function(ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>)>>('g_dbus_interface_info_lookup_signal');
  late final _g_dbus_interface_info_lookup_signal =
      _g_dbus_interface_info_lookup_signalPtr.asFunction<
          ffi.Pointer<GDBusSignalInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusPropertyInfo> g_dbus_interface_info_lookup_property(
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
  ) {
    return _g_dbus_interface_info_lookup_property(
      info,
      name,
    );
  }

  late final _g_dbus_interface_info_lookup_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusPropertyInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>)>>('g_dbus_interface_info_lookup_property');
  late final _g_dbus_interface_info_lookup_property =
      _g_dbus_interface_info_lookup_propertyPtr.asFunction<
          ffi.Pointer<GDBusPropertyInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>, ffi.Pointer<gchar>)>();

  void g_dbus_interface_info_cache_build(
    ffi.Pointer<GDBusInterfaceInfo> info,
  ) {
    return _g_dbus_interface_info_cache_build(
      info,
    );
  }

  late final _g_dbus_interface_info_cache_buildPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusInterfaceInfo>)>>(
      'g_dbus_interface_info_cache_build');
  late final _g_dbus_interface_info_cache_build =
      _g_dbus_interface_info_cache_buildPtr
          .asFunction<void Function(ffi.Pointer<GDBusInterfaceInfo>)>();

  void g_dbus_interface_info_cache_release(
    ffi.Pointer<GDBusInterfaceInfo> info,
  ) {
    return _g_dbus_interface_info_cache_release(
      info,
    );
  }

  late final _g_dbus_interface_info_cache_releasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusInterfaceInfo>)>>(
      'g_dbus_interface_info_cache_release');
  late final _g_dbus_interface_info_cache_release =
      _g_dbus_interface_info_cache_releasePtr
          .asFunction<void Function(ffi.Pointer<GDBusInterfaceInfo>)>();

  void g_dbus_interface_info_generate_xml(
    ffi.Pointer<GDBusInterfaceInfo> info,
    int indent,
    ffi.Pointer<GString> string_builder,
  ) {
    return _g_dbus_interface_info_generate_xml(
      info,
      indent,
      string_builder,
    );
  }

  late final _g_dbus_interface_info_generate_xmlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusInterfaceInfo>, guint,
              ffi.Pointer<GString>)>>('g_dbus_interface_info_generate_xml');
  late final _g_dbus_interface_info_generate_xml =
      _g_dbus_interface_info_generate_xmlPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusInterfaceInfo>, int, ffi.Pointer<GString>)>();

  ffi.Pointer<GDBusNodeInfo> g_dbus_node_info_new_for_xml(
    ffi.Pointer<gchar> xml_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_node_info_new_for_xml(
      xml_data,
      error,
    );
  }

  late final _g_dbus_node_info_new_for_xmlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusNodeInfo> Function(
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_node_info_new_for_xml');
  late final _g_dbus_node_info_new_for_xml =
      _g_dbus_node_info_new_for_xmlPtr.asFunction<
          ffi.Pointer<GDBusNodeInfo> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusInterfaceInfo> g_dbus_node_info_lookup_interface(
    ffi.Pointer<GDBusNodeInfo> info,
    ffi.Pointer<gchar> name,
  ) {
    return _g_dbus_node_info_lookup_interface(
      info,
      name,
    );
  }

  late final _g_dbus_node_info_lookup_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(ffi.Pointer<GDBusNodeInfo>,
              ffi.Pointer<gchar>)>>('g_dbus_node_info_lookup_interface');
  late final _g_dbus_node_info_lookup_interface =
      _g_dbus_node_info_lookup_interfacePtr.asFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusNodeInfo>, ffi.Pointer<gchar>)>();

  void g_dbus_node_info_generate_xml(
    ffi.Pointer<GDBusNodeInfo> info,
    int indent,
    ffi.Pointer<GString> string_builder,
  ) {
    return _g_dbus_node_info_generate_xml(
      info,
      indent,
      string_builder,
    );
  }

  late final _g_dbus_node_info_generate_xmlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusNodeInfo>, guint,
              ffi.Pointer<GString>)>>('g_dbus_node_info_generate_xml');
  late final _g_dbus_node_info_generate_xml =
      _g_dbus_node_info_generate_xmlPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusNodeInfo>, int, ffi.Pointer<GString>)>();

  ffi.Pointer<GDBusNodeInfo> g_dbus_node_info_ref(
    ffi.Pointer<GDBusNodeInfo> info,
  ) {
    return _g_dbus_node_info_ref(
      info,
    );
  }

  late final _g_dbus_node_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusNodeInfo> Function(
              ffi.Pointer<GDBusNodeInfo>)>>('g_dbus_node_info_ref');
  late final _g_dbus_node_info_ref = _g_dbus_node_info_refPtr.asFunction<
      ffi.Pointer<GDBusNodeInfo> Function(ffi.Pointer<GDBusNodeInfo>)>();

  ffi.Pointer<GDBusInterfaceInfo> g_dbus_interface_info_ref(
    ffi.Pointer<GDBusInterfaceInfo> info,
  ) {
    return _g_dbus_interface_info_ref(
      info,
    );
  }

  late final _g_dbus_interface_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>)>>('g_dbus_interface_info_ref');
  late final _g_dbus_interface_info_ref =
      _g_dbus_interface_info_refPtr.asFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterfaceInfo>)>();

  ffi.Pointer<GDBusMethodInfo> g_dbus_method_info_ref(
    ffi.Pointer<GDBusMethodInfo> info,
  ) {
    return _g_dbus_method_info_ref(
      info,
    );
  }

  late final _g_dbus_method_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMethodInfo> Function(
              ffi.Pointer<GDBusMethodInfo>)>>('g_dbus_method_info_ref');
  late final _g_dbus_method_info_ref = _g_dbus_method_info_refPtr.asFunction<
      ffi.Pointer<GDBusMethodInfo> Function(ffi.Pointer<GDBusMethodInfo>)>();

  ffi.Pointer<GDBusSignalInfo> g_dbus_signal_info_ref(
    ffi.Pointer<GDBusSignalInfo> info,
  ) {
    return _g_dbus_signal_info_ref(
      info,
    );
  }

  late final _g_dbus_signal_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusSignalInfo> Function(
              ffi.Pointer<GDBusSignalInfo>)>>('g_dbus_signal_info_ref');
  late final _g_dbus_signal_info_ref = _g_dbus_signal_info_refPtr.asFunction<
      ffi.Pointer<GDBusSignalInfo> Function(ffi.Pointer<GDBusSignalInfo>)>();

  ffi.Pointer<GDBusPropertyInfo> g_dbus_property_info_ref(
    ffi.Pointer<GDBusPropertyInfo> info,
  ) {
    return _g_dbus_property_info_ref(
      info,
    );
  }

  late final _g_dbus_property_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusPropertyInfo> Function(
              ffi.Pointer<GDBusPropertyInfo>)>>('g_dbus_property_info_ref');
  late final _g_dbus_property_info_ref =
      _g_dbus_property_info_refPtr.asFunction<
          ffi.Pointer<GDBusPropertyInfo> Function(
              ffi.Pointer<GDBusPropertyInfo>)>();

  ffi.Pointer<GDBusArgInfo> g_dbus_arg_info_ref(
    ffi.Pointer<GDBusArgInfo> info,
  ) {
    return _g_dbus_arg_info_ref(
      info,
    );
  }

  late final _g_dbus_arg_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusArgInfo> Function(
              ffi.Pointer<GDBusArgInfo>)>>('g_dbus_arg_info_ref');
  late final _g_dbus_arg_info_ref = _g_dbus_arg_info_refPtr.asFunction<
      ffi.Pointer<GDBusArgInfo> Function(ffi.Pointer<GDBusArgInfo>)>();

  ffi.Pointer<GDBusAnnotationInfo> g_dbus_annotation_info_ref(
    ffi.Pointer<GDBusAnnotationInfo> info,
  ) {
    return _g_dbus_annotation_info_ref(
      info,
    );
  }

  late final _g_dbus_annotation_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusAnnotationInfo> Function(
              ffi.Pointer<GDBusAnnotationInfo>)>>('g_dbus_annotation_info_ref');
  late final _g_dbus_annotation_info_ref =
      _g_dbus_annotation_info_refPtr.asFunction<
          ffi.Pointer<GDBusAnnotationInfo> Function(
              ffi.Pointer<GDBusAnnotationInfo>)>();

  void g_dbus_node_info_unref(
    ffi.Pointer<GDBusNodeInfo> info,
  ) {
    return _g_dbus_node_info_unref(
      info,
    );
  }

  late final _g_dbus_node_info_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusNodeInfo>)>>(
      'g_dbus_node_info_unref');
  late final _g_dbus_node_info_unref = _g_dbus_node_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusNodeInfo>)>();

  void g_dbus_interface_info_unref(
    ffi.Pointer<GDBusInterfaceInfo> info,
  ) {
    return _g_dbus_interface_info_unref(
      info,
    );
  }

  late final _g_dbus_interface_info_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusInterfaceInfo>)>>(
      'g_dbus_interface_info_unref');
  late final _g_dbus_interface_info_unref = _g_dbus_interface_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusInterfaceInfo>)>();

  void g_dbus_method_info_unref(
    ffi.Pointer<GDBusMethodInfo> info,
  ) {
    return _g_dbus_method_info_unref(
      info,
    );
  }

  late final _g_dbus_method_info_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusMethodInfo>)>>(
      'g_dbus_method_info_unref');
  late final _g_dbus_method_info_unref = _g_dbus_method_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusMethodInfo>)>();

  void g_dbus_signal_info_unref(
    ffi.Pointer<GDBusSignalInfo> info,
  ) {
    return _g_dbus_signal_info_unref(
      info,
    );
  }

  late final _g_dbus_signal_info_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusSignalInfo>)>>(
      'g_dbus_signal_info_unref');
  late final _g_dbus_signal_info_unref = _g_dbus_signal_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusSignalInfo>)>();

  void g_dbus_property_info_unref(
    ffi.Pointer<GDBusPropertyInfo> info,
  ) {
    return _g_dbus_property_info_unref(
      info,
    );
  }

  late final _g_dbus_property_info_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusPropertyInfo>)>>(
      'g_dbus_property_info_unref');
  late final _g_dbus_property_info_unref = _g_dbus_property_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusPropertyInfo>)>();

  void g_dbus_arg_info_unref(
    ffi.Pointer<GDBusArgInfo> info,
  ) {
    return _g_dbus_arg_info_unref(
      info,
    );
  }

  late final _g_dbus_arg_info_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusArgInfo>)>>(
          'g_dbus_arg_info_unref');
  late final _g_dbus_arg_info_unref = _g_dbus_arg_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusArgInfo>)>();

  void g_dbus_annotation_info_unref(
    ffi.Pointer<GDBusAnnotationInfo> info,
  ) {
    return _g_dbus_annotation_info_unref(
      info,
    );
  }

  late final _g_dbus_annotation_info_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusAnnotationInfo>)>>(
      'g_dbus_annotation_info_unref');
  late final _g_dbus_annotation_info_unref = _g_dbus_annotation_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GDBusAnnotationInfo>)>();

  int g_dbus_node_info_get_type() {
    return _g_dbus_node_info_get_type();
  }

  late final _g_dbus_node_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_node_info_get_type');
  late final _g_dbus_node_info_get_type =
      _g_dbus_node_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_interface_info_get_type() {
    return _g_dbus_interface_info_get_type();
  }

  late final _g_dbus_interface_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_interface_info_get_type');
  late final _g_dbus_interface_info_get_type =
      _g_dbus_interface_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_method_info_get_type() {
    return _g_dbus_method_info_get_type();
  }

  late final _g_dbus_method_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_method_info_get_type');
  late final _g_dbus_method_info_get_type =
      _g_dbus_method_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_signal_info_get_type() {
    return _g_dbus_signal_info_get_type();
  }

  late final _g_dbus_signal_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_signal_info_get_type');
  late final _g_dbus_signal_info_get_type =
      _g_dbus_signal_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_property_info_get_type() {
    return _g_dbus_property_info_get_type();
  }

  late final _g_dbus_property_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_property_info_get_type');
  late final _g_dbus_property_info_get_type =
      _g_dbus_property_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_arg_info_get_type() {
    return _g_dbus_arg_info_get_type();
  }

  late final _g_dbus_arg_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_arg_info_get_type');
  late final _g_dbus_arg_info_get_type =
      _g_dbus_arg_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_annotation_info_get_type() {
    return _g_dbus_annotation_info_get_type();
  }

  late final _g_dbus_annotation_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_annotation_info_get_type');
  late final _g_dbus_annotation_info_get_type =
      _g_dbus_annotation_info_get_typePtr.asFunction<int Function()>();

  int g_dbus_menu_model_get_type() {
    return _g_dbus_menu_model_get_type();
  }

  late final _g_dbus_menu_model_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_menu_model_get_type');
  late final _g_dbus_menu_model_get_type =
      _g_dbus_menu_model_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusMenuModel> g_dbus_menu_model_get(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> bus_name,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_menu_model_get(
      connection,
      bus_name,
      object_path,
    );
  }

  late final _g_dbus_menu_model_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMenuModel> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_menu_model_get');
  late final _g_dbus_menu_model_get = _g_dbus_menu_model_getPtr.asFunction<
      ffi.Pointer<GDBusMenuModel> Function(ffi.Pointer<GDBusConnection>,
          ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_dbus_message_get_type() {
    return _g_dbus_message_get_type();
  }

  late final _g_dbus_message_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_message_get_type');
  late final _g_dbus_message_get_type =
      _g_dbus_message_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new() {
    return _g_dbus_message_new();
  }

  late final _g_dbus_message_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDBusMessage> Function()>>(
          'g_dbus_message_new');
  late final _g_dbus_message_new =
      _g_dbus_message_newPtr.asFunction<ffi.Pointer<GDBusMessage> Function()>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_signal(
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> interface_,
    ffi.Pointer<gchar> signal,
  ) {
    return _g_dbus_message_new_signal(
      path,
      interface_,
      signal,
    );
  }

  late final _g_dbus_message_new_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_message_new_signal');
  late final _g_dbus_message_new_signal =
      _g_dbus_message_new_signalPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_method_call(
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> path,
    ffi.Pointer<gchar> interface_,
    ffi.Pointer<gchar> method,
  ) {
    return _g_dbus_message_new_method_call(
      name,
      path,
      interface_,
      method,
    );
  }

  late final _g_dbus_message_new_method_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_message_new_method_call');
  late final _g_dbus_message_new_method_call =
      _g_dbus_message_new_method_callPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_method_reply(
    ffi.Pointer<GDBusMessage> method_call_message,
  ) {
    return _g_dbus_message_new_method_reply(
      method_call_message,
    );
  }

  late final _g_dbus_message_new_method_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_new_method_reply');
  late final _g_dbus_message_new_method_reply =
      _g_dbus_message_new_method_replyPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<GDBusMessage>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_method_error(
    ffi.Pointer<GDBusMessage> method_call_message,
    ffi.Pointer<gchar> error_name,
    ffi.Pointer<gchar> error_message_format,
  ) {
    return _g_dbus_message_new_method_error(
      method_call_message,
      error_name,
      error_message_format,
    );
  }

  late final _g_dbus_message_new_method_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_message_new_method_error');
  late final _g_dbus_message_new_method_error =
      _g_dbus_message_new_method_errorPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_method_error_valist(
    ffi.Pointer<GDBusMessage> method_call_message,
    ffi.Pointer<gchar> error_name,
    ffi.Pointer<gchar> error_message_format,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_dbus_message_new_method_error_valist(
      method_call_message,
      error_name,
      error_message_format,
      var_args,
    );
  }

  late final _g_dbus_message_new_method_error_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMessage> Function(
                  ffi.Pointer<GDBusMessage>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<__va_list_tag>)>>(
      'g_dbus_message_new_method_error_valist');
  late final _g_dbus_message_new_method_error_valist =
      _g_dbus_message_new_method_error_valistPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_method_error_literal(
    ffi.Pointer<GDBusMessage> method_call_message,
    ffi.Pointer<gchar> error_name,
    ffi.Pointer<gchar> error_message,
  ) {
    return _g_dbus_message_new_method_error_literal(
      method_call_message,
      error_name,
      error_message,
    );
  }

  late final _g_dbus_message_new_method_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_message_new_method_error_literal');
  late final _g_dbus_message_new_method_error_literal =
      _g_dbus_message_new_method_error_literalPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_print(
    ffi.Pointer<GDBusMessage> message,
    int indent,
  ) {
    return _g_dbus_message_print(
      message,
      indent,
    );
  }

  late final _g_dbus_message_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>, guint)>>('g_dbus_message_print');
  late final _g_dbus_message_print = _g_dbus_message_printPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>, int)>();

  int g_dbus_message_get_locked(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_locked(
      message,
    );
  }

  late final _g_dbus_message_get_lockedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDBusMessage>)>>(
          'g_dbus_message_get_locked');
  late final _g_dbus_message_get_locked = _g_dbus_message_get_lockedPtr
      .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_lock(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_lock(
      message,
    );
  }

  late final _g_dbus_message_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusMessage>)>>(
          'g_dbus_message_lock');
  late final _g_dbus_message_lock = _g_dbus_message_lockPtr
      .asFunction<void Function(ffi.Pointer<GDBusMessage>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_copy(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_message_copy(
      message,
      error,
    );
  }

  late final _g_dbus_message_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_message_copy');
  late final _g_dbus_message_copy = _g_dbus_message_copyPtr.asFunction<
      ffi.Pointer<GDBusMessage> Function(
          ffi.Pointer<GDBusMessage>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_message_get_byte_order(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_byte_order(
      message,
    );
  }

  late final _g_dbus_message_get_byte_orderPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusMessage>)>>(
      'g_dbus_message_get_byte_order');
  late final _g_dbus_message_get_byte_order = _g_dbus_message_get_byte_orderPtr
      .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_byte_order(
    ffi.Pointer<GDBusMessage> message,
    int byte_order,
  ) {
    return _g_dbus_message_set_byte_order(
      message,
      byte_order,
    );
  }

  late final _g_dbus_message_set_byte_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Int32)>>('g_dbus_message_set_byte_order');
  late final _g_dbus_message_set_byte_order = _g_dbus_message_set_byte_orderPtr
      .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  int g_dbus_message_get_message_type(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_message_type(
      message,
    );
  }

  late final _g_dbus_message_get_message_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusMessage>)>>(
      'g_dbus_message_get_message_type');
  late final _g_dbus_message_get_message_type =
      _g_dbus_message_get_message_typePtr
          .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_message_type(
    ffi.Pointer<GDBusMessage> message,
    int type,
  ) {
    return _g_dbus_message_set_message_type(
      message,
      type,
    );
  }

  late final _g_dbus_message_set_message_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Int32)>>('g_dbus_message_set_message_type');
  late final _g_dbus_message_set_message_type =
      _g_dbus_message_set_message_typePtr
          .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  int g_dbus_message_get_flags(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_flags(
      message,
    );
  }

  late final _g_dbus_message_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusMessage>)>>(
      'g_dbus_message_get_flags');
  late final _g_dbus_message_get_flags = _g_dbus_message_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_flags(
    ffi.Pointer<GDBusMessage> message,
    int flags,
  ) {
    return _g_dbus_message_set_flags(
      message,
      flags,
    );
  }

  late final _g_dbus_message_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Int32)>>('g_dbus_message_set_flags');
  late final _g_dbus_message_set_flags = _g_dbus_message_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  int g_dbus_message_get_serial(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_serial(
      message,
    );
  }

  late final _g_dbus_message_get_serialPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GDBusMessage>)>>(
          'g_dbus_message_get_serial');
  late final _g_dbus_message_get_serial = _g_dbus_message_get_serialPtr
      .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_serial(
    ffi.Pointer<GDBusMessage> message,
    int serial,
  ) {
    return _g_dbus_message_set_serial(
      message,
      serial,
    );
  }

  late final _g_dbus_message_set_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              guint32)>>('g_dbus_message_set_serial');
  late final _g_dbus_message_set_serial = _g_dbus_message_set_serialPtr
      .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  ffi.Pointer<GVariant> g_dbus_message_get_header(
    ffi.Pointer<GDBusMessage> message,
    int header_field,
  ) {
    return _g_dbus_message_get_header(
      message,
      header_field,
    );
  }

  late final _g_dbus_message_get_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusMessage>,
              ffi.Int32)>>('g_dbus_message_get_header');
  late final _g_dbus_message_get_header =
      _g_dbus_message_get_headerPtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusMessage>, int)>();

  void g_dbus_message_set_header(
    ffi.Pointer<GDBusMessage> message,
    int header_field,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_dbus_message_set_header(
      message,
      header_field,
      value,
    );
  }

  late final _g_dbus_message_set_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>, ffi.Int32,
              ffi.Pointer<GVariant>)>>('g_dbus_message_set_header');
  late final _g_dbus_message_set_header =
      _g_dbus_message_set_headerPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusMessage>, int, ffi.Pointer<GVariant>)>();

  ffi.Pointer<guchar> g_dbus_message_get_header_fields(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_header_fields(
      message,
    );
  }

  late final _g_dbus_message_get_header_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_header_fields');
  late final _g_dbus_message_get_header_fields =
      _g_dbus_message_get_header_fieldsPtr.asFunction<
          ffi.Pointer<guchar> Function(ffi.Pointer<GDBusMessage>)>();

  ffi.Pointer<GVariant> g_dbus_message_get_body(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_body(
      message,
    );
  }

  late final _g_dbus_message_get_bodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_body');
  late final _g_dbus_message_get_body = _g_dbus_message_get_bodyPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_body(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<GVariant> body,
  ) {
    return _g_dbus_message_set_body(
      message,
      body,
    );
  }

  late final _g_dbus_message_set_bodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<GVariant>)>>('g_dbus_message_set_body');
  late final _g_dbus_message_set_body = _g_dbus_message_set_bodyPtr.asFunction<
      void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GUnixFDList> g_dbus_message_get_unix_fd_list(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_unix_fd_list(
      message,
    );
  }

  late final _g_dbus_message_get_unix_fd_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUnixFDList> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_unix_fd_list');
  late final _g_dbus_message_get_unix_fd_list =
      _g_dbus_message_get_unix_fd_listPtr.asFunction<
          ffi.Pointer<GUnixFDList> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_unix_fd_list(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<GUnixFDList> fd_list,
  ) {
    return _g_dbus_message_set_unix_fd_list(
      message,
      fd_list,
    );
  }

  late final _g_dbus_message_set_unix_fd_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<GUnixFDList>)>>('g_dbus_message_set_unix_fd_list');
  late final _g_dbus_message_set_unix_fd_list =
      _g_dbus_message_set_unix_fd_listPtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<GUnixFDList>)>();

  int g_dbus_message_get_reply_serial(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_reply_serial(
      message,
    );
  }

  late final _g_dbus_message_get_reply_serialPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GDBusMessage>)>>(
          'g_dbus_message_get_reply_serial');
  late final _g_dbus_message_get_reply_serial =
      _g_dbus_message_get_reply_serialPtr
          .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_reply_serial(
    ffi.Pointer<GDBusMessage> message,
    int value,
  ) {
    return _g_dbus_message_set_reply_serial(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_reply_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              guint32)>>('g_dbus_message_set_reply_serial');
  late final _g_dbus_message_set_reply_serial =
      _g_dbus_message_set_reply_serialPtr
          .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  ffi.Pointer<gchar> g_dbus_message_get_interface(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_interface(
      message,
    );
  }

  late final _g_dbus_message_get_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_interface');
  late final _g_dbus_message_get_interface = _g_dbus_message_get_interfacePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_interface(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_interface(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_interface');
  late final _g_dbus_message_set_interface =
      _g_dbus_message_set_interfacePtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_member(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_member(
      message,
    );
  }

  late final _g_dbus_message_get_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_member');
  late final _g_dbus_message_get_member = _g_dbus_message_get_memberPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_member(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_member(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_memberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_member');
  late final _g_dbus_message_set_member =
      _g_dbus_message_set_memberPtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_path(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_path(
      message,
    );
  }

  late final _g_dbus_message_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_path');
  late final _g_dbus_message_get_path = _g_dbus_message_get_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_path(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_path(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_path');
  late final _g_dbus_message_set_path = _g_dbus_message_set_pathPtr.asFunction<
      void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_sender(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_sender(
      message,
    );
  }

  late final _g_dbus_message_get_senderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_sender');
  late final _g_dbus_message_get_sender = _g_dbus_message_get_senderPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_sender(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_sender(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_senderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_sender');
  late final _g_dbus_message_set_sender =
      _g_dbus_message_set_senderPtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_destination(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_destination(
      message,
    );
  }

  late final _g_dbus_message_get_destinationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_destination');
  late final _g_dbus_message_get_destination =
      _g_dbus_message_get_destinationPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_destination(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_destination(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_destinationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_destination');
  late final _g_dbus_message_set_destination =
      _g_dbus_message_set_destinationPtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_error_name(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_error_name(
      message,
    );
  }

  late final _g_dbus_message_get_error_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_error_name');
  late final _g_dbus_message_get_error_name = _g_dbus_message_get_error_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_error_name(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_error_name(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_error_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_error_name');
  late final _g_dbus_message_set_error_name =
      _g_dbus_message_set_error_namePtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_message_get_signature(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_signature(
      message,
    );
  }

  late final _g_dbus_message_get_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_signature');
  late final _g_dbus_message_get_signature = _g_dbus_message_get_signaturePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_signature(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gchar> value,
  ) {
    return _g_dbus_message_set_signature(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gchar>)>>('g_dbus_message_set_signature');
  late final _g_dbus_message_set_signature =
      _g_dbus_message_set_signaturePtr.asFunction<
          void Function(ffi.Pointer<GDBusMessage>, ffi.Pointer<gchar>)>();

  int g_dbus_message_get_num_unix_fds(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_num_unix_fds(
      message,
    );
  }

  late final _g_dbus_message_get_num_unix_fdsPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GDBusMessage>)>>(
          'g_dbus_message_get_num_unix_fds');
  late final _g_dbus_message_get_num_unix_fds =
      _g_dbus_message_get_num_unix_fdsPtr
          .asFunction<int Function(ffi.Pointer<GDBusMessage>)>();

  void g_dbus_message_set_num_unix_fds(
    ffi.Pointer<GDBusMessage> message,
    int value,
  ) {
    return _g_dbus_message_set_num_unix_fds(
      message,
      value,
    );
  }

  late final _g_dbus_message_set_num_unix_fdsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMessage>,
              guint32)>>('g_dbus_message_set_num_unix_fds');
  late final _g_dbus_message_set_num_unix_fds =
      _g_dbus_message_set_num_unix_fdsPtr
          .asFunction<void Function(ffi.Pointer<GDBusMessage>, int)>();

  ffi.Pointer<gchar> g_dbus_message_get_arg0(
    ffi.Pointer<GDBusMessage> message,
  ) {
    return _g_dbus_message_get_arg0(
      message,
    );
  }

  late final _g_dbus_message_get_arg0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusMessage>)>>('g_dbus_message_get_arg0');
  late final _g_dbus_message_get_arg0 = _g_dbus_message_get_arg0Ptr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMessage>)>();

  ffi.Pointer<GDBusMessage> g_dbus_message_new_from_blob(
    ffi.Pointer<guchar> blob,
    int blob_len,
    int capabilities,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_message_new_from_blob(
      blob,
      blob_len,
      capabilities,
      error,
    );
  }

  late final _g_dbus_message_new_from_blobPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMessage> Function(ffi.Pointer<guchar>, gsize,
                  ffi.Int32, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_message_new_from_blob');
  late final _g_dbus_message_new_from_blob =
      _g_dbus_message_new_from_blobPtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(ffi.Pointer<guchar>, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_message_bytes_needed(
    ffi.Pointer<guchar> blob,
    int blob_len,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_message_bytes_needed(
      blob,
      blob_len,
      error,
    );
  }

  late final _g_dbus_message_bytes_neededPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(ffi.Pointer<guchar>, gsize,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_message_bytes_needed');
  late final _g_dbus_message_bytes_needed =
      _g_dbus_message_bytes_neededPtr.asFunction<
          int Function(
              ffi.Pointer<guchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<guchar> g_dbus_message_to_blob(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<gsize> out_size,
    int capabilities,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_message_to_blob(
      message,
      out_size,
      capabilities,
      error,
    );
  }

  late final _g_dbus_message_to_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(
              ffi.Pointer<GDBusMessage>,
              ffi.Pointer<gsize>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_message_to_blob');
  late final _g_dbus_message_to_blob = _g_dbus_message_to_blobPtr.asFunction<
      ffi.Pointer<guchar> Function(ffi.Pointer<GDBusMessage>,
          ffi.Pointer<gsize>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_message_to_gerror(
    ffi.Pointer<GDBusMessage> message,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_message_to_gerror(
      message,
      error,
    );
  }

  late final _g_dbus_message_to_gerrorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDBusMessage>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_message_to_gerror');
  late final _g_dbus_message_to_gerror =
      _g_dbus_message_to_gerrorPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusMessage>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_method_invocation_get_type() {
    return _g_dbus_method_invocation_get_type();
  }

  late final _g_dbus_method_invocation_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_method_invocation_get_type');
  late final _g_dbus_method_invocation_get_type =
      _g_dbus_method_invocation_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<gchar> g_dbus_method_invocation_get_sender(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_sender(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_senderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_sender');
  late final _g_dbus_method_invocation_get_sender =
      _g_dbus_method_invocation_get_senderPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<gchar> g_dbus_method_invocation_get_object_path(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_object_path(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_object_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_object_path');
  late final _g_dbus_method_invocation_get_object_path =
      _g_dbus_method_invocation_get_object_pathPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<gchar> g_dbus_method_invocation_get_interface_name(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_interface_name(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_interface_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_interface_name');
  late final _g_dbus_method_invocation_get_interface_name =
      _g_dbus_method_invocation_get_interface_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<gchar> g_dbus_method_invocation_get_method_name(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_method_name(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_method_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_method_name');
  late final _g_dbus_method_invocation_get_method_name =
      _g_dbus_method_invocation_get_method_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<GDBusMethodInfo> g_dbus_method_invocation_get_method_info(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_method_info(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_method_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMethodInfo> Function(
                  ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_method_info');
  late final _g_dbus_method_invocation_get_method_info =
      _g_dbus_method_invocation_get_method_infoPtr.asFunction<
          ffi.Pointer<GDBusMethodInfo> Function(
              ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<GDBusPropertyInfo> g_dbus_method_invocation_get_property_info(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_property_info(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_property_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusPropertyInfo> Function(
                  ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_property_info');
  late final _g_dbus_method_invocation_get_property_info =
      _g_dbus_method_invocation_get_property_infoPtr.asFunction<
          ffi.Pointer<GDBusPropertyInfo> Function(
              ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<GDBusConnection> g_dbus_method_invocation_get_connection(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_connection(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_connection');
  late final _g_dbus_method_invocation_get_connection =
      _g_dbus_method_invocation_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<GDBusMessage> g_dbus_method_invocation_get_message(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_message(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusMessage> Function(
                  ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_message');
  late final _g_dbus_method_invocation_get_message =
      _g_dbus_method_invocation_get_messagePtr.asFunction<
          ffi.Pointer<GDBusMessage> Function(
              ffi.Pointer<GDBusMethodInvocation>)>();

  ffi.Pointer<GVariant> g_dbus_method_invocation_get_parameters(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_parameters(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_parametersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_parameters');
  late final _g_dbus_method_invocation_get_parameters =
      _g_dbus_method_invocation_get_parametersPtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusMethodInvocation>)>();

  gpointer g_dbus_method_invocation_get_user_data(
    ffi.Pointer<GDBusMethodInvocation> invocation,
  ) {
    return _g_dbus_method_invocation_get_user_data(
      invocation,
    );
  }

  late final _g_dbus_method_invocation_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              gpointer Function(ffi.Pointer<GDBusMethodInvocation>)>>(
      'g_dbus_method_invocation_get_user_data');
  late final _g_dbus_method_invocation_get_user_data =
      _g_dbus_method_invocation_get_user_dataPtr
          .asFunction<gpointer Function(ffi.Pointer<GDBusMethodInvocation>)>();

  void g_dbus_method_invocation_return_value(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    ffi.Pointer<GVariant> parameters,
  ) {
    return _g_dbus_method_invocation_return_value(
      invocation,
      parameters,
    );
  }

  late final _g_dbus_method_invocation_return_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>,
              ffi.Pointer<GVariant>)>>('g_dbus_method_invocation_return_value');
  late final _g_dbus_method_invocation_return_value =
      _g_dbus_method_invocation_return_valuePtr.asFunction<
          void Function(
              ffi.Pointer<GDBusMethodInvocation>, ffi.Pointer<GVariant>)>();

  void g_dbus_method_invocation_return_value_with_unix_fd_list(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GUnixFDList> fd_list,
  ) {
    return _g_dbus_method_invocation_return_value_with_unix_fd_list(
      invocation,
      parameters,
      fd_list,
    );
  }

  late final _g_dbus_method_invocation_return_value_with_unix_fd_listPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>,
                      ffi.Pointer<GVariant>, ffi.Pointer<GUnixFDList>)>>(
          'g_dbus_method_invocation_return_value_with_unix_fd_list');
  late final _g_dbus_method_invocation_return_value_with_unix_fd_list =
      _g_dbus_method_invocation_return_value_with_unix_fd_listPtr.asFunction<
          void Function(ffi.Pointer<GDBusMethodInvocation>,
              ffi.Pointer<GVariant>, ffi.Pointer<GUnixFDList>)>();

  void g_dbus_method_invocation_return_error(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    int domain,
    int code,
    ffi.Pointer<gchar> format,
  ) {
    return _g_dbus_method_invocation_return_error(
      invocation,
      domain,
      code,
      format,
    );
  }

  late final _g_dbus_method_invocation_return_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>, GQuark, gint,
              ffi.Pointer<gchar>)>>('g_dbus_method_invocation_return_error');
  late final _g_dbus_method_invocation_return_error =
      _g_dbus_method_invocation_return_errorPtr.asFunction<
          void Function(ffi.Pointer<GDBusMethodInvocation>, int, int,
              ffi.Pointer<gchar>)>();

  void g_dbus_method_invocation_return_error_valist(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    int domain,
    int code,
    ffi.Pointer<gchar> format,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_dbus_method_invocation_return_error_valist(
      invocation,
      domain,
      code,
      format,
      var_args,
    );
  }

  late final _g_dbus_method_invocation_return_error_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>, GQuark,
                  gint, ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>>(
      'g_dbus_method_invocation_return_error_valist');
  late final _g_dbus_method_invocation_return_error_valist =
      _g_dbus_method_invocation_return_error_valistPtr.asFunction<
          void Function(ffi.Pointer<GDBusMethodInvocation>, int, int,
              ffi.Pointer<gchar>, ffi.Pointer<__va_list_tag>)>();

  void g_dbus_method_invocation_return_error_literal(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    int domain,
    int code,
    ffi.Pointer<gchar> message,
  ) {
    return _g_dbus_method_invocation_return_error_literal(
      invocation,
      domain,
      code,
      message,
    );
  }

  late final _g_dbus_method_invocation_return_error_literalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>, GQuark,
                  gint, ffi.Pointer<gchar>)>>(
      'g_dbus_method_invocation_return_error_literal');
  late final _g_dbus_method_invocation_return_error_literal =
      _g_dbus_method_invocation_return_error_literalPtr.asFunction<
          void Function(ffi.Pointer<GDBusMethodInvocation>, int, int,
              ffi.Pointer<gchar>)>();

  void g_dbus_method_invocation_return_gerror(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_method_invocation_return_gerror(
      invocation,
      error,
    );
  }

  late final _g_dbus_method_invocation_return_gerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>,
              ffi.Pointer<GError>)>>('g_dbus_method_invocation_return_gerror');
  late final _g_dbus_method_invocation_return_gerror =
      _g_dbus_method_invocation_return_gerrorPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusMethodInvocation>, ffi.Pointer<GError>)>();

  void g_dbus_method_invocation_take_error(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    ffi.Pointer<GError> error,
  ) {
    return _g_dbus_method_invocation_take_error(
      invocation,
      error,
    );
  }

  late final _g_dbus_method_invocation_take_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>,
              ffi.Pointer<GError>)>>('g_dbus_method_invocation_take_error');
  late final _g_dbus_method_invocation_take_error =
      _g_dbus_method_invocation_take_errorPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusMethodInvocation>, ffi.Pointer<GError>)>();

  void g_dbus_method_invocation_return_dbus_error(
    ffi.Pointer<GDBusMethodInvocation> invocation,
    ffi.Pointer<gchar> error_name,
    ffi.Pointer<gchar> error_message,
  ) {
    return _g_dbus_method_invocation_return_dbus_error(
      invocation,
      error_name,
      error_message,
    );
  }

  late final _g_dbus_method_invocation_return_dbus_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusMethodInvocation>,
                  ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>(
      'g_dbus_method_invocation_return_dbus_error');
  late final _g_dbus_method_invocation_return_dbus_error =
      _g_dbus_method_invocation_return_dbus_errorPtr.asFunction<
          void Function(ffi.Pointer<GDBusMethodInvocation>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  int g_bus_own_name(
    int bus_type,
    ffi.Pointer<gchar> name,
    int flags,
    GBusAcquiredCallback bus_acquired_handler,
    GBusNameAcquiredCallback name_acquired_handler,
    GBusNameLostCallback name_lost_handler,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_bus_own_name(
      bus_type,
      name,
      flags,
      bus_acquired_handler,
      name_acquired_handler,
      name_lost_handler,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_bus_own_namePtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBusAcquiredCallback,
              GBusNameAcquiredCallback,
              GBusNameLostCallback,
              gpointer,
              GDestroyNotify)>>('g_bus_own_name');
  late final _g_bus_own_name = _g_bus_own_namePtr.asFunction<
      int Function(
          int,
          ffi.Pointer<gchar>,
          int,
          GBusAcquiredCallback,
          GBusNameAcquiredCallback,
          GBusNameLostCallback,
          gpointer,
          GDestroyNotify)>();

  int g_bus_own_name_on_connection(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    int flags,
    GBusNameAcquiredCallback name_acquired_handler,
    GBusNameLostCallback name_lost_handler,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_bus_own_name_on_connection(
      connection,
      name,
      flags,
      name_acquired_handler,
      name_lost_handler,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_bus_own_name_on_connectionPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBusNameAcquiredCallback,
              GBusNameLostCallback,
              gpointer,
              GDestroyNotify)>>('g_bus_own_name_on_connection');
  late final _g_bus_own_name_on_connection =
      _g_bus_own_name_on_connectionPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              int,
              GBusNameAcquiredCallback,
              GBusNameLostCallback,
              gpointer,
              GDestroyNotify)>();

  int g_bus_own_name_with_closures(
    int bus_type,
    ffi.Pointer<gchar> name,
    int flags,
    ffi.Pointer<GClosure> bus_acquired_closure,
    ffi.Pointer<GClosure> name_acquired_closure,
    ffi.Pointer<GClosure> name_lost_closure,
  ) {
    return _g_bus_own_name_with_closures(
      bus_type,
      name,
      flags,
      bus_acquired_closure,
      name_acquired_closure,
      name_lost_closure,
    );
  }

  late final _g_bus_own_name_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_bus_own_name_with_closures');
  late final _g_bus_own_name_with_closures =
      _g_bus_own_name_with_closuresPtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, int, ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>, ffi.Pointer<GClosure>)>();

  int g_bus_own_name_on_connection_with_closures(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    int flags,
    ffi.Pointer<GClosure> name_acquired_closure,
    ffi.Pointer<GClosure> name_lost_closure,
  ) {
    return _g_bus_own_name_on_connection_with_closures(
      connection,
      name,
      flags,
      name_acquired_closure,
      name_lost_closure,
    );
  }

  late final _g_bus_own_name_on_connection_with_closuresPtr = _lookup<
          ffi.NativeFunction<
              guint Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>,
                  ffi.Int32, ffi.Pointer<GClosure>, ffi.Pointer<GClosure>)>>(
      'g_bus_own_name_on_connection_with_closures');
  late final _g_bus_own_name_on_connection_with_closures =
      _g_bus_own_name_on_connection_with_closuresPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GClosure>, ffi.Pointer<GClosure>)>();

  void g_bus_unown_name(
    int owner_id,
  ) {
    return _g_bus_unown_name(
      owner_id,
    );
  }

  late final _g_bus_unown_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint)>>('g_bus_unown_name');
  late final _g_bus_unown_name =
      _g_bus_unown_namePtr.asFunction<void Function(int)>();

  int g_bus_watch_name(
    int bus_type,
    ffi.Pointer<gchar> name,
    int flags,
    GBusNameAppearedCallback name_appeared_handler,
    GBusNameVanishedCallback name_vanished_handler,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_bus_watch_name(
      bus_type,
      name,
      flags,
      name_appeared_handler,
      name_vanished_handler,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_bus_watch_namePtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBusNameAppearedCallback,
              GBusNameVanishedCallback,
              gpointer,
              GDestroyNotify)>>('g_bus_watch_name');
  late final _g_bus_watch_name = _g_bus_watch_namePtr.asFunction<
      int Function(int, ffi.Pointer<gchar>, int, GBusNameAppearedCallback,
          GBusNameVanishedCallback, gpointer, GDestroyNotify)>();

  int g_bus_watch_name_on_connection(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    int flags,
    GBusNameAppearedCallback name_appeared_handler,
    GBusNameVanishedCallback name_vanished_handler,
    gpointer user_data,
    GDestroyNotify user_data_free_func,
  ) {
    return _g_bus_watch_name_on_connection(
      connection,
      name,
      flags,
      name_appeared_handler,
      name_vanished_handler,
      user_data,
      user_data_free_func,
    );
  }

  late final _g_bus_watch_name_on_connectionPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GBusNameAppearedCallback,
              GBusNameVanishedCallback,
              gpointer,
              GDestroyNotify)>>('g_bus_watch_name_on_connection');
  late final _g_bus_watch_name_on_connection =
      _g_bus_watch_name_on_connectionPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>,
              int,
              GBusNameAppearedCallback,
              GBusNameVanishedCallback,
              gpointer,
              GDestroyNotify)>();

  int g_bus_watch_name_with_closures(
    int bus_type,
    ffi.Pointer<gchar> name,
    int flags,
    ffi.Pointer<GClosure> name_appeared_closure,
    ffi.Pointer<GClosure> name_vanished_closure,
  ) {
    return _g_bus_watch_name_with_closures(
      bus_type,
      name,
      flags,
      name_appeared_closure,
      name_vanished_closure,
    );
  }

  late final _g_bus_watch_name_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_bus_watch_name_with_closures');
  late final _g_bus_watch_name_with_closures =
      _g_bus_watch_name_with_closuresPtr.asFunction<
          int Function(int, ffi.Pointer<gchar>, int, ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  int g_bus_watch_name_on_connection_with_closures(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    int flags,
    ffi.Pointer<GClosure> name_appeared_closure,
    ffi.Pointer<GClosure> name_vanished_closure,
  ) {
    return _g_bus_watch_name_on_connection_with_closures(
      connection,
      name,
      flags,
      name_appeared_closure,
      name_vanished_closure,
    );
  }

  late final _g_bus_watch_name_on_connection_with_closuresPtr = _lookup<
          ffi.NativeFunction<
              guint Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>,
                  ffi.Int32, ffi.Pointer<GClosure>, ffi.Pointer<GClosure>)>>(
      'g_bus_watch_name_on_connection_with_closures');
  late final _g_bus_watch_name_on_connection_with_closures =
      _g_bus_watch_name_on_connection_with_closuresPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GClosure>, ffi.Pointer<GClosure>)>();

  void g_bus_unwatch_name(
    int watcher_id,
  ) {
    return _g_bus_unwatch_name(
      watcher_id,
    );
  }

  late final _g_bus_unwatch_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint)>>(
          'g_bus_unwatch_name');
  late final _g_bus_unwatch_name =
      _g_bus_unwatch_namePtr.asFunction<void Function(int)>();

  int g_dbus_object_get_type() {
    return _g_dbus_object_get_type();
  }

  late final _g_dbus_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_object_get_type');
  late final _g_dbus_object_get_type =
      _g_dbus_object_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<gchar> g_dbus_object_get_object_path(
    ffi.Pointer<GDBusObject> object,
  ) {
    return _g_dbus_object_get_object_path(
      object,
    );
  }

  late final _g_dbus_object_get_object_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusObject>)>>('g_dbus_object_get_object_path');
  late final _g_dbus_object_get_object_path = _g_dbus_object_get_object_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObject>)>();

  ffi.Pointer<GList> g_dbus_object_get_interfaces(
    ffi.Pointer<GDBusObject> object,
  ) {
    return _g_dbus_object_get_interfaces(
      object,
    );
  }

  late final _g_dbus_object_get_interfacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GDBusObject>)>>('g_dbus_object_get_interfaces');
  late final _g_dbus_object_get_interfaces = _g_dbus_object_get_interfacesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GDBusObject>)>();

  ffi.Pointer<GDBusInterface> g_dbus_object_get_interface(
    ffi.Pointer<GDBusObject> object,
    ffi.Pointer<gchar> interface_name,
  ) {
    return _g_dbus_object_get_interface(
      object,
      interface_name,
    );
  }

  late final _g_dbus_object_get_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterface> Function(ffi.Pointer<GDBusObject>,
              ffi.Pointer<gchar>)>>('g_dbus_object_get_interface');
  late final _g_dbus_object_get_interface =
      _g_dbus_object_get_interfacePtr.asFunction<
          ffi.Pointer<GDBusInterface> Function(
              ffi.Pointer<GDBusObject>, ffi.Pointer<gchar>)>();

  int g_dbus_object_manager_get_type() {
    return _g_dbus_object_manager_get_type();
  }

  late final _g_dbus_object_manager_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_manager_get_type');
  late final _g_dbus_object_manager_get_type =
      _g_dbus_object_manager_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<gchar> g_dbus_object_manager_get_object_path(
    ffi.Pointer<GDBusObjectManager> manager,
  ) {
    return _g_dbus_object_manager_get_object_path(
      manager,
    );
  }

  late final _g_dbus_object_manager_get_object_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObjectManager>)>>(
      'g_dbus_object_manager_get_object_path');
  late final _g_dbus_object_manager_get_object_path =
      _g_dbus_object_manager_get_object_pathPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObjectManager>)>();

  ffi.Pointer<GList> g_dbus_object_manager_get_objects(
    ffi.Pointer<GDBusObjectManager> manager,
  ) {
    return _g_dbus_object_manager_get_objects(
      manager,
    );
  }

  late final _g_dbus_object_manager_get_objectsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GDBusObjectManager>)>>(
      'g_dbus_object_manager_get_objects');
  late final _g_dbus_object_manager_get_objects =
      _g_dbus_object_manager_get_objectsPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GDBusObjectManager>)>();

  ffi.Pointer<GDBusObject> g_dbus_object_manager_get_object(
    ffi.Pointer<GDBusObjectManager> manager,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_manager_get_object(
      manager,
      object_path,
    );
  }

  late final _g_dbus_object_manager_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(ffi.Pointer<GDBusObjectManager>,
              ffi.Pointer<gchar>)>>('g_dbus_object_manager_get_object');
  late final _g_dbus_object_manager_get_object =
      _g_dbus_object_manager_get_objectPtr.asFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusObjectManager>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusInterface> g_dbus_object_manager_get_interface(
    ffi.Pointer<GDBusObjectManager> manager,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
  ) {
    return _g_dbus_object_manager_get_interface(
      manager,
      object_path,
      interface_name,
    );
  }

  late final _g_dbus_object_manager_get_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterface> Function(
              ffi.Pointer<GDBusObjectManager>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_dbus_object_manager_get_interface');
  late final _g_dbus_object_manager_get_interface =
      _g_dbus_object_manager_get_interfacePtr.asFunction<
          ffi.Pointer<GDBusInterface> Function(ffi.Pointer<GDBusObjectManager>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_dbus_object_manager_client_get_type() {
    return _g_dbus_object_manager_client_get_type();
  }

  late final _g_dbus_object_manager_client_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_manager_client_get_type');
  late final _g_dbus_object_manager_client_get_type =
      _g_dbus_object_manager_client_get_typePtr.asFunction<int Function()>();

  void g_dbus_object_manager_client_new(
    ffi.Pointer<GDBusConnection> connection,
    int flags,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    GDBusProxyTypeFunc get_proxy_type_func,
    gpointer get_proxy_type_user_data,
    GDestroyNotify get_proxy_type_destroy_notify,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_object_manager_client_new(
      connection,
      flags,
      name,
      object_path,
      get_proxy_type_func,
      get_proxy_type_user_data,
      get_proxy_type_destroy_notify,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_object_manager_client_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_object_manager_client_new');
  late final _g_dbus_object_manager_client_new =
      _g_dbus_object_manager_client_newPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusConnection>,
              int,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GDBusObjectManager> g_dbus_object_manager_client_new_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_object_manager_client_new_finish(
      res,
      error,
    );
  }

  late final _g_dbus_object_manager_client_new_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusObjectManager> Function(
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_object_manager_client_new_finish');
  late final _g_dbus_object_manager_client_new_finish =
      _g_dbus_object_manager_client_new_finishPtr.asFunction<
          ffi.Pointer<GDBusObjectManager> Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusObjectManager> g_dbus_object_manager_client_new_sync(
    ffi.Pointer<GDBusConnection> connection,
    int flags,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    GDBusProxyTypeFunc get_proxy_type_func,
    gpointer get_proxy_type_user_data,
    GDestroyNotify get_proxy_type_destroy_notify,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_object_manager_client_new_sync(
      connection,
      flags,
      name,
      object_path,
      get_proxy_type_func,
      get_proxy_type_user_data,
      get_proxy_type_destroy_notify,
      cancellable,
      error,
    );
  }

  late final _g_dbus_object_manager_client_new_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusObjectManager> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Int32,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  GDBusProxyTypeFunc,
                  gpointer,
                  GDestroyNotify,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_object_manager_client_new_sync');
  late final _g_dbus_object_manager_client_new_sync =
      _g_dbus_object_manager_client_new_syncPtr.asFunction<
          ffi.Pointer<GDBusObjectManager> Function(
              ffi.Pointer<GDBusConnection>,
              int,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_object_manager_client_new_for_bus(
    int bus_type,
    int flags,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    GDBusProxyTypeFunc get_proxy_type_func,
    gpointer get_proxy_type_user_data,
    GDestroyNotify get_proxy_type_destroy_notify,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_object_manager_client_new_for_bus(
      bus_type,
      flags,
      name,
      object_path,
      get_proxy_type_func,
      get_proxy_type_user_data,
      get_proxy_type_destroy_notify,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_object_manager_client_new_for_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_object_manager_client_new_for_bus');
  late final _g_dbus_object_manager_client_new_for_bus =
      _g_dbus_object_manager_client_new_for_busPtr.asFunction<
          void Function(
              int,
              int,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GDBusObjectManager>
      g_dbus_object_manager_client_new_for_bus_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_object_manager_client_new_for_bus_finish(
      res,
      error,
    );
  }

  late final _g_dbus_object_manager_client_new_for_bus_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusObjectManager> Function(
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_object_manager_client_new_for_bus_finish');
  late final _g_dbus_object_manager_client_new_for_bus_finish =
      _g_dbus_object_manager_client_new_for_bus_finishPtr.asFunction<
          ffi.Pointer<GDBusObjectManager> Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusObjectManager> g_dbus_object_manager_client_new_for_bus_sync(
    int bus_type,
    int flags,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    GDBusProxyTypeFunc get_proxy_type_func,
    gpointer get_proxy_type_user_data,
    GDestroyNotify get_proxy_type_destroy_notify,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_object_manager_client_new_for_bus_sync(
      bus_type,
      flags,
      name,
      object_path,
      get_proxy_type_func,
      get_proxy_type_user_data,
      get_proxy_type_destroy_notify,
      cancellable,
      error,
    );
  }

  late final _g_dbus_object_manager_client_new_for_bus_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusObjectManager> Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  GDBusProxyTypeFunc,
                  gpointer,
                  GDestroyNotify,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_object_manager_client_new_for_bus_sync');
  late final _g_dbus_object_manager_client_new_for_bus_sync =
      _g_dbus_object_manager_client_new_for_bus_syncPtr.asFunction<
          ffi.Pointer<GDBusObjectManager> Function(
              int,
              int,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              GDBusProxyTypeFunc,
              gpointer,
              GDestroyNotify,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusConnection> g_dbus_object_manager_client_get_connection(
    ffi.Pointer<GDBusObjectManagerClient> manager,
  ) {
    return _g_dbus_object_manager_client_get_connection(
      manager,
    );
  }

  late final _g_dbus_object_manager_client_get_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<GDBusObjectManagerClient>)>>(
      'g_dbus_object_manager_client_get_connection');
  late final _g_dbus_object_manager_client_get_connection =
      _g_dbus_object_manager_client_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusObjectManagerClient>)>();

  int g_dbus_object_manager_client_get_flags(
    ffi.Pointer<GDBusObjectManagerClient> manager,
  ) {
    return _g_dbus_object_manager_client_get_flags(
      manager,
    );
  }

  late final _g_dbus_object_manager_client_get_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GDBusObjectManagerClient>)>>(
      'g_dbus_object_manager_client_get_flags');
  late final _g_dbus_object_manager_client_get_flags =
      _g_dbus_object_manager_client_get_flagsPtr
          .asFunction<int Function(ffi.Pointer<GDBusObjectManagerClient>)>();

  ffi.Pointer<gchar> g_dbus_object_manager_client_get_name(
    ffi.Pointer<GDBusObjectManagerClient> manager,
  ) {
    return _g_dbus_object_manager_client_get_name(
      manager,
    );
  }

  late final _g_dbus_object_manager_client_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GDBusObjectManagerClient>)>>(
      'g_dbus_object_manager_client_get_name');
  late final _g_dbus_object_manager_client_get_name =
      _g_dbus_object_manager_client_get_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObjectManagerClient>)>();

  ffi.Pointer<gchar> g_dbus_object_manager_client_get_name_owner(
    ffi.Pointer<GDBusObjectManagerClient> manager,
  ) {
    return _g_dbus_object_manager_client_get_name_owner(
      manager,
    );
  }

  late final _g_dbus_object_manager_client_get_name_ownerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GDBusObjectManagerClient>)>>(
      'g_dbus_object_manager_client_get_name_owner');
  late final _g_dbus_object_manager_client_get_name_owner =
      _g_dbus_object_manager_client_get_name_ownerPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObjectManagerClient>)>();

  int g_dbus_object_manager_server_get_type() {
    return _g_dbus_object_manager_server_get_type();
  }

  late final _g_dbus_object_manager_server_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_manager_server_get_type');
  late final _g_dbus_object_manager_server_get_type =
      _g_dbus_object_manager_server_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusObjectManagerServer> g_dbus_object_manager_server_new(
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_manager_server_new(
      object_path,
    );
  }

  late final _g_dbus_object_manager_server_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObjectManagerServer> Function(
              ffi.Pointer<gchar>)>>('g_dbus_object_manager_server_new');
  late final _g_dbus_object_manager_server_new =
      _g_dbus_object_manager_server_newPtr.asFunction<
          ffi.Pointer<GDBusObjectManagerServer> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusConnection> g_dbus_object_manager_server_get_connection(
    ffi.Pointer<GDBusObjectManagerServer> manager,
  ) {
    return _g_dbus_object_manager_server_get_connection(
      manager,
    );
  }

  late final _g_dbus_object_manager_server_get_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<GDBusObjectManagerServer>)>>(
      'g_dbus_object_manager_server_get_connection');
  late final _g_dbus_object_manager_server_get_connection =
      _g_dbus_object_manager_server_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusObjectManagerServer>)>();

  void g_dbus_object_manager_server_set_connection(
    ffi.Pointer<GDBusObjectManagerServer> manager,
    ffi.Pointer<GDBusConnection> connection,
  ) {
    return _g_dbus_object_manager_server_set_connection(
      manager,
      connection,
    );
  }

  late final _g_dbus_object_manager_server_set_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusObjectManagerServer>,
                  ffi.Pointer<GDBusConnection>)>>(
      'g_dbus_object_manager_server_set_connection');
  late final _g_dbus_object_manager_server_set_connection =
      _g_dbus_object_manager_server_set_connectionPtr.asFunction<
          void Function(ffi.Pointer<GDBusObjectManagerServer>,
              ffi.Pointer<GDBusConnection>)>();

  void g_dbus_object_manager_server_export(
    ffi.Pointer<GDBusObjectManagerServer> manager,
    ffi.Pointer<GDBusObjectSkeleton> object,
  ) {
    return _g_dbus_object_manager_server_export(
      manager,
      object,
    );
  }

  late final _g_dbus_object_manager_server_exportPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusObjectManagerServer>,
                  ffi.Pointer<GDBusObjectSkeleton>)>>(
      'g_dbus_object_manager_server_export');
  late final _g_dbus_object_manager_server_export =
      _g_dbus_object_manager_server_exportPtr.asFunction<
          void Function(ffi.Pointer<GDBusObjectManagerServer>,
              ffi.Pointer<GDBusObjectSkeleton>)>();

  void g_dbus_object_manager_server_export_uniquely(
    ffi.Pointer<GDBusObjectManagerServer> manager,
    ffi.Pointer<GDBusObjectSkeleton> object,
  ) {
    return _g_dbus_object_manager_server_export_uniquely(
      manager,
      object,
    );
  }

  late final _g_dbus_object_manager_server_export_uniquelyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusObjectManagerServer>,
                  ffi.Pointer<GDBusObjectSkeleton>)>>(
      'g_dbus_object_manager_server_export_uniquely');
  late final _g_dbus_object_manager_server_export_uniquely =
      _g_dbus_object_manager_server_export_uniquelyPtr.asFunction<
          void Function(ffi.Pointer<GDBusObjectManagerServer>,
              ffi.Pointer<GDBusObjectSkeleton>)>();

  int g_dbus_object_manager_server_is_exported(
    ffi.Pointer<GDBusObjectManagerServer> manager,
    ffi.Pointer<GDBusObjectSkeleton> object,
  ) {
    return _g_dbus_object_manager_server_is_exported(
      manager,
      object,
    );
  }

  late final _g_dbus_object_manager_server_is_exportedPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDBusObjectManagerServer>,
                  ffi.Pointer<GDBusObjectSkeleton>)>>(
      'g_dbus_object_manager_server_is_exported');
  late final _g_dbus_object_manager_server_is_exported =
      _g_dbus_object_manager_server_is_exportedPtr.asFunction<
          int Function(ffi.Pointer<GDBusObjectManagerServer>,
              ffi.Pointer<GDBusObjectSkeleton>)>();

  int g_dbus_object_manager_server_unexport(
    ffi.Pointer<GDBusObjectManagerServer> manager,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_manager_server_unexport(
      manager,
      object_path,
    );
  }

  late final _g_dbus_object_manager_server_unexportPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDBusObjectManagerServer>,
              ffi.Pointer<gchar>)>>('g_dbus_object_manager_server_unexport');
  late final _g_dbus_object_manager_server_unexport =
      _g_dbus_object_manager_server_unexportPtr.asFunction<
          int Function(
              ffi.Pointer<GDBusObjectManagerServer>, ffi.Pointer<gchar>)>();

  int g_dbus_object_proxy_get_type() {
    return _g_dbus_object_proxy_get_type();
  }

  late final _g_dbus_object_proxy_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_proxy_get_type');
  late final _g_dbus_object_proxy_get_type =
      _g_dbus_object_proxy_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusObjectProxy> g_dbus_object_proxy_new(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_proxy_new(
      connection,
      object_path,
    );
  }

  late final _g_dbus_object_proxy_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObjectProxy> Function(ffi.Pointer<GDBusConnection>,
              ffi.Pointer<gchar>)>>('g_dbus_object_proxy_new');
  late final _g_dbus_object_proxy_new = _g_dbus_object_proxy_newPtr.asFunction<
      ffi.Pointer<GDBusObjectProxy> Function(
          ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GDBusConnection> g_dbus_object_proxy_get_connection(
    ffi.Pointer<GDBusObjectProxy> proxy,
  ) {
    return _g_dbus_object_proxy_get_connection(
      proxy,
    );
  }

  late final _g_dbus_object_proxy_get_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusConnection> Function(
                  ffi.Pointer<GDBusObjectProxy>)>>(
      'g_dbus_object_proxy_get_connection');
  late final _g_dbus_object_proxy_get_connection =
      _g_dbus_object_proxy_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusObjectProxy>)>();

  int g_dbus_object_skeleton_get_type() {
    return _g_dbus_object_skeleton_get_type();
  }

  late final _g_dbus_object_skeleton_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_skeleton_get_type');
  late final _g_dbus_object_skeleton_get_type =
      _g_dbus_object_skeleton_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusObjectSkeleton> g_dbus_object_skeleton_new(
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_skeleton_new(
      object_path,
    );
  }

  late final _g_dbus_object_skeleton_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObjectSkeleton> Function(
              ffi.Pointer<gchar>)>>('g_dbus_object_skeleton_new');
  late final _g_dbus_object_skeleton_new =
      _g_dbus_object_skeleton_newPtr.asFunction<
          ffi.Pointer<GDBusObjectSkeleton> Function(ffi.Pointer<gchar>)>();

  void g_dbus_object_skeleton_flush(
    ffi.Pointer<GDBusObjectSkeleton> object,
  ) {
    return _g_dbus_object_skeleton_flush(
      object,
    );
  }

  late final _g_dbus_object_skeleton_flushPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GDBusObjectSkeleton>)>>(
      'g_dbus_object_skeleton_flush');
  late final _g_dbus_object_skeleton_flush = _g_dbus_object_skeleton_flushPtr
      .asFunction<void Function(ffi.Pointer<GDBusObjectSkeleton>)>();

  void g_dbus_object_skeleton_add_interface(
    ffi.Pointer<GDBusObjectSkeleton> object,
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_object_skeleton_add_interface(
      object,
      interface_,
    );
  }

  late final _g_dbus_object_skeleton_add_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusObjectSkeleton>,
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_object_skeleton_add_interface');
  late final _g_dbus_object_skeleton_add_interface =
      _g_dbus_object_skeleton_add_interfacePtr.asFunction<
          void Function(ffi.Pointer<GDBusObjectSkeleton>,
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  void g_dbus_object_skeleton_remove_interface(
    ffi.Pointer<GDBusObjectSkeleton> object,
    ffi.Pointer<GDBusInterfaceSkeleton> interface_,
  ) {
    return _g_dbus_object_skeleton_remove_interface(
      object,
      interface_,
    );
  }

  late final _g_dbus_object_skeleton_remove_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDBusObjectSkeleton>,
                  ffi.Pointer<GDBusInterfaceSkeleton>)>>(
      'g_dbus_object_skeleton_remove_interface');
  late final _g_dbus_object_skeleton_remove_interface =
      _g_dbus_object_skeleton_remove_interfacePtr.asFunction<
          void Function(ffi.Pointer<GDBusObjectSkeleton>,
              ffi.Pointer<GDBusInterfaceSkeleton>)>();

  void g_dbus_object_skeleton_remove_interface_by_name(
    ffi.Pointer<GDBusObjectSkeleton> object,
    ffi.Pointer<gchar> interface_name,
  ) {
    return _g_dbus_object_skeleton_remove_interface_by_name(
      object,
      interface_name,
    );
  }

  late final _g_dbus_object_skeleton_remove_interface_by_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDBusObjectSkeleton>, ffi.Pointer<gchar>)>>(
      'g_dbus_object_skeleton_remove_interface_by_name');
  late final _g_dbus_object_skeleton_remove_interface_by_name =
      _g_dbus_object_skeleton_remove_interface_by_namePtr.asFunction<
          void Function(
              ffi.Pointer<GDBusObjectSkeleton>, ffi.Pointer<gchar>)>();

  void g_dbus_object_skeleton_set_object_path(
    ffi.Pointer<GDBusObjectSkeleton> object,
    ffi.Pointer<gchar> object_path,
  ) {
    return _g_dbus_object_skeleton_set_object_path(
      object,
      object_path,
    );
  }

  late final _g_dbus_object_skeleton_set_object_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusObjectSkeleton>,
              ffi.Pointer<gchar>)>>('g_dbus_object_skeleton_set_object_path');
  late final _g_dbus_object_skeleton_set_object_path =
      _g_dbus_object_skeleton_set_object_pathPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusObjectSkeleton>, ffi.Pointer<gchar>)>();

  int g_dbus_proxy_get_type() {
    return _g_dbus_proxy_get_type();
  }

  late final _g_dbus_proxy_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_proxy_get_type');
  late final _g_dbus_proxy_get_type =
      _g_dbus_proxy_get_typePtr.asFunction<int Function()>();

  void g_dbus_proxy_new(
    ffi.Pointer<GDBusConnection> connection,
    int flags,
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_proxy_new(
      connection,
      flags,
      info,
      name,
      object_path,
      interface_name,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_proxy_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Int32,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_proxy_new');
  late final _g_dbus_proxy_new = _g_dbus_proxy_newPtr.asFunction<
      void Function(
          ffi.Pointer<GDBusConnection>,
          int,
          ffi.Pointer<GDBusInterfaceInfo>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GCancellable>,
          GAsyncReadyCallback,
          gpointer)>();

  ffi.Pointer<GDBusProxy> g_dbus_proxy_new_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_new_finish(
      res,
      error,
    );
  }

  late final _g_dbus_proxy_new_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusProxy> Function(ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_proxy_new_finish');
  late final _g_dbus_proxy_new_finish = _g_dbus_proxy_new_finishPtr.asFunction<
      ffi.Pointer<GDBusProxy> Function(
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusProxy> g_dbus_proxy_new_sync(
    ffi.Pointer<GDBusConnection> connection,
    int flags,
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_new_sync(
      connection,
      flags,
      info,
      name,
      object_path,
      interface_name,
      cancellable,
      error,
    );
  }

  late final _g_dbus_proxy_new_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusProxy> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Int32,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_proxy_new_sync');
  late final _g_dbus_proxy_new_sync = _g_dbus_proxy_new_syncPtr.asFunction<
      ffi.Pointer<GDBusProxy> Function(
          ffi.Pointer<GDBusConnection>,
          int,
          ffi.Pointer<GDBusInterfaceInfo>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_proxy_new_for_bus(
    int bus_type,
    int flags,
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_proxy_new_for_bus(
      bus_type,
      flags,
      info,
      name,
      object_path,
      interface_name,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_proxy_new_for_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_proxy_new_for_bus');
  late final _g_dbus_proxy_new_for_bus =
      _g_dbus_proxy_new_for_busPtr.asFunction<
          void Function(
              int,
              int,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GDBusProxy> g_dbus_proxy_new_for_bus_finish(
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_new_for_bus_finish(
      res,
      error,
    );
  }

  late final _g_dbus_proxy_new_for_bus_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusProxy> Function(ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_proxy_new_for_bus_finish');
  late final _g_dbus_proxy_new_for_bus_finish =
      _g_dbus_proxy_new_for_bus_finishPtr.asFunction<
          ffi.Pointer<GDBusProxy> Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusProxy> g_dbus_proxy_new_for_bus_sync(
    int bus_type,
    int flags,
    ffi.Pointer<GDBusInterfaceInfo> info,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_new_for_bus_sync(
      bus_type,
      flags,
      info,
      name,
      object_path,
      interface_name,
      cancellable,
      error,
    );
  }

  late final _g_dbus_proxy_new_for_bus_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDBusProxy> Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<GDBusInterfaceInfo>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_proxy_new_for_bus_sync');
  late final _g_dbus_proxy_new_for_bus_sync =
      _g_dbus_proxy_new_for_bus_syncPtr.asFunction<
          ffi.Pointer<GDBusProxy> Function(
              int,
              int,
              ffi.Pointer<GDBusInterfaceInfo>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDBusConnection> g_dbus_proxy_get_connection(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_connection(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_connectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusConnection> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_connection');
  late final _g_dbus_proxy_get_connection =
      _g_dbus_proxy_get_connectionPtr.asFunction<
          ffi.Pointer<GDBusConnection> Function(ffi.Pointer<GDBusProxy>)>();

  int g_dbus_proxy_get_flags(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_flags(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusProxy>)>>(
          'g_dbus_proxy_get_flags');
  late final _g_dbus_proxy_get_flags = _g_dbus_proxy_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GDBusProxy>)>();

  ffi.Pointer<gchar> g_dbus_proxy_get_name(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_name(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_name');
  late final _g_dbus_proxy_get_name = _g_dbus_proxy_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusProxy>)>();

  ffi.Pointer<gchar> g_dbus_proxy_get_name_owner(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_name_owner(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_name_ownerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_name_owner');
  late final _g_dbus_proxy_get_name_owner = _g_dbus_proxy_get_name_ownerPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusProxy>)>();

  ffi.Pointer<gchar> g_dbus_proxy_get_object_path(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_object_path(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_object_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_object_path');
  late final _g_dbus_proxy_get_object_path = _g_dbus_proxy_get_object_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusProxy>)>();

  ffi.Pointer<gchar> g_dbus_proxy_get_interface_name(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_interface_name(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_interface_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_interface_name');
  late final _g_dbus_proxy_get_interface_name =
      _g_dbus_proxy_get_interface_namePtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusProxy>)>();

  int g_dbus_proxy_get_default_timeout(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_default_timeout(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_default_timeoutPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDBusProxy>)>>(
          'g_dbus_proxy_get_default_timeout');
  late final _g_dbus_proxy_get_default_timeout =
      _g_dbus_proxy_get_default_timeoutPtr
          .asFunction<int Function(ffi.Pointer<GDBusProxy>)>();

  void g_dbus_proxy_set_default_timeout(
    ffi.Pointer<GDBusProxy> proxy,
    int timeout_msec,
  ) {
    return _g_dbus_proxy_set_default_timeout(
      proxy,
      timeout_msec,
    );
  }

  late final _g_dbus_proxy_set_default_timeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusProxy>, gint)>>(
      'g_dbus_proxy_set_default_timeout');
  late final _g_dbus_proxy_set_default_timeout =
      _g_dbus_proxy_set_default_timeoutPtr
          .asFunction<void Function(ffi.Pointer<GDBusProxy>, int)>();

  ffi.Pointer<GDBusInterfaceInfo> g_dbus_proxy_get_interface_info(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_interface_info(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_interface_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusProxy>)>>('g_dbus_proxy_get_interface_info');
  late final _g_dbus_proxy_get_interface_info =
      _g_dbus_proxy_get_interface_infoPtr.asFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(ffi.Pointer<GDBusProxy>)>();

  void g_dbus_proxy_set_interface_info(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<GDBusInterfaceInfo> info,
  ) {
    return _g_dbus_proxy_set_interface_info(
      proxy,
      info,
    );
  }

  late final _g_dbus_proxy_set_interface_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDBusProxy>, ffi.Pointer<GDBusInterfaceInfo>)>>(
      'g_dbus_proxy_set_interface_info');
  late final _g_dbus_proxy_set_interface_info =
      _g_dbus_proxy_set_interface_infoPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusProxy>, ffi.Pointer<GDBusInterfaceInfo>)>();

  ffi.Pointer<GVariant> g_dbus_proxy_get_cached_property(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_dbus_proxy_get_cached_property(
      proxy,
      property_name,
    );
  }

  late final _g_dbus_proxy_get_cached_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>)>>('g_dbus_proxy_get_cached_property');
  late final _g_dbus_proxy_get_cached_property =
      _g_dbus_proxy_get_cached_propertyPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusProxy>, ffi.Pointer<gchar>)>();

  void g_dbus_proxy_set_cached_property(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_dbus_proxy_set_cached_property(
      proxy,
      property_name,
      value,
    );
  }

  late final _g_dbus_proxy_set_cached_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusProxy>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_dbus_proxy_set_cached_property');
  late final _g_dbus_proxy_set_cached_property =
      _g_dbus_proxy_set_cached_propertyPtr.asFunction<
          void Function(ffi.Pointer<GDBusProxy>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_dbus_proxy_get_cached_property_names(
    ffi.Pointer<GDBusProxy> proxy,
  ) {
    return _g_dbus_proxy_get_cached_property_names(
      proxy,
    );
  }

  late final _g_dbus_proxy_get_cached_property_namesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GDBusProxy>)>>(
      'g_dbus_proxy_get_cached_property_names');
  late final _g_dbus_proxy_get_cached_property_names =
      _g_dbus_proxy_get_cached_property_namesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GDBusProxy>)>();

  void g_dbus_proxy_call(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    int flags,
    int timeout_msec,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_proxy_call(
      proxy,
      method_name,
      parameters,
      flags,
      timeout_msec,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_proxy_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Int32,
              gint,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_proxy_call');
  late final _g_dbus_proxy_call = _g_dbus_proxy_callPtr.asFunction<
      void Function(
          ffi.Pointer<GDBusProxy>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GVariant>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          GAsyncReadyCallback,
          gpointer)>();

  ffi.Pointer<GVariant> g_dbus_proxy_call_finish(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_call_finish(
      proxy,
      res,
      error,
    );
  }

  late final _g_dbus_proxy_call_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_proxy_call_finish');
  late final _g_dbus_proxy_call_finish =
      _g_dbus_proxy_call_finishPtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GDBusProxy>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_dbus_proxy_call_sync(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    int flags,
    int timeout_msec,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_call_sync(
      proxy,
      method_name,
      parameters,
      flags,
      timeout_msec,
      cancellable,
      error,
    );
  }

  late final _g_dbus_proxy_call_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Int32,
              gint,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_proxy_call_sync');
  late final _g_dbus_proxy_call_sync = _g_dbus_proxy_call_syncPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GDBusProxy>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GVariant>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_proxy_call_with_unix_fd_list(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    int flags,
    int timeout_msec,
    ffi.Pointer<GUnixFDList> fd_list,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dbus_proxy_call_with_unix_fd_list(
      proxy,
      method_name,
      parameters,
      flags,
      timeout_msec,
      fd_list,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dbus_proxy_call_with_unix_fd_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              ffi.Int32,
              gint,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dbus_proxy_call_with_unix_fd_list');
  late final _g_dbus_proxy_call_with_unix_fd_list =
      _g_dbus_proxy_call_with_unix_fd_listPtr.asFunction<
          void Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              int,
              int,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GVariant> g_dbus_proxy_call_with_unix_fd_list_finish(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<ffi.Pointer<GUnixFDList>> out_fd_list,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_call_with_unix_fd_list_finish(
      proxy,
      out_fd_list,
      res,
      error,
    );
  }

  late final _g_dbus_proxy_call_with_unix_fd_list_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusProxy>,
                  ffi.Pointer<ffi.Pointer<GUnixFDList>>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_proxy_call_with_unix_fd_list_finish');
  late final _g_dbus_proxy_call_with_unix_fd_list_finish =
      _g_dbus_proxy_call_with_unix_fd_list_finishPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<ffi.Pointer<GUnixFDList>>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_dbus_proxy_call_with_unix_fd_list_sync(
    ffi.Pointer<GDBusProxy> proxy,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    int flags,
    int timeout_msec,
    ffi.Pointer<GUnixFDList> fd_list,
    ffi.Pointer<ffi.Pointer<GUnixFDList>> out_fd_list,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_proxy_call_with_unix_fd_list_sync(
      proxy,
      method_name,
      parameters,
      flags,
      timeout_msec,
      fd_list,
      out_fd_list,
      cancellable,
      error,
    );
  }

  late final _g_dbus_proxy_call_with_unix_fd_list_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GDBusProxy>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Int32,
                  gint,
                  ffi.Pointer<GUnixFDList>,
                  ffi.Pointer<ffi.Pointer<GUnixFDList>>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_proxy_call_with_unix_fd_list_sync');
  late final _g_dbus_proxy_call_with_unix_fd_list_sync =
      _g_dbus_proxy_call_with_unix_fd_list_syncPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusProxy>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>,
              int,
              int,
              ffi.Pointer<GUnixFDList>,
              ffi.Pointer<ffi.Pointer<GUnixFDList>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dbus_server_get_type() {
    return _g_dbus_server_get_type();
  }

  late final _g_dbus_server_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_server_get_type');
  late final _g_dbus_server_get_type =
      _g_dbus_server_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDBusServer> g_dbus_server_new_sync(
    ffi.Pointer<gchar> address,
    int flags,
    ffi.Pointer<gchar> guid,
    ffi.Pointer<GDBusAuthObserver> observer,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_server_new_sync(
      address,
      flags,
      guid,
      observer,
      cancellable,
      error,
    );
  }

  late final _g_dbus_server_new_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDBusServer> Function(
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<gchar>,
              ffi.Pointer<GDBusAuthObserver>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dbus_server_new_sync');
  late final _g_dbus_server_new_sync = _g_dbus_server_new_syncPtr.asFunction<
      ffi.Pointer<GDBusServer> Function(
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<GDBusAuthObserver>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_dbus_server_get_client_address(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_get_client_address(
      server,
    );
  }

  late final _g_dbus_server_get_client_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusServer>)>>('g_dbus_server_get_client_address');
  late final _g_dbus_server_get_client_address =
      _g_dbus_server_get_client_addressPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusServer>)>();

  ffi.Pointer<gchar> g_dbus_server_get_guid(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_get_guid(
      server,
    );
  }

  late final _g_dbus_server_get_guidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusServer>)>>('g_dbus_server_get_guid');
  late final _g_dbus_server_get_guid = _g_dbus_server_get_guidPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDBusServer>)>();

  int g_dbus_server_get_flags(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_get_flags(
      server,
    );
  }

  late final _g_dbus_server_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDBusServer>)>>(
          'g_dbus_server_get_flags');
  late final _g_dbus_server_get_flags = _g_dbus_server_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GDBusServer>)>();

  void g_dbus_server_start(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_start(
      server,
    );
  }

  late final _g_dbus_server_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusServer>)>>(
          'g_dbus_server_start');
  late final _g_dbus_server_start = _g_dbus_server_startPtr
      .asFunction<void Function(ffi.Pointer<GDBusServer>)>();

  void g_dbus_server_stop(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_stop(
      server,
    );
  }

  late final _g_dbus_server_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDBusServer>)>>(
          'g_dbus_server_stop');
  late final _g_dbus_server_stop = _g_dbus_server_stopPtr
      .asFunction<void Function(ffi.Pointer<GDBusServer>)>();

  int g_dbus_server_is_active(
    ffi.Pointer<GDBusServer> server,
  ) {
    return _g_dbus_server_is_active(
      server,
    );
  }

  late final _g_dbus_server_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDBusServer>)>>(
          'g_dbus_server_is_active');
  late final _g_dbus_server_is_active = _g_dbus_server_is_activePtr
      .asFunction<int Function(ffi.Pointer<GDBusServer>)>();

  int g_dbus_is_guid(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_guid(
      string,
    );
  }

  late final _g_dbus_is_guidPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_guid');
  late final _g_dbus_is_guid =
      _g_dbus_is_guidPtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_dbus_generate_guid() {
    return _g_dbus_generate_guid();
  }

  late final _g_dbus_generate_guidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_dbus_generate_guid');
  late final _g_dbus_generate_guid =
      _g_dbus_generate_guidPtr.asFunction<ffi.Pointer<gchar> Function()>();

  int g_dbus_is_name(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_name(
      string,
    );
  }

  late final _g_dbus_is_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_name');
  late final _g_dbus_is_name =
      _g_dbus_is_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_unique_name(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_unique_name(
      string,
    );
  }

  late final _g_dbus_is_unique_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_unique_name');
  late final _g_dbus_is_unique_name =
      _g_dbus_is_unique_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_member_name(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_member_name(
      string,
    );
  }

  late final _g_dbus_is_member_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_member_name');
  late final _g_dbus_is_member_name =
      _g_dbus_is_member_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_interface_name(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_interface_name(
      string,
    );
  }

  late final _g_dbus_is_interface_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_interface_name');
  late final _g_dbus_is_interface_name = _g_dbus_is_interface_namePtr
      .asFunction<int Function(ffi.Pointer<gchar>)>();

  int g_dbus_is_error_name(
    ffi.Pointer<gchar> string,
  ) {
    return _g_dbus_is_error_name(
      string,
    );
  }

  late final _g_dbus_is_error_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gchar>)>>(
          'g_dbus_is_error_name');
  late final _g_dbus_is_error_name =
      _g_dbus_is_error_namePtr.asFunction<int Function(ffi.Pointer<gchar>)>();

  void g_dbus_gvariant_to_gvalue(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GValue> out_gvalue,
  ) {
    return _g_dbus_gvariant_to_gvalue(
      value,
      out_gvalue,
    );
  }

  late final _g_dbus_gvariant_to_gvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GValue>)>>('g_dbus_gvariant_to_gvalue');
  late final _g_dbus_gvariant_to_gvalue = _g_dbus_gvariant_to_gvaluePtr
      .asFunction<void Function(ffi.Pointer<GVariant>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GVariant> g_dbus_gvalue_to_gvariant(
    ffi.Pointer<GValue> gvalue,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_dbus_gvalue_to_gvariant(
      gvalue,
      type,
    );
  }

  late final _g_dbus_gvalue_to_gvariantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariantType>)>>('g_dbus_gvalue_to_gvariant');
  late final _g_dbus_gvalue_to_gvariant =
      _g_dbus_gvalue_to_gvariantPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GValue>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<gchar> g_dbus_escape_object_path_bytestring(
    ffi.Pointer<guint8> bytes,
  ) {
    return _g_dbus_escape_object_path_bytestring(
      bytes,
    );
  }

  late final _g_dbus_escape_object_path_bytestringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<guint8>)>>(
      'g_dbus_escape_object_path_bytestring');
  late final _g_dbus_escape_object_path_bytestring =
      _g_dbus_escape_object_path_bytestringPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<guint8>)>();

  ffi.Pointer<gchar> g_dbus_escape_object_path(
    ffi.Pointer<gchar> s,
  ) {
    return _g_dbus_escape_object_path(
      s,
    );
  }

  late final _g_dbus_escape_object_pathPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>>(
      'g_dbus_escape_object_path');
  late final _g_dbus_escape_object_path = _g_dbus_escape_object_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<guint8> g_dbus_unescape_object_path(
    ffi.Pointer<gchar> s,
  ) {
    return _g_dbus_unescape_object_path(
      s,
    );
  }

  late final _g_dbus_unescape_object_pathPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<guint8> Function(ffi.Pointer<gchar>)>>(
      'g_dbus_unescape_object_path');
  late final _g_dbus_unescape_object_path = _g_dbus_unescape_object_pathPtr
      .asFunction<ffi.Pointer<guint8> Function(ffi.Pointer<gchar>)>();

  int g_debug_controller_get_type() {
    return _g_debug_controller_get_type();
  }

  late final _g_debug_controller_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_debug_controller_get_type');
  late final _g_debug_controller_get_type =
      _g_debug_controller_get_typePtr.asFunction<int Function()>();

  int g_debug_controller_get_debug_enabled(
    ffi.Pointer<GDebugController> self,
  ) {
    return _g_debug_controller_get_debug_enabled(
      self,
    );
  }

  late final _g_debug_controller_get_debug_enabledPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GDebugController>)>>(
      'g_debug_controller_get_debug_enabled');
  late final _g_debug_controller_get_debug_enabled =
      _g_debug_controller_get_debug_enabledPtr
          .asFunction<int Function(ffi.Pointer<GDebugController>)>();

  void g_debug_controller_set_debug_enabled(
    ffi.Pointer<GDebugController> self,
    int debug_enabled,
  ) {
    return _g_debug_controller_set_debug_enabled(
      self,
      debug_enabled,
    );
  }

  late final _g_debug_controller_set_debug_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDebugController>,
              gboolean)>>('g_debug_controller_set_debug_enabled');
  late final _g_debug_controller_set_debug_enabled =
      _g_debug_controller_set_debug_enabledPtr
          .asFunction<void Function(ffi.Pointer<GDebugController>, int)>();

  int g_debug_controller_dbus_get_type() {
    return _g_debug_controller_dbus_get_type();
  }

  late final _g_debug_controller_dbus_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_debug_controller_dbus_get_type');
  late final _g_debug_controller_dbus_get_type =
      _g_debug_controller_dbus_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDebugControllerDBus> g_debug_controller_dbus_new(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_debug_controller_dbus_new(
      connection,
      cancellable,
      error,
    );
  }

  late final _g_debug_controller_dbus_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDebugControllerDBus> Function(
                  ffi.Pointer<GDBusConnection>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_debug_controller_dbus_new');
  late final _g_debug_controller_dbus_new =
      _g_debug_controller_dbus_newPtr.asFunction<
          ffi.Pointer<GDebugControllerDBus> Function(
              ffi.Pointer<GDBusConnection>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_debug_controller_dbus_stop(
    ffi.Pointer<GDebugControllerDBus> self,
  ) {
    return _g_debug_controller_dbus_stop(
      self,
    );
  }

  late final _g_debug_controller_dbus_stopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDebugControllerDBus>)>>(
      'g_debug_controller_dbus_stop');
  late final _g_debug_controller_dbus_stop = _g_debug_controller_dbus_stopPtr
      .asFunction<void Function(ffi.Pointer<GDebugControllerDBus>)>();

  int g_drive_get_type() {
    return _g_drive_get_type();
  }

  late final _g_drive_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_drive_get_type');
  late final _g_drive_get_type =
      _g_drive_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> g_drive_get_name(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_name(
      drive,
    );
  }

  late final _g_drive_get_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDrive>)>>(
      'g_drive_get_name');
  late final _g_drive_get_name = _g_drive_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDrive>)>();

  ffi.Pointer<GIcon> g_drive_get_icon(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_icon(
      drive,
    );
  }

  late final _g_drive_get_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive>)>>(
      'g_drive_get_icon');
  late final _g_drive_get_icon = _g_drive_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive>)>();

  ffi.Pointer<GIcon> g_drive_get_symbolic_icon(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_symbolic_icon(
      drive,
    );
  }

  late final _g_drive_get_symbolic_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive>)>>(
      'g_drive_get_symbolic_icon');
  late final _g_drive_get_symbolic_icon = _g_drive_get_symbolic_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive>)>();

  int g_drive_has_volumes(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_has_volumes(
      drive,
    );
  }

  late final _g_drive_has_volumesPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_has_volumes');
  late final _g_drive_has_volumes =
      _g_drive_has_volumesPtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  ffi.Pointer<GList> g_drive_get_volumes(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_volumes(
      drive,
    );
  }

  late final _g_drive_get_volumesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GDrive>)>>(
      'g_drive_get_volumes');
  late final _g_drive_get_volumes = _g_drive_get_volumesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GDrive>)>();

  int g_drive_is_removable(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_is_removable(
      drive,
    );
  }

  late final _g_drive_is_removablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_is_removable');
  late final _g_drive_is_removable =
      _g_drive_is_removablePtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_is_media_removable(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_is_media_removable(
      drive,
    );
  }

  late final _g_drive_is_media_removablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_is_media_removable');
  late final _g_drive_is_media_removable = _g_drive_is_media_removablePtr
      .asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_has_media(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_has_media(
      drive,
    );
  }

  late final _g_drive_has_mediaPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_has_media');
  late final _g_drive_has_media =
      _g_drive_has_mediaPtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_is_media_check_automatic(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_is_media_check_automatic(
      drive,
    );
  }

  late final _g_drive_is_media_check_automaticPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_is_media_check_automatic');
  late final _g_drive_is_media_check_automatic =
      _g_drive_is_media_check_automaticPtr
          .asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_can_poll_for_media(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_can_poll_for_media(
      drive,
    );
  }

  late final _g_drive_can_poll_for_mediaPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_can_poll_for_media');
  late final _g_drive_can_poll_for_media = _g_drive_can_poll_for_mediaPtr
      .asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_can_eject(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_can_eject(
      drive,
    );
  }

  late final _g_drive_can_ejectPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_can_eject');
  late final _g_drive_can_eject =
      _g_drive_can_ejectPtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  void g_drive_eject(
    ffi.Pointer<GDrive> drive,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_drive_eject(
      drive,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_drive_ejectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_drive_eject');
  late final _g_drive_eject = _g_drive_ejectPtr.asFunction<
      void Function(ffi.Pointer<GDrive>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_drive_eject_finish(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_drive_eject_finish(
      drive,
      result,
      error,
    );
  }

  late final _g_drive_eject_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_drive_eject_finish');
  late final _g_drive_eject_finish = _g_drive_eject_finishPtr.asFunction<
      int Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_drive_poll_for_media(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_drive_poll_for_media(
      drive,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_drive_poll_for_mediaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDrive>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_drive_poll_for_media');
  late final _g_drive_poll_for_media = _g_drive_poll_for_mediaPtr.asFunction<
      void Function(ffi.Pointer<GDrive>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_drive_poll_for_media_finish(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_drive_poll_for_media_finish(
      drive,
      result,
      error,
    );
  }

  late final _g_drive_poll_for_media_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_drive_poll_for_media_finish');
  late final _g_drive_poll_for_media_finish =
      _g_drive_poll_for_media_finishPtr.asFunction<
          int Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_drive_get_identifier(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<ffi.Char> kind,
  ) {
    return _g_drive_get_identifier(
      drive,
      kind,
    );
  }

  late final _g_drive_get_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDrive>,
              ffi.Pointer<ffi.Char>)>>('g_drive_get_identifier');
  late final _g_drive_get_identifier = _g_drive_get_identifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GDrive>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_drive_enumerate_identifiers(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_enumerate_identifiers(
      drive,
    );
  }

  late final _g_drive_enumerate_identifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GDrive>)>>('g_drive_enumerate_identifiers');
  late final _g_drive_enumerate_identifiers =
      _g_drive_enumerate_identifiersPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GDrive>)>();

  int g_drive_get_start_stop_type(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_start_stop_type(
      drive,
    );
  }

  late final _g_drive_get_start_stop_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDrive>)>>(
          'g_drive_get_start_stop_type');
  late final _g_drive_get_start_stop_type = _g_drive_get_start_stop_typePtr
      .asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_can_start(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_can_start(
      drive,
    );
  }

  late final _g_drive_can_startPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_can_start');
  late final _g_drive_can_start =
      _g_drive_can_startPtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  int g_drive_can_start_degraded(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_can_start_degraded(
      drive,
    );
  }

  late final _g_drive_can_start_degradedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_can_start_degraded');
  late final _g_drive_can_start_degraded = _g_drive_can_start_degradedPtr
      .asFunction<int Function(ffi.Pointer<GDrive>)>();

  void g_drive_start(
    ffi.Pointer<GDrive> drive,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_drive_start(
      drive,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_drive_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_drive_start');
  late final _g_drive_start = _g_drive_startPtr.asFunction<
      void Function(ffi.Pointer<GDrive>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_drive_start_finish(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_drive_start_finish(
      drive,
      result,
      error,
    );
  }

  late final _g_drive_start_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_drive_start_finish');
  late final _g_drive_start_finish = _g_drive_start_finishPtr.asFunction<
      int Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_drive_can_stop(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_can_stop(
      drive,
    );
  }

  late final _g_drive_can_stopPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive>)>>(
          'g_drive_can_stop');
  late final _g_drive_can_stop =
      _g_drive_can_stopPtr.asFunction<int Function(ffi.Pointer<GDrive>)>();

  void g_drive_stop(
    ffi.Pointer<GDrive> drive,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_drive_stop(
      drive,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_drive_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_drive_stop');
  late final _g_drive_stop = _g_drive_stopPtr.asFunction<
      void Function(ffi.Pointer<GDrive>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_drive_stop_finish(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_drive_stop_finish(
      drive,
      result,
      error,
    );
  }

  late final _g_drive_stop_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_drive_stop_finish');
  late final _g_drive_stop_finish = _g_drive_stop_finishPtr.asFunction<
      int Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_drive_eject_with_operation(
    ffi.Pointer<GDrive> drive,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_drive_eject_with_operation(
      drive,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_drive_eject_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_drive_eject_with_operation');
  late final _g_drive_eject_with_operation =
      _g_drive_eject_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GDrive>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_drive_eject_with_operation_finish(
    ffi.Pointer<GDrive> drive,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_drive_eject_with_operation_finish(
      drive,
      result,
      error,
    );
  }

  late final _g_drive_eject_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_drive_eject_with_operation_finish');
  late final _g_drive_eject_with_operation_finish =
      _g_drive_eject_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GDrive>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_drive_get_sort_key(
    ffi.Pointer<GDrive> drive,
  ) {
    return _g_drive_get_sort_key(
      drive,
    );
  }

  late final _g_drive_get_sort_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDrive>)>>(
      'g_drive_get_sort_key');
  late final _g_drive_get_sort_key = _g_drive_get_sort_keyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GDrive>)>();

  int g_dtls_connection_get_type() {
    return _g_dtls_connection_get_type();
  }

  late final _g_dtls_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dtls_connection_get_type');
  late final _g_dtls_connection_get_type =
      _g_dtls_connection_get_typePtr.asFunction<int Function()>();

  void g_dtls_connection_set_database(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GTlsDatabase> database,
  ) {
    return _g_dtls_connection_set_database(
      conn,
      database,
    );
  }

  late final _g_dtls_connection_set_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDtlsConnection>,
              ffi.Pointer<GTlsDatabase>)>>('g_dtls_connection_set_database');
  late final _g_dtls_connection_set_database =
      _g_dtls_connection_set_databasePtr.asFunction<
          void Function(
              ffi.Pointer<GDtlsConnection>, ffi.Pointer<GTlsDatabase>)>();

  ffi.Pointer<GTlsDatabase> g_dtls_connection_get_database(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_database(
      conn,
    );
  }

  late final _g_dtls_connection_get_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsDatabase> Function(
              ffi.Pointer<GDtlsConnection>)>>('g_dtls_connection_get_database');
  late final _g_dtls_connection_get_database =
      _g_dtls_connection_get_databasePtr.asFunction<
          ffi.Pointer<GTlsDatabase> Function(ffi.Pointer<GDtlsConnection>)>();

  void g_dtls_connection_set_certificate(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GTlsCertificate> certificate,
  ) {
    return _g_dtls_connection_set_certificate(
      conn,
      certificate,
    );
  }

  late final _g_dtls_connection_set_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDtlsConnection>, ffi.Pointer<GTlsCertificate>)>>(
      'g_dtls_connection_set_certificate');
  late final _g_dtls_connection_set_certificate =
      _g_dtls_connection_set_certificatePtr.asFunction<
          void Function(
              ffi.Pointer<GDtlsConnection>, ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GTlsCertificate> g_dtls_connection_get_certificate(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_certificate(
      conn,
    );
  }

  late final _g_dtls_connection_get_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_certificate');
  late final _g_dtls_connection_get_certificate =
      _g_dtls_connection_get_certificatePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GDtlsConnection>)>();

  void g_dtls_connection_set_interaction(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GTlsInteraction> interaction,
  ) {
    return _g_dtls_connection_set_interaction(
      conn,
      interaction,
    );
  }

  late final _g_dtls_connection_set_interactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDtlsConnection>, ffi.Pointer<GTlsInteraction>)>>(
      'g_dtls_connection_set_interaction');
  late final _g_dtls_connection_set_interaction =
      _g_dtls_connection_set_interactionPtr.asFunction<
          void Function(
              ffi.Pointer<GDtlsConnection>, ffi.Pointer<GTlsInteraction>)>();

  ffi.Pointer<GTlsInteraction> g_dtls_connection_get_interaction(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_interaction(
      conn,
    );
  }

  late final _g_dtls_connection_get_interactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsInteraction> Function(
                  ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_interaction');
  late final _g_dtls_connection_get_interaction =
      _g_dtls_connection_get_interactionPtr.asFunction<
          ffi.Pointer<GTlsInteraction> Function(
              ffi.Pointer<GDtlsConnection>)>();

  ffi.Pointer<GTlsCertificate> g_dtls_connection_get_peer_certificate(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_peer_certificate(
      conn,
    );
  }

  late final _g_dtls_connection_get_peer_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_peer_certificate');
  late final _g_dtls_connection_get_peer_certificate =
      _g_dtls_connection_get_peer_certificatePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GDtlsConnection>)>();

  int g_dtls_connection_get_peer_certificate_errors(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_peer_certificate_errors(
      conn,
    );
  }

  late final _g_dtls_connection_get_peer_certificate_errorsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_peer_certificate_errors');
  late final _g_dtls_connection_get_peer_certificate_errors =
      _g_dtls_connection_get_peer_certificate_errorsPtr
          .asFunction<int Function(ffi.Pointer<GDtlsConnection>)>();

  void g_dtls_connection_set_require_close_notify(
    ffi.Pointer<GDtlsConnection> conn,
    int require_close_notify,
  ) {
    return _g_dtls_connection_set_require_close_notify(
      conn,
      require_close_notify,
    );
  }

  late final _g_dtls_connection_set_require_close_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDtlsConnection>,
              gboolean)>>('g_dtls_connection_set_require_close_notify');
  late final _g_dtls_connection_set_require_close_notify =
      _g_dtls_connection_set_require_close_notifyPtr
          .asFunction<void Function(ffi.Pointer<GDtlsConnection>, int)>();

  int g_dtls_connection_get_require_close_notify(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_require_close_notify(
      conn,
    );
  }

  late final _g_dtls_connection_get_require_close_notifyPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_require_close_notify');
  late final _g_dtls_connection_get_require_close_notify =
      _g_dtls_connection_get_require_close_notifyPtr
          .asFunction<int Function(ffi.Pointer<GDtlsConnection>)>();

  void g_dtls_connection_set_rehandshake_mode(
    ffi.Pointer<GDtlsConnection> conn,
    int mode,
  ) {
    return _g_dtls_connection_set_rehandshake_mode(
      conn,
      mode,
    );
  }

  late final _g_dtls_connection_set_rehandshake_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDtlsConnection>,
              ffi.Int32)>>('g_dtls_connection_set_rehandshake_mode');
  late final _g_dtls_connection_set_rehandshake_mode =
      _g_dtls_connection_set_rehandshake_modePtr
          .asFunction<void Function(ffi.Pointer<GDtlsConnection>, int)>();

  int g_dtls_connection_get_rehandshake_mode(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_rehandshake_mode(
      conn,
    );
  }

  late final _g_dtls_connection_get_rehandshake_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_rehandshake_mode');
  late final _g_dtls_connection_get_rehandshake_mode =
      _g_dtls_connection_get_rehandshake_modePtr
          .asFunction<int Function(ffi.Pointer<GDtlsConnection>)>();

  int g_dtls_connection_handshake(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_handshake(
      conn,
      cancellable,
      error,
    );
  }

  late final _g_dtls_connection_handshakePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDtlsConnection>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_connection_handshake');
  late final _g_dtls_connection_handshake =
      _g_dtls_connection_handshakePtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dtls_connection_handshake_async(
    ffi.Pointer<GDtlsConnection> conn,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dtls_connection_handshake_async(
      conn,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dtls_connection_handshake_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDtlsConnection>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dtls_connection_handshake_async');
  late final _g_dtls_connection_handshake_async =
      _g_dtls_connection_handshake_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDtlsConnection>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_dtls_connection_handshake_finish(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_handshake_finish(
      conn,
      result,
      error,
    );
  }

  late final _g_dtls_connection_handshake_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDtlsConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_connection_handshake_finish');
  late final _g_dtls_connection_handshake_finish =
      _g_dtls_connection_handshake_finishPtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dtls_connection_shutdown(
    ffi.Pointer<GDtlsConnection> conn,
    int shutdown_read,
    int shutdown_write,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_shutdown(
      conn,
      shutdown_read,
      shutdown_write,
      cancellable,
      error,
    );
  }

  late final _g_dtls_connection_shutdownPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection>,
              gboolean,
              gboolean,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dtls_connection_shutdown');
  late final _g_dtls_connection_shutdown =
      _g_dtls_connection_shutdownPtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dtls_connection_shutdown_async(
    ffi.Pointer<GDtlsConnection> conn,
    int shutdown_read,
    int shutdown_write,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dtls_connection_shutdown_async(
      conn,
      shutdown_read,
      shutdown_write,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dtls_connection_shutdown_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDtlsConnection>,
              gboolean,
              gboolean,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dtls_connection_shutdown_async');
  late final _g_dtls_connection_shutdown_async =
      _g_dtls_connection_shutdown_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDtlsConnection>, int, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_dtls_connection_shutdown_finish(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_shutdown_finish(
      conn,
      result,
      error,
    );
  }

  late final _g_dtls_connection_shutdown_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDtlsConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_connection_shutdown_finish');
  late final _g_dtls_connection_shutdown_finish =
      _g_dtls_connection_shutdown_finishPtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dtls_connection_close(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_close(
      conn,
      cancellable,
      error,
    );
  }

  late final _g_dtls_connection_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dtls_connection_close');
  late final _g_dtls_connection_close = _g_dtls_connection_closePtr.asFunction<
      int Function(ffi.Pointer<GDtlsConnection>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dtls_connection_close_async(
    ffi.Pointer<GDtlsConnection> conn,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_dtls_connection_close_async(
      conn,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_dtls_connection_close_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDtlsConnection>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_dtls_connection_close_async');
  late final _g_dtls_connection_close_async =
      _g_dtls_connection_close_asyncPtr.asFunction<
          void Function(ffi.Pointer<GDtlsConnection>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_dtls_connection_close_finish(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_close_finish(
      conn,
      result,
      error,
    );
  }

  late final _g_dtls_connection_close_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDtlsConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_connection_close_finish');
  late final _g_dtls_connection_close_finish =
      _g_dtls_connection_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dtls_connection_emit_accept_certificate(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<GTlsCertificate> peer_cert,
    int errors,
  ) {
    return _g_dtls_connection_emit_accept_certificate(
      conn,
      peer_cert,
      errors,
    );
  }

  late final _g_dtls_connection_emit_accept_certificatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Int32)>>('g_dtls_connection_emit_accept_certificate');
  late final _g_dtls_connection_emit_accept_certificate =
      _g_dtls_connection_emit_accept_certificatePtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>,
              ffi.Pointer<GTlsCertificate>, int)>();

  void g_dtls_connection_set_advertised_protocols(
    ffi.Pointer<GDtlsConnection> conn,
    ffi.Pointer<ffi.Pointer<gchar>> protocols,
  ) {
    return _g_dtls_connection_set_advertised_protocols(
      conn,
      protocols,
    );
  }

  late final _g_dtls_connection_set_advertised_protocolsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDtlsConnection>,
                  ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_dtls_connection_set_advertised_protocols');
  late final _g_dtls_connection_set_advertised_protocols =
      _g_dtls_connection_set_advertised_protocolsPtr.asFunction<
          void Function(
              ffi.Pointer<GDtlsConnection>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_dtls_connection_get_negotiated_protocol(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_negotiated_protocol(
      conn,
    );
  }

  late final _g_dtls_connection_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_negotiated_protocol');
  late final _g_dtls_connection_get_negotiated_protocol =
      _g_dtls_connection_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDtlsConnection>)>();

  int g_dtls_connection_get_channel_binding_data(
    ffi.Pointer<GDtlsConnection> conn,
    int type,
    ffi.Pointer<GByteArray> data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_connection_get_channel_binding_data(
      conn,
      type,
      data,
      error,
    );
  }

  late final _g_dtls_connection_get_channel_binding_dataPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDtlsConnection>, ffi.Int32,
                  ffi.Pointer<GByteArray>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_connection_get_channel_binding_data');
  late final _g_dtls_connection_get_channel_binding_data =
      _g_dtls_connection_get_channel_binding_dataPtr.asFunction<
          int Function(ffi.Pointer<GDtlsConnection>, int,
              ffi.Pointer<GByteArray>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dtls_connection_get_protocol_version(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_protocol_version(
      conn,
    );
  }

  late final _g_dtls_connection_get_protocol_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_protocol_version');
  late final _g_dtls_connection_get_protocol_version =
      _g_dtls_connection_get_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<GDtlsConnection>)>();

  ffi.Pointer<gchar> g_dtls_connection_get_ciphersuite_name(
    ffi.Pointer<GDtlsConnection> conn,
  ) {
    return _g_dtls_connection_get_ciphersuite_name(
      conn,
    );
  }

  late final _g_dtls_connection_get_ciphersuite_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDtlsConnection>)>>(
      'g_dtls_connection_get_ciphersuite_name');
  late final _g_dtls_connection_get_ciphersuite_name =
      _g_dtls_connection_get_ciphersuite_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDtlsConnection>)>();

  int g_dtls_client_connection_get_type() {
    return _g_dtls_client_connection_get_type();
  }

  late final _g_dtls_client_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dtls_client_connection_get_type');
  late final _g_dtls_client_connection_get_type =
      _g_dtls_client_connection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDatagramBased> g_dtls_client_connection_new(
    ffi.Pointer<GDatagramBased> base_socket,
    ffi.Pointer<GSocketConnectable> server_identity,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_client_connection_new(
      base_socket,
      server_identity,
      error,
    );
  }

  late final _g_dtls_client_connection_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDatagramBased> Function(
                  ffi.Pointer<GDatagramBased>,
                  ffi.Pointer<GSocketConnectable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_client_connection_new');
  late final _g_dtls_client_connection_new =
      _g_dtls_client_connection_newPtr.asFunction<
          ffi.Pointer<GDatagramBased> Function(
              ffi.Pointer<GDatagramBased>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_dtls_client_connection_get_validation_flags(
    ffi.Pointer<GDtlsClientConnection> conn,
  ) {
    return _g_dtls_client_connection_get_validation_flags(
      conn,
    );
  }

  late final _g_dtls_client_connection_get_validation_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GDtlsClientConnection>)>>(
      'g_dtls_client_connection_get_validation_flags');
  late final _g_dtls_client_connection_get_validation_flags =
      _g_dtls_client_connection_get_validation_flagsPtr
          .asFunction<int Function(ffi.Pointer<GDtlsClientConnection>)>();

  void g_dtls_client_connection_set_validation_flags(
    ffi.Pointer<GDtlsClientConnection> conn,
    int flags,
  ) {
    return _g_dtls_client_connection_set_validation_flags(
      conn,
      flags,
    );
  }

  late final _g_dtls_client_connection_set_validation_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDtlsClientConnection>,
              ffi.Int32)>>('g_dtls_client_connection_set_validation_flags');
  late final _g_dtls_client_connection_set_validation_flags =
      _g_dtls_client_connection_set_validation_flagsPtr
          .asFunction<void Function(ffi.Pointer<GDtlsClientConnection>, int)>();

  ffi.Pointer<GSocketConnectable> g_dtls_client_connection_get_server_identity(
    ffi.Pointer<GDtlsClientConnection> conn,
  ) {
    return _g_dtls_client_connection_get_server_identity(
      conn,
    );
  }

  late final _g_dtls_client_connection_get_server_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnectable> Function(
                  ffi.Pointer<GDtlsClientConnection>)>>(
      'g_dtls_client_connection_get_server_identity');
  late final _g_dtls_client_connection_get_server_identity =
      _g_dtls_client_connection_get_server_identityPtr.asFunction<
          ffi.Pointer<GSocketConnectable> Function(
              ffi.Pointer<GDtlsClientConnection>)>();

  void g_dtls_client_connection_set_server_identity(
    ffi.Pointer<GDtlsClientConnection> conn,
    ffi.Pointer<GSocketConnectable> identity,
  ) {
    return _g_dtls_client_connection_set_server_identity(
      conn,
      identity,
    );
  }

  late final _g_dtls_client_connection_set_server_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDtlsClientConnection>,
                  ffi.Pointer<GSocketConnectable>)>>(
      'g_dtls_client_connection_set_server_identity');
  late final _g_dtls_client_connection_set_server_identity =
      _g_dtls_client_connection_set_server_identityPtr.asFunction<
          void Function(ffi.Pointer<GDtlsClientConnection>,
              ffi.Pointer<GSocketConnectable>)>();

  ffi.Pointer<GList> g_dtls_client_connection_get_accepted_cas(
    ffi.Pointer<GDtlsClientConnection> conn,
  ) {
    return _g_dtls_client_connection_get_accepted_cas(
      conn,
    );
  }

  late final _g_dtls_client_connection_get_accepted_casPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GDtlsClientConnection>)>>(
      'g_dtls_client_connection_get_accepted_cas');
  late final _g_dtls_client_connection_get_accepted_cas =
      _g_dtls_client_connection_get_accepted_casPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GDtlsClientConnection>)>();

  int g_dtls_server_connection_get_type() {
    return _g_dtls_server_connection_get_type();
  }

  late final _g_dtls_server_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dtls_server_connection_get_type');
  late final _g_dtls_server_connection_get_type =
      _g_dtls_server_connection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GDatagramBased> g_dtls_server_connection_new(
    ffi.Pointer<GDatagramBased> base_socket,
    ffi.Pointer<GTlsCertificate> certificate,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dtls_server_connection_new(
      base_socket,
      certificate,
      error,
    );
  }

  late final _g_dtls_server_connection_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDatagramBased> Function(
                  ffi.Pointer<GDatagramBased>,
                  ffi.Pointer<GTlsCertificate>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dtls_server_connection_new');
  late final _g_dtls_server_connection_new =
      _g_dtls_server_connection_newPtr.asFunction<
          ffi.Pointer<GDatagramBased> Function(
              ffi.Pointer<GDatagramBased>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_icon_get_type() {
    return _g_icon_get_type();
  }

  late final _g_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_icon_get_type');
  late final _g_icon_get_type =
      _g_icon_get_typePtr.asFunction<int Function()>();

  int g_icon_hash(
    gconstpointer icon,
  ) {
    return _g_icon_hash(
      icon,
    );
  }

  late final _g_icon_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_icon_hash');
  late final _g_icon_hash =
      _g_icon_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_icon_equal(
    ffi.Pointer<GIcon> icon1,
    ffi.Pointer<GIcon> icon2,
  ) {
    return _g_icon_equal(
      icon1,
      icon2,
    );
  }

  late final _g_icon_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GIcon>, ffi.Pointer<GIcon>)>>('g_icon_equal');
  late final _g_icon_equal = _g_icon_equalPtr
      .asFunction<int Function(ffi.Pointer<GIcon>, ffi.Pointer<GIcon>)>();

  ffi.Pointer<gchar> g_icon_to_string(
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_icon_to_string(
      icon,
    );
  }

  late final _g_icon_to_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GIcon>)>>(
      'g_icon_to_string');
  late final _g_icon_to_string = _g_icon_to_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GIcon>)>();

  ffi.Pointer<GIcon> g_icon_new_for_string(
    ffi.Pointer<gchar> str,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_icon_new_for_string(
      str,
      error,
    );
  }

  late final _g_icon_new_for_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_icon_new_for_string');
  late final _g_icon_new_for_string = _g_icon_new_for_stringPtr.asFunction<
      ffi.Pointer<GIcon> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_icon_serialize(
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_icon_serialize(
      icon,
    );
  }

  late final _g_icon_serializePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GIcon>)>>(
      'g_icon_serialize');
  late final _g_icon_serialize = _g_icon_serializePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GIcon>)>();

  ffi.Pointer<GIcon> g_icon_deserialize(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_icon_deserialize(
      value,
    );
  }

  late final _g_icon_deserializePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVariant>)>>(
      'g_icon_deserialize');
  late final _g_icon_deserialize = _g_icon_deserializePtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVariant>)>();

  int g_emblem_get_type() {
    return _g_emblem_get_type();
  }

  late final _g_emblem_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_emblem_get_type');
  late final _g_emblem_get_type =
      _g_emblem_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GEmblem> g_emblem_new(
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_emblem_new(
      icon,
    );
  }

  late final _g_emblem_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEmblem> Function(ffi.Pointer<GIcon>)>>('g_emblem_new');
  late final _g_emblem_new = _g_emblem_newPtr
      .asFunction<ffi.Pointer<GEmblem> Function(ffi.Pointer<GIcon>)>();

  ffi.Pointer<GEmblem> g_emblem_new_with_origin(
    ffi.Pointer<GIcon> icon,
    int origin,
  ) {
    return _g_emblem_new_with_origin(
      icon,
      origin,
    );
  }

  late final _g_emblem_new_with_originPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEmblem> Function(
              ffi.Pointer<GIcon>, ffi.Int32)>>('g_emblem_new_with_origin');
  late final _g_emblem_new_with_origin = _g_emblem_new_with_originPtr
      .asFunction<ffi.Pointer<GEmblem> Function(ffi.Pointer<GIcon>, int)>();

  ffi.Pointer<GIcon> g_emblem_get_icon(
    ffi.Pointer<GEmblem> emblem,
  ) {
    return _g_emblem_get_icon(
      emblem,
    );
  }

  late final _g_emblem_get_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GEmblem>)>>(
      'g_emblem_get_icon');
  late final _g_emblem_get_icon = _g_emblem_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GEmblem>)>();

  int g_emblem_get_origin(
    ffi.Pointer<GEmblem> emblem,
  ) {
    return _g_emblem_get_origin(
      emblem,
    );
  }

  late final _g_emblem_get_originPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GEmblem>)>>(
          'g_emblem_get_origin');
  late final _g_emblem_get_origin =
      _g_emblem_get_originPtr.asFunction<int Function(ffi.Pointer<GEmblem>)>();

  int g_emblemed_icon_get_type() {
    return _g_emblemed_icon_get_type();
  }

  late final _g_emblemed_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_emblemed_icon_get_type');
  late final _g_emblemed_icon_get_type =
      _g_emblemed_icon_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIcon> g_emblemed_icon_new(
    ffi.Pointer<GIcon> icon,
    ffi.Pointer<GEmblem> emblem,
  ) {
    return _g_emblemed_icon_new(
      icon,
      emblem,
    );
  }

  late final _g_emblemed_icon_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<GIcon>,
              ffi.Pointer<GEmblem>)>>('g_emblemed_icon_new');
  late final _g_emblemed_icon_new = _g_emblemed_icon_newPtr.asFunction<
      ffi.Pointer<GIcon> Function(ffi.Pointer<GIcon>, ffi.Pointer<GEmblem>)>();

  ffi.Pointer<GIcon> g_emblemed_icon_get_icon(
    ffi.Pointer<GEmblemedIcon> emblemed,
  ) {
    return _g_emblemed_icon_get_icon(
      emblemed,
    );
  }

  late final _g_emblemed_icon_get_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(
              ffi.Pointer<GEmblemedIcon>)>>('g_emblemed_icon_get_icon');
  late final _g_emblemed_icon_get_icon = _g_emblemed_icon_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GEmblemedIcon>)>();

  ffi.Pointer<GList> g_emblemed_icon_get_emblems(
    ffi.Pointer<GEmblemedIcon> emblemed,
  ) {
    return _g_emblemed_icon_get_emblems(
      emblemed,
    );
  }

  late final _g_emblemed_icon_get_emblemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GEmblemedIcon>)>>('g_emblemed_icon_get_emblems');
  late final _g_emblemed_icon_get_emblems = _g_emblemed_icon_get_emblemsPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GEmblemedIcon>)>();

  void g_emblemed_icon_add_emblem(
    ffi.Pointer<GEmblemedIcon> emblemed,
    ffi.Pointer<GEmblem> emblem,
  ) {
    return _g_emblemed_icon_add_emblem(
      emblemed,
      emblem,
    );
  }

  late final _g_emblemed_icon_add_emblemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GEmblemedIcon>,
              ffi.Pointer<GEmblem>)>>('g_emblemed_icon_add_emblem');
  late final _g_emblemed_icon_add_emblem =
      _g_emblemed_icon_add_emblemPtr.asFunction<
          void Function(ffi.Pointer<GEmblemedIcon>, ffi.Pointer<GEmblem>)>();

  void g_emblemed_icon_clear_emblems(
    ffi.Pointer<GEmblemedIcon> emblemed,
  ) {
    return _g_emblemed_icon_clear_emblems(
      emblemed,
    );
  }

  late final _g_emblemed_icon_clear_emblemsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GEmblemedIcon>)>>(
      'g_emblemed_icon_clear_emblems');
  late final _g_emblemed_icon_clear_emblems = _g_emblemed_icon_clear_emblemsPtr
      .asFunction<void Function(ffi.Pointer<GEmblemedIcon>)>();

  int g_file_get_type() {
    return _g_file_get_type();
  }

  late final _g_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_file_get_type');
  late final _g_file_get_type =
      _g_file_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFile> g_file_new_for_path(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _g_file_new_for_path(
      path,
    );
  }

  late final _g_file_new_for_pathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>>(
      'g_file_new_for_path');
  late final _g_file_new_for_path = _g_file_new_for_pathPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_file_new_for_uri(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_file_new_for_uri(
      uri,
    );
  }

  late final _g_file_new_for_uriPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>>(
      'g_file_new_for_uri');
  late final _g_file_new_for_uri = _g_file_new_for_uriPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_file_new_for_commandline_arg(
    ffi.Pointer<ffi.Char> arg,
  ) {
    return _g_file_new_for_commandline_arg(
      arg,
    );
  }

  late final _g_file_new_for_commandline_argPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>>(
      'g_file_new_for_commandline_arg');
  late final _g_file_new_for_commandline_arg =
      _g_file_new_for_commandline_argPtr
          .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_file_new_for_commandline_arg_and_cwd(
    ffi.Pointer<gchar> arg,
    ffi.Pointer<gchar> cwd,
  ) {
    return _g_file_new_for_commandline_arg_and_cwd(
      arg,
      cwd,
    );
  }

  late final _g_file_new_for_commandline_arg_and_cwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_file_new_for_commandline_arg_and_cwd');
  late final _g_file_new_for_commandline_arg_and_cwd =
      _g_file_new_for_commandline_arg_and_cwdPtr.asFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GFile> g_file_new_tmp(
    ffi.Pointer<ffi.Char> tmpl,
    ffi.Pointer<ffi.Pointer<GFileIOStream>> iostream,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_new_tmp(
      tmpl,
      iostream,
      error,
    );
  }

  late final _g_file_new_tmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GFileIOStream>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_new_tmp');
  late final _g_file_new_tmp = _g_file_new_tmpPtr.asFunction<
      ffi.Pointer<GFile> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GFileIOStream>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFile> g_file_parse_name(
    ffi.Pointer<ffi.Char> parse_name,
  ) {
    return _g_file_parse_name(
      parse_name,
    );
  }

  late final _g_file_parse_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>>(
      'g_file_parse_name');
  late final _g_file_parse_name = _g_file_parse_namePtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_file_new_build_filename(
    ffi.Pointer<gchar> first_element,
  ) {
    return _g_file_new_build_filename(
      first_element,
    );
  }

  late final _g_file_new_build_filenamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<gchar>)>>(
      'g_file_new_build_filename');
  late final _g_file_new_build_filename = _g_file_new_build_filenamePtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GFile> g_file_dup(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_dup(
      file,
    );
  }

  late final _g_file_dupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile>)>>(
      'g_file_dup');
  late final _g_file_dup = _g_file_dupPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile>)>();

  int g_file_hash(
    gconstpointer file,
  ) {
    return _g_file_hash(
      file,
    );
  }

  late final _g_file_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_file_hash');
  late final _g_file_hash =
      _g_file_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_file_equal(
    ffi.Pointer<GFile> file1,
    ffi.Pointer<GFile> file2,
  ) {
    return _g_file_equal(
      file1,
      file2,
    );
  }

  late final _g_file_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>, ffi.Pointer<GFile>)>>('g_file_equal');
  late final _g_file_equal = _g_file_equalPtr
      .asFunction<int Function(ffi.Pointer<GFile>, ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_get_basename(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_basename(
      file,
    );
  }

  late final _g_file_get_basenamePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_basename');
  late final _g_file_get_basename = _g_file_get_basenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_get_path(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_path(
      file,
    );
  }

  late final _g_file_get_pathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_path');
  late final _g_file_get_path = _g_file_get_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_peek_path(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_peek_path(
      file,
    );
  }

  late final _g_file_peek_pathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_peek_path');
  late final _g_file_peek_path = _g_file_peek_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_get_uri(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_uri(
      file,
    );
  }

  late final _g_file_get_uriPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_uri');
  late final _g_file_get_uri = _g_file_get_uriPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_get_parse_name(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_parse_name(
      file,
    );
  }

  late final _g_file_get_parse_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_parse_name');
  late final _g_file_get_parse_name = _g_file_get_parse_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<GFile> g_file_get_parent(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_parent(
      file,
    );
  }

  late final _g_file_get_parentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_parent');
  late final _g_file_get_parent = _g_file_get_parentPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile>)>();

  int g_file_has_parent(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GFile> parent,
  ) {
    return _g_file_has_parent(
      file,
      parent,
    );
  }

  late final _g_file_has_parentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>, ffi.Pointer<GFile>)>>('g_file_has_parent');
  late final _g_file_has_parent = _g_file_has_parentPtr
      .asFunction<int Function(ffi.Pointer<GFile>, ffi.Pointer<GFile>)>();

  ffi.Pointer<GFile> g_file_get_child(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_file_get_child(
      file,
      name,
    );
  }

  late final _g_file_get_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>)>>('g_file_get_child');
  late final _g_file_get_child = _g_file_get_childPtr.asFunction<
      ffi.Pointer<GFile> Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_file_get_child_for_display_name(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> display_name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_get_child_for_display_name(
      file,
      display_name,
      error,
    );
  }

  late final _g_file_get_child_for_display_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_get_child_for_display_name');
  late final _g_file_get_child_for_display_name =
      _g_file_get_child_for_display_namePtr.asFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_has_prefix(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GFile> prefix,
  ) {
    return _g_file_has_prefix(
      file,
      prefix,
    );
  }

  late final _g_file_has_prefixPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>, ffi.Pointer<GFile>)>>('g_file_has_prefix');
  late final _g_file_has_prefix = _g_file_has_prefixPtr
      .asFunction<int Function(ffi.Pointer<GFile>, ffi.Pointer<GFile>)>();

  ffi.Pointer<ffi.Char> g_file_get_relative_path(
    ffi.Pointer<GFile> parent,
    ffi.Pointer<GFile> descendant,
  ) {
    return _g_file_get_relative_path(
      parent,
      descendant,
    );
  }

  late final _g_file_get_relative_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GFile>)>>('g_file_get_relative_path');
  late final _g_file_get_relative_path =
      _g_file_get_relative_pathPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFile>, ffi.Pointer<GFile>)>();

  ffi.Pointer<GFile> g_file_resolve_relative_path(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> relative_path,
  ) {
    return _g_file_resolve_relative_path(
      file,
      relative_path,
    );
  }

  late final _g_file_resolve_relative_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>)>>('g_file_resolve_relative_path');
  late final _g_file_resolve_relative_path =
      _g_file_resolve_relative_pathPtr.asFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>)>();

  int g_file_is_native(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_is_native(
      file,
    );
  }

  late final _g_file_is_nativePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFile>)>>(
          'g_file_is_native');
  late final _g_file_is_native =
      _g_file_is_nativePtr.asFunction<int Function(ffi.Pointer<GFile>)>();

  int g_file_has_uri_scheme(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> uri_scheme,
  ) {
    return _g_file_has_uri_scheme(
      file,
      uri_scheme,
    );
  }

  late final _g_file_has_uri_schemePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>)>>('g_file_has_uri_scheme');
  late final _g_file_has_uri_scheme = _g_file_has_uri_schemePtr
      .asFunction<int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_file_get_uri_scheme(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_get_uri_scheme(
      file,
    );
  }

  late final _g_file_get_uri_schemePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>>(
      'g_file_get_uri_scheme');
  late final _g_file_get_uri_scheme = _g_file_get_uri_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<GFileInputStream> g_file_read(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_read(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileInputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_read');
  late final _g_file_read = _g_file_readPtr.asFunction<
      ffi.Pointer<GFileInputStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_read_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_read_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_read_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_read_async');
  late final _g_file_read_async = _g_file_read_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInputStream> g_file_read_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_read_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_read_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileInputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_read_finish');
  late final _g_file_read_finish = _g_file_read_finishPtr.asFunction<
      ffi.Pointer<GFileInputStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileOutputStream> g_file_append_to(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_append_to(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_append_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_append_to');
  late final _g_file_append_to = _g_file_append_toPtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileOutputStream> g_file_create(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_create(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_create');
  late final _g_file_create = _g_file_createPtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileOutputStream> g_file_replace(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace(
      file,
      etag,
      make_backup,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_replace');
  late final _g_file_replace = _g_file_replacePtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_append_to_async(
    ffi.Pointer<GFile> file,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_append_to_async(
      file,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_append_to_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_append_to_async');
  late final _g_file_append_to_async = _g_file_append_to_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileOutputStream> g_file_append_to_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_append_to_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_append_to_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_append_to_finish');
  late final _g_file_append_to_finish = _g_file_append_to_finishPtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_create_async(
    ffi.Pointer<GFile> file,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_create_async(
      file,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_create_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_create_async');
  late final _g_file_create_async = _g_file_create_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileOutputStream> g_file_create_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_create_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_create_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_create_finish');
  late final _g_file_create_finish = _g_file_create_finishPtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_replace_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_replace_async(
      file,
      etag,
      make_backup,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_replace_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_replace_async');
  late final _g_file_replace_async = _g_file_replace_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileOutputStream> g_file_replace_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_replace_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_replace_finish');
  late final _g_file_replace_finish = _g_file_replace_finishPtr.asFunction<
      ffi.Pointer<GFileOutputStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileIOStream> g_file_open_readwrite(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_open_readwrite(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_open_readwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_open_readwrite');
  late final _g_file_open_readwrite = _g_file_open_readwritePtr.asFunction<
      ffi.Pointer<GFileIOStream> Function(ffi.Pointer<GFile>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_open_readwrite_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_open_readwrite_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_open_readwrite_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_open_readwrite_async');
  late final _g_file_open_readwrite_async =
      _g_file_open_readwrite_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileIOStream> g_file_open_readwrite_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_open_readwrite_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_open_readwrite_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileIOStream> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_open_readwrite_finish');
  late final _g_file_open_readwrite_finish =
      _g_file_open_readwrite_finishPtr.asFunction<
          ffi.Pointer<GFileIOStream> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileIOStream> g_file_create_readwrite(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_create_readwrite(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_create_readwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_create_readwrite');
  late final _g_file_create_readwrite = _g_file_create_readwritePtr.asFunction<
      ffi.Pointer<GFileIOStream> Function(ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_create_readwrite_async(
    ffi.Pointer<GFile> file,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_create_readwrite_async(
      file,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_create_readwrite_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_create_readwrite_async');
  late final _g_file_create_readwrite_async =
      _g_file_create_readwrite_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileIOStream> g_file_create_readwrite_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_create_readwrite_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_create_readwrite_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileIOStream> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_create_readwrite_finish');
  late final _g_file_create_readwrite_finish =
      _g_file_create_readwrite_finishPtr.asFunction<
          ffi.Pointer<GFileIOStream> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileIOStream> g_file_replace_readwrite(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace_readwrite(
      file,
      etag,
      make_backup,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_replace_readwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_replace_readwrite');
  late final _g_file_replace_readwrite =
      _g_file_replace_readwritePtr.asFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_replace_readwrite_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_replace_readwrite_async(
      file,
      etag,
      make_backup,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_replace_readwrite_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_replace_readwrite_async');
  late final _g_file_replace_readwrite_async =
      _g_file_replace_readwrite_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileIOStream> g_file_replace_readwrite_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace_readwrite_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_replace_readwrite_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileIOStream> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_replace_readwrite_finish');
  late final _g_file_replace_readwrite_finish =
      _g_file_replace_readwrite_finishPtr.asFunction<
          ffi.Pointer<GFileIOStream> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_query_exists(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_file_query_exists(
      file,
      cancellable,
    );
  }

  late final _g_file_query_existsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>)>>('g_file_query_exists');
  late final _g_file_query_exists = _g_file_query_existsPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>)>();

  int g_file_query_file_type(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_file_query_file_type(
      file,
      flags,
      cancellable,
    );
  }

  late final _g_file_query_file_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GFile>, ffi.Int32,
              ffi.Pointer<GCancellable>)>>('g_file_query_file_type');
  late final _g_file_query_file_type = _g_file_query_file_typePtr.asFunction<
      int Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>)>();

  ffi.Pointer<GFileInfo> g_file_query_info(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_info(
      file,
      attributes,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_query_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_query_info');
  late final _g_file_query_info = _g_file_query_infoPtr.asFunction<
      ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_query_info_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_query_info_async(
      file,
      attributes,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_query_info_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_query_info_async');
  late final _g_file_query_info_async = _g_file_query_info_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInfo> g_file_query_info_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_info_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_query_info_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_query_info_finish');
  late final _g_file_query_info_finish =
      _g_file_query_info_finishPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileInfo> g_file_query_filesystem_info(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_filesystem_info(
      file,
      attributes,
      cancellable,
      error,
    );
  }

  late final _g_file_query_filesystem_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_filesystem_info');
  late final _g_file_query_filesystem_info =
      _g_file_query_filesystem_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_query_filesystem_info_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_query_filesystem_info_async(
      file,
      attributes,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_query_filesystem_info_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_query_filesystem_info_async');
  late final _g_file_query_filesystem_info_async =
      _g_file_query_filesystem_info_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInfo> g_file_query_filesystem_info_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_filesystem_info_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_query_filesystem_info_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_filesystem_info_finish');
  late final _g_file_query_filesystem_info_finish =
      _g_file_query_filesystem_info_finishPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GMount> g_file_find_enclosing_mount(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_find_enclosing_mount(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_find_enclosing_mountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GMount> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_find_enclosing_mount');
  late final _g_file_find_enclosing_mount =
      _g_file_find_enclosing_mountPtr.asFunction<
          ffi.Pointer<GMount> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_find_enclosing_mount_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_find_enclosing_mount_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_find_enclosing_mount_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_find_enclosing_mount_async');
  late final _g_file_find_enclosing_mount_async =
      _g_file_find_enclosing_mount_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GMount> g_file_find_enclosing_mount_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_find_enclosing_mount_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_find_enclosing_mount_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GMount> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_find_enclosing_mount_finish');
  late final _g_file_find_enclosing_mount_finish =
      _g_file_find_enclosing_mount_finishPtr.asFunction<
          ffi.Pointer<GMount> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileEnumerator> g_file_enumerate_children(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerate_children(
      file,
      attributes,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_enumerate_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileEnumerator> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_enumerate_children');
  late final _g_file_enumerate_children =
      _g_file_enumerate_childrenPtr.asFunction<
          ffi.Pointer<GFileEnumerator> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_enumerate_children_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attributes,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_enumerate_children_async(
      file,
      attributes,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_enumerate_children_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_enumerate_children_async');
  late final _g_file_enumerate_children_async =
      _g_file_enumerate_children_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileEnumerator> g_file_enumerate_children_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerate_children_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_enumerate_children_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileEnumerator> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_enumerate_children_finish');
  late final _g_file_enumerate_children_finish =
      _g_file_enumerate_children_finishPtr.asFunction<
          ffi.Pointer<GFileEnumerator> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFile> g_file_set_display_name(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> display_name,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_display_name(
      file,
      display_name,
      cancellable,
      error,
    );
  }

  late final _g_file_set_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_display_name');
  late final _g_file_set_display_name = _g_file_set_display_namePtr.asFunction<
      ffi.Pointer<GFile> Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_set_display_name_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> display_name,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_set_display_name_async(
      file,
      display_name,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_set_display_name_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_set_display_name_async');
  late final _g_file_set_display_name_async =
      _g_file_set_display_name_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFile> g_file_set_display_name_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_display_name_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_set_display_name_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_display_name_finish');
  late final _g_file_set_display_name_finish =
      _g_file_set_display_name_finishPtr.asFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_delete(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_delete(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_deletePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_delete');
  late final _g_file_delete = _g_file_deletePtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_delete_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_delete_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_delete_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_delete_async');
  late final _g_file_delete_async = _g_file_delete_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_file_delete_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_delete_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_delete_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_delete_finish');
  late final _g_file_delete_finish = _g_file_delete_finishPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_trash(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_trash(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_trashPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_trash');
  late final _g_file_trash = _g_file_trashPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_trash_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_trash_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_trash_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_trash_async');
  late final _g_file_trash_async = _g_file_trash_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_file_trash_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_trash_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_trash_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_trash_finish');
  late final _g_file_trash_finish = _g_file_trash_finishPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_copy(
    ffi.Pointer<GFile> source,
    ffi.Pointer<GFile> destination,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GFileProgressCallback progress_callback,
    gpointer progress_callback_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_copy(
      source,
      destination,
      flags,
      cancellable,
      progress_callback,
      progress_callback_data,
      error,
    );
  }

  late final _g_file_copyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GFileProgressCallback,
              gpointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_copy');
  late final _g_file_copy = _g_file_copyPtr.asFunction<
      int Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GFile>,
          int,
          ffi.Pointer<GCancellable>,
          GFileProgressCallback,
          gpointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_copy_async(
    ffi.Pointer<GFile> source,
    ffi.Pointer<GFile> destination,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GFileProgressCallback progress_callback,
    gpointer progress_callback_data,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_copy_async(
      source,
      destination,
      flags,
      io_priority,
      cancellable,
      progress_callback,
      progress_callback_data,
      callback,
      user_data,
    );
  }

  late final _g_file_copy_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GFileProgressCallback,
              gpointer,
              GAsyncReadyCallback,
              gpointer)>>('g_file_copy_async');
  late final _g_file_copy_async = _g_file_copy_asyncPtr.asFunction<
      void Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GFile>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          GFileProgressCallback,
          gpointer,
          GAsyncReadyCallback,
          gpointer)>();

  int g_file_copy_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_copy_finish(
      file,
      res,
      error,
    );
  }

  late final _g_file_copy_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_copy_finish');
  late final _g_file_copy_finish = _g_file_copy_finishPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_move(
    ffi.Pointer<GFile> source,
    ffi.Pointer<GFile> destination,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GFileProgressCallback progress_callback,
    gpointer progress_callback_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_move(
      source,
      destination,
      flags,
      cancellable,
      progress_callback,
      progress_callback_data,
      error,
    );
  }

  late final _g_file_movePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GFileProgressCallback,
              gpointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_move');
  late final _g_file_move = _g_file_movePtr.asFunction<
      int Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GFile>,
          int,
          ffi.Pointer<GCancellable>,
          GFileProgressCallback,
          gpointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_move_async(
    ffi.Pointer<GFile> source,
    ffi.Pointer<GFile> destination,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GFileProgressCallback progress_callback,
    gpointer progress_callback_data,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_move_async(
      source,
      destination,
      flags,
      io_priority,
      cancellable,
      progress_callback,
      progress_callback_data,
      callback,
      user_data,
    );
  }

  late final _g_file_move_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GFileProgressCallback,
              gpointer,
              GAsyncReadyCallback,
              gpointer)>>('g_file_move_async');
  late final _g_file_move_async = _g_file_move_asyncPtr.asFunction<
      void Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GFile>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          GFileProgressCallback,
          gpointer,
          GAsyncReadyCallback,
          gpointer)>();

  int g_file_move_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_move_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_move_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_move_finish');
  late final _g_file_move_finish = _g_file_move_finishPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_make_directory(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_make_directory(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_make_directoryPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_make_directory');
  late final _g_file_make_directory = _g_file_make_directoryPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_make_directory_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_make_directory_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_make_directory_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_make_directory_async');
  late final _g_file_make_directory_async =
      _g_file_make_directory_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_file_make_directory_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_make_directory_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_make_directory_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_make_directory_finish');
  late final _g_file_make_directory_finish =
      _g_file_make_directory_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_make_directory_with_parents(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_make_directory_with_parents(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_make_directory_with_parentsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_make_directory_with_parents');
  late final _g_file_make_directory_with_parents =
      _g_file_make_directory_with_parentsPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_make_symbolic_link(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> symlink_value,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_make_symbolic_link(
      file,
      symlink_value,
      cancellable,
      error,
    );
  }

  late final _g_file_make_symbolic_linkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_make_symbolic_link');
  late final _g_file_make_symbolic_link =
      _g_file_make_symbolic_linkPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileAttributeInfoList> g_file_query_settable_attributes(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_settable_attributes(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_query_settable_attributesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_settable_attributes');
  late final _g_file_query_settable_attributes =
      _g_file_query_settable_attributesPtr.asFunction<
          ffi.Pointer<GFileAttributeInfoList> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileAttributeInfoList> g_file_query_writable_namespaces(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_writable_namespaces(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_query_writable_namespacesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_writable_namespaces');
  late final _g_file_query_writable_namespaces =
      _g_file_query_writable_namespacesPtr.asFunction<
          ffi.Pointer<GFileAttributeInfoList> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    int type,
    gpointer value_p,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute(
      file,
      attribute,
      type,
      value_p,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attributePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              gpointer,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_attribute');
  late final _g_file_set_attribute = _g_file_set_attributePtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, gpointer,
          int, ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attributes_from_info(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GFileInfo> info,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attributes_from_info(
      file,
      info,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attributes_from_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GFileInfo>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attributes_from_info');
  late final _g_file_set_attributes_from_info =
      _g_file_set_attributes_from_infoPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GFileInfo>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_set_attributes_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GFileInfo> info,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_set_attributes_async(
      file,
      info,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_set_attributes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFileInfo>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_set_attributes_async');
  late final _g_file_set_attributes_async =
      _g_file_set_attributes_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<GFileInfo>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_set_attributes_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GFileInfo>> info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attributes_finish(
      file,
      result,
      info,
      error,
    );
  }

  late final _g_file_set_attributes_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GFileInfo>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attributes_finish');
  late final _g_file_set_attributes_finish =
      _g_file_set_attributes_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GFileInfo>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_string(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Char> value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_string(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_stringPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attribute_string');
  late final _g_file_set_attribute_string =
      _g_file_set_attribute_stringPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_byte_string(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Char> value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_byte_string(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_byte_stringPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attribute_byte_string');
  late final _g_file_set_attribute_byte_string =
      _g_file_set_attribute_byte_stringPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_uint32(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    int value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_uint32(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_uint32Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>,
                  guint32,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attribute_uint32');
  late final _g_file_set_attribute_uint32 =
      _g_file_set_attribute_uint32Ptr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_int32(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    int value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_int32(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_int32Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gint32,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_attribute_int32');
  late final _g_file_set_attribute_int32 =
      _g_file_set_attribute_int32Ptr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_uint64(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    int value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_uint64(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_uint64Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<ffi.Char>,
                  guint64,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_set_attribute_uint64');
  late final _g_file_set_attribute_uint64 =
      _g_file_set_attribute_uint64Ptr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_attribute_int64(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> attribute,
    int value,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_attribute_int64(
      file,
      attribute,
      value,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_set_attribute_int64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gint64,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_attribute_int64');
  late final _g_file_set_attribute_int64 =
      _g_file_set_attribute_int64Ptr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_mount_enclosing_volume(
    ffi.Pointer<GFile> location,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_mount_enclosing_volume(
      location,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_mount_enclosing_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_mount_enclosing_volume');
  late final _g_file_mount_enclosing_volume =
      _g_file_mount_enclosing_volumePtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_mount_enclosing_volume_finish(
    ffi.Pointer<GFile> location,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_mount_enclosing_volume_finish(
      location,
      result,
      error,
    );
  }

  late final _g_file_mount_enclosing_volume_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_mount_enclosing_volume_finish');
  late final _g_file_mount_enclosing_volume_finish =
      _g_file_mount_enclosing_volume_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_mount_mountable(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_mount_mountable(
      file,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_mount_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_mount_mountable');
  late final _g_file_mount_mountable = _g_file_mount_mountablePtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFile> g_file_mount_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_mount_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_mount_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_mount_mountable_finish');
  late final _g_file_mount_mountable_finish =
      _g_file_mount_mountable_finishPtr.asFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_unmount_mountable(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_unmount_mountable(
      file,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_unmount_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_unmount_mountable');
  late final _g_file_unmount_mountable =
      _g_file_unmount_mountablePtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_file_unmount_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_unmount_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_unmount_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_unmount_mountable_finish');
  late final _g_file_unmount_mountable_finish =
      _g_file_unmount_mountable_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_unmount_mountable_with_operation(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_unmount_mountable_with_operation(
      file,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_unmount_mountable_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_unmount_mountable_with_operation');
  late final _g_file_unmount_mountable_with_operation =
      _g_file_unmount_mountable_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_unmount_mountable_with_operation_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_unmount_mountable_with_operation_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_unmount_mountable_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_unmount_mountable_with_operation_finish');
  late final _g_file_unmount_mountable_with_operation_finish =
      _g_file_unmount_mountable_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_eject_mountable(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_eject_mountable(
      file,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_eject_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_eject_mountable');
  late final _g_file_eject_mountable = _g_file_eject_mountablePtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_file_eject_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_eject_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_eject_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_eject_mountable_finish');
  late final _g_file_eject_mountable_finish =
      _g_file_eject_mountable_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_eject_mountable_with_operation(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_eject_mountable_with_operation(
      file,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_eject_mountable_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_eject_mountable_with_operation');
  late final _g_file_eject_mountable_with_operation =
      _g_file_eject_mountable_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_eject_mountable_with_operation_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_eject_mountable_with_operation_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_eject_mountable_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_eject_mountable_with_operation_finish');
  late final _g_file_eject_mountable_with_operation_finish =
      _g_file_eject_mountable_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_file_build_attribute_list_for_copy(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_build_attribute_list_for_copy(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_build_attribute_list_for_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GFile>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_build_attribute_list_for_copy');
  late final _g_file_build_attribute_list_for_copy =
      _g_file_build_attribute_list_for_copyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_copy_attributes(
    ffi.Pointer<GFile> source,
    ffi.Pointer<GFile> destination,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_copy_attributes(
      source,
      destination,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_copy_attributesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_copy_attributes');
  late final _g_file_copy_attributes = _g_file_copy_attributesPtr.asFunction<
      int Function(ffi.Pointer<GFile>, ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileMonitor> g_file_monitor_directory(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_monitor_directory(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_monitor_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileMonitor> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_monitor_directory');
  late final _g_file_monitor_directory =
      _g_file_monitor_directoryPtr.asFunction<
          ffi.Pointer<GFileMonitor> Function(ffi.Pointer<GFile>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileMonitor> g_file_monitor_file(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_monitor_file(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_monitor_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileMonitor> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_monitor_file');
  late final _g_file_monitor_file = _g_file_monitor_filePtr.asFunction<
      ffi.Pointer<GFileMonitor> Function(ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GFileMonitor> g_file_monitor(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_monitor(
      file,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_file_monitorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileMonitor> Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_monitor');
  late final _g_file_monitor = _g_file_monitorPtr.asFunction<
      ffi.Pointer<GFileMonitor> Function(ffi.Pointer<GFile>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_measure_disk_usage(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GFileMeasureProgressCallback progress_callback,
    gpointer progress_data,
    ffi.Pointer<guint64> disk_usage,
    ffi.Pointer<guint64> num_dirs,
    ffi.Pointer<guint64> num_files,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_measure_disk_usage(
      file,
      flags,
      cancellable,
      progress_callback,
      progress_data,
      disk_usage,
      num_dirs,
      num_files,
      error,
    );
  }

  late final _g_file_measure_disk_usagePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GFileMeasureProgressCallback,
              gpointer,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_measure_disk_usage');
  late final _g_file_measure_disk_usage =
      _g_file_measure_disk_usagePtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              int,
              ffi.Pointer<GCancellable>,
              GFileMeasureProgressCallback,
              gpointer,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_measure_disk_usage_async(
    ffi.Pointer<GFile> file,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GFileMeasureProgressCallback progress_callback,
    gpointer progress_data,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_measure_disk_usage_async(
      file,
      flags,
      io_priority,
      cancellable,
      progress_callback,
      progress_data,
      callback,
      user_data,
    );
  }

  late final _g_file_measure_disk_usage_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              gint,
              ffi.Pointer<GCancellable>,
              GFileMeasureProgressCallback,
              gpointer,
              GAsyncReadyCallback,
              gpointer)>>('g_file_measure_disk_usage_async');
  late final _g_file_measure_disk_usage_async =
      _g_file_measure_disk_usage_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GFile>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GFileMeasureProgressCallback,
              gpointer,
              GAsyncReadyCallback,
              gpointer)>();

  int g_file_measure_disk_usage_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<guint64> disk_usage,
    ffi.Pointer<guint64> num_dirs,
    ffi.Pointer<guint64> num_files,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_measure_disk_usage_finish(
      file,
      result,
      disk_usage,
      num_dirs,
      num_files,
      error,
    );
  }

  late final _g_file_measure_disk_usage_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<guint64>,
                  ffi.Pointer<guint64>,
                  ffi.Pointer<guint64>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_measure_disk_usage_finish');
  late final _g_file_measure_disk_usage_finish =
      _g_file_measure_disk_usage_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_start_mountable(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GMountOperation> start_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_start_mountable(
      file,
      flags,
      start_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_start_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_start_mountable');
  late final _g_file_start_mountable = _g_file_start_mountablePtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_start_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_start_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_start_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_start_mountable_finish');
  late final _g_file_start_mountable_finish =
      _g_file_start_mountable_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_stop_mountable(
    ffi.Pointer<GFile> file,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_stop_mountable(
      file,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_stop_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_stop_mountable');
  late final _g_file_stop_mountable = _g_file_stop_mountablePtr.asFunction<
      void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_stop_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_stop_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_stop_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_stop_mountable_finish');
  late final _g_file_stop_mountable_finish =
      _g_file_stop_mountable_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_poll_mountable(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_poll_mountable(
      file,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_poll_mountablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_file_poll_mountable');
  late final _g_file_poll_mountable = _g_file_poll_mountablePtr.asFunction<
      void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_file_poll_mountable_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_poll_mountable_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_poll_mountable_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_poll_mountable_finish');
  late final _g_file_poll_mountable_finish =
      _g_file_poll_mountable_finishPtr.asFunction<
          int Function(ffi.Pointer<GFile>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GAppInfo> g_file_query_default_handler(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_default_handler(
      file,
      cancellable,
      error,
    );
  }

  late final _g_file_query_default_handlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GAppInfo> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_default_handler');
  late final _g_file_query_default_handler =
      _g_file_query_default_handlerPtr.asFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_query_default_handler_async(
    ffi.Pointer<GFile> file,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_query_default_handler_async(
      file,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_query_default_handler_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_query_default_handler_async');
  late final _g_file_query_default_handler_async =
      _g_file_query_default_handler_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GAppInfo> g_file_query_default_handler_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_query_default_handler_finish(
      file,
      result,
      error,
    );
  }

  late final _g_file_query_default_handler_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GAppInfo> Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_query_default_handler_finish');
  late final _g_file_query_default_handler_finish =
      _g_file_query_default_handler_finishPtr.asFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_load_contents(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<ffi.Char>> contents,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<ffi.Char>> etag_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_load_contents(
      file,
      cancellable,
      contents,
      length,
      etag_out,
      error,
    );
  }

  late final _g_file_load_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_load_contents');
  late final _g_file_load_contents = _g_file_load_contentsPtr.asFunction<
      int Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_load_contents_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_load_contents_async(
      file,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_load_contents_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_file_load_contents_async');
  late final _g_file_load_contents_async =
      _g_file_load_contents_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_file_load_contents_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<ffi.Char>> contents,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<ffi.Char>> etag_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_load_contents_finish(
      file,
      res,
      contents,
      length,
      etag_out,
      error,
    );
  }

  late final _g_file_load_contents_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_load_contents_finish');
  late final _g_file_load_contents_finish =
      _g_file_load_contents_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_load_partial_contents_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    GFileReadMoreCallback read_more_callback,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_load_partial_contents_async(
      file,
      cancellable,
      read_more_callback,
      callback,
      user_data,
    );
  }

  late final _g_file_load_partial_contents_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>,
              GFileReadMoreCallback,
              GAsyncReadyCallback,
              gpointer)>>('g_file_load_partial_contents_async');
  late final _g_file_load_partial_contents_async =
      _g_file_load_partial_contents_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              GFileReadMoreCallback, GAsyncReadyCallback, gpointer)>();

  int g_file_load_partial_contents_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<ffi.Char>> contents,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<ffi.Char>> etag_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_load_partial_contents_finish(
      file,
      res,
      contents,
      length,
      etag_out,
      error,
    );
  }

  late final _g_file_load_partial_contents_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_load_partial_contents_finish');
  late final _g_file_load_partial_contents_finish =
      _g_file_load_partial_contents_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_replace_contents(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> contents,
    int length,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> new_etag,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace_contents(
      file,
      contents,
      length,
      etag,
      make_backup,
      flags,
      new_etag,
      cancellable,
      error,
    );
  }

  late final _g_file_replace_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gsize,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_replace_contents');
  late final _g_file_replace_contents = _g_file_replace_contentsPtr.asFunction<
      int Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_replace_contents_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<ffi.Char> contents,
    int length,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_replace_contents_async(
      file,
      contents,
      length,
      etag,
      make_backup,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_replace_contents_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              gsize,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_replace_contents_async');
  late final _g_file_replace_contents_async =
      _g_file_replace_contents_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  void g_file_replace_contents_bytes_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GBytes> contents,
    ffi.Pointer<ffi.Char> etag,
    int make_backup,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_replace_contents_bytes_async(
      file,
      contents,
      etag,
      make_backup,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_replace_contents_bytes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_replace_contents_bytes_async');
  late final _g_file_replace_contents_bytes_async =
      _g_file_replace_contents_bytes_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_file_replace_contents_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<ffi.Char>> new_etag,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_replace_contents_finish(
      file,
      res,
      new_etag,
      error,
    );
  }

  late final _g_file_replace_contents_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_replace_contents_finish');
  late final _g_file_replace_contents_finish =
      _g_file_replace_contents_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_supports_thread_contexts(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_supports_thread_contexts(
      file,
    );
  }

  late final _g_file_supports_thread_contextsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFile>)>>(
          'g_file_supports_thread_contexts');
  late final _g_file_supports_thread_contexts =
      _g_file_supports_thread_contextsPtr
          .asFunction<int Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<GBytes> g_file_load_bytes(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<gchar>> etag_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_load_bytes(
      file,
      cancellable,
      etag_out,
      error,
    );
  }

  late final _g_file_load_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_load_bytes');
  late final _g_file_load_bytes = _g_file_load_bytesPtr.asFunction<
      ffi.Pointer<GBytes> Function(
          ffi.Pointer<GFile>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<gchar>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_load_bytes_async(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_load_bytes_async(
      file,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_load_bytes_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_file_load_bytes_async');
  late final _g_file_load_bytes_async = _g_file_load_bytes_asyncPtr.asFunction<
      void Function(ffi.Pointer<GFile>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GBytes> g_file_load_bytes_finish(
    ffi.Pointer<GFile> file,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<gchar>> etag_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_load_bytes_finish(
      file,
      result,
      etag_out,
      error,
    );
  }

  late final _g_file_load_bytes_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_load_bytes_finish');
  late final _g_file_load_bytes_finish =
      _g_file_load_bytes_finishPtr.asFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GFile>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_attribute_info_list_get_type() {
    return _g_file_attribute_info_list_get_type();
  }

  late final _g_file_attribute_info_list_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_attribute_info_list_get_type');
  late final _g_file_attribute_info_list_get_type =
      _g_file_attribute_info_list_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileAttributeInfoList> g_file_attribute_info_list_new() {
    return _g_file_attribute_info_list_new();
  }

  late final _g_file_attribute_info_list_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFileAttributeInfoList> Function()>>(
      'g_file_attribute_info_list_new');
  late final _g_file_attribute_info_list_new =
      _g_file_attribute_info_list_newPtr
          .asFunction<ffi.Pointer<GFileAttributeInfoList> Function()>();

  ffi.Pointer<GFileAttributeInfoList> g_file_attribute_info_list_ref(
    ffi.Pointer<GFileAttributeInfoList> list,
  ) {
    return _g_file_attribute_info_list_ref(
      list,
    );
  }

  late final _g_file_attribute_info_list_refPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFileAttributeInfoList>)>>(
      'g_file_attribute_info_list_ref');
  late final _g_file_attribute_info_list_ref =
      _g_file_attribute_info_list_refPtr.asFunction<
          ffi.Pointer<GFileAttributeInfoList> Function(
              ffi.Pointer<GFileAttributeInfoList>)>();

  void g_file_attribute_info_list_unref(
    ffi.Pointer<GFileAttributeInfoList> list,
  ) {
    return _g_file_attribute_info_list_unref(
      list,
    );
  }

  late final _g_file_attribute_info_list_unrefPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GFileAttributeInfoList>)>>(
      'g_file_attribute_info_list_unref');
  late final _g_file_attribute_info_list_unref =
      _g_file_attribute_info_list_unrefPtr
          .asFunction<void Function(ffi.Pointer<GFileAttributeInfoList>)>();

  ffi.Pointer<GFileAttributeInfoList> g_file_attribute_info_list_dup(
    ffi.Pointer<GFileAttributeInfoList> list,
  ) {
    return _g_file_attribute_info_list_dup(
      list,
    );
  }

  late final _g_file_attribute_info_list_dupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFileAttributeInfoList>)>>(
      'g_file_attribute_info_list_dup');
  late final _g_file_attribute_info_list_dup =
      _g_file_attribute_info_list_dupPtr.asFunction<
          ffi.Pointer<GFileAttributeInfoList> Function(
              ffi.Pointer<GFileAttributeInfoList>)>();

  ffi.Pointer<GFileAttributeInfo> g_file_attribute_info_list_lookup(
    ffi.Pointer<GFileAttributeInfoList> list,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_file_attribute_info_list_lookup(
      list,
      name,
    );
  }

  late final _g_file_attribute_info_list_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileAttributeInfo> Function(
              ffi.Pointer<GFileAttributeInfoList>,
              ffi.Pointer<ffi.Char>)>>('g_file_attribute_info_list_lookup');
  late final _g_file_attribute_info_list_lookup =
      _g_file_attribute_info_list_lookupPtr.asFunction<
          ffi.Pointer<GFileAttributeInfo> Function(
              ffi.Pointer<GFileAttributeInfoList>, ffi.Pointer<ffi.Char>)>();

  void g_file_attribute_info_list_add(
    ffi.Pointer<GFileAttributeInfoList> list,
    ffi.Pointer<ffi.Char> name,
    int type,
    int flags,
  ) {
    return _g_file_attribute_info_list_add(
      list,
      name,
      type,
      flags,
    );
  }

  late final _g_file_attribute_info_list_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileAttributeInfoList>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32)>>('g_file_attribute_info_list_add');
  late final _g_file_attribute_info_list_add =
      _g_file_attribute_info_list_addPtr.asFunction<
          void Function(ffi.Pointer<GFileAttributeInfoList>,
              ffi.Pointer<ffi.Char>, int, int)>();

  int g_file_enumerator_get_type() {
    return _g_file_enumerator_get_type();
  }

  late final _g_file_enumerator_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_enumerator_get_type');
  late final _g_file_enumerator_get_type =
      _g_file_enumerator_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileInfo> g_file_enumerator_next_file(
    ffi.Pointer<GFileEnumerator> enumerator,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerator_next_file(
      enumerator,
      cancellable,
      error,
    );
  }

  late final _g_file_enumerator_next_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileEnumerator>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_enumerator_next_file');
  late final _g_file_enumerator_next_file =
      _g_file_enumerator_next_filePtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_enumerator_close(
    ffi.Pointer<GFileEnumerator> enumerator,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerator_close(
      enumerator,
      cancellable,
      error,
    );
  }

  late final _g_file_enumerator_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_enumerator_close');
  late final _g_file_enumerator_close = _g_file_enumerator_closePtr.asFunction<
      int Function(ffi.Pointer<GFileEnumerator>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_enumerator_next_files_async(
    ffi.Pointer<GFileEnumerator> enumerator,
    int num_files,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_enumerator_next_files_async(
      enumerator,
      num_files,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_enumerator_next_files_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileEnumerator>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_enumerator_next_files_async');
  late final _g_file_enumerator_next_files_async =
      _g_file_enumerator_next_files_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFileEnumerator>, int, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GList> g_file_enumerator_next_files_finish(
    ffi.Pointer<GFileEnumerator> enumerator,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerator_next_files_finish(
      enumerator,
      result,
      error,
    );
  }

  late final _g_file_enumerator_next_files_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GFileEnumerator>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_enumerator_next_files_finish');
  late final _g_file_enumerator_next_files_finish =
      _g_file_enumerator_next_files_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_enumerator_close_async(
    ffi.Pointer<GFileEnumerator> enumerator,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_enumerator_close_async(
      enumerator,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_enumerator_close_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileEnumerator>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_enumerator_close_async');
  late final _g_file_enumerator_close_async =
      _g_file_enumerator_close_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFileEnumerator>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_file_enumerator_close_finish(
    ffi.Pointer<GFileEnumerator> enumerator,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerator_close_finish(
      enumerator,
      result,
      error,
    );
  }

  late final _g_file_enumerator_close_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFileEnumerator>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_enumerator_close_finish');
  late final _g_file_enumerator_close_finish =
      _g_file_enumerator_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GFileEnumerator>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_enumerator_is_closed(
    ffi.Pointer<GFileEnumerator> enumerator,
  ) {
    return _g_file_enumerator_is_closed(
      enumerator,
    );
  }

  late final _g_file_enumerator_is_closedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileEnumerator>)>>(
      'g_file_enumerator_is_closed');
  late final _g_file_enumerator_is_closed = _g_file_enumerator_is_closedPtr
      .asFunction<int Function(ffi.Pointer<GFileEnumerator>)>();

  int g_file_enumerator_has_pending(
    ffi.Pointer<GFileEnumerator> enumerator,
  ) {
    return _g_file_enumerator_has_pending(
      enumerator,
    );
  }

  late final _g_file_enumerator_has_pendingPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileEnumerator>)>>(
      'g_file_enumerator_has_pending');
  late final _g_file_enumerator_has_pending = _g_file_enumerator_has_pendingPtr
      .asFunction<int Function(ffi.Pointer<GFileEnumerator>)>();

  void g_file_enumerator_set_pending(
    ffi.Pointer<GFileEnumerator> enumerator,
    int pending,
  ) {
    return _g_file_enumerator_set_pending(
      enumerator,
      pending,
    );
  }

  late final _g_file_enumerator_set_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileEnumerator>,
              gboolean)>>('g_file_enumerator_set_pending');
  late final _g_file_enumerator_set_pending = _g_file_enumerator_set_pendingPtr
      .asFunction<void Function(ffi.Pointer<GFileEnumerator>, int)>();

  ffi.Pointer<GFile> g_file_enumerator_get_container(
    ffi.Pointer<GFileEnumerator> enumerator,
  ) {
    return _g_file_enumerator_get_container(
      enumerator,
    );
  }

  late final _g_file_enumerator_get_containerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(ffi.Pointer<GFileEnumerator>)>>(
      'g_file_enumerator_get_container');
  late final _g_file_enumerator_get_container =
      _g_file_enumerator_get_containerPtr.asFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFileEnumerator>)>();

  ffi.Pointer<GFile> g_file_enumerator_get_child(
    ffi.Pointer<GFileEnumerator> enumerator,
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_enumerator_get_child(
      enumerator,
      info,
    );
  }

  late final _g_file_enumerator_get_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<GFileInfo>)>>('g_file_enumerator_get_child');
  late final _g_file_enumerator_get_child =
      _g_file_enumerator_get_childPtr.asFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFileEnumerator>, ffi.Pointer<GFileInfo>)>();

  int g_file_enumerator_iterate(
    ffi.Pointer<GFileEnumerator> direnum,
    ffi.Pointer<ffi.Pointer<GFileInfo>> out_info,
    ffi.Pointer<ffi.Pointer<GFile>> out_child,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_enumerator_iterate(
      direnum,
      out_info,
      out_child,
      cancellable,
      error,
    );
  }

  late final _g_file_enumerator_iteratePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<ffi.Pointer<GFileInfo>>,
              ffi.Pointer<ffi.Pointer<GFile>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_enumerator_iterate');
  late final _g_file_enumerator_iterate =
      _g_file_enumerator_iteratePtr.asFunction<
          int Function(
              ffi.Pointer<GFileEnumerator>,
              ffi.Pointer<ffi.Pointer<GFileInfo>>,
              ffi.Pointer<ffi.Pointer<GFile>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_icon_get_type() {
    return _g_file_icon_get_type();
  }

  late final _g_file_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_file_icon_get_type');
  late final _g_file_icon_get_type =
      _g_file_icon_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIcon> g_file_icon_new(
    ffi.Pointer<GFile> file,
  ) {
    return _g_file_icon_new(
      file,
    );
  }

  late final _g_file_icon_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFile>)>>(
      'g_file_icon_new');
  late final _g_file_icon_new = _g_file_icon_newPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFile>)>();

  ffi.Pointer<GFile> g_file_icon_get_file(
    ffi.Pointer<GFileIcon> icon,
  ) {
    return _g_file_icon_get_file(
      icon,
    );
  }

  late final _g_file_icon_get_filePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFileIcon>)>>(
      'g_file_icon_get_file');
  late final _g_file_icon_get_file = _g_file_icon_get_filePtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFileIcon>)>();

  int g_file_info_get_type() {
    return _g_file_info_get_type();
  }

  late final _g_file_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_file_info_get_type');
  late final _g_file_info_get_type =
      _g_file_info_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileInfo> g_file_info_new() {
    return _g_file_info_new();
  }

  late final _g_file_info_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GFileInfo> Function()>>(
          'g_file_info_new');
  late final _g_file_info_new =
      _g_file_info_newPtr.asFunction<ffi.Pointer<GFileInfo> Function()>();

  ffi.Pointer<GFileInfo> g_file_info_dup(
    ffi.Pointer<GFileInfo> other,
  ) {
    return _g_file_info_dup(
      other,
    );
  }

  late final _g_file_info_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_dup');
  late final _g_file_info_dup = _g_file_info_dupPtr
      .asFunction<ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFileInfo>)>();

  void g_file_info_copy_into(
    ffi.Pointer<GFileInfo> src_info,
    ffi.Pointer<GFileInfo> dest_info,
  ) {
    return _g_file_info_copy_into(
      src_info,
      dest_info,
    );
  }

  late final _g_file_info_copy_intoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GFileInfo>)>>('g_file_info_copy_into');
  late final _g_file_info_copy_into = _g_file_info_copy_intoPtr.asFunction<
      void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GFileInfo>)>();

  int g_file_info_has_attribute(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_has_attribute(
      info,
      attribute,
    );
  }

  late final _g_file_info_has_attributePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_has_attribute');
  late final _g_file_info_has_attribute =
      _g_file_info_has_attributePtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_has_namespace(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> name_space,
  ) {
    return _g_file_info_has_namespace(
      info,
      name_space,
    );
  }

  late final _g_file_info_has_namespacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_has_namespace');
  late final _g_file_info_has_namespace =
      _g_file_info_has_namespacePtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_file_info_list_attributes(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> name_space,
  ) {
    return _g_file_info_list_attributes(
      info,
      name_space,
    );
  }

  late final _g_file_info_list_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_list_attributes');
  late final _g_file_info_list_attributes =
      _g_file_info_list_attributesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_data(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<gpointer> value_pp,
    ffi.Pointer<ffi.Int32> status,
  ) {
    return _g_file_info_get_attribute_data(
      info,
      attribute,
      type,
      value_pp,
      status,
    );
  }

  late final _g_file_info_get_attribute_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gpointer>,
              ffi.Pointer<ffi.Int32>)>>('g_file_info_get_attribute_data');
  late final _g_file_info_get_attribute_data =
      _g_file_info_get_attribute_dataPtr.asFunction<
          int Function(
              ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gpointer>,
              ffi.Pointer<ffi.Int32>)>();

  int g_file_info_get_attribute_type(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_type(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_type');
  late final _g_file_info_get_attribute_type =
      _g_file_info_get_attribute_typePtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_remove_attribute(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_remove_attribute(
      info,
      attribute,
    );
  }

  late final _g_file_info_remove_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_remove_attribute');
  late final _g_file_info_remove_attribute =
      _g_file_info_remove_attributePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_status(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_status(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_status');
  late final _g_file_info_get_attribute_status =
      _g_file_info_get_attribute_statusPtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_set_attribute_status(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int status,
  ) {
    return _g_file_info_set_attribute_status(
      info,
      attribute,
      status,
    );
  }

  late final _g_file_info_set_attribute_statusPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_file_info_set_attribute_status');
  late final _g_file_info_set_attribute_status =
      _g_file_info_set_attribute_statusPtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_file_info_get_attribute_as_string(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_as_string(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_as_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_as_string');
  late final _g_file_info_get_attribute_as_string =
      _g_file_info_get_attribute_as_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_attribute_string(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_string(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_string');
  late final _g_file_info_get_attribute_string =
      _g_file_info_get_attribute_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_attribute_byte_string(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_byte_string(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_byte_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_byte_string');
  late final _g_file_info_get_attribute_byte_string =
      _g_file_info_get_attribute_byte_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_boolean(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_boolean(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_boolean');
  late final _g_file_info_get_attribute_boolean =
      _g_file_info_get_attribute_booleanPtr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_uint32(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_uint32(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_uint32Ptr = _lookup<
      ffi.NativeFunction<
          guint32 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_uint32');
  late final _g_file_info_get_attribute_uint32 =
      _g_file_info_get_attribute_uint32Ptr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_int32(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_int32(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_int32Ptr = _lookup<
      ffi.NativeFunction<
          gint32 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_int32');
  late final _g_file_info_get_attribute_int32 =
      _g_file_info_get_attribute_int32Ptr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_uint64(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_uint64(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_uint64Ptr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_uint64');
  late final _g_file_info_get_attribute_uint64 =
      _g_file_info_get_attribute_uint64Ptr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  int g_file_info_get_attribute_int64(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_int64(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_int64Ptr = _lookup<
      ffi.NativeFunction<
          gint64 Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_int64');
  late final _g_file_info_get_attribute_int64 =
      _g_file_info_get_attribute_int64Ptr.asFunction<
          int Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GObject> g_file_info_get_attribute_object(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_object(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_object');
  late final _g_file_info_get_attribute_object =
      _g_file_info_get_attribute_objectPtr.asFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_file_info_get_attribute_stringv(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_info_get_attribute_stringv(
      info,
      attribute,
    );
  }

  late final _g_file_info_get_attribute_stringvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_get_attribute_stringv');
  late final _g_file_info_get_attribute_stringv =
      _g_file_info_get_attribute_stringvPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_attribute(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int type,
    gpointer value_p,
  ) {
    return _g_file_info_set_attribute(
      info,
      attribute,
      type,
      value_p,
    );
  }

  late final _g_file_info_set_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Int32, gpointer)>>('g_file_info_set_attribute');
  late final _g_file_info_set_attribute =
      _g_file_info_set_attributePtr.asFunction<
          void Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int, gpointer)>();

  void g_file_info_set_attribute_string(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Char> attr_value,
  ) {
    return _g_file_info_set_attribute_string(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_attribute_string');
  late final _g_file_info_set_attribute_string =
      _g_file_info_set_attribute_stringPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_attribute_byte_string(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Char> attr_value,
  ) {
    return _g_file_info_set_attribute_byte_string(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_byte_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_attribute_byte_string');
  late final _g_file_info_set_attribute_byte_string =
      _g_file_info_set_attribute_byte_stringPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_attribute_boolean(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int attr_value,
  ) {
    return _g_file_info_set_attribute_boolean(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              gboolean)>>('g_file_info_set_attribute_boolean');
  late final _g_file_info_set_attribute_boolean =
      _g_file_info_set_attribute_booleanPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  void g_file_info_set_attribute_uint32(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int attr_value,
  ) {
    return _g_file_info_set_attribute_uint32(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              guint32)>>('g_file_info_set_attribute_uint32');
  late final _g_file_info_set_attribute_uint32 =
      _g_file_info_set_attribute_uint32Ptr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  void g_file_info_set_attribute_int32(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int attr_value,
  ) {
    return _g_file_info_set_attribute_int32(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              gint32)>>('g_file_info_set_attribute_int32');
  late final _g_file_info_set_attribute_int32 =
      _g_file_info_set_attribute_int32Ptr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  void g_file_info_set_attribute_uint64(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int attr_value,
  ) {
    return _g_file_info_set_attribute_uint64(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              guint64)>>('g_file_info_set_attribute_uint64');
  late final _g_file_info_set_attribute_uint64 =
      _g_file_info_set_attribute_uint64Ptr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  void g_file_info_set_attribute_int64(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    int attr_value,
  ) {
    return _g_file_info_set_attribute_int64(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              gint64)>>('g_file_info_set_attribute_int64');
  late final _g_file_info_set_attribute_int64 =
      _g_file_info_set_attribute_int64Ptr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>, int)>();

  void g_file_info_set_attribute_object(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<GObject> attr_value,
  ) {
    return _g_file_info_set_attribute_object(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GObject>)>>('g_file_info_set_attribute_object');
  late final _g_file_info_set_attribute_object =
      _g_file_info_set_attribute_objectPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GObject>)>();

  void g_file_info_set_attribute_stringv(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> attribute,
    ffi.Pointer<ffi.Pointer<ffi.Char>> attr_value,
  ) {
    return _g_file_info_set_attribute_stringv(
      info,
      attribute,
      attr_value,
    );
  }

  late final _g_file_info_set_attribute_stringvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'g_file_info_set_attribute_stringv');
  late final _g_file_info_set_attribute_stringv =
      _g_file_info_set_attribute_stringvPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_file_info_clear_status(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_clear_status(
      info,
    );
  }

  late final _g_file_info_clear_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_clear_status');
  late final _g_file_info_clear_status = _g_file_info_clear_statusPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<GDateTime> g_file_info_get_deletion_date(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_deletion_date(
      info,
    );
  }

  late final _g_file_info_get_deletion_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_deletion_date');
  late final _g_file_info_get_deletion_date = _g_file_info_get_deletion_datePtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_file_type(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_file_type(
      info,
    );
  }

  late final _g_file_info_get_file_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_file_type');
  late final _g_file_info_get_file_type = _g_file_info_get_file_typePtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_is_hidden(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_is_hidden(
      info,
    );
  }

  late final _g_file_info_get_is_hiddenPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_is_hidden');
  late final _g_file_info_get_is_hidden = _g_file_info_get_is_hiddenPtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_is_backup(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_is_backup(
      info,
    );
  }

  late final _g_file_info_get_is_backupPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_is_backup');
  late final _g_file_info_get_is_backup = _g_file_info_get_is_backupPtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_is_symlink(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_is_symlink(
      info,
    );
  }

  late final _g_file_info_get_is_symlinkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_is_symlink');
  late final _g_file_info_get_is_symlink = _g_file_info_get_is_symlinkPtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_name(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_name(
      info,
    );
  }

  late final _g_file_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_name');
  late final _g_file_info_get_name = _g_file_info_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_display_name(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_display_name(
      info,
    );
  }

  late final _g_file_info_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_display_name');
  late final _g_file_info_get_display_name = _g_file_info_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_edit_name(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_edit_name(
      info,
    );
  }

  late final _g_file_info_get_edit_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_edit_name');
  late final _g_file_info_get_edit_name = _g_file_info_get_edit_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<GIcon> g_file_info_get_icon(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_icon(
      info,
    );
  }

  late final _g_file_info_get_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFileInfo>)>>(
      'g_file_info_get_icon');
  late final _g_file_info_get_icon = _g_file_info_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<GIcon> g_file_info_get_symbolic_icon(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_symbolic_icon(
      info,
    );
  }

  late final _g_file_info_get_symbolic_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFileInfo>)>>(
      'g_file_info_get_symbolic_icon');
  late final _g_file_info_get_symbolic_icon = _g_file_info_get_symbolic_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_content_type(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_content_type(
      info,
    );
  }

  late final _g_file_info_get_content_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_content_type');
  late final _g_file_info_get_content_type = _g_file_info_get_content_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_size(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_size(
      info,
    );
  }

  late final _g_file_info_get_sizePtr =
      _lookup<ffi.NativeFunction<goffset Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_size');
  late final _g_file_info_get_size = _g_file_info_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  void g_file_info_get_modification_time(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GTimeVal> result,
  ) {
    return _g_file_info_get_modification_time(
      info,
      result,
    );
  }

  late final _g_file_info_get_modification_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GTimeVal>)>>('g_file_info_get_modification_time');
  late final _g_file_info_get_modification_time =
      _g_file_info_get_modification_timePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<GDateTime> g_file_info_get_modification_date_time(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_modification_date_time(
      info,
    );
  }

  late final _g_file_info_get_modification_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GFileInfo>)>>(
      'g_file_info_get_modification_date_time');
  late final _g_file_info_get_modification_date_time =
      _g_file_info_get_modification_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<GDateTime> g_file_info_get_access_date_time(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_access_date_time(
      info,
    );
  }

  late final _g_file_info_get_access_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_access_date_time');
  late final _g_file_info_get_access_date_time =
      _g_file_info_get_access_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<GDateTime> g_file_info_get_creation_date_time(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_creation_date_time(
      info,
    );
  }

  late final _g_file_info_get_creation_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_creation_date_time');
  late final _g_file_info_get_creation_date_time =
      _g_file_info_get_creation_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_symlink_target(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_symlink_target(
      info,
    );
  }

  late final _g_file_info_get_symlink_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_symlink_target');
  late final _g_file_info_get_symlink_target =
      _g_file_info_get_symlink_targetPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  ffi.Pointer<ffi.Char> g_file_info_get_etag(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_etag(
      info,
    );
  }

  late final _g_file_info_get_etagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileInfo>)>>('g_file_info_get_etag');
  late final _g_file_info_get_etag = _g_file_info_get_etagPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileInfo>)>();

  int g_file_info_get_sort_order(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_get_sort_order(
      info,
    );
  }

  late final _g_file_info_get_sort_orderPtr =
      _lookup<ffi.NativeFunction<gint32 Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_get_sort_order');
  late final _g_file_info_get_sort_order = _g_file_info_get_sort_orderPtr
      .asFunction<int Function(ffi.Pointer<GFileInfo>)>();

  void g_file_info_set_attribute_mask(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GFileAttributeMatcher> mask,
  ) {
    return _g_file_info_set_attribute_mask(
      info,
      mask,
    );
  }

  late final _g_file_info_set_attribute_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GFileInfo>, ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_info_set_attribute_mask');
  late final _g_file_info_set_attribute_mask =
      _g_file_info_set_attribute_maskPtr.asFunction<
          void Function(
              ffi.Pointer<GFileInfo>, ffi.Pointer<GFileAttributeMatcher>)>();

  void g_file_info_unset_attribute_mask(
    ffi.Pointer<GFileInfo> info,
  ) {
    return _g_file_info_unset_attribute_mask(
      info,
    );
  }

  late final _g_file_info_unset_attribute_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>)>>(
          'g_file_info_unset_attribute_mask');
  late final _g_file_info_unset_attribute_mask =
      _g_file_info_unset_attribute_maskPtr
          .asFunction<void Function(ffi.Pointer<GFileInfo>)>();

  void g_file_info_set_file_type(
    ffi.Pointer<GFileInfo> info,
    int type,
  ) {
    return _g_file_info_set_file_type(
      info,
      type,
    );
  }

  late final _g_file_info_set_file_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileInfo>, ffi.Int32)>>('g_file_info_set_file_type');
  late final _g_file_info_set_file_type = _g_file_info_set_file_typePtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, int)>();

  void g_file_info_set_is_hidden(
    ffi.Pointer<GFileInfo> info,
    int is_hidden,
  ) {
    return _g_file_info_set_is_hidden(
      info,
      is_hidden,
    );
  }

  late final _g_file_info_set_is_hiddenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>, gboolean)>>(
      'g_file_info_set_is_hidden');
  late final _g_file_info_set_is_hidden = _g_file_info_set_is_hiddenPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, int)>();

  void g_file_info_set_is_symlink(
    ffi.Pointer<GFileInfo> info,
    int is_symlink,
  ) {
    return _g_file_info_set_is_symlink(
      info,
      is_symlink,
    );
  }

  late final _g_file_info_set_is_symlinkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>, gboolean)>>(
      'g_file_info_set_is_symlink');
  late final _g_file_info_set_is_symlink = _g_file_info_set_is_symlinkPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, int)>();

  void g_file_info_set_name(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_file_info_set_name(
      info,
      name,
    );
  }

  late final _g_file_info_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_name');
  late final _g_file_info_set_name = _g_file_info_set_namePtr.asFunction<
      void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_display_name(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> display_name,
  ) {
    return _g_file_info_set_display_name(
      info,
      display_name,
    );
  }

  late final _g_file_info_set_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_display_name');
  late final _g_file_info_set_display_name =
      _g_file_info_set_display_namePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_edit_name(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> edit_name,
  ) {
    return _g_file_info_set_edit_name(
      info,
      edit_name,
    );
  }

  late final _g_file_info_set_edit_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_edit_name');
  late final _g_file_info_set_edit_name =
      _g_file_info_set_edit_namePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_icon(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_file_info_set_icon(
      info,
      icon,
    );
  }

  late final _g_file_info_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GIcon>)>>('g_file_info_set_icon');
  late final _g_file_info_set_icon = _g_file_info_set_iconPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GIcon>)>();

  void g_file_info_set_symbolic_icon(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_file_info_set_symbolic_icon(
      info,
      icon,
    );
  }

  late final _g_file_info_set_symbolic_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GIcon>)>>('g_file_info_set_symbolic_icon');
  late final _g_file_info_set_symbolic_icon = _g_file_info_set_symbolic_iconPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GIcon>)>();

  void g_file_info_set_content_type(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> content_type,
  ) {
    return _g_file_info_set_content_type(
      info,
      content_type,
    );
  }

  late final _g_file_info_set_content_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_content_type');
  late final _g_file_info_set_content_type =
      _g_file_info_set_content_typePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_size(
    ffi.Pointer<GFileInfo> info,
    int size,
  ) {
    return _g_file_info_set_size(
      info,
      size,
    );
  }

  late final _g_file_info_set_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>, goffset)>>(
      'g_file_info_set_size');
  late final _g_file_info_set_size = _g_file_info_set_sizePtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, int)>();

  void g_file_info_set_modification_time(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GTimeVal> mtime,
  ) {
    return _g_file_info_set_modification_time(
      info,
      mtime,
    );
  }

  late final _g_file_info_set_modification_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GTimeVal>)>>('g_file_info_set_modification_time');
  late final _g_file_info_set_modification_time =
      _g_file_info_set_modification_timePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GTimeVal>)>();

  void g_file_info_set_modification_date_time(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GDateTime> mtime,
  ) {
    return _g_file_info_set_modification_date_time(
      info,
      mtime,
    );
  }

  late final _g_file_info_set_modification_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GFileInfo>, ffi.Pointer<GDateTime>)>>(
      'g_file_info_set_modification_date_time');
  late final _g_file_info_set_modification_date_time =
      _g_file_info_set_modification_date_timePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GDateTime>)>();

  void g_file_info_set_access_date_time(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GDateTime> atime,
  ) {
    return _g_file_info_set_access_date_time(
      info,
      atime,
    );
  }

  late final _g_file_info_set_access_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GDateTime>)>>('g_file_info_set_access_date_time');
  late final _g_file_info_set_access_date_time =
      _g_file_info_set_access_date_timePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GDateTime>)>();

  void g_file_info_set_creation_date_time(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<GDateTime> creation_time,
  ) {
    return _g_file_info_set_creation_date_time(
      info,
      creation_time,
    );
  }

  late final _g_file_info_set_creation_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<GDateTime>)>>('g_file_info_set_creation_date_time');
  late final _g_file_info_set_creation_date_time =
      _g_file_info_set_creation_date_timePtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<GDateTime>)>();

  void g_file_info_set_symlink_target(
    ffi.Pointer<GFileInfo> info,
    ffi.Pointer<ffi.Char> symlink_target,
  ) {
    return _g_file_info_set_symlink_target(
      info,
      symlink_target,
    );
  }

  late final _g_file_info_set_symlink_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileInfo>,
              ffi.Pointer<ffi.Char>)>>('g_file_info_set_symlink_target');
  late final _g_file_info_set_symlink_target =
      _g_file_info_set_symlink_targetPtr.asFunction<
          void Function(ffi.Pointer<GFileInfo>, ffi.Pointer<ffi.Char>)>();

  void g_file_info_set_sort_order(
    ffi.Pointer<GFileInfo> info,
    int sort_order,
  ) {
    return _g_file_info_set_sort_order(
      info,
      sort_order,
    );
  }

  late final _g_file_info_set_sort_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GFileInfo>, gint32)>>(
      'g_file_info_set_sort_order');
  late final _g_file_info_set_sort_order = _g_file_info_set_sort_orderPtr
      .asFunction<void Function(ffi.Pointer<GFileInfo>, int)>();

  int g_file_attribute_matcher_get_type() {
    return _g_file_attribute_matcher_get_type();
  }

  late final _g_file_attribute_matcher_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_attribute_matcher_get_type');
  late final _g_file_attribute_matcher_get_type =
      _g_file_attribute_matcher_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileAttributeMatcher> g_file_attribute_matcher_new(
    ffi.Pointer<ffi.Char> attributes,
  ) {
    return _g_file_attribute_matcher_new(
      attributes,
    );
  }

  late final _g_file_attribute_matcher_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFileAttributeMatcher> Function(
              ffi.Pointer<ffi.Char>)>>('g_file_attribute_matcher_new');
  late final _g_file_attribute_matcher_new =
      _g_file_attribute_matcher_newPtr.asFunction<
          ffi.Pointer<GFileAttributeMatcher> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFileAttributeMatcher> g_file_attribute_matcher_ref(
    ffi.Pointer<GFileAttributeMatcher> matcher,
  ) {
    return _g_file_attribute_matcher_ref(
      matcher,
    );
  }

  late final _g_file_attribute_matcher_refPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeMatcher> Function(
                  ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_attribute_matcher_ref');
  late final _g_file_attribute_matcher_ref =
      _g_file_attribute_matcher_refPtr.asFunction<
          ffi.Pointer<GFileAttributeMatcher> Function(
              ffi.Pointer<GFileAttributeMatcher>)>();

  void g_file_attribute_matcher_unref(
    ffi.Pointer<GFileAttributeMatcher> matcher,
  ) {
    return _g_file_attribute_matcher_unref(
      matcher,
    );
  }

  late final _g_file_attribute_matcher_unrefPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_attribute_matcher_unref');
  late final _g_file_attribute_matcher_unref =
      _g_file_attribute_matcher_unrefPtr
          .asFunction<void Function(ffi.Pointer<GFileAttributeMatcher>)>();

  ffi.Pointer<GFileAttributeMatcher> g_file_attribute_matcher_subtract(
    ffi.Pointer<GFileAttributeMatcher> matcher,
    ffi.Pointer<GFileAttributeMatcher> subtract,
  ) {
    return _g_file_attribute_matcher_subtract(
      matcher,
      subtract,
    );
  }

  late final _g_file_attribute_matcher_subtractPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeMatcher> Function(
                  ffi.Pointer<GFileAttributeMatcher>,
                  ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_attribute_matcher_subtract');
  late final _g_file_attribute_matcher_subtract =
      _g_file_attribute_matcher_subtractPtr.asFunction<
          ffi.Pointer<GFileAttributeMatcher> Function(
              ffi.Pointer<GFileAttributeMatcher>,
              ffi.Pointer<GFileAttributeMatcher>)>();

  int g_file_attribute_matcher_matches(
    ffi.Pointer<GFileAttributeMatcher> matcher,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_attribute_matcher_matches(
      matcher,
      attribute,
    );
  }

  late final _g_file_attribute_matcher_matchesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileAttributeMatcher>,
              ffi.Pointer<ffi.Char>)>>('g_file_attribute_matcher_matches');
  late final _g_file_attribute_matcher_matches =
      _g_file_attribute_matcher_matchesPtr.asFunction<
          int Function(
              ffi.Pointer<GFileAttributeMatcher>, ffi.Pointer<ffi.Char>)>();

  int g_file_attribute_matcher_matches_only(
    ffi.Pointer<GFileAttributeMatcher> matcher,
    ffi.Pointer<ffi.Char> attribute,
  ) {
    return _g_file_attribute_matcher_matches_only(
      matcher,
      attribute,
    );
  }

  late final _g_file_attribute_matcher_matches_onlyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileAttributeMatcher>,
              ffi.Pointer<ffi.Char>)>>('g_file_attribute_matcher_matches_only');
  late final _g_file_attribute_matcher_matches_only =
      _g_file_attribute_matcher_matches_onlyPtr.asFunction<
          int Function(
              ffi.Pointer<GFileAttributeMatcher>, ffi.Pointer<ffi.Char>)>();

  int g_file_attribute_matcher_enumerate_namespace(
    ffi.Pointer<GFileAttributeMatcher> matcher,
    ffi.Pointer<ffi.Char> ns,
  ) {
    return _g_file_attribute_matcher_enumerate_namespace(
      matcher,
      ns,
    );
  }

  late final _g_file_attribute_matcher_enumerate_namespacePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFileAttributeMatcher>, ffi.Pointer<ffi.Char>)>>(
      'g_file_attribute_matcher_enumerate_namespace');
  late final _g_file_attribute_matcher_enumerate_namespace =
      _g_file_attribute_matcher_enumerate_namespacePtr.asFunction<
          int Function(
              ffi.Pointer<GFileAttributeMatcher>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_file_attribute_matcher_enumerate_next(
    ffi.Pointer<GFileAttributeMatcher> matcher,
  ) {
    return _g_file_attribute_matcher_enumerate_next(
      matcher,
    );
  }

  late final _g_file_attribute_matcher_enumerate_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_attribute_matcher_enumerate_next');
  late final _g_file_attribute_matcher_enumerate_next =
      _g_file_attribute_matcher_enumerate_nextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileAttributeMatcher>)>();

  ffi.Pointer<ffi.Char> g_file_attribute_matcher_to_string(
    ffi.Pointer<GFileAttributeMatcher> matcher,
  ) {
    return _g_file_attribute_matcher_to_string(
      matcher,
    );
  }

  late final _g_file_attribute_matcher_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GFileAttributeMatcher>)>>(
      'g_file_attribute_matcher_to_string');
  late final _g_file_attribute_matcher_to_string =
      _g_file_attribute_matcher_to_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileAttributeMatcher>)>();

  int g_file_input_stream_get_type() {
    return _g_file_input_stream_get_type();
  }

  late final _g_file_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_input_stream_get_type');
  late final _g_file_input_stream_get_type =
      _g_file_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileInfo> g_file_input_stream_query_info(
    ffi.Pointer<GFileInputStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_input_stream_query_info(
      stream,
      attributes,
      cancellable,
      error,
    );
  }

  late final _g_file_input_stream_query_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileInputStream>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_input_stream_query_info');
  late final _g_file_input_stream_query_info =
      _g_file_input_stream_query_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileInputStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_input_stream_query_info_async(
    ffi.Pointer<GFileInputStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_input_stream_query_info_async(
      stream,
      attributes,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_input_stream_query_info_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileInputStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_input_stream_query_info_async');
  late final _g_file_input_stream_query_info_async =
      _g_file_input_stream_query_info_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFileInputStream>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInfo> g_file_input_stream_query_info_finish(
    ffi.Pointer<GFileInputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_input_stream_query_info_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_file_input_stream_query_info_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileInputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_input_stream_query_info_finish');
  late final _g_file_input_stream_query_info_finish =
      _g_file_input_stream_query_info_finishPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFileInputStream>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_error_quark() {
    return _g_io_error_quark();
  }

  late final _g_io_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_io_error_quark');
  late final _g_io_error_quark =
      _g_io_error_quarkPtr.asFunction<int Function()>();

  int g_io_error_from_errno(
    int err_no,
  ) {
    return _g_io_error_from_errno(
      err_no,
    );
  }

  late final _g_io_error_from_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gint)>>(
          'g_io_error_from_errno');
  late final _g_io_error_from_errno =
      _g_io_error_from_errnoPtr.asFunction<int Function(int)>();

  int g_io_stream_get_type() {
    return _g_io_stream_get_type();
  }

  late final _g_io_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_stream_get_type');
  late final _g_io_stream_get_type =
      _g_io_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_io_stream_get_input_stream(
    ffi.Pointer<GIOStream> stream,
  ) {
    return _g_io_stream_get_input_stream(
      stream,
    );
  }

  late final _g_io_stream_get_input_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GIOStream>)>>('g_io_stream_get_input_stream');
  late final _g_io_stream_get_input_stream = _g_io_stream_get_input_streamPtr
      .asFunction<ffi.Pointer<GInputStream> Function(ffi.Pointer<GIOStream>)>();

  ffi.Pointer<GOutputStream> g_io_stream_get_output_stream(
    ffi.Pointer<GIOStream> stream,
  ) {
    return _g_io_stream_get_output_stream(
      stream,
    );
  }

  late final _g_io_stream_get_output_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GIOStream>)>>('g_io_stream_get_output_stream');
  late final _g_io_stream_get_output_stream =
      _g_io_stream_get_output_streamPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(ffi.Pointer<GIOStream>)>();

  void g_io_stream_splice_async(
    ffi.Pointer<GIOStream> stream1,
    ffi.Pointer<GIOStream> stream2,
    int flags,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_io_stream_splice_async(
      stream1,
      stream2,
      flags,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_io_stream_splice_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<GIOStream>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_io_stream_splice_async');
  late final _g_io_stream_splice_async =
      _g_io_stream_splice_asyncPtr.asFunction<
          void Function(ffi.Pointer<GIOStream>, ffi.Pointer<GIOStream>, int,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_io_stream_splice_finish(
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_stream_splice_finish(
      result,
      error,
    );
  }

  late final _g_io_stream_splice_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_stream_splice_finish');
  late final _g_io_stream_splice_finish =
      _g_io_stream_splice_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_stream_close(
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_stream_close(
      stream,
      cancellable,
      error,
    );
  }

  late final _g_io_stream_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GIOStream>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_stream_close');
  late final _g_io_stream_close = _g_io_stream_closePtr.asFunction<
      int Function(ffi.Pointer<GIOStream>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_io_stream_close_async(
    ffi.Pointer<GIOStream> stream,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_io_stream_close_async(
      stream,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_io_stream_close_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOStream>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_io_stream_close_async');
  late final _g_io_stream_close_async = _g_io_stream_close_asyncPtr.asFunction<
      void Function(ffi.Pointer<GIOStream>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_io_stream_close_finish(
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_stream_close_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_io_stream_close_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GIOStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_stream_close_finish');
  late final _g_io_stream_close_finish =
      _g_io_stream_close_finishPtr.asFunction<
          int Function(ffi.Pointer<GIOStream>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_stream_is_closed(
    ffi.Pointer<GIOStream> stream,
  ) {
    return _g_io_stream_is_closed(
      stream,
    );
  }

  late final _g_io_stream_is_closedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOStream>)>>(
          'g_io_stream_is_closed');
  late final _g_io_stream_is_closed = _g_io_stream_is_closedPtr
      .asFunction<int Function(ffi.Pointer<GIOStream>)>();

  int g_io_stream_has_pending(
    ffi.Pointer<GIOStream> stream,
  ) {
    return _g_io_stream_has_pending(
      stream,
    );
  }

  late final _g_io_stream_has_pendingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOStream>)>>(
          'g_io_stream_has_pending');
  late final _g_io_stream_has_pending = _g_io_stream_has_pendingPtr
      .asFunction<int Function(ffi.Pointer<GIOStream>)>();

  int g_io_stream_set_pending(
    ffi.Pointer<GIOStream> stream,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_stream_set_pending(
      stream,
      error,
    );
  }

  late final _g_io_stream_set_pendingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GIOStream>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_stream_set_pending');
  late final _g_io_stream_set_pending = _g_io_stream_set_pendingPtr.asFunction<
      int Function(ffi.Pointer<GIOStream>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_io_stream_clear_pending(
    ffi.Pointer<GIOStream> stream,
  ) {
    return _g_io_stream_clear_pending(
      stream,
    );
  }

  late final _g_io_stream_clear_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOStream>)>>(
          'g_io_stream_clear_pending');
  late final _g_io_stream_clear_pending = _g_io_stream_clear_pendingPtr
      .asFunction<void Function(ffi.Pointer<GIOStream>)>();

  int g_file_io_stream_get_type() {
    return _g_file_io_stream_get_type();
  }

  late final _g_file_io_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_io_stream_get_type');
  late final _g_file_io_stream_get_type =
      _g_file_io_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileInfo> g_file_io_stream_query_info(
    ffi.Pointer<GFileIOStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_io_stream_query_info(
      stream,
      attributes,
      cancellable,
      error,
    );
  }

  late final _g_file_io_stream_query_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileIOStream>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_io_stream_query_info');
  late final _g_file_io_stream_query_info =
      _g_file_io_stream_query_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileIOStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_io_stream_query_info_async(
    ffi.Pointer<GFileIOStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_io_stream_query_info_async(
      stream,
      attributes,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_io_stream_query_info_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileIOStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_io_stream_query_info_async');
  late final _g_file_io_stream_query_info_async =
      _g_file_io_stream_query_info_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFileIOStream>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInfo> g_file_io_stream_query_info_finish(
    ffi.Pointer<GFileIOStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_io_stream_query_info_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_file_io_stream_query_info_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileIOStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_io_stream_query_info_finish');
  late final _g_file_io_stream_query_info_finish =
      _g_file_io_stream_query_info_finishPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFileIOStream>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_file_io_stream_get_etag(
    ffi.Pointer<GFileIOStream> stream,
  ) {
    return _g_file_io_stream_get_etag(
      stream,
    );
  }

  late final _g_file_io_stream_get_etagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileIOStream>)>>('g_file_io_stream_get_etag');
  late final _g_file_io_stream_get_etag = _g_file_io_stream_get_etagPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileIOStream>)>();

  int g_file_monitor_get_type() {
    return _g_file_monitor_get_type();
  }

  late final _g_file_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_file_monitor_get_type');
  late final _g_file_monitor_get_type =
      _g_file_monitor_get_typePtr.asFunction<int Function()>();

  int g_file_monitor_cancel(
    ffi.Pointer<GFileMonitor> monitor,
  ) {
    return _g_file_monitor_cancel(
      monitor,
    );
  }

  late final _g_file_monitor_cancelPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileMonitor>)>>(
          'g_file_monitor_cancel');
  late final _g_file_monitor_cancel = _g_file_monitor_cancelPtr
      .asFunction<int Function(ffi.Pointer<GFileMonitor>)>();

  int g_file_monitor_is_cancelled(
    ffi.Pointer<GFileMonitor> monitor,
  ) {
    return _g_file_monitor_is_cancelled(
      monitor,
    );
  }

  late final _g_file_monitor_is_cancelledPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFileMonitor>)>>(
          'g_file_monitor_is_cancelled');
  late final _g_file_monitor_is_cancelled = _g_file_monitor_is_cancelledPtr
      .asFunction<int Function(ffi.Pointer<GFileMonitor>)>();

  void g_file_monitor_set_rate_limit(
    ffi.Pointer<GFileMonitor> monitor,
    int limit_msecs,
  ) {
    return _g_file_monitor_set_rate_limit(
      monitor,
      limit_msecs,
    );
  }

  late final _g_file_monitor_set_rate_limitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GFileMonitor>, gint)>>(
      'g_file_monitor_set_rate_limit');
  late final _g_file_monitor_set_rate_limit = _g_file_monitor_set_rate_limitPtr
      .asFunction<void Function(ffi.Pointer<GFileMonitor>, int)>();

  void g_file_monitor_emit_event(
    ffi.Pointer<GFileMonitor> monitor,
    ffi.Pointer<GFile> child,
    ffi.Pointer<GFile> other_file,
    int event_type,
  ) {
    return _g_file_monitor_emit_event(
      monitor,
      child,
      other_file,
      event_type,
    );
  }

  late final _g_file_monitor_emit_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFileMonitor>, ffi.Pointer<GFile>,
              ffi.Pointer<GFile>, ffi.Int32)>>('g_file_monitor_emit_event');
  late final _g_file_monitor_emit_event =
      _g_file_monitor_emit_eventPtr.asFunction<
          void Function(ffi.Pointer<GFileMonitor>, ffi.Pointer<GFile>,
              ffi.Pointer<GFile>, int)>();

  int g_filename_completer_get_type() {
    return _g_filename_completer_get_type();
  }

  late final _g_filename_completer_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_filename_completer_get_type');
  late final _g_filename_completer_get_type =
      _g_filename_completer_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFilenameCompleter> g_filename_completer_new() {
    return _g_filename_completer_new();
  }

  late final _g_filename_completer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GFilenameCompleter> Function()>>(
          'g_filename_completer_new');
  late final _g_filename_completer_new = _g_filename_completer_newPtr
      .asFunction<ffi.Pointer<GFilenameCompleter> Function()>();

  ffi.Pointer<ffi.Char> g_filename_completer_get_completion_suffix(
    ffi.Pointer<GFilenameCompleter> completer,
    ffi.Pointer<ffi.Char> initial_text,
  ) {
    return _g_filename_completer_get_completion_suffix(
      completer,
      initial_text,
    );
  }

  late final _g_filename_completer_get_completion_suffixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GFilenameCompleter>, ffi.Pointer<ffi.Char>)>>(
      'g_filename_completer_get_completion_suffix');
  late final _g_filename_completer_get_completion_suffix =
      _g_filename_completer_get_completion_suffixPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFilenameCompleter>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_filename_completer_get_completions(
    ffi.Pointer<GFilenameCompleter> completer,
    ffi.Pointer<ffi.Char> initial_text,
  ) {
    return _g_filename_completer_get_completions(
      completer,
      initial_text,
    );
  }

  late final _g_filename_completer_get_completionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GFilenameCompleter>,
              ffi.Pointer<ffi.Char>)>>('g_filename_completer_get_completions');
  late final _g_filename_completer_get_completions =
      _g_filename_completer_get_completionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GFilenameCompleter>, ffi.Pointer<ffi.Char>)>();

  void g_filename_completer_set_dirs_only(
    ffi.Pointer<GFilenameCompleter> completer,
    int dirs_only,
  ) {
    return _g_filename_completer_set_dirs_only(
      completer,
      dirs_only,
    );
  }

  late final _g_filename_completer_set_dirs_onlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GFilenameCompleter>,
              gboolean)>>('g_filename_completer_set_dirs_only');
  late final _g_filename_completer_set_dirs_only =
      _g_filename_completer_set_dirs_onlyPtr
          .asFunction<void Function(ffi.Pointer<GFilenameCompleter>, int)>();

  int g_file_output_stream_get_type() {
    return _g_file_output_stream_get_type();
  }

  late final _g_file_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_output_stream_get_type');
  late final _g_file_output_stream_get_type =
      _g_file_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFileInfo> g_file_output_stream_query_info(
    ffi.Pointer<GFileOutputStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_output_stream_query_info(
      stream,
      attributes,
      cancellable,
      error,
    );
  }

  late final _g_file_output_stream_query_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileOutputStream>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_output_stream_query_info');
  late final _g_file_output_stream_query_info =
      _g_file_output_stream_query_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileOutputStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_file_output_stream_query_info_async(
    ffi.Pointer<GFileOutputStream> stream,
    ffi.Pointer<ffi.Char> attributes,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_file_output_stream_query_info_async(
      stream,
      attributes,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_file_output_stream_query_info_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileOutputStream>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_file_output_stream_query_info_async');
  late final _g_file_output_stream_query_info_async =
      _g_file_output_stream_query_info_asyncPtr.asFunction<
          void Function(ffi.Pointer<GFileOutputStream>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GFileInfo> g_file_output_stream_query_info_finish(
    ffi.Pointer<GFileOutputStream> stream,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_output_stream_query_info_finish(
      stream,
      result,
      error,
    );
  }

  late final _g_file_output_stream_query_info_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFileOutputStream>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_file_output_stream_query_info_finish');
  late final _g_file_output_stream_query_info_finish =
      _g_file_output_stream_query_info_finishPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GFileOutputStream>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_file_output_stream_get_etag(
    ffi.Pointer<GFileOutputStream> stream,
  ) {
    return _g_file_output_stream_get_etag(
      stream,
    );
  }

  late final _g_file_output_stream_get_etagPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileOutputStream>)>>(
      'g_file_output_stream_get_etag');
  late final _g_file_output_stream_get_etag =
      _g_file_output_stream_get_etagPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFileOutputStream>)>();

  int g_inet_address_get_type() {
    return _g_inet_address_get_type();
  }

  late final _g_inet_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_inet_address_get_type');
  late final _g_inet_address_get_type =
      _g_inet_address_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInetAddress> g_inet_address_new_from_string(
    ffi.Pointer<gchar> string,
  ) {
    return _g_inet_address_new_from_string(
      string,
    );
  }

  late final _g_inet_address_new_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInetAddress> Function(
              ffi.Pointer<gchar>)>>('g_inet_address_new_from_string');
  late final _g_inet_address_new_from_string =
      _g_inet_address_new_from_stringPtr
          .asFunction<ffi.Pointer<GInetAddress> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GInetAddress> g_inet_address_new_from_bytes(
    ffi.Pointer<guint8> bytes,
    int family,
  ) {
    return _g_inet_address_new_from_bytes(
      bytes,
      family,
    );
  }

  late final _g_inet_address_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInetAddress> Function(ffi.Pointer<guint8>,
              ffi.Int32)>>('g_inet_address_new_from_bytes');
  late final _g_inet_address_new_from_bytes =
      _g_inet_address_new_from_bytesPtr.asFunction<
          ffi.Pointer<GInetAddress> Function(ffi.Pointer<guint8>, int)>();

  ffi.Pointer<GInetAddress> g_inet_address_new_loopback(
    int family,
  ) {
    return _g_inet_address_new_loopback(
      family,
    );
  }

  late final _g_inet_address_new_loopbackPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GInetAddress> Function(ffi.Int32)>>(
      'g_inet_address_new_loopback');
  late final _g_inet_address_new_loopback = _g_inet_address_new_loopbackPtr
      .asFunction<ffi.Pointer<GInetAddress> Function(int)>();

  ffi.Pointer<GInetAddress> g_inet_address_new_any(
    int family,
  ) {
    return _g_inet_address_new_any(
      family,
    );
  }

  late final _g_inet_address_new_anyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GInetAddress> Function(ffi.Int32)>>(
      'g_inet_address_new_any');
  late final _g_inet_address_new_any = _g_inet_address_new_anyPtr
      .asFunction<ffi.Pointer<GInetAddress> Function(int)>();

  int g_inet_address_equal(
    ffi.Pointer<GInetAddress> address,
    ffi.Pointer<GInetAddress> other_address,
  ) {
    return _g_inet_address_equal(
      address,
      other_address,
    );
  }

  late final _g_inet_address_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GInetAddress>,
              ffi.Pointer<GInetAddress>)>>('g_inet_address_equal');
  late final _g_inet_address_equal = _g_inet_address_equalPtr.asFunction<
      int Function(ffi.Pointer<GInetAddress>, ffi.Pointer<GInetAddress>)>();

  ffi.Pointer<gchar> g_inet_address_to_string(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_to_string(
      address,
    );
  }

  late final _g_inet_address_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GInetAddress>)>>('g_inet_address_to_string');
  late final _g_inet_address_to_string = _g_inet_address_to_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GInetAddress>)>();

  ffi.Pointer<guint8> g_inet_address_to_bytes(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_to_bytes(
      address,
    );
  }

  late final _g_inet_address_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(
              ffi.Pointer<GInetAddress>)>>('g_inet_address_to_bytes');
  late final _g_inet_address_to_bytes = _g_inet_address_to_bytesPtr
      .asFunction<ffi.Pointer<guint8> Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_native_size(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_native_size(
      address,
    );
  }

  late final _g_inet_address_get_native_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_native_size');
  late final _g_inet_address_get_native_size =
      _g_inet_address_get_native_sizePtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_family(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_family(
      address,
    );
  }

  late final _g_inet_address_get_familyPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GInetAddress>)>>(
      'g_inet_address_get_family');
  late final _g_inet_address_get_family = _g_inet_address_get_familyPtr
      .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_any(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_any(
      address,
    );
  }

  late final _g_inet_address_get_is_anyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_any');
  late final _g_inet_address_get_is_any = _g_inet_address_get_is_anyPtr
      .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_loopback(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_loopback(
      address,
    );
  }

  late final _g_inet_address_get_is_loopbackPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_loopback');
  late final _g_inet_address_get_is_loopback =
      _g_inet_address_get_is_loopbackPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_link_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_link_local(
      address,
    );
  }

  late final _g_inet_address_get_is_link_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_link_local');
  late final _g_inet_address_get_is_link_local =
      _g_inet_address_get_is_link_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_site_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_site_local(
      address,
    );
  }

  late final _g_inet_address_get_is_site_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_site_local');
  late final _g_inet_address_get_is_site_local =
      _g_inet_address_get_is_site_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_multicast(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_multicast(
      address,
    );
  }

  late final _g_inet_address_get_is_multicastPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_multicast');
  late final _g_inet_address_get_is_multicast =
      _g_inet_address_get_is_multicastPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_mc_global(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_mc_global(
      address,
    );
  }

  late final _g_inet_address_get_is_mc_globalPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_mc_global');
  late final _g_inet_address_get_is_mc_global =
      _g_inet_address_get_is_mc_globalPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_mc_link_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_mc_link_local(
      address,
    );
  }

  late final _g_inet_address_get_is_mc_link_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_mc_link_local');
  late final _g_inet_address_get_is_mc_link_local =
      _g_inet_address_get_is_mc_link_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_mc_node_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_mc_node_local(
      address,
    );
  }

  late final _g_inet_address_get_is_mc_node_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_mc_node_local');
  late final _g_inet_address_get_is_mc_node_local =
      _g_inet_address_get_is_mc_node_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_mc_org_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_mc_org_local(
      address,
    );
  }

  late final _g_inet_address_get_is_mc_org_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_mc_org_local');
  late final _g_inet_address_get_is_mc_org_local =
      _g_inet_address_get_is_mc_org_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_get_is_mc_site_local(
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_get_is_mc_site_local(
      address,
    );
  }

  late final _g_inet_address_get_is_mc_site_localPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GInetAddress>)>>(
          'g_inet_address_get_is_mc_site_local');
  late final _g_inet_address_get_is_mc_site_local =
      _g_inet_address_get_is_mc_site_localPtr
          .asFunction<int Function(ffi.Pointer<GInetAddress>)>();

  int g_inet_address_mask_get_type() {
    return _g_inet_address_mask_get_type();
  }

  late final _g_inet_address_mask_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_inet_address_mask_get_type');
  late final _g_inet_address_mask_get_type =
      _g_inet_address_mask_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInetAddressMask> g_inet_address_mask_new(
    ffi.Pointer<GInetAddress> addr,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_inet_address_mask_new(
      addr,
      length,
      error,
    );
  }

  late final _g_inet_address_mask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInetAddressMask> Function(
              ffi.Pointer<GInetAddress>,
              guint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_inet_address_mask_new');
  late final _g_inet_address_mask_new = _g_inet_address_mask_newPtr.asFunction<
      ffi.Pointer<GInetAddressMask> Function(
          ffi.Pointer<GInetAddress>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GInetAddressMask> g_inet_address_mask_new_from_string(
    ffi.Pointer<gchar> mask_string,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_inet_address_mask_new_from_string(
      mask_string,
      error,
    );
  }

  late final _g_inet_address_mask_new_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInetAddressMask> Function(
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_inet_address_mask_new_from_string');
  late final _g_inet_address_mask_new_from_string =
      _g_inet_address_mask_new_from_stringPtr.asFunction<
          ffi.Pointer<GInetAddressMask> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_inet_address_mask_to_string(
    ffi.Pointer<GInetAddressMask> mask,
  ) {
    return _g_inet_address_mask_to_string(
      mask,
    );
  }

  late final _g_inet_address_mask_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GInetAddressMask>)>>('g_inet_address_mask_to_string');
  late final _g_inet_address_mask_to_string = _g_inet_address_mask_to_stringPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GInetAddressMask>)>();

  int g_inet_address_mask_get_family(
    ffi.Pointer<GInetAddressMask> mask,
  ) {
    return _g_inet_address_mask_get_family(
      mask,
    );
  }

  late final _g_inet_address_mask_get_familyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GInetAddressMask>)>>(
      'g_inet_address_mask_get_family');
  late final _g_inet_address_mask_get_family =
      _g_inet_address_mask_get_familyPtr
          .asFunction<int Function(ffi.Pointer<GInetAddressMask>)>();

  ffi.Pointer<GInetAddress> g_inet_address_mask_get_address(
    ffi.Pointer<GInetAddressMask> mask,
  ) {
    return _g_inet_address_mask_get_address(
      mask,
    );
  }

  late final _g_inet_address_mask_get_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInetAddress> Function(
                  ffi.Pointer<GInetAddressMask>)>>(
      'g_inet_address_mask_get_address');
  late final _g_inet_address_mask_get_address =
      _g_inet_address_mask_get_addressPtr.asFunction<
          ffi.Pointer<GInetAddress> Function(ffi.Pointer<GInetAddressMask>)>();

  int g_inet_address_mask_get_length(
    ffi.Pointer<GInetAddressMask> mask,
  ) {
    return _g_inet_address_mask_get_length(
      mask,
    );
  }

  late final _g_inet_address_mask_get_lengthPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GInetAddressMask>)>>(
      'g_inet_address_mask_get_length');
  late final _g_inet_address_mask_get_length =
      _g_inet_address_mask_get_lengthPtr
          .asFunction<int Function(ffi.Pointer<GInetAddressMask>)>();

  int g_inet_address_mask_matches(
    ffi.Pointer<GInetAddressMask> mask,
    ffi.Pointer<GInetAddress> address,
  ) {
    return _g_inet_address_mask_matches(
      mask,
      address,
    );
  }

  late final _g_inet_address_mask_matchesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GInetAddressMask>,
              ffi.Pointer<GInetAddress>)>>('g_inet_address_mask_matches');
  late final _g_inet_address_mask_matches =
      _g_inet_address_mask_matchesPtr.asFunction<
          int Function(
              ffi.Pointer<GInetAddressMask>, ffi.Pointer<GInetAddress>)>();

  int g_inet_address_mask_equal(
    ffi.Pointer<GInetAddressMask> mask,
    ffi.Pointer<GInetAddressMask> mask2,
  ) {
    return _g_inet_address_mask_equal(
      mask,
      mask2,
    );
  }

  late final _g_inet_address_mask_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GInetAddressMask>,
              ffi.Pointer<GInetAddressMask>)>>('g_inet_address_mask_equal');
  late final _g_inet_address_mask_equal =
      _g_inet_address_mask_equalPtr.asFunction<
          int Function(
              ffi.Pointer<GInetAddressMask>, ffi.Pointer<GInetAddressMask>)>();

  int g_socket_address_get_type() {
    return _g_socket_address_get_type();
  }

  late final _g_socket_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_address_get_type');
  late final _g_socket_address_get_type =
      _g_socket_address_get_typePtr.asFunction<int Function()>();

  int g_socket_address_get_family(
    ffi.Pointer<GSocketAddress> address,
  ) {
    return _g_socket_address_get_family(
      address,
    );
  }

  late final _g_socket_address_get_familyPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocketAddress>)>>(
      'g_socket_address_get_family');
  late final _g_socket_address_get_family = _g_socket_address_get_familyPtr
      .asFunction<int Function(ffi.Pointer<GSocketAddress>)>();

  ffi.Pointer<GSocketAddress> g_socket_address_new_from_native(
    gpointer native,
    int len,
  ) {
    return _g_socket_address_new_from_native(
      native,
      len,
    );
  }

  late final _g_socket_address_new_from_nativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(
              gpointer, gsize)>>('g_socket_address_new_from_native');
  late final _g_socket_address_new_from_native =
      _g_socket_address_new_from_nativePtr
          .asFunction<ffi.Pointer<GSocketAddress> Function(gpointer, int)>();

  int g_socket_address_to_native(
    ffi.Pointer<GSocketAddress> address,
    gpointer dest,
    int destlen,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_address_to_native(
      address,
      dest,
      destlen,
      error,
    );
  }

  late final _g_socket_address_to_nativePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocketAddress>, gpointer, gsize,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_address_to_native');
  late final _g_socket_address_to_native =
      _g_socket_address_to_nativePtr.asFunction<
          int Function(ffi.Pointer<GSocketAddress>, gpointer, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_address_get_native_size(
    ffi.Pointer<GSocketAddress> address,
  ) {
    return _g_socket_address_get_native_size(
      address,
    );
  }

  late final _g_socket_address_get_native_sizePtr =
      _lookup<ffi.NativeFunction<gssize Function(ffi.Pointer<GSocketAddress>)>>(
          'g_socket_address_get_native_size');
  late final _g_socket_address_get_native_size =
      _g_socket_address_get_native_sizePtr
          .asFunction<int Function(ffi.Pointer<GSocketAddress>)>();

  int g_inet_socket_address_get_type() {
    return _g_inet_socket_address_get_type();
  }

  late final _g_inet_socket_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_inet_socket_address_get_type');
  late final _g_inet_socket_address_get_type =
      _g_inet_socket_address_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketAddress> g_inet_socket_address_new(
    ffi.Pointer<GInetAddress> address,
    int port,
  ) {
    return _g_inet_socket_address_new(
      address,
      port,
    );
  }

  late final _g_inet_socket_address_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<GInetAddress>,
              guint16)>>('g_inet_socket_address_new');
  late final _g_inet_socket_address_new =
      _g_inet_socket_address_newPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GInetAddress>, int)>();

  ffi.Pointer<GSocketAddress> g_inet_socket_address_new_from_string(
    ffi.Pointer<ffi.Char> address,
    int port,
  ) {
    return _g_inet_socket_address_new_from_string(
      address,
      port,
    );
  }

  late final _g_inet_socket_address_new_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<ffi.Char>,
              guint)>>('g_inet_socket_address_new_from_string');
  late final _g_inet_socket_address_new_from_string =
      _g_inet_socket_address_new_from_stringPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GInetAddress> g_inet_socket_address_get_address(
    ffi.Pointer<GInetSocketAddress> address,
  ) {
    return _g_inet_socket_address_get_address(
      address,
    );
  }

  late final _g_inet_socket_address_get_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInetAddress> Function(
                  ffi.Pointer<GInetSocketAddress>)>>(
      'g_inet_socket_address_get_address');
  late final _g_inet_socket_address_get_address =
      _g_inet_socket_address_get_addressPtr.asFunction<
          ffi.Pointer<GInetAddress> Function(
              ffi.Pointer<GInetSocketAddress>)>();

  int g_inet_socket_address_get_port(
    ffi.Pointer<GInetSocketAddress> address,
  ) {
    return _g_inet_socket_address_get_port(
      address,
    );
  }

  late final _g_inet_socket_address_get_portPtr = _lookup<
          ffi
          .NativeFunction<guint16 Function(ffi.Pointer<GInetSocketAddress>)>>(
      'g_inet_socket_address_get_port');
  late final _g_inet_socket_address_get_port =
      _g_inet_socket_address_get_portPtr
          .asFunction<int Function(ffi.Pointer<GInetSocketAddress>)>();

  int g_inet_socket_address_get_flowinfo(
    ffi.Pointer<GInetSocketAddress> address,
  ) {
    return _g_inet_socket_address_get_flowinfo(
      address,
    );
  }

  late final _g_inet_socket_address_get_flowinfoPtr = _lookup<
          ffi
          .NativeFunction<guint32 Function(ffi.Pointer<GInetSocketAddress>)>>(
      'g_inet_socket_address_get_flowinfo');
  late final _g_inet_socket_address_get_flowinfo =
      _g_inet_socket_address_get_flowinfoPtr
          .asFunction<int Function(ffi.Pointer<GInetSocketAddress>)>();

  int g_inet_socket_address_get_scope_id(
    ffi.Pointer<GInetSocketAddress> address,
  ) {
    return _g_inet_socket_address_get_scope_id(
      address,
    );
  }

  late final _g_inet_socket_address_get_scope_idPtr = _lookup<
          ffi
          .NativeFunction<guint32 Function(ffi.Pointer<GInetSocketAddress>)>>(
      'g_inet_socket_address_get_scope_id');
  late final _g_inet_socket_address_get_scope_id =
      _g_inet_socket_address_get_scope_idPtr
          .asFunction<int Function(ffi.Pointer<GInetSocketAddress>)>();

  int g_app_info_create_flags_get_type() {
    return _g_app_info_create_flags_get_type();
  }

  late final _g_app_info_create_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_app_info_create_flags_get_type');
  late final _g_app_info_create_flags_get_type =
      _g_app_info_create_flags_get_typePtr.asFunction<int Function()>();

  int g_converter_flags_get_type() {
    return _g_converter_flags_get_type();
  }

  late final _g_converter_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_converter_flags_get_type');
  late final _g_converter_flags_get_type =
      _g_converter_flags_get_typePtr.asFunction<int Function()>();

  int g_converter_result_get_type() {
    return _g_converter_result_get_type();
  }

  late final _g_converter_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_converter_result_get_type');
  late final _g_converter_result_get_type =
      _g_converter_result_get_typePtr.asFunction<int Function()>();

  int g_data_stream_byte_order_get_type() {
    return _g_data_stream_byte_order_get_type();
  }

  late final _g_data_stream_byte_order_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_data_stream_byte_order_get_type');
  late final _g_data_stream_byte_order_get_type =
      _g_data_stream_byte_order_get_typePtr.asFunction<int Function()>();

  int g_data_stream_newline_type_get_type() {
    return _g_data_stream_newline_type_get_type();
  }

  late final _g_data_stream_newline_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_data_stream_newline_type_get_type');
  late final _g_data_stream_newline_type_get_type =
      _g_data_stream_newline_type_get_typePtr.asFunction<int Function()>();

  int g_file_attribute_type_get_type() {
    return _g_file_attribute_type_get_type();
  }

  late final _g_file_attribute_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_attribute_type_get_type');
  late final _g_file_attribute_type_get_type =
      _g_file_attribute_type_get_typePtr.asFunction<int Function()>();

  int g_file_attribute_info_flags_get_type() {
    return _g_file_attribute_info_flags_get_type();
  }

  late final _g_file_attribute_info_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_attribute_info_flags_get_type');
  late final _g_file_attribute_info_flags_get_type =
      _g_file_attribute_info_flags_get_typePtr.asFunction<int Function()>();

  int g_file_attribute_status_get_type() {
    return _g_file_attribute_status_get_type();
  }

  late final _g_file_attribute_status_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_attribute_status_get_type');
  late final _g_file_attribute_status_get_type =
      _g_file_attribute_status_get_typePtr.asFunction<int Function()>();

  int g_file_query_info_flags_get_type() {
    return _g_file_query_info_flags_get_type();
  }

  late final _g_file_query_info_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_query_info_flags_get_type');
  late final _g_file_query_info_flags_get_type =
      _g_file_query_info_flags_get_typePtr.asFunction<int Function()>();

  int g_file_create_flags_get_type() {
    return _g_file_create_flags_get_type();
  }

  late final _g_file_create_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_create_flags_get_type');
  late final _g_file_create_flags_get_type =
      _g_file_create_flags_get_typePtr.asFunction<int Function()>();

  int g_file_measure_flags_get_type() {
    return _g_file_measure_flags_get_type();
  }

  late final _g_file_measure_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_measure_flags_get_type');
  late final _g_file_measure_flags_get_type =
      _g_file_measure_flags_get_typePtr.asFunction<int Function()>();

  int g_mount_mount_flags_get_type() {
    return _g_mount_mount_flags_get_type();
  }

  late final _g_mount_mount_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_mount_mount_flags_get_type');
  late final _g_mount_mount_flags_get_type =
      _g_mount_mount_flags_get_typePtr.asFunction<int Function()>();

  int g_mount_unmount_flags_get_type() {
    return _g_mount_unmount_flags_get_type();
  }

  late final _g_mount_unmount_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_mount_unmount_flags_get_type');
  late final _g_mount_unmount_flags_get_type =
      _g_mount_unmount_flags_get_typePtr.asFunction<int Function()>();

  int g_drive_start_flags_get_type() {
    return _g_drive_start_flags_get_type();
  }

  late final _g_drive_start_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_drive_start_flags_get_type');
  late final _g_drive_start_flags_get_type =
      _g_drive_start_flags_get_typePtr.asFunction<int Function()>();

  int g_drive_start_stop_type_get_type() {
    return _g_drive_start_stop_type_get_type();
  }

  late final _g_drive_start_stop_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_drive_start_stop_type_get_type');
  late final _g_drive_start_stop_type_get_type =
      _g_drive_start_stop_type_get_typePtr.asFunction<int Function()>();

  int g_file_copy_flags_get_type() {
    return _g_file_copy_flags_get_type();
  }

  late final _g_file_copy_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_copy_flags_get_type');
  late final _g_file_copy_flags_get_type =
      _g_file_copy_flags_get_typePtr.asFunction<int Function()>();

  int g_file_monitor_flags_get_type() {
    return _g_file_monitor_flags_get_type();
  }

  late final _g_file_monitor_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_monitor_flags_get_type');
  late final _g_file_monitor_flags_get_type =
      _g_file_monitor_flags_get_typePtr.asFunction<int Function()>();

  int g_file_type_get_type() {
    return _g_file_type_get_type();
  }

  late final _g_file_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_file_type_get_type');
  late final _g_file_type_get_type =
      _g_file_type_get_typePtr.asFunction<int Function()>();

  int g_filesystem_preview_type_get_type() {
    return _g_filesystem_preview_type_get_type();
  }

  late final _g_filesystem_preview_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_filesystem_preview_type_get_type');
  late final _g_filesystem_preview_type_get_type =
      _g_filesystem_preview_type_get_typePtr.asFunction<int Function()>();

  int g_file_monitor_event_get_type() {
    return _g_file_monitor_event_get_type();
  }

  late final _g_file_monitor_event_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_file_monitor_event_get_type');
  late final _g_file_monitor_event_get_type =
      _g_file_monitor_event_get_typePtr.asFunction<int Function()>();

  int g_io_error_enum_get_type() {
    return _g_io_error_enum_get_type();
  }

  late final _g_io_error_enum_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_error_enum_get_type');
  late final _g_io_error_enum_get_type =
      _g_io_error_enum_get_typePtr.asFunction<int Function()>();

  int g_ask_password_flags_get_type() {
    return _g_ask_password_flags_get_type();
  }

  late final _g_ask_password_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_ask_password_flags_get_type');
  late final _g_ask_password_flags_get_type =
      _g_ask_password_flags_get_typePtr.asFunction<int Function()>();

  int g_password_save_get_type() {
    return _g_password_save_get_type();
  }

  late final _g_password_save_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_password_save_get_type');
  late final _g_password_save_get_type =
      _g_password_save_get_typePtr.asFunction<int Function()>();

  int g_mount_operation_result_get_type() {
    return _g_mount_operation_result_get_type();
  }

  late final _g_mount_operation_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_mount_operation_result_get_type');
  late final _g_mount_operation_result_get_type =
      _g_mount_operation_result_get_typePtr.asFunction<int Function()>();

  int g_output_stream_splice_flags_get_type() {
    return _g_output_stream_splice_flags_get_type();
  }

  late final _g_output_stream_splice_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_output_stream_splice_flags_get_type');
  late final _g_output_stream_splice_flags_get_type =
      _g_output_stream_splice_flags_get_typePtr.asFunction<int Function()>();

  int g_io_stream_splice_flags_get_type() {
    return _g_io_stream_splice_flags_get_type();
  }

  late final _g_io_stream_splice_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_io_stream_splice_flags_get_type');
  late final _g_io_stream_splice_flags_get_type =
      _g_io_stream_splice_flags_get_typePtr.asFunction<int Function()>();

  int g_emblem_origin_get_type() {
    return _g_emblem_origin_get_type();
  }

  late final _g_emblem_origin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_emblem_origin_get_type');
  late final _g_emblem_origin_get_type =
      _g_emblem_origin_get_typePtr.asFunction<int Function()>();

  int g_resolver_error_get_type() {
    return _g_resolver_error_get_type();
  }

  late final _g_resolver_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resolver_error_get_type');
  late final _g_resolver_error_get_type =
      _g_resolver_error_get_typePtr.asFunction<int Function()>();

  int g_resolver_record_type_get_type() {
    return _g_resolver_record_type_get_type();
  }

  late final _g_resolver_record_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resolver_record_type_get_type');
  late final _g_resolver_record_type_get_type =
      _g_resolver_record_type_get_typePtr.asFunction<int Function()>();

  int g_resource_error_get_type() {
    return _g_resource_error_get_type();
  }

  late final _g_resource_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resource_error_get_type');
  late final _g_resource_error_get_type =
      _g_resource_error_get_typePtr.asFunction<int Function()>();

  int g_resource_flags_get_type() {
    return _g_resource_flags_get_type();
  }

  late final _g_resource_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resource_flags_get_type');
  late final _g_resource_flags_get_type =
      _g_resource_flags_get_typePtr.asFunction<int Function()>();

  int g_resource_lookup_flags_get_type() {
    return _g_resource_lookup_flags_get_type();
  }

  late final _g_resource_lookup_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resource_lookup_flags_get_type');
  late final _g_resource_lookup_flags_get_type =
      _g_resource_lookup_flags_get_typePtr.asFunction<int Function()>();

  int g_socket_family_get_type() {
    return _g_socket_family_get_type();
  }

  late final _g_socket_family_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_socket_family_get_type');
  late final _g_socket_family_get_type =
      _g_socket_family_get_typePtr.asFunction<int Function()>();

  int g_socket_type_get_type() {
    return _g_socket_type_get_type();
  }

  late final _g_socket_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_socket_type_get_type');
  late final _g_socket_type_get_type =
      _g_socket_type_get_typePtr.asFunction<int Function()>();

  int g_socket_msg_flags_get_type() {
    return _g_socket_msg_flags_get_type();
  }

  late final _g_socket_msg_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_msg_flags_get_type');
  late final _g_socket_msg_flags_get_type =
      _g_socket_msg_flags_get_typePtr.asFunction<int Function()>();

  int g_socket_protocol_get_type() {
    return _g_socket_protocol_get_type();
  }

  late final _g_socket_protocol_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_protocol_get_type');
  late final _g_socket_protocol_get_type =
      _g_socket_protocol_get_typePtr.asFunction<int Function()>();

  int g_zlib_compressor_format_get_type() {
    return _g_zlib_compressor_format_get_type();
  }

  late final _g_zlib_compressor_format_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_zlib_compressor_format_get_type');
  late final _g_zlib_compressor_format_get_type =
      _g_zlib_compressor_format_get_typePtr.asFunction<int Function()>();

  int g_unix_socket_address_type_get_type() {
    return _g_unix_socket_address_type_get_type();
  }

  late final _g_unix_socket_address_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unix_socket_address_type_get_type');
  late final _g_unix_socket_address_type_get_type =
      _g_unix_socket_address_type_get_typePtr.asFunction<int Function()>();

  int g_bus_type_get_type() {
    return _g_bus_type_get_type();
  }

  late final _g_bus_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bus_type_get_type');
  late final _g_bus_type_get_type =
      _g_bus_type_get_typePtr.asFunction<int Function()>();

  int g_bus_name_owner_flags_get_type() {
    return _g_bus_name_owner_flags_get_type();
  }

  late final _g_bus_name_owner_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_bus_name_owner_flags_get_type');
  late final _g_bus_name_owner_flags_get_type =
      _g_bus_name_owner_flags_get_typePtr.asFunction<int Function()>();

  int g_bus_name_watcher_flags_get_type() {
    return _g_bus_name_watcher_flags_get_type();
  }

  late final _g_bus_name_watcher_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_bus_name_watcher_flags_get_type');
  late final _g_bus_name_watcher_flags_get_type =
      _g_bus_name_watcher_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_proxy_flags_get_type() {
    return _g_dbus_proxy_flags_get_type();
  }

  late final _g_dbus_proxy_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_proxy_flags_get_type');
  late final _g_dbus_proxy_flags_get_type =
      _g_dbus_proxy_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_error_get_type() {
    return _g_dbus_error_get_type();
  }

  late final _g_dbus_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dbus_error_get_type');
  late final _g_dbus_error_get_type =
      _g_dbus_error_get_typePtr.asFunction<int Function()>();

  int g_dbus_connection_flags_get_type() {
    return _g_dbus_connection_flags_get_type();
  }

  late final _g_dbus_connection_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_connection_flags_get_type');
  late final _g_dbus_connection_flags_get_type =
      _g_dbus_connection_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_capability_flags_get_type() {
    return _g_dbus_capability_flags_get_type();
  }

  late final _g_dbus_capability_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_capability_flags_get_type');
  late final _g_dbus_capability_flags_get_type =
      _g_dbus_capability_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_call_flags_get_type() {
    return _g_dbus_call_flags_get_type();
  }

  late final _g_dbus_call_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_call_flags_get_type');
  late final _g_dbus_call_flags_get_type =
      _g_dbus_call_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_message_type_get_type() {
    return _g_dbus_message_type_get_type();
  }

  late final _g_dbus_message_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_message_type_get_type');
  late final _g_dbus_message_type_get_type =
      _g_dbus_message_type_get_typePtr.asFunction<int Function()>();

  int g_dbus_message_flags_get_type() {
    return _g_dbus_message_flags_get_type();
  }

  late final _g_dbus_message_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_message_flags_get_type');
  late final _g_dbus_message_flags_get_type =
      _g_dbus_message_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_message_header_field_get_type() {
    return _g_dbus_message_header_field_get_type();
  }

  late final _g_dbus_message_header_field_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_message_header_field_get_type');
  late final _g_dbus_message_header_field_get_type =
      _g_dbus_message_header_field_get_typePtr.asFunction<int Function()>();

  int g_dbus_property_info_flags_get_type() {
    return _g_dbus_property_info_flags_get_type();
  }

  late final _g_dbus_property_info_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_property_info_flags_get_type');
  late final _g_dbus_property_info_flags_get_type =
      _g_dbus_property_info_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_subtree_flags_get_type() {
    return _g_dbus_subtree_flags_get_type();
  }

  late final _g_dbus_subtree_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_subtree_flags_get_type');
  late final _g_dbus_subtree_flags_get_type =
      _g_dbus_subtree_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_server_flags_get_type() {
    return _g_dbus_server_flags_get_type();
  }

  late final _g_dbus_server_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_server_flags_get_type');
  late final _g_dbus_server_flags_get_type =
      _g_dbus_server_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_signal_flags_get_type() {
    return _g_dbus_signal_flags_get_type();
  }

  late final _g_dbus_signal_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_signal_flags_get_type');
  late final _g_dbus_signal_flags_get_type =
      _g_dbus_signal_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_send_message_flags_get_type() {
    return _g_dbus_send_message_flags_get_type();
  }

  late final _g_dbus_send_message_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_send_message_flags_get_type');
  late final _g_dbus_send_message_flags_get_type =
      _g_dbus_send_message_flags_get_typePtr.asFunction<int Function()>();

  int g_credentials_type_get_type() {
    return _g_credentials_type_get_type();
  }

  late final _g_credentials_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_credentials_type_get_type');
  late final _g_credentials_type_get_type =
      _g_credentials_type_get_typePtr.asFunction<int Function()>();

  int g_dbus_message_byte_order_get_type() {
    return _g_dbus_message_byte_order_get_type();
  }

  late final _g_dbus_message_byte_order_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_message_byte_order_get_type');
  late final _g_dbus_message_byte_order_get_type =
      _g_dbus_message_byte_order_get_typePtr.asFunction<int Function()>();

  int g_application_flags_get_type() {
    return _g_application_flags_get_type();
  }

  late final _g_application_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_application_flags_get_type');
  late final _g_application_flags_get_type =
      _g_application_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_error_get_type() {
    return _g_tls_error_get_type();
  }

  late final _g_tls_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tls_error_get_type');
  late final _g_tls_error_get_type =
      _g_tls_error_get_typePtr.asFunction<int Function()>();

  int g_tls_certificate_flags_get_type() {
    return _g_tls_certificate_flags_get_type();
  }

  late final _g_tls_certificate_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_certificate_flags_get_type');
  late final _g_tls_certificate_flags_get_type =
      _g_tls_certificate_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_authentication_mode_get_type() {
    return _g_tls_authentication_mode_get_type();
  }

  late final _g_tls_authentication_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_authentication_mode_get_type');
  late final _g_tls_authentication_mode_get_type =
      _g_tls_authentication_mode_get_typePtr.asFunction<int Function()>();

  int g_tls_channel_binding_type_get_type() {
    return _g_tls_channel_binding_type_get_type();
  }

  late final _g_tls_channel_binding_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_channel_binding_type_get_type');
  late final _g_tls_channel_binding_type_get_type =
      _g_tls_channel_binding_type_get_typePtr.asFunction<int Function()>();

  int g_tls_channel_binding_error_get_type() {
    return _g_tls_channel_binding_error_get_type();
  }

  late final _g_tls_channel_binding_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_channel_binding_error_get_type');
  late final _g_tls_channel_binding_error_get_type =
      _g_tls_channel_binding_error_get_typePtr.asFunction<int Function()>();

  int g_tls_rehandshake_mode_get_type() {
    return _g_tls_rehandshake_mode_get_type();
  }

  late final _g_tls_rehandshake_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_rehandshake_mode_get_type');
  late final _g_tls_rehandshake_mode_get_type =
      _g_tls_rehandshake_mode_get_typePtr.asFunction<int Function()>();

  int g_tls_password_flags_get_type() {
    return _g_tls_password_flags_get_type();
  }

  late final _g_tls_password_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_password_flags_get_type');
  late final _g_tls_password_flags_get_type =
      _g_tls_password_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_interaction_result_get_type() {
    return _g_tls_interaction_result_get_type();
  }

  late final _g_tls_interaction_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_interaction_result_get_type');
  late final _g_tls_interaction_result_get_type =
      _g_tls_interaction_result_get_typePtr.asFunction<int Function()>();

  int g_dbus_interface_skeleton_flags_get_type() {
    return _g_dbus_interface_skeleton_flags_get_type();
  }

  late final _g_dbus_interface_skeleton_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_interface_skeleton_flags_get_type');
  late final _g_dbus_interface_skeleton_flags_get_type =
      _g_dbus_interface_skeleton_flags_get_typePtr.asFunction<int Function()>();

  int g_dbus_object_manager_client_flags_get_type() {
    return _g_dbus_object_manager_client_flags_get_type();
  }

  late final _g_dbus_object_manager_client_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_dbus_object_manager_client_flags_get_type');
  late final _g_dbus_object_manager_client_flags_get_type =
      _g_dbus_object_manager_client_flags_get_typePtr
          .asFunction<int Function()>();

  int g_tls_database_verify_flags_get_type() {
    return _g_tls_database_verify_flags_get_type();
  }

  late final _g_tls_database_verify_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_database_verify_flags_get_type');
  late final _g_tls_database_verify_flags_get_type =
      _g_tls_database_verify_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_database_lookup_flags_get_type() {
    return _g_tls_database_lookup_flags_get_type();
  }

  late final _g_tls_database_lookup_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_database_lookup_flags_get_type');
  late final _g_tls_database_lookup_flags_get_type =
      _g_tls_database_lookup_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_certificate_request_flags_get_type() {
    return _g_tls_certificate_request_flags_get_type();
  }

  late final _g_tls_certificate_request_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_certificate_request_flags_get_type');
  late final _g_tls_certificate_request_flags_get_type =
      _g_tls_certificate_request_flags_get_typePtr.asFunction<int Function()>();

  int g_tls_protocol_version_get_type() {
    return _g_tls_protocol_version_get_type();
  }

  late final _g_tls_protocol_version_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_protocol_version_get_type');
  late final _g_tls_protocol_version_get_type =
      _g_tls_protocol_version_get_typePtr.asFunction<int Function()>();

  int g_io_module_scope_flags_get_type() {
    return _g_io_module_scope_flags_get_type();
  }

  late final _g_io_module_scope_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_io_module_scope_flags_get_type');
  late final _g_io_module_scope_flags_get_type =
      _g_io_module_scope_flags_get_typePtr.asFunction<int Function()>();

  int g_socket_client_event_get_type() {
    return _g_socket_client_event_get_type();
  }

  late final _g_socket_client_event_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_client_event_get_type');
  late final _g_socket_client_event_get_type =
      _g_socket_client_event_get_typePtr.asFunction<int Function()>();

  int g_socket_listener_event_get_type() {
    return _g_socket_listener_event_get_type();
  }

  late final _g_socket_listener_event_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_listener_event_get_type');
  late final _g_socket_listener_event_get_type =
      _g_socket_listener_event_get_typePtr.asFunction<int Function()>();

  int g_test_dbus_flags_get_type() {
    return _g_test_dbus_flags_get_type();
  }

  late final _g_test_dbus_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_test_dbus_flags_get_type');
  late final _g_test_dbus_flags_get_type =
      _g_test_dbus_flags_get_typePtr.asFunction<int Function()>();

  int g_subprocess_flags_get_type() {
    return _g_subprocess_flags_get_type();
  }

  late final _g_subprocess_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_subprocess_flags_get_type');
  late final _g_subprocess_flags_get_type =
      _g_subprocess_flags_get_typePtr.asFunction<int Function()>();

  int g_notification_priority_get_type() {
    return _g_notification_priority_get_type();
  }

  late final _g_notification_priority_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_notification_priority_get_type');
  late final _g_notification_priority_get_type =
      _g_notification_priority_get_typePtr.asFunction<int Function()>();

  int g_network_connectivity_get_type() {
    return _g_network_connectivity_get_type();
  }

  late final _g_network_connectivity_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_network_connectivity_get_type');
  late final _g_network_connectivity_get_type =
      _g_network_connectivity_get_typePtr.asFunction<int Function()>();

  int g_pollable_return_get_type() {
    return _g_pollable_return_get_type();
  }

  late final _g_pollable_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_pollable_return_get_type');
  late final _g_pollable_return_get_type =
      _g_pollable_return_get_typePtr.asFunction<int Function()>();

  int g_memory_monitor_warning_level_get_type() {
    return _g_memory_monitor_warning_level_get_type();
  }

  late final _g_memory_monitor_warning_level_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_memory_monitor_warning_level_get_type');
  late final _g_memory_monitor_warning_level_get_type =
      _g_memory_monitor_warning_level_get_typePtr.asFunction<int Function()>();

  int g_resolver_name_lookup_flags_get_type() {
    return _g_resolver_name_lookup_flags_get_type();
  }

  late final _g_resolver_name_lookup_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_resolver_name_lookup_flags_get_type');
  late final _g_resolver_name_lookup_flags_get_type =
      _g_resolver_name_lookup_flags_get_typePtr.asFunction<int Function()>();

  int g_settings_bind_flags_get_type() {
    return _g_settings_bind_flags_get_type();
  }

  late final _g_settings_bind_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_settings_bind_flags_get_type');
  late final _g_settings_bind_flags_get_type =
      _g_settings_bind_flags_get_typePtr.asFunction<int Function()>();

  int g_module_error_quark() {
    return _g_module_error_quark();
  }

  late final _g_module_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_module_error_quark');
  late final _g_module_error_quark =
      _g_module_error_quarkPtr.asFunction<int Function()>();

  int g_module_supported() {
    return _g_module_supported();
  }

  late final _g_module_supportedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('g_module_supported');
  late final _g_module_supported =
      _g_module_supportedPtr.asFunction<int Function()>();

  ffi.Pointer<GModule> g_module_open(
    ffi.Pointer<gchar> file_name,
    int flags,
  ) {
    return _g_module_open(
      file_name,
      flags,
    );
  }

  late final _g_module_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GModule> Function(
              ffi.Pointer<gchar>, ffi.Int32)>>('g_module_open');
  late final _g_module_open = _g_module_openPtr
      .asFunction<ffi.Pointer<GModule> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GModule> g_module_open_full(
    ffi.Pointer<gchar> file_name,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_module_open_full(
      file_name,
      flags,
      error,
    );
  }

  late final _g_module_open_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GModule> Function(ffi.Pointer<gchar>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_module_open_full');
  late final _g_module_open_full = _g_module_open_fullPtr.asFunction<
      ffi.Pointer<GModule> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_module_close(
    ffi.Pointer<GModule> module,
  ) {
    return _g_module_close(
      module,
    );
  }

  late final _g_module_closePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GModule>)>>(
          'g_module_close');
  late final _g_module_close =
      _g_module_closePtr.asFunction<int Function(ffi.Pointer<GModule>)>();

  void g_module_make_resident(
    ffi.Pointer<GModule> module,
  ) {
    return _g_module_make_resident(
      module,
    );
  }

  late final _g_module_make_residentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GModule>)>>(
          'g_module_make_resident');
  late final _g_module_make_resident = _g_module_make_residentPtr
      .asFunction<void Function(ffi.Pointer<GModule>)>();

  ffi.Pointer<gchar> g_module_error() {
    return _g_module_error();
  }

  late final _g_module_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gchar> Function()>>(
          'g_module_error');
  late final _g_module_error =
      _g_module_errorPtr.asFunction<ffi.Pointer<gchar> Function()>();

  int g_module_symbol(
    ffi.Pointer<GModule> module,
    ffi.Pointer<gchar> symbol_name,
    ffi.Pointer<gpointer> symbol,
  ) {
    return _g_module_symbol(
      module,
      symbol_name,
      symbol,
    );
  }

  late final _g_module_symbolPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GModule>, ffi.Pointer<gchar>,
              ffi.Pointer<gpointer>)>>('g_module_symbol');
  late final _g_module_symbol = _g_module_symbolPtr.asFunction<
      int Function(
          ffi.Pointer<GModule>, ffi.Pointer<gchar>, ffi.Pointer<gpointer>)>();

  ffi.Pointer<gchar> g_module_name(
    ffi.Pointer<GModule> module,
  ) {
    return _g_module_name(
      module,
    );
  }

  late final _g_module_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GModule>)>>('g_module_name');
  late final _g_module_name = _g_module_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GModule>)>();

  ffi.Pointer<gchar> g_module_build_path(
    ffi.Pointer<gchar> directory,
    ffi.Pointer<gchar> module_name,
  ) {
    return _g_module_build_path(
      directory,
      module_name,
    );
  }

  late final _g_module_build_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_module_build_path');
  late final _g_module_build_path = _g_module_build_pathPtr.asFunction<
      ffi.Pointer<gchar> Function(ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GIOModuleScope> g_io_module_scope_new(
    int flags,
  ) {
    return _g_io_module_scope_new(
      flags,
    );
  }

  late final _g_io_module_scope_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIOModuleScope> Function(ffi.Int32)>>(
      'g_io_module_scope_new');
  late final _g_io_module_scope_new = _g_io_module_scope_newPtr
      .asFunction<ffi.Pointer<GIOModuleScope> Function(int)>();

  void g_io_module_scope_free(
    ffi.Pointer<GIOModuleScope> scope,
  ) {
    return _g_io_module_scope_free(
      scope,
    );
  }

  late final _g_io_module_scope_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOModuleScope>)>>(
      'g_io_module_scope_free');
  late final _g_io_module_scope_free = _g_io_module_scope_freePtr
      .asFunction<void Function(ffi.Pointer<GIOModuleScope>)>();

  void g_io_module_scope_block(
    ffi.Pointer<GIOModuleScope> scope,
    ffi.Pointer<gchar> basename,
  ) {
    return _g_io_module_scope_block(
      scope,
      basename,
    );
  }

  late final _g_io_module_scope_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOModuleScope>,
              ffi.Pointer<gchar>)>>('g_io_module_scope_block');
  late final _g_io_module_scope_block = _g_io_module_scope_blockPtr.asFunction<
      void Function(ffi.Pointer<GIOModuleScope>, ffi.Pointer<gchar>)>();

  int g_io_module_get_type() {
    return _g_io_module_get_type();
  }

  late final _g_io_module_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_module_get_type');
  late final _g_io_module_get_type =
      _g_io_module_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIOModule> g_io_module_new(
    ffi.Pointer<gchar> filename,
  ) {
    return _g_io_module_new(
      filename,
    );
  }

  late final _g_io_module_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIOModule> Function(ffi.Pointer<gchar>)>>(
      'g_io_module_new');
  late final _g_io_module_new = _g_io_module_newPtr
      .asFunction<ffi.Pointer<GIOModule> Function(ffi.Pointer<gchar>)>();

  void g_io_modules_scan_all_in_directory(
    ffi.Pointer<ffi.Char> dirname,
  ) {
    return _g_io_modules_scan_all_in_directory(
      dirname,
    );
  }

  late final _g_io_modules_scan_all_in_directoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_io_modules_scan_all_in_directory');
  late final _g_io_modules_scan_all_in_directory =
      _g_io_modules_scan_all_in_directoryPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> g_io_modules_load_all_in_directory(
    ffi.Pointer<gchar> dirname,
  ) {
    return _g_io_modules_load_all_in_directory(
      dirname,
    );
  }

  late final _g_io_modules_load_all_in_directoryPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>>(
      'g_io_modules_load_all_in_directory');
  late final _g_io_modules_load_all_in_directory =
      _g_io_modules_load_all_in_directoryPtr
          .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<gchar>)>();

  void g_io_modules_scan_all_in_directory_with_scope(
    ffi.Pointer<gchar> dirname,
    ffi.Pointer<GIOModuleScope> scope,
  ) {
    return _g_io_modules_scan_all_in_directory_with_scope(
      dirname,
      scope,
    );
  }

  late final _g_io_modules_scan_all_in_directory_with_scopePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<gchar>, ffi.Pointer<GIOModuleScope>)>>(
      'g_io_modules_scan_all_in_directory_with_scope');
  late final _g_io_modules_scan_all_in_directory_with_scope =
      _g_io_modules_scan_all_in_directory_with_scopePtr.asFunction<
          void Function(ffi.Pointer<gchar>, ffi.Pointer<GIOModuleScope>)>();

  ffi.Pointer<GList> g_io_modules_load_all_in_directory_with_scope(
    ffi.Pointer<gchar> dirname,
    ffi.Pointer<GIOModuleScope> scope,
  ) {
    return _g_io_modules_load_all_in_directory_with_scope(
      dirname,
      scope,
    );
  }

  late final _g_io_modules_load_all_in_directory_with_scopePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<gchar>, ffi.Pointer<GIOModuleScope>)>>(
      'g_io_modules_load_all_in_directory_with_scope');
  late final _g_io_modules_load_all_in_directory_with_scope =
      _g_io_modules_load_all_in_directory_with_scopePtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<gchar>, ffi.Pointer<GIOModuleScope>)>();

  ffi.Pointer<GIOExtensionPoint> g_io_extension_point_register(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_io_extension_point_register(
      name,
    );
  }

  late final _g_io_extension_point_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOExtensionPoint> Function(
              ffi.Pointer<ffi.Char>)>>('g_io_extension_point_register');
  late final _g_io_extension_point_register =
      _g_io_extension_point_registerPtr.asFunction<
          ffi.Pointer<GIOExtensionPoint> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GIOExtensionPoint> g_io_extension_point_lookup(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_io_extension_point_lookup(
      name,
    );
  }

  late final _g_io_extension_point_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOExtensionPoint> Function(
              ffi.Pointer<ffi.Char>)>>('g_io_extension_point_lookup');
  late final _g_io_extension_point_lookup =
      _g_io_extension_point_lookupPtr.asFunction<
          ffi.Pointer<GIOExtensionPoint> Function(ffi.Pointer<ffi.Char>)>();

  void g_io_extension_point_set_required_type(
    ffi.Pointer<GIOExtensionPoint> extension_point,
    int type,
  ) {
    return _g_io_extension_point_set_required_type(
      extension_point,
      type,
    );
  }

  late final _g_io_extension_point_set_required_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOExtensionPoint>,
              GType)>>('g_io_extension_point_set_required_type');
  late final _g_io_extension_point_set_required_type =
      _g_io_extension_point_set_required_typePtr
          .asFunction<void Function(ffi.Pointer<GIOExtensionPoint>, int)>();

  int g_io_extension_point_get_required_type(
    ffi.Pointer<GIOExtensionPoint> extension_point,
  ) {
    return _g_io_extension_point_get_required_type(
      extension_point,
    );
  }

  late final _g_io_extension_point_get_required_typePtr = _lookup<
          ffi.NativeFunction<GType Function(ffi.Pointer<GIOExtensionPoint>)>>(
      'g_io_extension_point_get_required_type');
  late final _g_io_extension_point_get_required_type =
      _g_io_extension_point_get_required_typePtr
          .asFunction<int Function(ffi.Pointer<GIOExtensionPoint>)>();

  ffi.Pointer<GList> g_io_extension_point_get_extensions(
    ffi.Pointer<GIOExtensionPoint> extension_point,
  ) {
    return _g_io_extension_point_get_extensions(
      extension_point,
    );
  }

  late final _g_io_extension_point_get_extensionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GIOExtensionPoint>)>>(
      'g_io_extension_point_get_extensions');
  late final _g_io_extension_point_get_extensions =
      _g_io_extension_point_get_extensionsPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GIOExtensionPoint>)>();

  ffi.Pointer<GIOExtension> g_io_extension_point_get_extension_by_name(
    ffi.Pointer<GIOExtensionPoint> extension_point,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_io_extension_point_get_extension_by_name(
      extension_point,
      name,
    );
  }

  late final _g_io_extension_point_get_extension_by_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOExtension> Function(
                  ffi.Pointer<GIOExtensionPoint>, ffi.Pointer<ffi.Char>)>>(
      'g_io_extension_point_get_extension_by_name');
  late final _g_io_extension_point_get_extension_by_name =
      _g_io_extension_point_get_extension_by_namePtr.asFunction<
          ffi.Pointer<GIOExtension> Function(
              ffi.Pointer<GIOExtensionPoint>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GIOExtension> g_io_extension_point_implement(
    ffi.Pointer<ffi.Char> extension_point_name,
    int type,
    ffi.Pointer<ffi.Char> extension_name,
    int priority,
  ) {
    return _g_io_extension_point_implement(
      extension_point_name,
      type,
      extension_name,
      priority,
    );
  }

  late final _g_io_extension_point_implementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOExtension> Function(ffi.Pointer<ffi.Char>, GType,
              ffi.Pointer<ffi.Char>, gint)>>('g_io_extension_point_implement');
  late final _g_io_extension_point_implement =
      _g_io_extension_point_implementPtr.asFunction<
          ffi.Pointer<GIOExtension> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int g_io_extension_get_type(
    ffi.Pointer<GIOExtension> extension1,
  ) {
    return _g_io_extension_get_type(
      extension1,
    );
  }

  late final _g_io_extension_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GIOExtension>)>>(
          'g_io_extension_get_type');
  late final _g_io_extension_get_type = _g_io_extension_get_typePtr
      .asFunction<int Function(ffi.Pointer<GIOExtension>)>();

  ffi.Pointer<ffi.Char> g_io_extension_get_name(
    ffi.Pointer<GIOExtension> extension1,
  ) {
    return _g_io_extension_get_name(
      extension1,
    );
  }

  late final _g_io_extension_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GIOExtension>)>>('g_io_extension_get_name');
  late final _g_io_extension_get_name = _g_io_extension_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GIOExtension>)>();

  int g_io_extension_get_priority(
    ffi.Pointer<GIOExtension> extension1,
  ) {
    return _g_io_extension_get_priority(
      extension1,
    );
  }

  late final _g_io_extension_get_priorityPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GIOExtension>)>>(
          'g_io_extension_get_priority');
  late final _g_io_extension_get_priority = _g_io_extension_get_priorityPtr
      .asFunction<int Function(ffi.Pointer<GIOExtension>)>();

  ffi.Pointer<GTypeClass> g_io_extension_ref_class(
    ffi.Pointer<GIOExtension> extension1,
  ) {
    return _g_io_extension_ref_class(
      extension1,
    );
  }

  late final _g_io_extension_ref_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeClass> Function(
              ffi.Pointer<GIOExtension>)>>('g_io_extension_ref_class');
  late final _g_io_extension_ref_class =
      _g_io_extension_ref_classPtr.asFunction<
          ffi.Pointer<GTypeClass> Function(ffi.Pointer<GIOExtension>)>();

  /// g_io_module_load: (skip)
  /// @module: a #GIOModule.
  ///
  /// Required API for GIO modules to implement.
  ///
  /// This function is run after the module has been loaded into GIO,
  /// to initialize the module. Typically, this function will call
  /// g_io_extension_point_implement().
  ///
  /// Since 2.56, this function should be named `g_io_<modulename>_load`, where
  /// `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
  /// everything after the first dot removed, and with `-` replaced with `_`
  /// throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
  /// Using the new symbol names avoids name clashes when building modules
  /// statically. The old symbol names continue to be supported, but cannot be used
  /// for static builds.
  void g_io_module_load(
    ffi.Pointer<GIOModule> module,
  ) {
    return _g_io_module_load(
      module,
    );
  }

  late final _g_io_module_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOModule>)>>(
          'g_io_module_load');
  late final _g_io_module_load =
      _g_io_module_loadPtr.asFunction<void Function(ffi.Pointer<GIOModule>)>();

  /// g_io_module_unload: (skip)
  /// @module: a #GIOModule.
  ///
  /// Required API for GIO modules to implement.
  ///
  /// This function is run when the module is being unloaded from GIO,
  /// to finalize the module.
  ///
  /// Since 2.56, this function should be named `g_io_<modulename>_unload`, where
  /// `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
  /// everything after the first dot removed, and with `-` replaced with `_`
  /// throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
  /// Using the new symbol names avoids name clashes when building modules
  /// statically. The old symbol names continue to be supported, but cannot be used
  /// for static builds.
  void g_io_module_unload(
    ffi.Pointer<GIOModule> module,
  ) {
    return _g_io_module_unload(
      module,
    );
  }

  late final _g_io_module_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOModule>)>>(
          'g_io_module_unload');
  late final _g_io_module_unload = _g_io_module_unloadPtr
      .asFunction<void Function(ffi.Pointer<GIOModule>)>();

  /// g_io_module_query:
  ///
  /// Optional API for GIO modules to implement.
  ///
  /// Should return a list of all the extension points that may be
  /// implemented in this module.
  ///
  /// This method will not be called in normal use, however it may be
  /// called when probing existing modules and recording which extension
  /// points that this model is used for. This means we won't have to
  /// load and initialize this module unless its needed.
  ///
  /// If this function is not implemented by the module the module will
  /// always be loaded, initialized and then unloaded on application
  /// startup so that it can register its extension points during init.
  ///
  /// Note that a module need not actually implement all the extension
  /// points that g_io_module_query() returns, since the exact list of
  /// extension may depend on runtime issues. However all extension
  /// points actually implemented must be returned by g_io_module_query()
  /// (if defined).
  ///
  /// When installing a module that implements g_io_module_query() you must
  /// run gio-querymodules in order to build the cache files required for
  /// lazy loading.
  ///
  /// Since 2.56, this function should be named `g_io_<modulename>_query`, where
  /// `modulename` is the plugin’s filename with the `lib` or `libgio` prefix and
  /// everything after the first dot removed, and with `-` replaced with `_`
  /// throughout. For example, `libgiognutls-helper.so` becomes `gnutls_helper`.
  /// Using the new symbol names avoids name clashes when building modules
  /// statically. The old symbol names continue to be supported, but cannot be used
  /// for static builds.
  ///
  /// Returns: (transfer full): A %NULL-terminated array of strings,
  /// listing the supported extension points of the module. The array
  /// must be suitable for freeing with g_strfreev().
  ///
  /// Since: 2.24
  ffi.Pointer<ffi.Pointer<ffi.Char>> g_io_module_query() {
    return _g_io_module_query();
  }

  late final _g_io_module_queryPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_io_module_query');
  late final _g_io_module_query = _g_io_module_queryPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  void g_io_scheduler_push_job(
    GIOSchedulerJobFunc job_func,
    gpointer user_data,
    GDestroyNotify notify,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_io_scheduler_push_job(
      job_func,
      user_data,
      notify,
      io_priority,
      cancellable,
    );
  }

  late final _g_io_scheduler_push_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GIOSchedulerJobFunc, gpointer, GDestroyNotify, gint,
              ffi.Pointer<GCancellable>)>>('g_io_scheduler_push_job');
  late final _g_io_scheduler_push_job = _g_io_scheduler_push_jobPtr.asFunction<
      void Function(GIOSchedulerJobFunc, gpointer, GDestroyNotify, int,
          ffi.Pointer<GCancellable>)>();

  void g_io_scheduler_cancel_all_jobs() {
    return _g_io_scheduler_cancel_all_jobs();
  }

  late final _g_io_scheduler_cancel_all_jobsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_io_scheduler_cancel_all_jobs');
  late final _g_io_scheduler_cancel_all_jobs =
      _g_io_scheduler_cancel_all_jobsPtr.asFunction<void Function()>();

  int g_io_scheduler_job_send_to_mainloop(
    ffi.Pointer<GIOSchedulerJob> job,
    GSourceFunc func,
    gpointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_io_scheduler_job_send_to_mainloop(
      job,
      func,
      user_data,
      notify,
    );
  }

  late final _g_io_scheduler_job_send_to_mainloopPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GIOSchedulerJob>, GSourceFunc, gpointer,
              GDestroyNotify)>>('g_io_scheduler_job_send_to_mainloop');
  late final _g_io_scheduler_job_send_to_mainloop =
      _g_io_scheduler_job_send_to_mainloopPtr.asFunction<
          int Function(ffi.Pointer<GIOSchedulerJob>, GSourceFunc, gpointer,
              GDestroyNotify)>();

  void g_io_scheduler_job_send_to_mainloop_async(
    ffi.Pointer<GIOSchedulerJob> job,
    GSourceFunc func,
    gpointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_io_scheduler_job_send_to_mainloop_async(
      job,
      func,
      user_data,
      notify,
    );
  }

  late final _g_io_scheduler_job_send_to_mainloop_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOSchedulerJob>, GSourceFunc, gpointer,
              GDestroyNotify)>>('g_io_scheduler_job_send_to_mainloop_async');
  late final _g_io_scheduler_job_send_to_mainloop_async =
      _g_io_scheduler_job_send_to_mainloop_asyncPtr.asFunction<
          void Function(ffi.Pointer<GIOSchedulerJob>, GSourceFunc, gpointer,
              GDestroyNotify)>();

  int g_list_model_get_type() {
    return _g_list_model_get_type();
  }

  late final _g_list_model_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_list_model_get_type');
  late final _g_list_model_get_type =
      _g_list_model_get_typePtr.asFunction<int Function()>();

  int g_list_model_get_item_type(
    ffi.Pointer<GListModel> list,
  ) {
    return _g_list_model_get_item_type(
      list,
    );
  }

  late final _g_list_model_get_item_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GListModel>)>>(
          'g_list_model_get_item_type');
  late final _g_list_model_get_item_type = _g_list_model_get_item_typePtr
      .asFunction<int Function(ffi.Pointer<GListModel>)>();

  int g_list_model_get_n_items(
    ffi.Pointer<GListModel> list,
  ) {
    return _g_list_model_get_n_items(
      list,
    );
  }

  late final _g_list_model_get_n_itemsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GListModel>)>>(
          'g_list_model_get_n_items');
  late final _g_list_model_get_n_items = _g_list_model_get_n_itemsPtr
      .asFunction<int Function(ffi.Pointer<GListModel>)>();

  gpointer g_list_model_get_item(
    ffi.Pointer<GListModel> list,
    int position,
  ) {
    return _g_list_model_get_item(
      list,
      position,
    );
  }

  late final _g_list_model_get_itemPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GListModel>, guint)>>(
      'g_list_model_get_item');
  late final _g_list_model_get_item = _g_list_model_get_itemPtr
      .asFunction<gpointer Function(ffi.Pointer<GListModel>, int)>();

  ffi.Pointer<GObject> g_list_model_get_object(
    ffi.Pointer<GListModel> list,
    int position,
  ) {
    return _g_list_model_get_object(
      list,
      position,
    );
  }

  late final _g_list_model_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GListModel>, guint)>>('g_list_model_get_object');
  late final _g_list_model_get_object = _g_list_model_get_objectPtr.asFunction<
      ffi.Pointer<GObject> Function(ffi.Pointer<GListModel>, int)>();

  void g_list_model_items_changed(
    ffi.Pointer<GListModel> list,
    int position,
    int removed,
    int added,
  ) {
    return _g_list_model_items_changed(
      list,
      position,
      removed,
      added,
    );
  }

  late final _g_list_model_items_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GListModel>, guint, guint,
              guint)>>('g_list_model_items_changed');
  late final _g_list_model_items_changed = _g_list_model_items_changedPtr
      .asFunction<void Function(ffi.Pointer<GListModel>, int, int, int)>();

  int g_list_store_get_type() {
    return _g_list_store_get_type();
  }

  late final _g_list_store_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_list_store_get_type');
  late final _g_list_store_get_type =
      _g_list_store_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GListStore> g_list_store_new(
    int item_type,
  ) {
    return _g_list_store_new(
      item_type,
    );
  }

  late final _g_list_store_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GListStore> Function(GType)>>(
          'g_list_store_new');
  late final _g_list_store_new =
      _g_list_store_newPtr.asFunction<ffi.Pointer<GListStore> Function(int)>();

  void g_list_store_insert(
    ffi.Pointer<GListStore> store,
    int position,
    gpointer item,
  ) {
    return _g_list_store_insert(
      store,
      position,
      item,
    );
  }

  late final _g_list_store_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GListStore>, guint,
              gpointer)>>('g_list_store_insert');
  late final _g_list_store_insert = _g_list_store_insertPtr
      .asFunction<void Function(ffi.Pointer<GListStore>, int, gpointer)>();

  int g_list_store_insert_sorted(
    ffi.Pointer<GListStore> store,
    gpointer item,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_list_store_insert_sorted(
      store,
      item,
      compare_func,
      user_data,
    );
  }

  late final _g_list_store_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GListStore>, gpointer, GCompareDataFunc,
              gpointer)>>('g_list_store_insert_sorted');
  late final _g_list_store_insert_sorted =
      _g_list_store_insert_sortedPtr.asFunction<
          int Function(
              ffi.Pointer<GListStore>, gpointer, GCompareDataFunc, gpointer)>();

  void g_list_store_sort(
    ffi.Pointer<GListStore> store,
    GCompareDataFunc compare_func,
    gpointer user_data,
  ) {
    return _g_list_store_sort(
      store,
      compare_func,
      user_data,
    );
  }

  late final _g_list_store_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GListStore>, GCompareDataFunc,
              gpointer)>>('g_list_store_sort');
  late final _g_list_store_sort = _g_list_store_sortPtr.asFunction<
      void Function(ffi.Pointer<GListStore>, GCompareDataFunc, gpointer)>();

  void g_list_store_append(
    ffi.Pointer<GListStore> store,
    gpointer item,
  ) {
    return _g_list_store_append(
      store,
      item,
    );
  }

  late final _g_list_store_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GListStore>, gpointer)>>('g_list_store_append');
  late final _g_list_store_append = _g_list_store_appendPtr
      .asFunction<void Function(ffi.Pointer<GListStore>, gpointer)>();

  void g_list_store_remove(
    ffi.Pointer<GListStore> store,
    int position,
  ) {
    return _g_list_store_remove(
      store,
      position,
    );
  }

  late final _g_list_store_removePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GListStore>, guint)>>(
      'g_list_store_remove');
  late final _g_list_store_remove = _g_list_store_removePtr
      .asFunction<void Function(ffi.Pointer<GListStore>, int)>();

  void g_list_store_remove_all(
    ffi.Pointer<GListStore> store,
  ) {
    return _g_list_store_remove_all(
      store,
    );
  }

  late final _g_list_store_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GListStore>)>>(
          'g_list_store_remove_all');
  late final _g_list_store_remove_all = _g_list_store_remove_allPtr
      .asFunction<void Function(ffi.Pointer<GListStore>)>();

  void g_list_store_splice(
    ffi.Pointer<GListStore> store,
    int position,
    int n_removals,
    ffi.Pointer<gpointer> additions,
    int n_additions,
  ) {
    return _g_list_store_splice(
      store,
      position,
      n_removals,
      additions,
      n_additions,
    );
  }

  late final _g_list_store_splicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GListStore>, guint, guint,
              ffi.Pointer<gpointer>, guint)>>('g_list_store_splice');
  late final _g_list_store_splice = _g_list_store_splicePtr.asFunction<
      void Function(
          ffi.Pointer<GListStore>, int, int, ffi.Pointer<gpointer>, int)>();

  int g_list_store_find(
    ffi.Pointer<GListStore> store,
    gpointer item,
    ffi.Pointer<guint> position,
  ) {
    return _g_list_store_find(
      store,
      item,
      position,
    );
  }

  late final _g_list_store_findPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GListStore>, gpointer,
              ffi.Pointer<guint>)>>('g_list_store_find');
  late final _g_list_store_find = _g_list_store_findPtr.asFunction<
      int Function(ffi.Pointer<GListStore>, gpointer, ffi.Pointer<guint>)>();

  int g_list_store_find_with_equal_func(
    ffi.Pointer<GListStore> store,
    gpointer item,
    GEqualFunc equal_func,
    ffi.Pointer<guint> position,
  ) {
    return _g_list_store_find_with_equal_func(
      store,
      item,
      equal_func,
      position,
    );
  }

  late final _g_list_store_find_with_equal_funcPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GListStore>, gpointer, GEqualFunc,
              ffi.Pointer<guint>)>>('g_list_store_find_with_equal_func');
  late final _g_list_store_find_with_equal_func =
      _g_list_store_find_with_equal_funcPtr.asFunction<
          int Function(ffi.Pointer<GListStore>, gpointer, GEqualFunc,
              ffi.Pointer<guint>)>();

  int g_loadable_icon_get_type() {
    return _g_loadable_icon_get_type();
  }

  late final _g_loadable_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_loadable_icon_get_type');
  late final _g_loadable_icon_get_type =
      _g_loadable_icon_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_loadable_icon_load(
    ffi.Pointer<GLoadableIcon> icon,
    int size,
    ffi.Pointer<ffi.Pointer<ffi.Char>> type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_loadable_icon_load(
      icon,
      size,
      type,
      cancellable,
      error,
    );
  }

  late final _g_loadable_icon_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GLoadableIcon>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_loadable_icon_load');
  late final _g_loadable_icon_load = _g_loadable_icon_loadPtr.asFunction<
      ffi.Pointer<GInputStream> Function(
          ffi.Pointer<GLoadableIcon>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_loadable_icon_load_async(
    ffi.Pointer<GLoadableIcon> icon,
    int size,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_loadable_icon_load_async(
      icon,
      size,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_loadable_icon_load_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GLoadableIcon>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_loadable_icon_load_async');
  late final _g_loadable_icon_load_async =
      _g_loadable_icon_load_asyncPtr.asFunction<
          void Function(ffi.Pointer<GLoadableIcon>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GInputStream> g_loadable_icon_load_finish(
    ffi.Pointer<GLoadableIcon> icon,
    ffi.Pointer<GAsyncResult> res,
    ffi.Pointer<ffi.Pointer<ffi.Char>> type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_loadable_icon_load_finish(
      icon,
      res,
      type,
      error,
    );
  }

  late final _g_loadable_icon_load_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GInputStream> Function(
                  ffi.Pointer<GLoadableIcon>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_loadable_icon_load_finish');
  late final _g_loadable_icon_load_finish =
      _g_loadable_icon_load_finishPtr.asFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GLoadableIcon>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_memory_input_stream_get_type() {
    return _g_memory_input_stream_get_type();
  }

  late final _g_memory_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_memory_input_stream_get_type');
  late final _g_memory_input_stream_get_type =
      _g_memory_input_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GInputStream> g_memory_input_stream_new() {
    return _g_memory_input_stream_new();
  }

  late final _g_memory_input_stream_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GInputStream> Function()>>(
          'g_memory_input_stream_new');
  late final _g_memory_input_stream_new = _g_memory_input_stream_newPtr
      .asFunction<ffi.Pointer<GInputStream> Function()>();

  ffi.Pointer<GInputStream> g_memory_input_stream_new_from_data(
    ffi.Pointer<ffi.Void> data,
    int len,
    GDestroyNotify destroy,
  ) {
    return _g_memory_input_stream_new_from_data(
      data,
      len,
      destroy,
    );
  }

  late final _g_memory_input_stream_new_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<ffi.Void>, gssize,
              GDestroyNotify)>>('g_memory_input_stream_new_from_data');
  late final _g_memory_input_stream_new_from_data =
      _g_memory_input_stream_new_from_dataPtr.asFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<ffi.Void>, int, GDestroyNotify)>();

  ffi.Pointer<GInputStream> g_memory_input_stream_new_from_bytes(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_memory_input_stream_new_from_bytes(
      bytes,
    );
  }

  late final _g_memory_input_stream_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GBytes>)>>('g_memory_input_stream_new_from_bytes');
  late final _g_memory_input_stream_new_from_bytes =
      _g_memory_input_stream_new_from_bytesPtr.asFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GBytes>)>();

  void g_memory_input_stream_add_data(
    ffi.Pointer<GMemoryInputStream> stream,
    ffi.Pointer<ffi.Void> data,
    int len,
    GDestroyNotify destroy,
  ) {
    return _g_memory_input_stream_add_data(
      stream,
      data,
      len,
      destroy,
    );
  }

  late final _g_memory_input_stream_add_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMemoryInputStream>,
              ffi.Pointer<ffi.Void>,
              gssize,
              GDestroyNotify)>>('g_memory_input_stream_add_data');
  late final _g_memory_input_stream_add_data =
      _g_memory_input_stream_add_dataPtr.asFunction<
          void Function(ffi.Pointer<GMemoryInputStream>, ffi.Pointer<ffi.Void>,
              int, GDestroyNotify)>();

  void g_memory_input_stream_add_bytes(
    ffi.Pointer<GMemoryInputStream> stream,
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_memory_input_stream_add_bytes(
      stream,
      bytes,
    );
  }

  late final _g_memory_input_stream_add_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMemoryInputStream>,
              ffi.Pointer<GBytes>)>>('g_memory_input_stream_add_bytes');
  late final _g_memory_input_stream_add_bytes =
      _g_memory_input_stream_add_bytesPtr.asFunction<
          void Function(
              ffi.Pointer<GMemoryInputStream>, ffi.Pointer<GBytes>)>();

  int g_memory_monitor_get_type() {
    return _g_memory_monitor_get_type();
  }

  late final _g_memory_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_memory_monitor_get_type');
  late final _g_memory_monitor_get_type =
      _g_memory_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GMemoryMonitor> g_memory_monitor_dup_default() {
    return _g_memory_monitor_dup_default();
  }

  late final _g_memory_monitor_dup_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMemoryMonitor> Function()>>(
          'g_memory_monitor_dup_default');
  late final _g_memory_monitor_dup_default = _g_memory_monitor_dup_defaultPtr
      .asFunction<ffi.Pointer<GMemoryMonitor> Function()>();

  int g_memory_output_stream_get_type() {
    return _g_memory_output_stream_get_type();
  }

  late final _g_memory_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_memory_output_stream_get_type');
  late final _g_memory_output_stream_get_type =
      _g_memory_output_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GOutputStream> g_memory_output_stream_new(
    gpointer data,
    int size,
    GReallocFunc realloc_function,
    GDestroyNotify destroy_function,
  ) {
    return _g_memory_output_stream_new(
      data,
      size,
      realloc_function,
      destroy_function,
    );
  }

  late final _g_memory_output_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(gpointer, gsize, GReallocFunc,
              GDestroyNotify)>>('g_memory_output_stream_new');
  late final _g_memory_output_stream_new =
      _g_memory_output_stream_newPtr.asFunction<
          ffi.Pointer<GOutputStream> Function(
              gpointer, int, GReallocFunc, GDestroyNotify)>();

  ffi.Pointer<GOutputStream> g_memory_output_stream_new_resizable() {
    return _g_memory_output_stream_new_resizable();
  }

  late final _g_memory_output_stream_new_resizablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GOutputStream> Function()>>(
          'g_memory_output_stream_new_resizable');
  late final _g_memory_output_stream_new_resizable =
      _g_memory_output_stream_new_resizablePtr
          .asFunction<ffi.Pointer<GOutputStream> Function()>();

  gpointer g_memory_output_stream_get_data(
    ffi.Pointer<GMemoryOutputStream> ostream,
  ) {
    return _g_memory_output_stream_get_data(
      ostream,
    );
  }

  late final _g_memory_output_stream_get_dataPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GMemoryOutputStream>)>>(
      'g_memory_output_stream_get_data');
  late final _g_memory_output_stream_get_data =
      _g_memory_output_stream_get_dataPtr
          .asFunction<gpointer Function(ffi.Pointer<GMemoryOutputStream>)>();

  int g_memory_output_stream_get_size(
    ffi.Pointer<GMemoryOutputStream> ostream,
  ) {
    return _g_memory_output_stream_get_size(
      ostream,
    );
  }

  late final _g_memory_output_stream_get_sizePtr = _lookup<
          ffi.NativeFunction<gsize Function(ffi.Pointer<GMemoryOutputStream>)>>(
      'g_memory_output_stream_get_size');
  late final _g_memory_output_stream_get_size =
      _g_memory_output_stream_get_sizePtr
          .asFunction<int Function(ffi.Pointer<GMemoryOutputStream>)>();

  int g_memory_output_stream_get_data_size(
    ffi.Pointer<GMemoryOutputStream> ostream,
  ) {
    return _g_memory_output_stream_get_data_size(
      ostream,
    );
  }

  late final _g_memory_output_stream_get_data_sizePtr = _lookup<
          ffi.NativeFunction<gsize Function(ffi.Pointer<GMemoryOutputStream>)>>(
      'g_memory_output_stream_get_data_size');
  late final _g_memory_output_stream_get_data_size =
      _g_memory_output_stream_get_data_sizePtr
          .asFunction<int Function(ffi.Pointer<GMemoryOutputStream>)>();

  gpointer g_memory_output_stream_steal_data(
    ffi.Pointer<GMemoryOutputStream> ostream,
  ) {
    return _g_memory_output_stream_steal_data(
      ostream,
    );
  }

  late final _g_memory_output_stream_steal_dataPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GMemoryOutputStream>)>>(
      'g_memory_output_stream_steal_data');
  late final _g_memory_output_stream_steal_data =
      _g_memory_output_stream_steal_dataPtr
          .asFunction<gpointer Function(ffi.Pointer<GMemoryOutputStream>)>();

  ffi.Pointer<GBytes> g_memory_output_stream_steal_as_bytes(
    ffi.Pointer<GMemoryOutputStream> ostream,
  ) {
    return _g_memory_output_stream_steal_as_bytes(
      ostream,
    );
  }

  late final _g_memory_output_stream_steal_as_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GBytes> Function(ffi.Pointer<GMemoryOutputStream>)>>(
      'g_memory_output_stream_steal_as_bytes');
  late final _g_memory_output_stream_steal_as_bytes =
      _g_memory_output_stream_steal_as_bytesPtr.asFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<GMemoryOutputStream>)>();

  int g_menu_model_get_type() {
    return _g_menu_model_get_type();
  }

  late final _g_menu_model_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_menu_model_get_type');
  late final _g_menu_model_get_type =
      _g_menu_model_get_typePtr.asFunction<int Function()>();

  int g_menu_model_is_mutable(
    ffi.Pointer<GMenuModel> model,
  ) {
    return _g_menu_model_is_mutable(
      model,
    );
  }

  late final _g_menu_model_is_mutablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMenuModel>)>>(
          'g_menu_model_is_mutable');
  late final _g_menu_model_is_mutable = _g_menu_model_is_mutablePtr
      .asFunction<int Function(ffi.Pointer<GMenuModel>)>();

  int g_menu_model_get_n_items(
    ffi.Pointer<GMenuModel> model,
  ) {
    return _g_menu_model_get_n_items(
      model,
    );
  }

  late final _g_menu_model_get_n_itemsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GMenuModel>)>>(
          'g_menu_model_get_n_items');
  late final _g_menu_model_get_n_items = _g_menu_model_get_n_itemsPtr
      .asFunction<int Function(ffi.Pointer<GMenuModel>)>();

  ffi.Pointer<GMenuAttributeIter> g_menu_model_iterate_item_attributes(
    ffi.Pointer<GMenuModel> model,
    int item_index,
  ) {
    return _g_menu_model_iterate_item_attributes(
      model,
      item_index,
    );
  }

  late final _g_menu_model_iterate_item_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuAttributeIter> Function(ffi.Pointer<GMenuModel>,
              gint)>>('g_menu_model_iterate_item_attributes');
  late final _g_menu_model_iterate_item_attributes =
      _g_menu_model_iterate_item_attributesPtr.asFunction<
          ffi.Pointer<GMenuAttributeIter> Function(
              ffi.Pointer<GMenuModel>, int)>();

  ffi.Pointer<GVariant> g_menu_model_get_item_attribute_value(
    ffi.Pointer<GMenuModel> model,
    int item_index,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_menu_model_get_item_attribute_value(
      model,
      item_index,
      attribute,
      expected_type,
    );
  }

  late final _g_menu_model_get_item_attribute_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GMenuModel>, gint,
                  ffi.Pointer<gchar>, ffi.Pointer<GVariantType>)>>(
      'g_menu_model_get_item_attribute_value');
  late final _g_menu_model_get_item_attribute_value =
      _g_menu_model_get_item_attribute_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GMenuModel>, int,
              ffi.Pointer<gchar>, ffi.Pointer<GVariantType>)>();

  int g_menu_model_get_item_attribute(
    ffi.Pointer<GMenuModel> model,
    int item_index,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_menu_model_get_item_attribute(
      model,
      item_index,
      attribute,
      format_string,
    );
  }

  late final _g_menu_model_get_item_attributePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMenuModel>, gint, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_model_get_item_attribute');
  late final _g_menu_model_get_item_attribute =
      _g_menu_model_get_item_attributePtr.asFunction<
          int Function(ffi.Pointer<GMenuModel>, int, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<GMenuLinkIter> g_menu_model_iterate_item_links(
    ffi.Pointer<GMenuModel> model,
    int item_index,
  ) {
    return _g_menu_model_iterate_item_links(
      model,
      item_index,
    );
  }

  late final _g_menu_model_iterate_item_linksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuLinkIter> Function(ffi.Pointer<GMenuModel>,
              gint)>>('g_menu_model_iterate_item_links');
  late final _g_menu_model_iterate_item_links =
      _g_menu_model_iterate_item_linksPtr.asFunction<
          ffi.Pointer<GMenuLinkIter> Function(ffi.Pointer<GMenuModel>, int)>();

  ffi.Pointer<GMenuModel> g_menu_model_get_item_link(
    ffi.Pointer<GMenuModel> model,
    int item_index,
    ffi.Pointer<gchar> link,
  ) {
    return _g_menu_model_get_item_link(
      model,
      item_index,
      link,
    );
  }

  late final _g_menu_model_get_item_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuModel> Function(ffi.Pointer<GMenuModel>, gint,
              ffi.Pointer<gchar>)>>('g_menu_model_get_item_link');
  late final _g_menu_model_get_item_link =
      _g_menu_model_get_item_linkPtr.asFunction<
          ffi.Pointer<GMenuModel> Function(
              ffi.Pointer<GMenuModel>, int, ffi.Pointer<gchar>)>();

  void g_menu_model_items_changed(
    ffi.Pointer<GMenuModel> model,
    int position,
    int removed,
    int added,
  ) {
    return _g_menu_model_items_changed(
      model,
      position,
      removed,
      added,
    );
  }

  late final _g_menu_model_items_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuModel>, gint, gint,
              gint)>>('g_menu_model_items_changed');
  late final _g_menu_model_items_changed = _g_menu_model_items_changedPtr
      .asFunction<void Function(ffi.Pointer<GMenuModel>, int, int, int)>();

  int g_menu_attribute_iter_get_type() {
    return _g_menu_attribute_iter_get_type();
  }

  late final _g_menu_attribute_iter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_menu_attribute_iter_get_type');
  late final _g_menu_attribute_iter_get_type =
      _g_menu_attribute_iter_get_typePtr.asFunction<int Function()>();

  int g_menu_attribute_iter_get_next(
    ffi.Pointer<GMenuAttributeIter> iter,
    ffi.Pointer<ffi.Pointer<gchar>> out_name,
    ffi.Pointer<ffi.Pointer<GVariant>> value,
  ) {
    return _g_menu_attribute_iter_get_next(
      iter,
      out_name,
      value,
    );
  }

  late final _g_menu_attribute_iter_get_nextPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMenuAttributeIter>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GVariant>>)>>(
      'g_menu_attribute_iter_get_next');
  late final _g_menu_attribute_iter_get_next =
      _g_menu_attribute_iter_get_nextPtr.asFunction<
          int Function(
              ffi.Pointer<GMenuAttributeIter>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GVariant>>)>();

  int g_menu_attribute_iter_next(
    ffi.Pointer<GMenuAttributeIter> iter,
  ) {
    return _g_menu_attribute_iter_next(
      iter,
    );
  }

  late final _g_menu_attribute_iter_nextPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GMenuAttributeIter>)>>(
      'g_menu_attribute_iter_next');
  late final _g_menu_attribute_iter_next = _g_menu_attribute_iter_nextPtr
      .asFunction<int Function(ffi.Pointer<GMenuAttributeIter>)>();

  ffi.Pointer<gchar> g_menu_attribute_iter_get_name(
    ffi.Pointer<GMenuAttributeIter> iter,
  ) {
    return _g_menu_attribute_iter_get_name(
      iter,
    );
  }

  late final _g_menu_attribute_iter_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GMenuAttributeIter>)>>(
      'g_menu_attribute_iter_get_name');
  late final _g_menu_attribute_iter_get_name =
      _g_menu_attribute_iter_get_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GMenuAttributeIter>)>();

  ffi.Pointer<GVariant> g_menu_attribute_iter_get_value(
    ffi.Pointer<GMenuAttributeIter> iter,
  ) {
    return _g_menu_attribute_iter_get_value(
      iter,
    );
  }

  late final _g_menu_attribute_iter_get_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GMenuAttributeIter>)>>(
      'g_menu_attribute_iter_get_value');
  late final _g_menu_attribute_iter_get_value =
      _g_menu_attribute_iter_get_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GMenuAttributeIter>)>();

  int g_menu_link_iter_get_type() {
    return _g_menu_link_iter_get_type();
  }

  late final _g_menu_link_iter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_menu_link_iter_get_type');
  late final _g_menu_link_iter_get_type =
      _g_menu_link_iter_get_typePtr.asFunction<int Function()>();

  int g_menu_link_iter_get_next(
    ffi.Pointer<GMenuLinkIter> iter,
    ffi.Pointer<ffi.Pointer<gchar>> out_link,
    ffi.Pointer<ffi.Pointer<GMenuModel>> value,
  ) {
    return _g_menu_link_iter_get_next(
      iter,
      out_link,
      value,
    );
  }

  late final _g_menu_link_iter_get_nextPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMenuLinkIter>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GMenuModel>>)>>(
      'g_menu_link_iter_get_next');
  late final _g_menu_link_iter_get_next =
      _g_menu_link_iter_get_nextPtr.asFunction<
          int Function(
              ffi.Pointer<GMenuLinkIter>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GMenuModel>>)>();

  int g_menu_link_iter_next(
    ffi.Pointer<GMenuLinkIter> iter,
  ) {
    return _g_menu_link_iter_next(
      iter,
    );
  }

  late final _g_menu_link_iter_nextPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GMenuLinkIter>)>>(
      'g_menu_link_iter_next');
  late final _g_menu_link_iter_next = _g_menu_link_iter_nextPtr
      .asFunction<int Function(ffi.Pointer<GMenuLinkIter>)>();

  ffi.Pointer<gchar> g_menu_link_iter_get_name(
    ffi.Pointer<GMenuLinkIter> iter,
  ) {
    return _g_menu_link_iter_get_name(
      iter,
    );
  }

  late final _g_menu_link_iter_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GMenuLinkIter>)>>('g_menu_link_iter_get_name');
  late final _g_menu_link_iter_get_name = _g_menu_link_iter_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMenuLinkIter>)>();

  ffi.Pointer<GMenuModel> g_menu_link_iter_get_value(
    ffi.Pointer<GMenuLinkIter> iter,
  ) {
    return _g_menu_link_iter_get_value(
      iter,
    );
  }

  late final _g_menu_link_iter_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuModel> Function(
              ffi.Pointer<GMenuLinkIter>)>>('g_menu_link_iter_get_value');
  late final _g_menu_link_iter_get_value =
      _g_menu_link_iter_get_valuePtr.asFunction<
          ffi.Pointer<GMenuModel> Function(ffi.Pointer<GMenuLinkIter>)>();

  int g_menu_get_type() {
    return _g_menu_get_type();
  }

  late final _g_menu_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_menu_get_type');
  late final _g_menu_get_type =
      _g_menu_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GMenu> g_menu_new() {
    return _g_menu_new();
  }

  late final _g_menu_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMenu> Function()>>('g_menu_new');
  late final _g_menu_new =
      _g_menu_newPtr.asFunction<ffi.Pointer<GMenu> Function()>();

  void g_menu_freeze(
    ffi.Pointer<GMenu> menu,
  ) {
    return _g_menu_freeze(
      menu,
    );
  }

  late final _g_menu_freezePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMenu>)>>(
          'g_menu_freeze');
  late final _g_menu_freeze =
      _g_menu_freezePtr.asFunction<void Function(ffi.Pointer<GMenu>)>();

  void g_menu_insert_item(
    ffi.Pointer<GMenu> menu,
    int position,
    ffi.Pointer<GMenuItem> item,
  ) {
    return _g_menu_insert_item(
      menu,
      position,
      item,
    );
  }

  late final _g_menu_insert_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, gint,
              ffi.Pointer<GMenuItem>)>>('g_menu_insert_item');
  late final _g_menu_insert_item = _g_menu_insert_itemPtr.asFunction<
      void Function(ffi.Pointer<GMenu>, int, ffi.Pointer<GMenuItem>)>();

  void g_menu_prepend_item(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<GMenuItem> item,
  ) {
    return _g_menu_prepend_item(
      menu,
      item,
    );
  }

  late final _g_menu_prepend_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>,
              ffi.Pointer<GMenuItem>)>>('g_menu_prepend_item');
  late final _g_menu_prepend_item = _g_menu_prepend_itemPtr
      .asFunction<void Function(ffi.Pointer<GMenu>, ffi.Pointer<GMenuItem>)>();

  void g_menu_append_item(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<GMenuItem> item,
  ) {
    return _g_menu_append_item(
      menu,
      item,
    );
  }

  late final _g_menu_append_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>,
              ffi.Pointer<GMenuItem>)>>('g_menu_append_item');
  late final _g_menu_append_item = _g_menu_append_itemPtr
      .asFunction<void Function(ffi.Pointer<GMenu>, ffi.Pointer<GMenuItem>)>();

  void g_menu_remove(
    ffi.Pointer<GMenu> menu,
    int position,
  ) {
    return _g_menu_remove(
      menu,
      position,
    );
  }

  late final _g_menu_removePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMenu>, gint)>>(
          'g_menu_remove');
  late final _g_menu_remove =
      _g_menu_removePtr.asFunction<void Function(ffi.Pointer<GMenu>, int)>();

  void g_menu_remove_all(
    ffi.Pointer<GMenu> menu,
  ) {
    return _g_menu_remove_all(
      menu,
    );
  }

  late final _g_menu_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMenu>)>>(
          'g_menu_remove_all');
  late final _g_menu_remove_all =
      _g_menu_remove_allPtr.asFunction<void Function(ffi.Pointer<GMenu>)>();

  void g_menu_insert(
    ffi.Pointer<GMenu> menu,
    int position,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_menu_insert(
      menu,
      position,
      label,
      detailed_action,
    );
  }

  late final _g_menu_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, gint, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_insert');
  late final _g_menu_insert = _g_menu_insertPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, int, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_menu_prepend(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_menu_prepend(
      menu,
      label,
      detailed_action,
    );
  }

  late final _g_menu_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_prepend');
  late final _g_menu_prepend = _g_menu_prependPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_menu_append(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_menu_append(
      menu,
      label,
      detailed_action,
    );
  }

  late final _g_menu_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_append');
  late final _g_menu_append = _g_menu_appendPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_menu_insert_section(
    ffi.Pointer<GMenu> menu,
    int position,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> section,
  ) {
    return _g_menu_insert_section(
      menu,
      position,
      label,
      section,
    );
  }

  late final _g_menu_insert_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, gint, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_insert_section');
  late final _g_menu_insert_section = _g_menu_insert_sectionPtr.asFunction<
      void Function(ffi.Pointer<GMenu>, int, ffi.Pointer<gchar>,
          ffi.Pointer<GMenuModel>)>();

  void g_menu_prepend_section(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> section,
  ) {
    return _g_menu_prepend_section(
      menu,
      label,
      section,
    );
  }

  late final _g_menu_prepend_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_prepend_section');
  late final _g_menu_prepend_section = _g_menu_prepend_sectionPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  void g_menu_append_section(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> section,
  ) {
    return _g_menu_append_section(
      menu,
      label,
      section,
    );
  }

  late final _g_menu_append_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_append_section');
  late final _g_menu_append_section = _g_menu_append_sectionPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  void g_menu_insert_submenu(
    ffi.Pointer<GMenu> menu,
    int position,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> submenu,
  ) {
    return _g_menu_insert_submenu(
      menu,
      position,
      label,
      submenu,
    );
  }

  late final _g_menu_insert_submenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, gint, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_insert_submenu');
  late final _g_menu_insert_submenu = _g_menu_insert_submenuPtr.asFunction<
      void Function(ffi.Pointer<GMenu>, int, ffi.Pointer<gchar>,
          ffi.Pointer<GMenuModel>)>();

  void g_menu_prepend_submenu(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> submenu,
  ) {
    return _g_menu_prepend_submenu(
      menu,
      label,
      submenu,
    );
  }

  late final _g_menu_prepend_submenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_prepend_submenu');
  late final _g_menu_prepend_submenu = _g_menu_prepend_submenuPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  void g_menu_append_submenu(
    ffi.Pointer<GMenu> menu,
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> submenu,
  ) {
    return _g_menu_append_submenu(
      menu,
      label,
      submenu,
    );
  }

  late final _g_menu_append_submenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenu>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_append_submenu');
  late final _g_menu_append_submenu = _g_menu_append_submenuPtr.asFunction<
      void Function(
          ffi.Pointer<GMenu>, ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  int g_menu_item_get_type() {
    return _g_menu_item_get_type();
  }

  late final _g_menu_item_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_menu_item_get_type');
  late final _g_menu_item_get_type =
      _g_menu_item_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GMenuItem> g_menu_item_new(
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_menu_item_new(
      label,
      detailed_action,
    );
  }

  late final _g_menu_item_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuItem> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>>('g_menu_item_new');
  late final _g_menu_item_new = _g_menu_item_newPtr.asFunction<
      ffi.Pointer<GMenuItem> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GMenuItem> g_menu_item_new_from_model(
    ffi.Pointer<GMenuModel> model,
    int item_index,
  ) {
    return _g_menu_item_new_from_model(
      model,
      item_index,
    );
  }

  late final _g_menu_item_new_from_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuItem> Function(
              ffi.Pointer<GMenuModel>, gint)>>('g_menu_item_new_from_model');
  late final _g_menu_item_new_from_model =
      _g_menu_item_new_from_modelPtr.asFunction<
          ffi.Pointer<GMenuItem> Function(ffi.Pointer<GMenuModel>, int)>();

  ffi.Pointer<GMenuItem> g_menu_item_new_submenu(
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> submenu,
  ) {
    return _g_menu_item_new_submenu(
      label,
      submenu,
    );
  }

  late final _g_menu_item_new_submenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuItem> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_item_new_submenu');
  late final _g_menu_item_new_submenu = _g_menu_item_new_submenuPtr.asFunction<
      ffi.Pointer<GMenuItem> Function(
          ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  ffi.Pointer<GMenuItem> g_menu_item_new_section(
    ffi.Pointer<gchar> label,
    ffi.Pointer<GMenuModel> section,
  ) {
    return _g_menu_item_new_section(
      label,
      section,
    );
  }

  late final _g_menu_item_new_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuItem> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_item_new_section');
  late final _g_menu_item_new_section = _g_menu_item_new_sectionPtr.asFunction<
      ffi.Pointer<GMenuItem> Function(
          ffi.Pointer<gchar>, ffi.Pointer<GMenuModel>)>();

  ffi.Pointer<GVariant> g_menu_item_get_attribute_value(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_menu_item_get_attribute_value(
      menu_item,
      attribute,
      expected_type,
    );
  }

  late final _g_menu_item_get_attribute_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GMenuItem>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>)>>('g_menu_item_get_attribute_value');
  late final _g_menu_item_get_attribute_value =
      _g_menu_item_get_attribute_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<gchar>, ffi.Pointer<GVariantType>)>();

  int g_menu_item_get_attribute(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_menu_item_get_attribute(
      menu_item,
      attribute,
      format_string,
    );
  }

  late final _g_menu_item_get_attributePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_item_get_attribute');
  late final _g_menu_item_get_attribute =
      _g_menu_item_get_attributePtr.asFunction<
          int Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  ffi.Pointer<GMenuModel> g_menu_item_get_link(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> link,
  ) {
    return _g_menu_item_get_link(
      menu_item,
      link,
    );
  }

  late final _g_menu_item_get_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMenuModel> Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<gchar>)>>('g_menu_item_get_link');
  late final _g_menu_item_get_link = _g_menu_item_get_linkPtr.asFunction<
      ffi.Pointer<GMenuModel> Function(
          ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>)>();

  void g_menu_item_set_attribute_value(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_menu_item_set_attribute_value(
      menu_item,
      attribute,
      value,
    );
  }

  late final _g_menu_item_set_attribute_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_menu_item_set_attribute_value');
  late final _g_menu_item_set_attribute_value =
      _g_menu_item_set_attribute_valuePtr.asFunction<
          void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  void g_menu_item_set_attribute(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> attribute,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_menu_item_set_attribute(
      menu_item,
      attribute,
      format_string,
    );
  }

  late final _g_menu_item_set_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_item_set_attribute');
  late final _g_menu_item_set_attribute =
      _g_menu_item_set_attributePtr.asFunction<
          void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  void g_menu_item_set_link(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> link,
    ffi.Pointer<GMenuModel> model,
  ) {
    return _g_menu_item_set_link(
      menu_item,
      link,
      model,
    );
  }

  late final _g_menu_item_set_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>)>>('g_menu_item_set_link');
  late final _g_menu_item_set_link = _g_menu_item_set_linkPtr.asFunction<
      void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
          ffi.Pointer<GMenuModel>)>();

  void g_menu_item_set_label(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> label,
  ) {
    return _g_menu_item_set_label(
      menu_item,
      label,
    );
  }

  late final _g_menu_item_set_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<gchar>)>>('g_menu_item_set_label');
  late final _g_menu_item_set_label = _g_menu_item_set_labelPtr
      .asFunction<void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>)>();

  void g_menu_item_set_submenu(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<GMenuModel> submenu,
  ) {
    return _g_menu_item_set_submenu(
      menu_item,
      submenu,
    );
  }

  late final _g_menu_item_set_submenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<GMenuModel>)>>('g_menu_item_set_submenu');
  late final _g_menu_item_set_submenu = _g_menu_item_set_submenuPtr.asFunction<
      void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<GMenuModel>)>();

  void g_menu_item_set_section(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<GMenuModel> section,
  ) {
    return _g_menu_item_set_section(
      menu_item,
      section,
    );
  }

  late final _g_menu_item_set_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<GMenuModel>)>>('g_menu_item_set_section');
  late final _g_menu_item_set_section = _g_menu_item_set_sectionPtr.asFunction<
      void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<GMenuModel>)>();

  void g_menu_item_set_action_and_target_value(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> action,
    ffi.Pointer<GVariant> target_value,
  ) {
    return _g_menu_item_set_action_and_target_value(
      menu_item,
      action,
      target_value,
    );
  }

  late final _g_menu_item_set_action_and_target_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>)>>(
      'g_menu_item_set_action_and_target_value');
  late final _g_menu_item_set_action_and_target_value =
      _g_menu_item_set_action_and_target_valuePtr.asFunction<
          void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  void g_menu_item_set_action_and_target(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> action,
    ffi.Pointer<gchar> format_string,
  ) {
    return _g_menu_item_set_action_and_target(
      menu_item,
      action,
      format_string,
    );
  }

  late final _g_menu_item_set_action_and_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_menu_item_set_action_and_target');
  late final _g_menu_item_set_action_and_target =
      _g_menu_item_set_action_and_targetPtr.asFunction<
          void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  void g_menu_item_set_detailed_action(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_menu_item_set_detailed_action(
      menu_item,
      detailed_action,
    );
  }

  late final _g_menu_item_set_detailed_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<gchar>)>>('g_menu_item_set_detailed_action');
  late final _g_menu_item_set_detailed_action =
      _g_menu_item_set_detailed_actionPtr.asFunction<
          void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<gchar>)>();

  void g_menu_item_set_icon(
    ffi.Pointer<GMenuItem> menu_item,
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_menu_item_set_icon(
      menu_item,
      icon,
    );
  }

  late final _g_menu_item_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuItem>,
              ffi.Pointer<GIcon>)>>('g_menu_item_set_icon');
  late final _g_menu_item_set_icon = _g_menu_item_set_iconPtr
      .asFunction<void Function(ffi.Pointer<GMenuItem>, ffi.Pointer<GIcon>)>();

  int g_dbus_connection_export_menu_model(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<GMenuModel> menu,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dbus_connection_export_menu_model(
      connection,
      object_path,
      menu,
      error,
    );
  }

  late final _g_dbus_connection_export_menu_modelPtr = _lookup<
          ffi.NativeFunction<
              guint Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>,
                  ffi.Pointer<GMenuModel>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_dbus_connection_export_menu_model');
  late final _g_dbus_connection_export_menu_model =
      _g_dbus_connection_export_menu_modelPtr.asFunction<
          int Function(ffi.Pointer<GDBusConnection>, ffi.Pointer<gchar>,
              ffi.Pointer<GMenuModel>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_dbus_connection_unexport_menu_model(
    ffi.Pointer<GDBusConnection> connection,
    int export_id,
  ) {
    return _g_dbus_connection_unexport_menu_model(
      connection,
      export_id,
    );
  }

  late final _g_dbus_connection_unexport_menu_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusConnection>,
              guint)>>('g_dbus_connection_unexport_menu_model');
  late final _g_dbus_connection_unexport_menu_model =
      _g_dbus_connection_unexport_menu_modelPtr
          .asFunction<void Function(ffi.Pointer<GDBusConnection>, int)>();

  int g_mount_get_type() {
    return _g_mount_get_type();
  }

  late final _g_mount_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_mount_get_type');
  late final _g_mount_get_type =
      _g_mount_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GFile> g_mount_get_root(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_root(
      mount,
    );
  }

  late final _g_mount_get_rootPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_root');
  late final _g_mount_get_root = _g_mount_get_rootPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<GFile> g_mount_get_default_location(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_default_location(
      mount,
    );
  }

  late final _g_mount_get_default_locationPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_default_location');
  late final _g_mount_get_default_location = _g_mount_get_default_locationPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<ffi.Char> g_mount_get_name(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_name(
      mount,
    );
  }

  late final _g_mount_get_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_name');
  late final _g_mount_get_name = _g_mount_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<GIcon> g_mount_get_icon(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_icon(
      mount,
    );
  }

  late final _g_mount_get_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_icon');
  late final _g_mount_get_icon = _g_mount_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<GIcon> g_mount_get_symbolic_icon(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_symbolic_icon(
      mount,
    );
  }

  late final _g_mount_get_symbolic_iconPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_symbolic_icon');
  late final _g_mount_get_symbolic_icon = _g_mount_get_symbolic_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<ffi.Char> g_mount_get_uuid(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_uuid(
      mount,
    );
  }

  late final _g_mount_get_uuidPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_uuid');
  late final _g_mount_get_uuid = _g_mount_get_uuidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<GVolume> g_mount_get_volume(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_volume(
      mount,
    );
  }

  late final _g_mount_get_volumePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVolume> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_volume');
  late final _g_mount_get_volume = _g_mount_get_volumePtr
      .asFunction<ffi.Pointer<GVolume> Function(ffi.Pointer<GMount>)>();

  ffi.Pointer<GDrive> g_mount_get_drive(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_drive(
      mount,
    );
  }

  late final _g_mount_get_drivePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GDrive> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_drive');
  late final _g_mount_get_drive = _g_mount_get_drivePtr
      .asFunction<ffi.Pointer<GDrive> Function(ffi.Pointer<GMount>)>();

  int g_mount_can_unmount(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_can_unmount(
      mount,
    );
  }

  late final _g_mount_can_unmountPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMount>)>>(
          'g_mount_can_unmount');
  late final _g_mount_can_unmount =
      _g_mount_can_unmountPtr.asFunction<int Function(ffi.Pointer<GMount>)>();

  int g_mount_can_eject(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_can_eject(
      mount,
    );
  }

  late final _g_mount_can_ejectPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMount>)>>(
          'g_mount_can_eject');
  late final _g_mount_can_eject =
      _g_mount_can_ejectPtr.asFunction<int Function(ffi.Pointer<GMount>)>();

  void g_mount_unmount(
    ffi.Pointer<GMount> mount,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_unmount(
      mount,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_unmountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_unmount');
  late final _g_mount_unmount = _g_mount_unmountPtr.asFunction<
      void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_mount_unmount_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_unmount_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_unmount_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mount_unmount_finish');
  late final _g_mount_unmount_finish = _g_mount_unmount_finishPtr.asFunction<
      int Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_mount_eject(
    ffi.Pointer<GMount> mount,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_eject(
      mount,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_ejectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_eject');
  late final _g_mount_eject = _g_mount_ejectPtr.asFunction<
      void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_mount_eject_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_eject_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_eject_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mount_eject_finish');
  late final _g_mount_eject_finish = _g_mount_eject_finishPtr.asFunction<
      int Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_mount_remount(
    ffi.Pointer<GMount> mount,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_remount(
      mount,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_remountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_remount');
  late final _g_mount_remount = _g_mount_remountPtr.asFunction<
      void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_mount_remount_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_remount_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_remount_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mount_remount_finish');
  late final _g_mount_remount_finish = _g_mount_remount_finishPtr.asFunction<
      int Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_mount_guess_content_type(
    ffi.Pointer<GMount> mount,
    int force_rescan,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_guess_content_type(
      mount,
      force_rescan,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_guess_content_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              gboolean,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_guess_content_type');
  late final _g_mount_guess_content_type =
      _g_mount_guess_content_typePtr.asFunction<
          void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_mount_guess_content_type_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_guess_content_type_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_guess_content_type_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GMount>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_mount_guess_content_type_finish');
  late final _g_mount_guess_content_type_finish =
      _g_mount_guess_content_type_finishPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GMount>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_mount_guess_content_type_sync(
    ffi.Pointer<GMount> mount,
    int force_rescan,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_guess_content_type_sync(
      mount,
      force_rescan,
      cancellable,
      error,
    );
  }

  late final _g_mount_guess_content_type_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GMount>,
                  gboolean,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_mount_guess_content_type_sync');
  late final _g_mount_guess_content_type_sync =
      _g_mount_guess_content_type_syncPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GMount>, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_mount_is_shadowed(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_is_shadowed(
      mount,
    );
  }

  late final _g_mount_is_shadowedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMount>)>>(
          'g_mount_is_shadowed');
  late final _g_mount_is_shadowed =
      _g_mount_is_shadowedPtr.asFunction<int Function(ffi.Pointer<GMount>)>();

  void g_mount_shadow(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_shadow(
      mount,
    );
  }

  late final _g_mount_shadowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMount>)>>(
          'g_mount_shadow');
  late final _g_mount_shadow =
      _g_mount_shadowPtr.asFunction<void Function(ffi.Pointer<GMount>)>();

  void g_mount_unshadow(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_unshadow(
      mount,
    );
  }

  late final _g_mount_unshadowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMount>)>>(
          'g_mount_unshadow');
  late final _g_mount_unshadow =
      _g_mount_unshadowPtr.asFunction<void Function(ffi.Pointer<GMount>)>();

  void g_mount_unmount_with_operation(
    ffi.Pointer<GMount> mount,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_unmount_with_operation(
      mount,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_unmount_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_unmount_with_operation');
  late final _g_mount_unmount_with_operation =
      _g_mount_unmount_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_mount_unmount_with_operation_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_unmount_with_operation_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_unmount_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_mount_unmount_with_operation_finish');
  late final _g_mount_unmount_with_operation_finish =
      _g_mount_unmount_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_mount_eject_with_operation(
    ffi.Pointer<GMount> mount,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_mount_eject_with_operation(
      mount,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_mount_eject_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_mount_eject_with_operation');
  late final _g_mount_eject_with_operation =
      _g_mount_eject_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GMount>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_mount_eject_with_operation_finish(
    ffi.Pointer<GMount> mount,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mount_eject_with_operation_finish(
      mount,
      result,
      error,
    );
  }

  late final _g_mount_eject_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_mount_eject_with_operation_finish');
  late final _g_mount_eject_with_operation_finish =
      _g_mount_eject_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GMount>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_mount_get_sort_key(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_mount_get_sort_key(
      mount,
    );
  }

  late final _g_mount_get_sort_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMount>)>>(
      'g_mount_get_sort_key');
  late final _g_mount_get_sort_key = _g_mount_get_sort_keyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GMount>)>();

  int g_mount_operation_get_type() {
    return _g_mount_operation_get_type();
  }

  late final _g_mount_operation_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_mount_operation_get_type');
  late final _g_mount_operation_get_type =
      _g_mount_operation_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GMountOperation> g_mount_operation_new() {
    return _g_mount_operation_new();
  }

  late final _g_mount_operation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMountOperation> Function()>>(
          'g_mount_operation_new');
  late final _g_mount_operation_new = _g_mount_operation_newPtr
      .asFunction<ffi.Pointer<GMountOperation> Function()>();

  ffi.Pointer<ffi.Char> g_mount_operation_get_username(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_username(
      op,
    );
  }

  late final _g_mount_operation_get_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMountOperation>)>>('g_mount_operation_get_username');
  late final _g_mount_operation_get_username =
      _g_mount_operation_get_usernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_username(
    ffi.Pointer<GMountOperation> op,
    ffi.Pointer<ffi.Char> username,
  ) {
    return _g_mount_operation_set_username(
      op,
      username,
    );
  }

  late final _g_mount_operation_set_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Pointer<ffi.Char>)>>('g_mount_operation_set_username');
  late final _g_mount_operation_set_username =
      _g_mount_operation_set_usernamePtr.asFunction<
          void Function(ffi.Pointer<GMountOperation>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_mount_operation_get_password(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_password(
      op,
    );
  }

  late final _g_mount_operation_get_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMountOperation>)>>('g_mount_operation_get_password');
  late final _g_mount_operation_get_password =
      _g_mount_operation_get_passwordPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_password(
    ffi.Pointer<GMountOperation> op,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _g_mount_operation_set_password(
      op,
      password,
    );
  }

  late final _g_mount_operation_set_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Pointer<ffi.Char>)>>('g_mount_operation_set_password');
  late final _g_mount_operation_set_password =
      _g_mount_operation_set_passwordPtr.asFunction<
          void Function(ffi.Pointer<GMountOperation>, ffi.Pointer<ffi.Char>)>();

  int g_mount_operation_get_anonymous(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_anonymous(
      op,
    );
  }

  late final _g_mount_operation_get_anonymousPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GMountOperation>)>>(
      'g_mount_operation_get_anonymous');
  late final _g_mount_operation_get_anonymous =
      _g_mount_operation_get_anonymousPtr
          .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_anonymous(
    ffi.Pointer<GMountOperation> op,
    int anonymous,
  ) {
    return _g_mount_operation_set_anonymous(
      op,
      anonymous,
    );
  }

  late final _g_mount_operation_set_anonymousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              gboolean)>>('g_mount_operation_set_anonymous');
  late final _g_mount_operation_set_anonymous =
      _g_mount_operation_set_anonymousPtr
          .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  ffi.Pointer<ffi.Char> g_mount_operation_get_domain(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_domain(
      op,
    );
  }

  late final _g_mount_operation_get_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMountOperation>)>>('g_mount_operation_get_domain');
  late final _g_mount_operation_get_domain =
      _g_mount_operation_get_domainPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_domain(
    ffi.Pointer<GMountOperation> op,
    ffi.Pointer<ffi.Char> domain,
  ) {
    return _g_mount_operation_set_domain(
      op,
      domain,
    );
  }

  late final _g_mount_operation_set_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Pointer<ffi.Char>)>>('g_mount_operation_set_domain');
  late final _g_mount_operation_set_domain =
      _g_mount_operation_set_domainPtr.asFunction<
          void Function(ffi.Pointer<GMountOperation>, ffi.Pointer<ffi.Char>)>();

  int g_mount_operation_get_password_save(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_password_save(
      op,
    );
  }

  late final _g_mount_operation_get_password_savePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GMountOperation>)>>(
      'g_mount_operation_get_password_save');
  late final _g_mount_operation_get_password_save =
      _g_mount_operation_get_password_savePtr
          .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_password_save(
    ffi.Pointer<GMountOperation> op,
    int save,
  ) {
    return _g_mount_operation_set_password_save(
      op,
      save,
    );
  }

  late final _g_mount_operation_set_password_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Int32)>>('g_mount_operation_set_password_save');
  late final _g_mount_operation_set_password_save =
      _g_mount_operation_set_password_savePtr
          .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  int g_mount_operation_get_choice(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_choice(
      op,
    );
  }

  late final _g_mount_operation_get_choicePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GMountOperation>)>>(
      'g_mount_operation_get_choice');
  late final _g_mount_operation_get_choice = _g_mount_operation_get_choicePtr
      .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_choice(
    ffi.Pointer<GMountOperation> op,
    int choice,
  ) {
    return _g_mount_operation_set_choice(
      op,
      choice,
    );
  }

  late final _g_mount_operation_set_choicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Int)>>('g_mount_operation_set_choice');
  late final _g_mount_operation_set_choice = _g_mount_operation_set_choicePtr
      .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  void g_mount_operation_reply(
    ffi.Pointer<GMountOperation> op,
    int result,
  ) {
    return _g_mount_operation_reply(
      op,
      result,
    );
  }

  late final _g_mount_operation_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              ffi.Int32)>>('g_mount_operation_reply');
  late final _g_mount_operation_reply = _g_mount_operation_replyPtr
      .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  int g_mount_operation_get_is_tcrypt_hidden_volume(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_is_tcrypt_hidden_volume(
      op,
    );
  }

  late final _g_mount_operation_get_is_tcrypt_hidden_volumePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GMountOperation>)>>(
      'g_mount_operation_get_is_tcrypt_hidden_volume');
  late final _g_mount_operation_get_is_tcrypt_hidden_volume =
      _g_mount_operation_get_is_tcrypt_hidden_volumePtr
          .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_is_tcrypt_hidden_volume(
    ffi.Pointer<GMountOperation> op,
    int hidden_volume,
  ) {
    return _g_mount_operation_set_is_tcrypt_hidden_volume(
      op,
      hidden_volume,
    );
  }

  late final _g_mount_operation_set_is_tcrypt_hidden_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              gboolean)>>('g_mount_operation_set_is_tcrypt_hidden_volume');
  late final _g_mount_operation_set_is_tcrypt_hidden_volume =
      _g_mount_operation_set_is_tcrypt_hidden_volumePtr
          .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  int g_mount_operation_get_is_tcrypt_system_volume(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_is_tcrypt_system_volume(
      op,
    );
  }

  late final _g_mount_operation_get_is_tcrypt_system_volumePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GMountOperation>)>>(
      'g_mount_operation_get_is_tcrypt_system_volume');
  late final _g_mount_operation_get_is_tcrypt_system_volume =
      _g_mount_operation_get_is_tcrypt_system_volumePtr
          .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_is_tcrypt_system_volume(
    ffi.Pointer<GMountOperation> op,
    int system_volume,
  ) {
    return _g_mount_operation_set_is_tcrypt_system_volume(
      op,
      system_volume,
    );
  }

  late final _g_mount_operation_set_is_tcrypt_system_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              gboolean)>>('g_mount_operation_set_is_tcrypt_system_volume');
  late final _g_mount_operation_set_is_tcrypt_system_volume =
      _g_mount_operation_set_is_tcrypt_system_volumePtr
          .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  int g_mount_operation_get_pim(
    ffi.Pointer<GMountOperation> op,
  ) {
    return _g_mount_operation_get_pim(
      op,
    );
  }

  late final _g_mount_operation_get_pimPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GMountOperation>)>>(
          'g_mount_operation_get_pim');
  late final _g_mount_operation_get_pim = _g_mount_operation_get_pimPtr
      .asFunction<int Function(ffi.Pointer<GMountOperation>)>();

  void g_mount_operation_set_pim(
    ffi.Pointer<GMountOperation> op,
    int pim,
  ) {
    return _g_mount_operation_set_pim(
      op,
      pim,
    );
  }

  late final _g_mount_operation_set_pimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMountOperation>,
              guint)>>('g_mount_operation_set_pim');
  late final _g_mount_operation_set_pim = _g_mount_operation_set_pimPtr
      .asFunction<void Function(ffi.Pointer<GMountOperation>, int)>();

  int g_native_socket_address_get_type() {
    return _g_native_socket_address_get_type();
  }

  late final _g_native_socket_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_native_socket_address_get_type');
  late final _g_native_socket_address_get_type =
      _g_native_socket_address_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketAddress> g_native_socket_address_new(
    gpointer native,
    int len,
  ) {
    return _g_native_socket_address_new(
      native,
      len,
    );
  }

  late final _g_native_socket_address_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(
              gpointer, gsize)>>('g_native_socket_address_new');
  late final _g_native_socket_address_new = _g_native_socket_address_newPtr
      .asFunction<ffi.Pointer<GSocketAddress> Function(gpointer, int)>();

  int g_volume_monitor_get_type() {
    return _g_volume_monitor_get_type();
  }

  late final _g_volume_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_volume_monitor_get_type');
  late final _g_volume_monitor_get_type =
      _g_volume_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GVolumeMonitor> g_volume_monitor_get() {
    return _g_volume_monitor_get();
  }

  late final _g_volume_monitor_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVolumeMonitor> Function()>>(
          'g_volume_monitor_get');
  late final _g_volume_monitor_get = _g_volume_monitor_getPtr
      .asFunction<ffi.Pointer<GVolumeMonitor> Function()>();

  ffi.Pointer<GList> g_volume_monitor_get_connected_drives(
    ffi.Pointer<GVolumeMonitor> volume_monitor,
  ) {
    return _g_volume_monitor_get_connected_drives(
      volume_monitor,
    );
  }

  late final _g_volume_monitor_get_connected_drivesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GVolumeMonitor>)>>(
      'g_volume_monitor_get_connected_drives');
  late final _g_volume_monitor_get_connected_drives =
      _g_volume_monitor_get_connected_drivesPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GVolumeMonitor>)>();

  ffi.Pointer<GList> g_volume_monitor_get_volumes(
    ffi.Pointer<GVolumeMonitor> volume_monitor,
  ) {
    return _g_volume_monitor_get_volumes(
      volume_monitor,
    );
  }

  late final _g_volume_monitor_get_volumesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GVolumeMonitor>)>>('g_volume_monitor_get_volumes');
  late final _g_volume_monitor_get_volumes = _g_volume_monitor_get_volumesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GVolumeMonitor>)>();

  ffi.Pointer<GList> g_volume_monitor_get_mounts(
    ffi.Pointer<GVolumeMonitor> volume_monitor,
  ) {
    return _g_volume_monitor_get_mounts(
      volume_monitor,
    );
  }

  late final _g_volume_monitor_get_mountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GVolumeMonitor>)>>('g_volume_monitor_get_mounts');
  late final _g_volume_monitor_get_mounts = _g_volume_monitor_get_mountsPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GVolumeMonitor>)>();

  ffi.Pointer<GVolume> g_volume_monitor_get_volume_for_uuid(
    ffi.Pointer<GVolumeMonitor> volume_monitor,
    ffi.Pointer<ffi.Char> uuid,
  ) {
    return _g_volume_monitor_get_volume_for_uuid(
      volume_monitor,
      uuid,
    );
  }

  late final _g_volume_monitor_get_volume_for_uuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVolume> Function(ffi.Pointer<GVolumeMonitor>,
              ffi.Pointer<ffi.Char>)>>('g_volume_monitor_get_volume_for_uuid');
  late final _g_volume_monitor_get_volume_for_uuid =
      _g_volume_monitor_get_volume_for_uuidPtr.asFunction<
          ffi.Pointer<GVolume> Function(
              ffi.Pointer<GVolumeMonitor>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GMount> g_volume_monitor_get_mount_for_uuid(
    ffi.Pointer<GVolumeMonitor> volume_monitor,
    ffi.Pointer<ffi.Char> uuid,
  ) {
    return _g_volume_monitor_get_mount_for_uuid(
      volume_monitor,
      uuid,
    );
  }

  late final _g_volume_monitor_get_mount_for_uuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMount> Function(ffi.Pointer<GVolumeMonitor>,
              ffi.Pointer<ffi.Char>)>>('g_volume_monitor_get_mount_for_uuid');
  late final _g_volume_monitor_get_mount_for_uuid =
      _g_volume_monitor_get_mount_for_uuidPtr.asFunction<
          ffi.Pointer<GMount> Function(
              ffi.Pointer<GVolumeMonitor>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVolume> g_volume_monitor_adopt_orphan_mount(
    ffi.Pointer<GMount> mount,
  ) {
    return _g_volume_monitor_adopt_orphan_mount(
      mount,
    );
  }

  late final _g_volume_monitor_adopt_orphan_mountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVolume> Function(ffi.Pointer<GMount>)>>(
      'g_volume_monitor_adopt_orphan_mount');
  late final _g_volume_monitor_adopt_orphan_mount =
      _g_volume_monitor_adopt_orphan_mountPtr
          .asFunction<ffi.Pointer<GVolume> Function(ffi.Pointer<GMount>)>();

  int g_native_volume_monitor_get_type() {
    return _g_native_volume_monitor_get_type();
  }

  late final _g_native_volume_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_native_volume_monitor_get_type');
  late final _g_native_volume_monitor_get_type =
      _g_native_volume_monitor_get_typePtr.asFunction<int Function()>();

  int g_network_address_get_type() {
    return _g_network_address_get_type();
  }

  late final _g_network_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_network_address_get_type');
  late final _g_network_address_get_type =
      _g_network_address_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketConnectable> g_network_address_new(
    ffi.Pointer<gchar> hostname,
    int port,
  ) {
    return _g_network_address_new(
      hostname,
      port,
    );
  }

  late final _g_network_address_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnectable> Function(
              ffi.Pointer<gchar>, guint16)>>('g_network_address_new');
  late final _g_network_address_new = _g_network_address_newPtr.asFunction<
      ffi.Pointer<GSocketConnectable> Function(ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GSocketConnectable> g_network_address_new_loopback(
    int port,
  ) {
    return _g_network_address_new_loopback(
      port,
    );
  }

  late final _g_network_address_new_loopbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSocketConnectable> Function(guint16)>>(
      'g_network_address_new_loopback');
  late final _g_network_address_new_loopback =
      _g_network_address_new_loopbackPtr
          .asFunction<ffi.Pointer<GSocketConnectable> Function(int)>();

  ffi.Pointer<GSocketConnectable> g_network_address_parse(
    ffi.Pointer<gchar> host_and_port,
    int default_port,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_network_address_parse(
      host_and_port,
      default_port,
      error,
    );
  }

  late final _g_network_address_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnectable> Function(ffi.Pointer<gchar>, guint16,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_network_address_parse');
  late final _g_network_address_parse = _g_network_address_parsePtr.asFunction<
      ffi.Pointer<GSocketConnectable> Function(
          ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketConnectable> g_network_address_parse_uri(
    ffi.Pointer<gchar> uri,
    int default_port,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_network_address_parse_uri(
      uri,
      default_port,
      error,
    );
  }

  late final _g_network_address_parse_uriPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnectable> Function(ffi.Pointer<gchar>,
                  guint16, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_network_address_parse_uri');
  late final _g_network_address_parse_uri =
      _g_network_address_parse_uriPtr.asFunction<
          ffi.Pointer<GSocketConnectable> Function(
              ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_network_address_get_hostname(
    ffi.Pointer<GNetworkAddress> addr,
  ) {
    return _g_network_address_get_hostname(
      addr,
    );
  }

  late final _g_network_address_get_hostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkAddress>)>>('g_network_address_get_hostname');
  late final _g_network_address_get_hostname =
      _g_network_address_get_hostnamePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkAddress>)>();

  int g_network_address_get_port(
    ffi.Pointer<GNetworkAddress> addr,
  ) {
    return _g_network_address_get_port(
      addr,
    );
  }

  late final _g_network_address_get_portPtr = _lookup<
          ffi.NativeFunction<guint16 Function(ffi.Pointer<GNetworkAddress>)>>(
      'g_network_address_get_port');
  late final _g_network_address_get_port = _g_network_address_get_portPtr
      .asFunction<int Function(ffi.Pointer<GNetworkAddress>)>();

  ffi.Pointer<gchar> g_network_address_get_scheme(
    ffi.Pointer<GNetworkAddress> addr,
  ) {
    return _g_network_address_get_scheme(
      addr,
    );
  }

  late final _g_network_address_get_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkAddress>)>>('g_network_address_get_scheme');
  late final _g_network_address_get_scheme = _g_network_address_get_schemePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkAddress>)>();

  int g_network_monitor_get_type() {
    return _g_network_monitor_get_type();
  }

  late final _g_network_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_network_monitor_get_type');
  late final _g_network_monitor_get_type =
      _g_network_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GNetworkMonitor> g_network_monitor_get_default() {
    return _g_network_monitor_get_default();
  }

  late final _g_network_monitor_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GNetworkMonitor> Function()>>(
          'g_network_monitor_get_default');
  late final _g_network_monitor_get_default = _g_network_monitor_get_defaultPtr
      .asFunction<ffi.Pointer<GNetworkMonitor> Function()>();

  int g_network_monitor_get_network_available(
    ffi.Pointer<GNetworkMonitor> monitor,
  ) {
    return _g_network_monitor_get_network_available(
      monitor,
    );
  }

  late final _g_network_monitor_get_network_availablePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GNetworkMonitor>)>>(
      'g_network_monitor_get_network_available');
  late final _g_network_monitor_get_network_available =
      _g_network_monitor_get_network_availablePtr
          .asFunction<int Function(ffi.Pointer<GNetworkMonitor>)>();

  int g_network_monitor_get_network_metered(
    ffi.Pointer<GNetworkMonitor> monitor,
  ) {
    return _g_network_monitor_get_network_metered(
      monitor,
    );
  }

  late final _g_network_monitor_get_network_meteredPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GNetworkMonitor>)>>(
      'g_network_monitor_get_network_metered');
  late final _g_network_monitor_get_network_metered =
      _g_network_monitor_get_network_meteredPtr
          .asFunction<int Function(ffi.Pointer<GNetworkMonitor>)>();

  int g_network_monitor_get_connectivity(
    ffi.Pointer<GNetworkMonitor> monitor,
  ) {
    return _g_network_monitor_get_connectivity(
      monitor,
    );
  }

  late final _g_network_monitor_get_connectivityPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GNetworkMonitor>)>>(
      'g_network_monitor_get_connectivity');
  late final _g_network_monitor_get_connectivity =
      _g_network_monitor_get_connectivityPtr
          .asFunction<int Function(ffi.Pointer<GNetworkMonitor>)>();

  int g_network_monitor_can_reach(
    ffi.Pointer<GNetworkMonitor> monitor,
    ffi.Pointer<GSocketConnectable> connectable,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_network_monitor_can_reach(
      monitor,
      connectable,
      cancellable,
      error,
    );
  }

  late final _g_network_monitor_can_reachPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GNetworkMonitor>,
                  ffi.Pointer<GSocketConnectable>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_network_monitor_can_reach');
  late final _g_network_monitor_can_reach =
      _g_network_monitor_can_reachPtr.asFunction<
          int Function(
              ffi.Pointer<GNetworkMonitor>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_network_monitor_can_reach_async(
    ffi.Pointer<GNetworkMonitor> monitor,
    ffi.Pointer<GSocketConnectable> connectable,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_network_monitor_can_reach_async(
      monitor,
      connectable,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_network_monitor_can_reach_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GNetworkMonitor>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_network_monitor_can_reach_async');
  late final _g_network_monitor_can_reach_async =
      _g_network_monitor_can_reach_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GNetworkMonitor>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_network_monitor_can_reach_finish(
    ffi.Pointer<GNetworkMonitor> monitor,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_network_monitor_can_reach_finish(
      monitor,
      result,
      error,
    );
  }

  late final _g_network_monitor_can_reach_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GNetworkMonitor>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_network_monitor_can_reach_finish');
  late final _g_network_monitor_can_reach_finish =
      _g_network_monitor_can_reach_finishPtr.asFunction<
          int Function(ffi.Pointer<GNetworkMonitor>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_network_service_get_type() {
    return _g_network_service_get_type();
  }

  late final _g_network_service_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_network_service_get_type');
  late final _g_network_service_get_type =
      _g_network_service_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketConnectable> g_network_service_new(
    ffi.Pointer<gchar> service,
    ffi.Pointer<gchar> protocol,
    ffi.Pointer<gchar> domain,
  ) {
    return _g_network_service_new(
      service,
      protocol,
      domain,
    );
  }

  late final _g_network_service_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnectable> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_network_service_new');
  late final _g_network_service_new = _g_network_service_newPtr.asFunction<
      ffi.Pointer<GSocketConnectable> Function(
          ffi.Pointer<gchar>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_network_service_get_service(
    ffi.Pointer<GNetworkService> srv,
  ) {
    return _g_network_service_get_service(
      srv,
    );
  }

  late final _g_network_service_get_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkService>)>>('g_network_service_get_service');
  late final _g_network_service_get_service = _g_network_service_get_servicePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkService>)>();

  ffi.Pointer<gchar> g_network_service_get_protocol(
    ffi.Pointer<GNetworkService> srv,
  ) {
    return _g_network_service_get_protocol(
      srv,
    );
  }

  late final _g_network_service_get_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkService>)>>('g_network_service_get_protocol');
  late final _g_network_service_get_protocol =
      _g_network_service_get_protocolPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkService>)>();

  ffi.Pointer<gchar> g_network_service_get_domain(
    ffi.Pointer<GNetworkService> srv,
  ) {
    return _g_network_service_get_domain(
      srv,
    );
  }

  late final _g_network_service_get_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkService>)>>('g_network_service_get_domain');
  late final _g_network_service_get_domain = _g_network_service_get_domainPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkService>)>();

  ffi.Pointer<gchar> g_network_service_get_scheme(
    ffi.Pointer<GNetworkService> srv,
  ) {
    return _g_network_service_get_scheme(
      srv,
    );
  }

  late final _g_network_service_get_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GNetworkService>)>>('g_network_service_get_scheme');
  late final _g_network_service_get_scheme = _g_network_service_get_schemePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GNetworkService>)>();

  void g_network_service_set_scheme(
    ffi.Pointer<GNetworkService> srv,
    ffi.Pointer<gchar> scheme,
  ) {
    return _g_network_service_set_scheme(
      srv,
      scheme,
    );
  }

  late final _g_network_service_set_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNetworkService>,
              ffi.Pointer<gchar>)>>('g_network_service_set_scheme');
  late final _g_network_service_set_scheme =
      _g_network_service_set_schemePtr.asFunction<
          void Function(ffi.Pointer<GNetworkService>, ffi.Pointer<gchar>)>();

  int g_notification_get_type() {
    return _g_notification_get_type();
  }

  late final _g_notification_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_notification_get_type');
  late final _g_notification_get_type =
      _g_notification_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GNotification> g_notification_new(
    ffi.Pointer<gchar> title,
  ) {
    return _g_notification_new(
      title,
    );
  }

  late final _g_notification_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNotification> Function(
              ffi.Pointer<gchar>)>>('g_notification_new');
  late final _g_notification_new = _g_notification_newPtr
      .asFunction<ffi.Pointer<GNotification> Function(ffi.Pointer<gchar>)>();

  void g_notification_set_title(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> title,
  ) {
    return _g_notification_set_title(
      notification,
      title,
    );
  }

  late final _g_notification_set_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Pointer<gchar>)>>('g_notification_set_title');
  late final _g_notification_set_title =
      _g_notification_set_titlePtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>)>();

  void g_notification_set_body(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> body,
  ) {
    return _g_notification_set_body(
      notification,
      body,
    );
  }

  late final _g_notification_set_bodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Pointer<gchar>)>>('g_notification_set_body');
  late final _g_notification_set_body = _g_notification_set_bodyPtr.asFunction<
      void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>)>();

  void g_notification_set_icon(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<GIcon> icon,
  ) {
    return _g_notification_set_icon(
      notification,
      icon,
    );
  }

  late final _g_notification_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Pointer<GIcon>)>>('g_notification_set_icon');
  late final _g_notification_set_icon = _g_notification_set_iconPtr.asFunction<
      void Function(ffi.Pointer<GNotification>, ffi.Pointer<GIcon>)>();

  void g_notification_set_urgent(
    ffi.Pointer<GNotification> notification,
    int urgent,
  ) {
    return _g_notification_set_urgent(
      notification,
      urgent,
    );
  }

  late final _g_notification_set_urgentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              gboolean)>>('g_notification_set_urgent');
  late final _g_notification_set_urgent = _g_notification_set_urgentPtr
      .asFunction<void Function(ffi.Pointer<GNotification>, int)>();

  void g_notification_set_priority(
    ffi.Pointer<GNotification> notification,
    int priority,
  ) {
    return _g_notification_set_priority(
      notification,
      priority,
    );
  }

  late final _g_notification_set_priorityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Int32)>>('g_notification_set_priority');
  late final _g_notification_set_priority = _g_notification_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GNotification>, int)>();

  void g_notification_set_category(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> category,
  ) {
    return _g_notification_set_category(
      notification,
      category,
    );
  }

  late final _g_notification_set_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Pointer<gchar>)>>('g_notification_set_category');
  late final _g_notification_set_category =
      _g_notification_set_categoryPtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>)>();

  void g_notification_add_button(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_notification_add_button(
      notification,
      label,
      detailed_action,
    );
  }

  late final _g_notification_add_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_notification_add_button');
  late final _g_notification_add_button =
      _g_notification_add_buttonPtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  void g_notification_add_button_with_target(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> action,
    ffi.Pointer<gchar> target_format,
  ) {
    return _g_notification_add_button_with_target(
      notification,
      label,
      action,
      target_format,
    );
  }

  late final _g_notification_add_button_with_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GNotification>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_notification_add_button_with_target');
  late final _g_notification_add_button_with_target =
      _g_notification_add_button_with_targetPtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_notification_add_button_with_target_value(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> label,
    ffi.Pointer<gchar> action,
    ffi.Pointer<GVariant> target,
  ) {
    return _g_notification_add_button_with_target_value(
      notification,
      label,
      action,
      target,
    );
  }

  late final _g_notification_add_button_with_target_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<GVariant>)>>(
      'g_notification_add_button_with_target_value');
  late final _g_notification_add_button_with_target_value =
      _g_notification_add_button_with_target_valuePtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<GVariant>)>();

  void g_notification_set_default_action(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> detailed_action,
  ) {
    return _g_notification_set_default_action(
      notification,
      detailed_action,
    );
  }

  late final _g_notification_set_default_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNotification>,
              ffi.Pointer<gchar>)>>('g_notification_set_default_action');
  late final _g_notification_set_default_action =
      _g_notification_set_default_actionPtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>)>();

  void g_notification_set_default_action_and_target(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> action,
    ffi.Pointer<gchar> target_format,
  ) {
    return _g_notification_set_default_action_and_target(
      notification,
      action,
      target_format,
    );
  }

  late final _g_notification_set_default_action_and_targetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>)>>(
      'g_notification_set_default_action_and_target');
  late final _g_notification_set_default_action_and_target =
      _g_notification_set_default_action_and_targetPtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  void g_notification_set_default_action_and_target_value(
    ffi.Pointer<GNotification> notification,
    ffi.Pointer<gchar> action,
    ffi.Pointer<GVariant> target,
  ) {
    return _g_notification_set_default_action_and_target_value(
      notification,
      action,
      target,
    );
  }

  late final _g_notification_set_default_action_and_target_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>)>>(
      'g_notification_set_default_action_and_target_value');
  late final _g_notification_set_default_action_and_target_value =
      _g_notification_set_default_action_and_target_valuePtr.asFunction<
          void Function(ffi.Pointer<GNotification>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>();

  int g_permission_get_type() {
    return _g_permission_get_type();
  }

  late final _g_permission_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_permission_get_type');
  late final _g_permission_get_type =
      _g_permission_get_typePtr.asFunction<int Function()>();

  int g_permission_acquire(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_permission_acquire(
      permission,
      cancellable,
      error,
    );
  }

  late final _g_permission_acquirePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_permission_acquire');
  late final _g_permission_acquire = _g_permission_acquirePtr.asFunction<
      int Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_permission_acquire_async(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_permission_acquire_async(
      permission,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_permission_acquire_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_permission_acquire_async');
  late final _g_permission_acquire_async =
      _g_permission_acquire_asyncPtr.asFunction<
          void Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_permission_acquire_finish(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_permission_acquire_finish(
      permission,
      result,
      error,
    );
  }

  late final _g_permission_acquire_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GPermission>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_permission_acquire_finish');
  late final _g_permission_acquire_finish =
      _g_permission_acquire_finishPtr.asFunction<
          int Function(ffi.Pointer<GPermission>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_permission_release(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_permission_release(
      permission,
      cancellable,
      error,
    );
  }

  late final _g_permission_releasePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_permission_release');
  late final _g_permission_release = _g_permission_releasePtr.asFunction<
      int Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_permission_release_async(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_permission_release_async(
      permission,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_permission_release_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_permission_release_async');
  late final _g_permission_release_async =
      _g_permission_release_asyncPtr.asFunction<
          void Function(ffi.Pointer<GPermission>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_permission_release_finish(
    ffi.Pointer<GPermission> permission,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_permission_release_finish(
      permission,
      result,
      error,
    );
  }

  late final _g_permission_release_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GPermission>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_permission_release_finish');
  late final _g_permission_release_finish =
      _g_permission_release_finishPtr.asFunction<
          int Function(ffi.Pointer<GPermission>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_permission_get_allowed(
    ffi.Pointer<GPermission> permission,
  ) {
    return _g_permission_get_allowed(
      permission,
    );
  }

  late final _g_permission_get_allowedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GPermission>)>>(
          'g_permission_get_allowed');
  late final _g_permission_get_allowed = _g_permission_get_allowedPtr
      .asFunction<int Function(ffi.Pointer<GPermission>)>();

  int g_permission_get_can_acquire(
    ffi.Pointer<GPermission> permission,
  ) {
    return _g_permission_get_can_acquire(
      permission,
    );
  }

  late final _g_permission_get_can_acquirePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GPermission>)>>(
          'g_permission_get_can_acquire');
  late final _g_permission_get_can_acquire = _g_permission_get_can_acquirePtr
      .asFunction<int Function(ffi.Pointer<GPermission>)>();

  int g_permission_get_can_release(
    ffi.Pointer<GPermission> permission,
  ) {
    return _g_permission_get_can_release(
      permission,
    );
  }

  late final _g_permission_get_can_releasePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GPermission>)>>(
          'g_permission_get_can_release');
  late final _g_permission_get_can_release = _g_permission_get_can_releasePtr
      .asFunction<int Function(ffi.Pointer<GPermission>)>();

  void g_permission_impl_update(
    ffi.Pointer<GPermission> permission,
    int allowed,
    int can_acquire,
    int can_release,
  ) {
    return _g_permission_impl_update(
      permission,
      allowed,
      can_acquire,
      can_release,
    );
  }

  late final _g_permission_impl_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPermission>, gboolean, gboolean,
              gboolean)>>('g_permission_impl_update');
  late final _g_permission_impl_update = _g_permission_impl_updatePtr
      .asFunction<void Function(ffi.Pointer<GPermission>, int, int, int)>();

  int g_pollable_input_stream_get_type() {
    return _g_pollable_input_stream_get_type();
  }

  late final _g_pollable_input_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_pollable_input_stream_get_type');
  late final _g_pollable_input_stream_get_type =
      _g_pollable_input_stream_get_typePtr.asFunction<int Function()>();

  int g_pollable_input_stream_can_poll(
    ffi.Pointer<GPollableInputStream> stream,
  ) {
    return _g_pollable_input_stream_can_poll(
      stream,
    );
  }

  late final _g_pollable_input_stream_can_pollPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableInputStream>)>>(
      'g_pollable_input_stream_can_poll');
  late final _g_pollable_input_stream_can_poll =
      _g_pollable_input_stream_can_pollPtr
          .asFunction<int Function(ffi.Pointer<GPollableInputStream>)>();

  int g_pollable_input_stream_is_readable(
    ffi.Pointer<GPollableInputStream> stream,
  ) {
    return _g_pollable_input_stream_is_readable(
      stream,
    );
  }

  late final _g_pollable_input_stream_is_readablePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableInputStream>)>>(
      'g_pollable_input_stream_is_readable');
  late final _g_pollable_input_stream_is_readable =
      _g_pollable_input_stream_is_readablePtr
          .asFunction<int Function(ffi.Pointer<GPollableInputStream>)>();

  ffi.Pointer<GSource> g_pollable_input_stream_create_source(
    ffi.Pointer<GPollableInputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_pollable_input_stream_create_source(
      stream,
      cancellable,
    );
  }

  late final _g_pollable_input_stream_create_sourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSource> Function(ffi.Pointer<GPollableInputStream>,
                  ffi.Pointer<GCancellable>)>>(
      'g_pollable_input_stream_create_source');
  late final _g_pollable_input_stream_create_source =
      _g_pollable_input_stream_create_sourcePtr.asFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GPollableInputStream>, ffi.Pointer<GCancellable>)>();

  int g_pollable_input_stream_read_nonblocking(
    ffi.Pointer<GPollableInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_input_stream_read_nonblocking(
      stream,
      buffer,
      count,
      cancellable,
      error,
    );
  }

  late final _g_pollable_input_stream_read_nonblockingPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GPollableInputStream>,
                  ffi.Pointer<ffi.Void>,
                  gsize,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_pollable_input_stream_read_nonblocking');
  late final _g_pollable_input_stream_read_nonblocking =
      _g_pollable_input_stream_read_nonblockingPtr.asFunction<
          int Function(
              ffi.Pointer<GPollableInputStream>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_pollable_output_stream_get_type() {
    return _g_pollable_output_stream_get_type();
  }

  late final _g_pollable_output_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_pollable_output_stream_get_type');
  late final _g_pollable_output_stream_get_type =
      _g_pollable_output_stream_get_typePtr.asFunction<int Function()>();

  int g_pollable_output_stream_can_poll(
    ffi.Pointer<GPollableOutputStream> stream,
  ) {
    return _g_pollable_output_stream_can_poll(
      stream,
    );
  }

  late final _g_pollable_output_stream_can_pollPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableOutputStream>)>>(
      'g_pollable_output_stream_can_poll');
  late final _g_pollable_output_stream_can_poll =
      _g_pollable_output_stream_can_pollPtr
          .asFunction<int Function(ffi.Pointer<GPollableOutputStream>)>();

  int g_pollable_output_stream_is_writable(
    ffi.Pointer<GPollableOutputStream> stream,
  ) {
    return _g_pollable_output_stream_is_writable(
      stream,
    );
  }

  late final _g_pollable_output_stream_is_writablePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableOutputStream>)>>(
      'g_pollable_output_stream_is_writable');
  late final _g_pollable_output_stream_is_writable =
      _g_pollable_output_stream_is_writablePtr
          .asFunction<int Function(ffi.Pointer<GPollableOutputStream>)>();

  ffi.Pointer<GSource> g_pollable_output_stream_create_source(
    ffi.Pointer<GPollableOutputStream> stream,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_pollable_output_stream_create_source(
      stream,
      cancellable,
    );
  }

  late final _g_pollable_output_stream_create_sourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSource> Function(ffi.Pointer<GPollableOutputStream>,
                  ffi.Pointer<GCancellable>)>>(
      'g_pollable_output_stream_create_source');
  late final _g_pollable_output_stream_create_source =
      _g_pollable_output_stream_create_sourcePtr.asFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GPollableOutputStream>, ffi.Pointer<GCancellable>)>();

  int g_pollable_output_stream_write_nonblocking(
    ffi.Pointer<GPollableOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_output_stream_write_nonblocking(
      stream,
      buffer,
      count,
      cancellable,
      error,
    );
  }

  late final _g_pollable_output_stream_write_nonblockingPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GPollableOutputStream>,
                  ffi.Pointer<ffi.Void>,
                  gsize,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_pollable_output_stream_write_nonblocking');
  late final _g_pollable_output_stream_write_nonblocking =
      _g_pollable_output_stream_write_nonblockingPtr.asFunction<
          int Function(
              ffi.Pointer<GPollableOutputStream>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_pollable_output_stream_writev_nonblocking(
    ffi.Pointer<GPollableOutputStream> stream,
    ffi.Pointer<GOutputVector> vectors,
    int n_vectors,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_output_stream_writev_nonblocking(
      stream,
      vectors,
      n_vectors,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_pollable_output_stream_writev_nonblockingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GPollableOutputStream>,
                  ffi.Pointer<GOutputVector>,
                  gsize,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_pollable_output_stream_writev_nonblocking');
  late final _g_pollable_output_stream_writev_nonblocking =
      _g_pollable_output_stream_writev_nonblockingPtr.asFunction<
          int Function(
              ffi.Pointer<GPollableOutputStream>,
              ffi.Pointer<GOutputVector>,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSource> g_pollable_source_new(
    ffi.Pointer<GObject> pollable_stream,
  ) {
    return _g_pollable_source_new(
      pollable_stream,
    );
  }

  late final _g_pollable_source_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GObject>)>>(
      'g_pollable_source_new');
  late final _g_pollable_source_new = _g_pollable_source_newPtr
      .asFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GObject>)>();

  ffi.Pointer<GSource> g_pollable_source_new_full(
    gpointer pollable_stream,
    ffi.Pointer<GSource> child_source,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_pollable_source_new_full(
      pollable_stream,
      child_source,
      cancellable,
    );
  }

  late final _g_pollable_source_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(gpointer, ffi.Pointer<GSource>,
              ffi.Pointer<GCancellable>)>>('g_pollable_source_new_full');
  late final _g_pollable_source_new_full =
      _g_pollable_source_new_fullPtr.asFunction<
          ffi.Pointer<GSource> Function(
              gpointer, ffi.Pointer<GSource>, ffi.Pointer<GCancellable>)>();

  int g_pollable_stream_read(
    ffi.Pointer<GInputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int blocking,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_stream_read(
      stream,
      buffer,
      count,
      blocking,
      cancellable,
      error,
    );
  }

  late final _g_pollable_stream_readPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              gboolean,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_pollable_stream_read');
  late final _g_pollable_stream_read = _g_pollable_stream_readPtr.asFunction<
      int Function(ffi.Pointer<GInputStream>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_pollable_stream_write(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int blocking,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_stream_write(
      stream,
      buffer,
      count,
      blocking,
      cancellable,
      error,
    );
  }

  late final _g_pollable_stream_writePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              gsize,
              gboolean,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_pollable_stream_write');
  late final _g_pollable_stream_write = _g_pollable_stream_writePtr.asFunction<
      int Function(ffi.Pointer<GOutputStream>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_pollable_stream_write_all(
    ffi.Pointer<GOutputStream> stream,
    ffi.Pointer<ffi.Void> buffer,
    int count,
    int blocking,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_pollable_stream_write_all(
      stream,
      buffer,
      count,
      blocking,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_pollable_stream_write_allPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOutputStream>,
                  ffi.Pointer<ffi.Void>,
                  gsize,
                  gboolean,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_pollable_stream_write_all');
  late final _g_pollable_stream_write_all =
      _g_pollable_stream_write_allPtr.asFunction<
          int Function(
              ffi.Pointer<GOutputStream>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_power_profile_monitor_get_type() {
    return _g_power_profile_monitor_get_type();
  }

  late final _g_power_profile_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_power_profile_monitor_get_type');
  late final _g_power_profile_monitor_get_type =
      _g_power_profile_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GPowerProfileMonitor> g_power_profile_monitor_dup_default() {
    return _g_power_profile_monitor_dup_default();
  }

  late final _g_power_profile_monitor_dup_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPowerProfileMonitor> Function()>>(
          'g_power_profile_monitor_dup_default');
  late final _g_power_profile_monitor_dup_default =
      _g_power_profile_monitor_dup_defaultPtr
          .asFunction<ffi.Pointer<GPowerProfileMonitor> Function()>();

  int g_power_profile_monitor_get_power_saver_enabled(
    ffi.Pointer<GPowerProfileMonitor> monitor,
  ) {
    return _g_power_profile_monitor_get_power_saver_enabled(
      monitor,
    );
  }

  late final _g_power_profile_monitor_get_power_saver_enabledPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPowerProfileMonitor>)>>(
      'g_power_profile_monitor_get_power_saver_enabled');
  late final _g_power_profile_monitor_get_power_saver_enabled =
      _g_power_profile_monitor_get_power_saver_enabledPtr
          .asFunction<int Function(ffi.Pointer<GPowerProfileMonitor>)>();

  int g_property_action_get_type() {
    return _g_property_action_get_type();
  }

  late final _g_property_action_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_property_action_get_type');
  late final _g_property_action_get_type =
      _g_property_action_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GPropertyAction> g_property_action_new(
    ffi.Pointer<gchar> name,
    gpointer object,
    ffi.Pointer<gchar> property_name,
  ) {
    return _g_property_action_new(
      name,
      object,
      property_name,
    );
  }

  late final _g_property_action_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPropertyAction> Function(ffi.Pointer<gchar>, gpointer,
              ffi.Pointer<gchar>)>>('g_property_action_new');
  late final _g_property_action_new = _g_property_action_newPtr.asFunction<
      ffi.Pointer<GPropertyAction> Function(
          ffi.Pointer<gchar>, gpointer, ffi.Pointer<gchar>)>();

  int g_proxy_get_type() {
    return _g_proxy_get_type();
  }

  late final _g_proxy_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_proxy_get_type');
  late final _g_proxy_get_type =
      _g_proxy_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GProxy> g_proxy_get_default_for_protocol(
    ffi.Pointer<gchar> protocol,
  ) {
    return _g_proxy_get_default_for_protocol(
      protocol,
    );
  }

  late final _g_proxy_get_default_for_protocolPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GProxy> Function(ffi.Pointer<gchar>)>>(
      'g_proxy_get_default_for_protocol');
  late final _g_proxy_get_default_for_protocol =
      _g_proxy_get_default_for_protocolPtr
          .asFunction<ffi.Pointer<GProxy> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GIOStream> g_proxy_connect(
    ffi.Pointer<GProxy> proxy,
    ffi.Pointer<GIOStream> connection,
    ffi.Pointer<GProxyAddress> proxy_address,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_proxy_connect(
      proxy,
      connection,
      proxy_address,
      cancellable,
      error,
    );
  }

  late final _g_proxy_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GProxy>,
              ffi.Pointer<GIOStream>,
              ffi.Pointer<GProxyAddress>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_proxy_connect');
  late final _g_proxy_connect = _g_proxy_connectPtr.asFunction<
      ffi.Pointer<GIOStream> Function(
          ffi.Pointer<GProxy>,
          ffi.Pointer<GIOStream>,
          ffi.Pointer<GProxyAddress>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_proxy_connect_async(
    ffi.Pointer<GProxy> proxy,
    ffi.Pointer<GIOStream> connection,
    ffi.Pointer<GProxyAddress> proxy_address,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_proxy_connect_async(
      proxy,
      connection,
      proxy_address,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_proxy_connect_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GProxy>,
              ffi.Pointer<GIOStream>,
              ffi.Pointer<GProxyAddress>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_proxy_connect_async');
  late final _g_proxy_connect_async = _g_proxy_connect_asyncPtr.asFunction<
      void Function(
          ffi.Pointer<GProxy>,
          ffi.Pointer<GIOStream>,
          ffi.Pointer<GProxyAddress>,
          ffi.Pointer<GCancellable>,
          GAsyncReadyCallback,
          gpointer)>();

  ffi.Pointer<GIOStream> g_proxy_connect_finish(
    ffi.Pointer<GProxy> proxy,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_proxy_connect_finish(
      proxy,
      result,
      error,
    );
  }

  late final _g_proxy_connect_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GProxy>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_proxy_connect_finish');
  late final _g_proxy_connect_finish = _g_proxy_connect_finishPtr.asFunction<
      ffi.Pointer<GIOStream> Function(ffi.Pointer<GProxy>,
          ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_proxy_supports_hostname(
    ffi.Pointer<GProxy> proxy,
  ) {
    return _g_proxy_supports_hostname(
      proxy,
    );
  }

  late final _g_proxy_supports_hostnamePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GProxy>)>>(
          'g_proxy_supports_hostname');
  late final _g_proxy_supports_hostname = _g_proxy_supports_hostnamePtr
      .asFunction<int Function(ffi.Pointer<GProxy>)>();

  int g_proxy_address_get_type() {
    return _g_proxy_address_get_type();
  }

  late final _g_proxy_address_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_proxy_address_get_type');
  late final _g_proxy_address_get_type =
      _g_proxy_address_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketAddress> g_proxy_address_new(
    ffi.Pointer<GInetAddress> inetaddr,
    int port,
    ffi.Pointer<gchar> protocol,
    ffi.Pointer<gchar> dest_hostname,
    int dest_port,
    ffi.Pointer<gchar> username,
    ffi.Pointer<gchar> password,
  ) {
    return _g_proxy_address_new(
      inetaddr,
      port,
      protocol,
      dest_hostname,
      dest_port,
      username,
      password,
    );
  }

  late final _g_proxy_address_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GInetAddress>,
              guint16,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              guint16,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_proxy_address_new');
  late final _g_proxy_address_new = _g_proxy_address_newPtr.asFunction<
      ffi.Pointer<GSocketAddress> Function(
          ffi.Pointer<GInetAddress>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<gchar>,
          ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_proxy_address_get_protocol(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_protocol(
      proxy,
    );
  }

  late final _g_proxy_address_get_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GProxyAddress>)>>('g_proxy_address_get_protocol');
  late final _g_proxy_address_get_protocol = _g_proxy_address_get_protocolPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  ffi.Pointer<gchar> g_proxy_address_get_destination_protocol(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_destination_protocol(
      proxy,
    );
  }

  late final _g_proxy_address_get_destination_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>>(
      'g_proxy_address_get_destination_protocol');
  late final _g_proxy_address_get_destination_protocol =
      _g_proxy_address_get_destination_protocolPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  ffi.Pointer<gchar> g_proxy_address_get_destination_hostname(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_destination_hostname(
      proxy,
    );
  }

  late final _g_proxy_address_get_destination_hostnamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>>(
      'g_proxy_address_get_destination_hostname');
  late final _g_proxy_address_get_destination_hostname =
      _g_proxy_address_get_destination_hostnamePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  int g_proxy_address_get_destination_port(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_destination_port(
      proxy,
    );
  }

  late final _g_proxy_address_get_destination_portPtr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GProxyAddress>)>>(
          'g_proxy_address_get_destination_port');
  late final _g_proxy_address_get_destination_port =
      _g_proxy_address_get_destination_portPtr
          .asFunction<int Function(ffi.Pointer<GProxyAddress>)>();

  ffi.Pointer<gchar> g_proxy_address_get_username(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_username(
      proxy,
    );
  }

  late final _g_proxy_address_get_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GProxyAddress>)>>('g_proxy_address_get_username');
  late final _g_proxy_address_get_username = _g_proxy_address_get_usernamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  ffi.Pointer<gchar> g_proxy_address_get_password(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_password(
      proxy,
    );
  }

  late final _g_proxy_address_get_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GProxyAddress>)>>('g_proxy_address_get_password');
  late final _g_proxy_address_get_password = _g_proxy_address_get_passwordPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  ffi.Pointer<gchar> g_proxy_address_get_uri(
    ffi.Pointer<GProxyAddress> proxy,
  ) {
    return _g_proxy_address_get_uri(
      proxy,
    );
  }

  late final _g_proxy_address_get_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GProxyAddress>)>>('g_proxy_address_get_uri');
  late final _g_proxy_address_get_uri = _g_proxy_address_get_uriPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GProxyAddress>)>();

  int g_socket_address_enumerator_get_type() {
    return _g_socket_address_enumerator_get_type();
  }

  late final _g_socket_address_enumerator_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_address_enumerator_get_type');
  late final _g_socket_address_enumerator_get_type =
      _g_socket_address_enumerator_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketAddress> g_socket_address_enumerator_next(
    ffi.Pointer<GSocketAddressEnumerator> enumerator,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_address_enumerator_next(
      enumerator,
      cancellable,
      error,
    );
  }

  late final _g_socket_address_enumerator_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocketAddressEnumerator>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_address_enumerator_next');
  late final _g_socket_address_enumerator_next =
      _g_socket_address_enumerator_nextPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocketAddressEnumerator>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_address_enumerator_next_async(
    ffi.Pointer<GSocketAddressEnumerator> enumerator,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_address_enumerator_next_async(
      enumerator,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_address_enumerator_next_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketAddressEnumerator>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_address_enumerator_next_async');
  late final _g_socket_address_enumerator_next_async =
      _g_socket_address_enumerator_next_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSocketAddressEnumerator>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GSocketAddress> g_socket_address_enumerator_next_finish(
    ffi.Pointer<GSocketAddressEnumerator> enumerator,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_address_enumerator_next_finish(
      enumerator,
      result,
      error,
    );
  }

  late final _g_socket_address_enumerator_next_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocketAddressEnumerator>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_address_enumerator_next_finish');
  late final _g_socket_address_enumerator_next_finish =
      _g_socket_address_enumerator_next_finishPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocketAddressEnumerator>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_proxy_address_enumerator_get_type() {
    return _g_proxy_address_enumerator_get_type();
  }

  late final _g_proxy_address_enumerator_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_proxy_address_enumerator_get_type');
  late final _g_proxy_address_enumerator_get_type =
      _g_proxy_address_enumerator_get_typePtr.asFunction<int Function()>();

  int g_proxy_resolver_get_type() {
    return _g_proxy_resolver_get_type();
  }

  late final _g_proxy_resolver_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_proxy_resolver_get_type');
  late final _g_proxy_resolver_get_type =
      _g_proxy_resolver_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GProxyResolver> g_proxy_resolver_get_default() {
    return _g_proxy_resolver_get_default();
  }

  late final _g_proxy_resolver_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GProxyResolver> Function()>>(
          'g_proxy_resolver_get_default');
  late final _g_proxy_resolver_get_default = _g_proxy_resolver_get_defaultPtr
      .asFunction<ffi.Pointer<GProxyResolver> Function()>();

  int g_proxy_resolver_is_supported(
    ffi.Pointer<GProxyResolver> resolver,
  ) {
    return _g_proxy_resolver_is_supported(
      resolver,
    );
  }

  late final _g_proxy_resolver_is_supportedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GProxyResolver>)>>(
      'g_proxy_resolver_is_supported');
  late final _g_proxy_resolver_is_supported = _g_proxy_resolver_is_supportedPtr
      .asFunction<int Function(ffi.Pointer<GProxyResolver>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_proxy_resolver_lookup(
    ffi.Pointer<GProxyResolver> resolver,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_proxy_resolver_lookup(
      resolver,
      uri,
      cancellable,
      error,
    );
  }

  late final _g_proxy_resolver_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GProxyResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_proxy_resolver_lookup');
  late final _g_proxy_resolver_lookup = _g_proxy_resolver_lookupPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GProxyResolver>,
          ffi.Pointer<gchar>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_proxy_resolver_lookup_async(
    ffi.Pointer<GProxyResolver> resolver,
    ffi.Pointer<gchar> uri,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_proxy_resolver_lookup_async(
      resolver,
      uri,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_proxy_resolver_lookup_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GProxyResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_proxy_resolver_lookup_async');
  late final _g_proxy_resolver_lookup_async =
      _g_proxy_resolver_lookup_asyncPtr.asFunction<
          void Function(ffi.Pointer<GProxyResolver>, ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_proxy_resolver_lookup_finish(
    ffi.Pointer<GProxyResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_proxy_resolver_lookup_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_proxy_resolver_lookup_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GProxyResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_proxy_resolver_lookup_finish');
  late final _g_proxy_resolver_lookup_finish =
      _g_proxy_resolver_lookup_finishPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GProxyResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_remote_action_group_get_type() {
    return _g_remote_action_group_get_type();
  }

  late final _g_remote_action_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_remote_action_group_get_type');
  late final _g_remote_action_group_get_type =
      _g_remote_action_group_get_typePtr.asFunction<int Function()>();

  void g_remote_action_group_activate_action_full(
    ffi.Pointer<GRemoteActionGroup> remote,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> parameter,
    ffi.Pointer<GVariant> platform_data,
  ) {
    return _g_remote_action_group_activate_action_full(
      remote,
      action_name,
      parameter,
      platform_data,
    );
  }

  late final _g_remote_action_group_activate_action_fullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GRemoteActionGroup>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Pointer<GVariant>)>>(
      'g_remote_action_group_activate_action_full');
  late final _g_remote_action_group_activate_action_full =
      _g_remote_action_group_activate_action_fullPtr.asFunction<
          void Function(ffi.Pointer<GRemoteActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>, ffi.Pointer<GVariant>)>();

  void g_remote_action_group_change_action_state_full(
    ffi.Pointer<GRemoteActionGroup> remote,
    ffi.Pointer<gchar> action_name,
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GVariant> platform_data,
  ) {
    return _g_remote_action_group_change_action_state_full(
      remote,
      action_name,
      value,
      platform_data,
    );
  }

  late final _g_remote_action_group_change_action_state_fullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GRemoteActionGroup>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GVariant>,
                  ffi.Pointer<GVariant>)>>(
      'g_remote_action_group_change_action_state_full');
  late final _g_remote_action_group_change_action_state_full =
      _g_remote_action_group_change_action_state_fullPtr.asFunction<
          void Function(ffi.Pointer<GRemoteActionGroup>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>, ffi.Pointer<GVariant>)>();

  int g_resolver_get_type() {
    return _g_resolver_get_type();
  }

  late final _g_resolver_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_resolver_get_type');
  late final _g_resolver_get_type =
      _g_resolver_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GResolver> g_resolver_get_default() {
    return _g_resolver_get_default();
  }

  late final _g_resolver_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GResolver> Function()>>(
          'g_resolver_get_default');
  late final _g_resolver_get_default = _g_resolver_get_defaultPtr
      .asFunction<ffi.Pointer<GResolver> Function()>();

  void g_resolver_set_default(
    ffi.Pointer<GResolver> resolver,
  ) {
    return _g_resolver_set_default(
      resolver,
    );
  }

  late final _g_resolver_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GResolver>)>>(
          'g_resolver_set_default');
  late final _g_resolver_set_default = _g_resolver_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<GResolver>)>();

  ffi.Pointer<GList> g_resolver_lookup_by_name(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> hostname,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_name(
      resolver,
      hostname,
      cancellable,
      error,
    );
  }

  late final _g_resolver_lookup_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resolver_lookup_by_name');
  late final _g_resolver_lookup_by_name =
      _g_resolver_lookup_by_namePtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_lookup_by_name_async(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> hostname,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_resolver_lookup_by_name_async(
      resolver,
      hostname,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_resolver_lookup_by_name_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_resolver_lookup_by_name_async');
  late final _g_resolver_lookup_by_name_async =
      _g_resolver_lookup_by_name_asyncPtr.asFunction<
          void Function(ffi.Pointer<GResolver>, ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GList> g_resolver_lookup_by_name_finish(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_name_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_resolver_lookup_by_name_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_by_name_finish');
  late final _g_resolver_lookup_by_name_finish =
      _g_resolver_lookup_by_name_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_lookup_by_name_with_flags_async(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> hostname,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_resolver_lookup_by_name_with_flags_async(
      resolver,
      hostname,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_resolver_lookup_by_name_with_flags_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_resolver_lookup_by_name_with_flags_async');
  late final _g_resolver_lookup_by_name_with_flags_async =
      _g_resolver_lookup_by_name_with_flags_asyncPtr.asFunction<
          void Function(ffi.Pointer<GResolver>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GList> g_resolver_lookup_by_name_with_flags_finish(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_name_with_flags_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_resolver_lookup_by_name_with_flags_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_by_name_with_flags_finish');
  late final _g_resolver_lookup_by_name_with_flags_finish =
      _g_resolver_lookup_by_name_with_flags_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_resolver_lookup_by_name_with_flags(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> hostname,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_name_with_flags(
      resolver,
      hostname,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_resolver_lookup_by_name_with_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<gchar>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_by_name_with_flags');
  late final _g_resolver_lookup_by_name_with_flags =
      _g_resolver_lookup_by_name_with_flagsPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_free_addresses(
    ffi.Pointer<GList> addresses,
  ) {
    return _g_resolver_free_addresses(
      addresses,
    );
  }

  late final _g_resolver_free_addressesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_resolver_free_addresses');
  late final _g_resolver_free_addresses = _g_resolver_free_addressesPtr
      .asFunction<void Function(ffi.Pointer<GList>)>();

  ffi.Pointer<gchar> g_resolver_lookup_by_address(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GInetAddress> address,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_address(
      resolver,
      address,
      cancellable,
      error,
    );
  }

  late final _g_resolver_lookup_by_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GInetAddress>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_by_address');
  late final _g_resolver_lookup_by_address =
      _g_resolver_lookup_by_addressPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_lookup_by_address_async(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GInetAddress> address,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_resolver_lookup_by_address_async(
      resolver,
      address,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_resolver_lookup_by_address_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_resolver_lookup_by_address_async');
  late final _g_resolver_lookup_by_address_async =
      _g_resolver_lookup_by_address_asyncPtr.asFunction<
          void Function(ffi.Pointer<GResolver>, ffi.Pointer<GInetAddress>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<gchar> g_resolver_lookup_by_address_finish(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_by_address_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_resolver_lookup_by_address_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_by_address_finish');
  late final _g_resolver_lookup_by_address_finish =
      _g_resolver_lookup_by_address_finishPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_resolver_lookup_service(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> service,
    ffi.Pointer<gchar> protocol,
    ffi.Pointer<gchar> domain,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_service(
      resolver,
      service,
      protocol,
      domain,
      cancellable,
      error,
    );
  }

  late final _g_resolver_lookup_servicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resolver_lookup_service');
  late final _g_resolver_lookup_service =
      _g_resolver_lookup_servicePtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_lookup_service_async(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> service,
    ffi.Pointer<gchar> protocol,
    ffi.Pointer<gchar> domain,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_resolver_lookup_service_async(
      resolver,
      service,
      protocol,
      domain,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_resolver_lookup_service_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_resolver_lookup_service_async');
  late final _g_resolver_lookup_service_async =
      _g_resolver_lookup_service_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GList> g_resolver_lookup_service_finish(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_service_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_resolver_lookup_service_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_service_finish');
  late final _g_resolver_lookup_service_finish =
      _g_resolver_lookup_service_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_resolver_lookup_records(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> rrname,
    int record_type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_records(
      resolver,
      rrname,
      record_type,
      cancellable,
      error,
    );
  }

  late final _g_resolver_lookup_recordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resolver_lookup_records');
  late final _g_resolver_lookup_records =
      _g_resolver_lookup_recordsPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_lookup_records_async(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<gchar> rrname,
    int record_type,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_resolver_lookup_records_async(
      resolver,
      rrname,
      record_type,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_resolver_lookup_records_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver>,
              ffi.Pointer<gchar>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_resolver_lookup_records_async');
  late final _g_resolver_lookup_records_async =
      _g_resolver_lookup_records_asyncPtr.asFunction<
          void Function(ffi.Pointer<GResolver>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GList> g_resolver_lookup_records_finish(
    ffi.Pointer<GResolver> resolver,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resolver_lookup_records_finish(
      resolver,
      result,
      error,
    );
  }

  late final _g_resolver_lookup_records_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resolver_lookup_records_finish');
  late final _g_resolver_lookup_records_finish =
      _g_resolver_lookup_records_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GResolver>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resolver_free_targets(
    ffi.Pointer<GList> targets,
  ) {
    return _g_resolver_free_targets(
      targets,
    );
  }

  late final _g_resolver_free_targetsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_resolver_free_targets');
  late final _g_resolver_free_targets = _g_resolver_free_targetsPtr
      .asFunction<void Function(ffi.Pointer<GList>)>();

  int g_resolver_error_quark() {
    return _g_resolver_error_quark();
  }

  late final _g_resolver_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_resolver_error_quark');
  late final _g_resolver_error_quark =
      _g_resolver_error_quarkPtr.asFunction<int Function()>();

  int g_resource_error_quark() {
    return _g_resource_error_quark();
  }

  late final _g_resource_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_resource_error_quark');
  late final _g_resource_error_quark =
      _g_resource_error_quarkPtr.asFunction<int Function()>();

  int g_resource_get_type() {
    return _g_resource_get_type();
  }

  late final _g_resource_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_resource_get_type');
  late final _g_resource_get_type =
      _g_resource_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GResource> g_resource_new_from_data(
    ffi.Pointer<GBytes> data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_new_from_data(
      data,
      error,
    );
  }

  late final _g_resource_new_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GResource> Function(ffi.Pointer<GBytes>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resource_new_from_data');
  late final _g_resource_new_from_data =
      _g_resource_new_from_dataPtr.asFunction<
          ffi.Pointer<GResource> Function(
              ffi.Pointer<GBytes>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GResource> g_resource_ref(
    ffi.Pointer<GResource> resource,
  ) {
    return _g_resource_ref(
      resource,
    );
  }

  late final _g_resource_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GResource> Function(
              ffi.Pointer<GResource>)>>('g_resource_ref');
  late final _g_resource_ref = _g_resource_refPtr
      .asFunction<ffi.Pointer<GResource> Function(ffi.Pointer<GResource>)>();

  void g_resource_unref(
    ffi.Pointer<GResource> resource,
  ) {
    return _g_resource_unref(
      resource,
    );
  }

  late final _g_resource_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GResource>)>>(
          'g_resource_unref');
  late final _g_resource_unref =
      _g_resource_unrefPtr.asFunction<void Function(ffi.Pointer<GResource>)>();

  ffi.Pointer<GResource> g_resource_load(
    ffi.Pointer<gchar> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_load(
      filename,
      error,
    );
  }

  late final _g_resource_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GResource> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resource_load');
  late final _g_resource_load = _g_resource_loadPtr.asFunction<
      ffi.Pointer<GResource> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GInputStream> g_resource_open_stream(
    ffi.Pointer<GResource> resource,
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_open_stream(
      resource,
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resource_open_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GResource>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resource_open_stream');
  late final _g_resource_open_stream = _g_resource_open_streamPtr.asFunction<
      ffi.Pointer<GInputStream> Function(ffi.Pointer<GResource>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GBytes> g_resource_lookup_data(
    ffi.Pointer<GResource> resource,
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_lookup_data(
      resource,
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resource_lookup_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GResource>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resource_lookup_data');
  late final _g_resource_lookup_data = _g_resource_lookup_dataPtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<GResource>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_resource_enumerate_children(
    ffi.Pointer<GResource> resource,
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_enumerate_children(
      resource,
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resource_enumerate_childrenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GResource>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resource_enumerate_children');
  late final _g_resource_enumerate_children =
      _g_resource_enumerate_childrenPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GResource>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_resource_get_info(
    ffi.Pointer<GResource> resource,
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<gsize> size,
    ffi.Pointer<guint32> flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resource_get_info(
      resource,
      path,
      lookup_flags,
      size,
      flags,
      error,
    );
  }

  late final _g_resource_get_infoPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GResource>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<gsize>,
              ffi.Pointer<guint32>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resource_get_info');
  late final _g_resource_get_info = _g_resource_get_infoPtr.asFunction<
      int Function(
          ffi.Pointer<GResource>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<guint32>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_resources_register(
    ffi.Pointer<GResource> resource,
  ) {
    return _g_resources_register(
      resource,
    );
  }

  late final _g_resources_registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GResource>)>>(
          'g_resources_register');
  late final _g_resources_register = _g_resources_registerPtr
      .asFunction<void Function(ffi.Pointer<GResource>)>();

  void g_resources_unregister(
    ffi.Pointer<GResource> resource,
  ) {
    return _g_resources_unregister(
      resource,
    );
  }

  late final _g_resources_unregisterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GResource>)>>(
          'g_resources_unregister');
  late final _g_resources_unregister = _g_resources_unregisterPtr
      .asFunction<void Function(ffi.Pointer<GResource>)>();

  ffi.Pointer<GInputStream> g_resources_open_stream(
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resources_open_stream(
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resources_open_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resources_open_stream');
  late final _g_resources_open_stream = _g_resources_open_streamPtr.asFunction<
      ffi.Pointer<GInputStream> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GBytes> g_resources_lookup_data(
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resources_lookup_data(
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resources_lookup_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resources_lookup_data');
  late final _g_resources_lookup_data = _g_resources_lookup_dataPtr.asFunction<
      ffi.Pointer<GBytes> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_resources_enumerate_children(
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resources_enumerate_children(
      path,
      lookup_flags,
      error,
    );
  }

  late final _g_resources_enumerate_childrenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
                  ffi.Int32, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_resources_enumerate_children');
  late final _g_resources_enumerate_children =
      _g_resources_enumerate_childrenPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_resources_get_info(
    ffi.Pointer<ffi.Char> path,
    int lookup_flags,
    ffi.Pointer<gsize> size,
    ffi.Pointer<guint32> flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_resources_get_info(
      path,
      lookup_flags,
      size,
      flags,
      error,
    );
  }

  late final _g_resources_get_infoPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<gsize>,
              ffi.Pointer<guint32>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_resources_get_info');
  late final _g_resources_get_info = _g_resources_get_infoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<gsize>,
          ffi.Pointer<guint32>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_static_resource_init(
    ffi.Pointer<GStaticResource> static_resource,
  ) {
    return _g_static_resource_init(
      static_resource,
    );
  }

  late final _g_static_resource_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticResource>)>>(
      'g_static_resource_init');
  late final _g_static_resource_init = _g_static_resource_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticResource>)>();

  void g_static_resource_fini(
    ffi.Pointer<GStaticResource> static_resource,
  ) {
    return _g_static_resource_fini(
      static_resource,
    );
  }

  late final _g_static_resource_finiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticResource>)>>(
      'g_static_resource_fini');
  late final _g_static_resource_fini = _g_static_resource_finiPtr
      .asFunction<void Function(ffi.Pointer<GStaticResource>)>();

  ffi.Pointer<GResource> g_static_resource_get_resource(
    ffi.Pointer<GStaticResource> static_resource,
  ) {
    return _g_static_resource_get_resource(
      static_resource,
    );
  }

  late final _g_static_resource_get_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GResource> Function(
              ffi.Pointer<GStaticResource>)>>('g_static_resource_get_resource');
  late final _g_static_resource_get_resource =
      _g_static_resource_get_resourcePtr.asFunction<
          ffi.Pointer<GResource> Function(ffi.Pointer<GStaticResource>)>();

  int g_seekable_get_type() {
    return _g_seekable_get_type();
  }

  late final _g_seekable_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_seekable_get_type');
  late final _g_seekable_get_type =
      _g_seekable_get_typePtr.asFunction<int Function()>();

  int g_seekable_tell(
    ffi.Pointer<GSeekable> seekable,
  ) {
    return _g_seekable_tell(
      seekable,
    );
  }

  late final _g_seekable_tellPtr =
      _lookup<ffi.NativeFunction<goffset Function(ffi.Pointer<GSeekable>)>>(
          'g_seekable_tell');
  late final _g_seekable_tell =
      _g_seekable_tellPtr.asFunction<int Function(ffi.Pointer<GSeekable>)>();

  int g_seekable_can_seek(
    ffi.Pointer<GSeekable> seekable,
  ) {
    return _g_seekable_can_seek(
      seekable,
    );
  }

  late final _g_seekable_can_seekPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSeekable>)>>(
          'g_seekable_can_seek');
  late final _g_seekable_can_seek = _g_seekable_can_seekPtr
      .asFunction<int Function(ffi.Pointer<GSeekable>)>();

  int g_seekable_seek(
    ffi.Pointer<GSeekable> seekable,
    int offset,
    int type,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_seekable_seek(
      seekable,
      offset,
      type,
      cancellable,
      error,
    );
  }

  late final _g_seekable_seekPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSeekable>,
              goffset,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_seekable_seek');
  late final _g_seekable_seek = _g_seekable_seekPtr.asFunction<
      int Function(ffi.Pointer<GSeekable>, int, int, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_seekable_can_truncate(
    ffi.Pointer<GSeekable> seekable,
  ) {
    return _g_seekable_can_truncate(
      seekable,
    );
  }

  late final _g_seekable_can_truncatePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSeekable>)>>(
          'g_seekable_can_truncate');
  late final _g_seekable_can_truncate = _g_seekable_can_truncatePtr
      .asFunction<int Function(ffi.Pointer<GSeekable>)>();

  int g_seekable_truncate(
    ffi.Pointer<GSeekable> seekable,
    int offset,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_seekable_truncate(
      seekable,
      offset,
      cancellable,
      error,
    );
  }

  late final _g_seekable_truncatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSeekable>,
              goffset,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_seekable_truncate');
  late final _g_seekable_truncate = _g_seekable_truncatePtr.asFunction<
      int Function(ffi.Pointer<GSeekable>, int, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_settings_schema_source_get_type() {
    return _g_settings_schema_source_get_type();
  }

  late final _g_settings_schema_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_settings_schema_source_get_type');
  late final _g_settings_schema_source_get_type =
      _g_settings_schema_source_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSettingsSchemaSource> g_settings_schema_source_get_default() {
    return _g_settings_schema_source_get_default();
  }

  late final _g_settings_schema_source_get_defaultPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GSettingsSchemaSource> Function()>>(
      'g_settings_schema_source_get_default');
  late final _g_settings_schema_source_get_default =
      _g_settings_schema_source_get_defaultPtr
          .asFunction<ffi.Pointer<GSettingsSchemaSource> Function()>();

  ffi.Pointer<GSettingsSchemaSource> g_settings_schema_source_ref(
    ffi.Pointer<GSettingsSchemaSource> source,
  ) {
    return _g_settings_schema_source_ref(
      source,
    );
  }

  late final _g_settings_schema_source_refPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSettingsSchemaSource> Function(
                  ffi.Pointer<GSettingsSchemaSource>)>>(
      'g_settings_schema_source_ref');
  late final _g_settings_schema_source_ref =
      _g_settings_schema_source_refPtr.asFunction<
          ffi.Pointer<GSettingsSchemaSource> Function(
              ffi.Pointer<GSettingsSchemaSource>)>();

  void g_settings_schema_source_unref(
    ffi.Pointer<GSettingsSchemaSource> source,
  ) {
    return _g_settings_schema_source_unref(
      source,
    );
  }

  late final _g_settings_schema_source_unrefPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSettingsSchemaSource>)>>(
      'g_settings_schema_source_unref');
  late final _g_settings_schema_source_unref =
      _g_settings_schema_source_unrefPtr
          .asFunction<void Function(ffi.Pointer<GSettingsSchemaSource>)>();

  ffi.Pointer<GSettingsSchemaSource>
      g_settings_schema_source_new_from_directory(
    ffi.Pointer<gchar> directory,
    ffi.Pointer<GSettingsSchemaSource> parent,
    int trusted,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_settings_schema_source_new_from_directory(
      directory,
      parent,
      trusted,
      error,
    );
  }

  late final _g_settings_schema_source_new_from_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSettingsSchemaSource> Function(
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GSettingsSchemaSource>,
                  gboolean,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_settings_schema_source_new_from_directory');
  late final _g_settings_schema_source_new_from_directory =
      _g_settings_schema_source_new_from_directoryPtr.asFunction<
          ffi.Pointer<GSettingsSchemaSource> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<GSettingsSchemaSource>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSettingsSchema> g_settings_schema_source_lookup(
    ffi.Pointer<GSettingsSchemaSource> source,
    ffi.Pointer<gchar> schema_id,
    int recursive,
  ) {
    return _g_settings_schema_source_lookup(
      source,
      schema_id,
      recursive,
    );
  }

  late final _g_settings_schema_source_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettingsSchema> Function(
              ffi.Pointer<GSettingsSchemaSource>,
              ffi.Pointer<gchar>,
              gboolean)>>('g_settings_schema_source_lookup');
  late final _g_settings_schema_source_lookup =
      _g_settings_schema_source_lookupPtr.asFunction<
          ffi.Pointer<GSettingsSchema> Function(
              ffi.Pointer<GSettingsSchemaSource>, ffi.Pointer<gchar>, int)>();

  void g_settings_schema_source_list_schemas(
    ffi.Pointer<GSettingsSchemaSource> source,
    int recursive,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> non_relocatable,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> relocatable,
  ) {
    return _g_settings_schema_source_list_schemas(
      source,
      recursive,
      non_relocatable,
      relocatable,
    );
  }

  late final _g_settings_schema_source_list_schemasPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSettingsSchemaSource>,
                  gboolean,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>>(
      'g_settings_schema_source_list_schemas');
  late final _g_settings_schema_source_list_schemas =
      _g_settings_schema_source_list_schemasPtr.asFunction<
          void Function(
              ffi.Pointer<GSettingsSchemaSource>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>>)>();

  int g_settings_schema_get_type() {
    return _g_settings_schema_get_type();
  }

  late final _g_settings_schema_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_settings_schema_get_type');
  late final _g_settings_schema_get_type =
      _g_settings_schema_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSettingsSchema> g_settings_schema_ref(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_ref(
      schema,
    );
  }

  late final _g_settings_schema_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettingsSchema> Function(
              ffi.Pointer<GSettingsSchema>)>>('g_settings_schema_ref');
  late final _g_settings_schema_ref = _g_settings_schema_refPtr.asFunction<
      ffi.Pointer<GSettingsSchema> Function(ffi.Pointer<GSettingsSchema>)>();

  void g_settings_schema_unref(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_unref(
      schema,
    );
  }

  late final _g_settings_schema_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSettingsSchema>)>>(
      'g_settings_schema_unref');
  late final _g_settings_schema_unref = _g_settings_schema_unrefPtr
      .asFunction<void Function(ffi.Pointer<GSettingsSchema>)>();

  ffi.Pointer<gchar> g_settings_schema_get_id(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_get_id(
      schema,
    );
  }

  late final _g_settings_schema_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSettingsSchema>)>>('g_settings_schema_get_id');
  late final _g_settings_schema_get_id = _g_settings_schema_get_idPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchema>)>();

  ffi.Pointer<gchar> g_settings_schema_get_path(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_get_path(
      schema,
    );
  }

  late final _g_settings_schema_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSettingsSchema>)>>('g_settings_schema_get_path');
  late final _g_settings_schema_get_path = _g_settings_schema_get_pathPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchema>)>();

  ffi.Pointer<GSettingsSchemaKey> g_settings_schema_get_key(
    ffi.Pointer<GSettingsSchema> schema,
    ffi.Pointer<gchar> name,
  ) {
    return _g_settings_schema_get_key(
      schema,
      name,
    );
  }

  late final _g_settings_schema_get_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettingsSchemaKey> Function(ffi.Pointer<GSettingsSchema>,
              ffi.Pointer<gchar>)>>('g_settings_schema_get_key');
  late final _g_settings_schema_get_key =
      _g_settings_schema_get_keyPtr.asFunction<
          ffi.Pointer<GSettingsSchemaKey> Function(
              ffi.Pointer<GSettingsSchema>, ffi.Pointer<gchar>)>();

  int g_settings_schema_has_key(
    ffi.Pointer<GSettingsSchema> schema,
    ffi.Pointer<gchar> name,
  ) {
    return _g_settings_schema_has_key(
      schema,
      name,
    );
  }

  late final _g_settings_schema_has_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettingsSchema>,
              ffi.Pointer<gchar>)>>('g_settings_schema_has_key');
  late final _g_settings_schema_has_key =
      _g_settings_schema_has_keyPtr.asFunction<
          int Function(ffi.Pointer<GSettingsSchema>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_schema_list_keys(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_list_keys(
      schema,
    );
  }

  late final _g_settings_schema_list_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GSettingsSchema>)>>('g_settings_schema_list_keys');
  late final _g_settings_schema_list_keys =
      _g_settings_schema_list_keysPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GSettingsSchema>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_schema_list_children(
    ffi.Pointer<GSettingsSchema> schema,
  ) {
    return _g_settings_schema_list_children(
      schema,
    );
  }

  late final _g_settings_schema_list_childrenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GSettingsSchema>)>>(
      'g_settings_schema_list_children');
  late final _g_settings_schema_list_children =
      _g_settings_schema_list_childrenPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GSettingsSchema>)>();

  int g_settings_schema_key_get_type() {
    return _g_settings_schema_key_get_type();
  }

  late final _g_settings_schema_key_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_settings_schema_key_get_type');
  late final _g_settings_schema_key_get_type =
      _g_settings_schema_key_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSettingsSchemaKey> g_settings_schema_key_ref(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_ref(
      key,
    );
  }

  late final _g_settings_schema_key_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettingsSchemaKey> Function(
              ffi.Pointer<GSettingsSchemaKey>)>>('g_settings_schema_key_ref');
  late final _g_settings_schema_key_ref =
      _g_settings_schema_key_refPtr.asFunction<
          ffi.Pointer<GSettingsSchemaKey> Function(
              ffi.Pointer<GSettingsSchemaKey>)>();

  void g_settings_schema_key_unref(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_unref(
      key,
    );
  }

  late final _g_settings_schema_key_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_unref');
  late final _g_settings_schema_key_unref = _g_settings_schema_key_unrefPtr
      .asFunction<void Function(ffi.Pointer<GSettingsSchemaKey>)>();

  ffi.Pointer<GVariantType> g_settings_schema_key_get_value_type(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_value_type(
      key,
    );
  }

  late final _g_settings_schema_key_get_value_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariantType> Function(
                  ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_value_type');
  late final _g_settings_schema_key_get_value_type =
      _g_settings_schema_key_get_value_typePtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GSettingsSchemaKey>)>();

  ffi.Pointer<GVariant> g_settings_schema_key_get_default_value(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_default_value(
      key,
    );
  }

  late final _g_settings_schema_key_get_default_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_default_value');
  late final _g_settings_schema_key_get_default_value =
      _g_settings_schema_key_get_default_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettingsSchemaKey>)>();

  ffi.Pointer<GVariant> g_settings_schema_key_get_range(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_range(
      key,
    );
  }

  late final _g_settings_schema_key_get_rangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_range');
  late final _g_settings_schema_key_get_range =
      _g_settings_schema_key_get_rangePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettingsSchemaKey>)>();

  int g_settings_schema_key_range_check(
    ffi.Pointer<GSettingsSchemaKey> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_settings_schema_key_range_check(
      key,
      value,
    );
  }

  late final _g_settings_schema_key_range_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettingsSchemaKey>,
              ffi.Pointer<GVariant>)>>('g_settings_schema_key_range_check');
  late final _g_settings_schema_key_range_check =
      _g_settings_schema_key_range_checkPtr.asFunction<
          int Function(
              ffi.Pointer<GSettingsSchemaKey>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<gchar> g_settings_schema_key_get_name(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_name(
      key,
    );
  }

  late final _g_settings_schema_key_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_name');
  late final _g_settings_schema_key_get_name =
      _g_settings_schema_key_get_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>();

  ffi.Pointer<gchar> g_settings_schema_key_get_summary(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_summary(
      key,
    );
  }

  late final _g_settings_schema_key_get_summaryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_summary');
  late final _g_settings_schema_key_get_summary =
      _g_settings_schema_key_get_summaryPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>();

  ffi.Pointer<gchar> g_settings_schema_key_get_description(
    ffi.Pointer<GSettingsSchemaKey> key,
  ) {
    return _g_settings_schema_key_get_description(
      key,
    );
  }

  late final _g_settings_schema_key_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>>(
      'g_settings_schema_key_get_description');
  late final _g_settings_schema_key_get_description =
      _g_settings_schema_key_get_descriptionPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSettingsSchemaKey>)>();

  int g_settings_get_type() {
    return _g_settings_get_type();
  }

  late final _g_settings_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_settings_get_type');
  late final _g_settings_get_type =
      _g_settings_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_list_schemas() {
    return _g_settings_list_schemas();
  }

  late final _g_settings_list_schemasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_settings_list_schemas');
  late final _g_settings_list_schemas = _g_settings_list_schemasPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_list_relocatable_schemas() {
    return _g_settings_list_relocatable_schemas();
  }

  late final _g_settings_list_relocatable_schemasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>>(
          'g_settings_list_relocatable_schemas');
  late final _g_settings_list_relocatable_schemas =
      _g_settings_list_relocatable_schemasPtr
          .asFunction<ffi.Pointer<ffi.Pointer<gchar>> Function()>();

  ffi.Pointer<GSettings> g_settings_new(
    ffi.Pointer<gchar> schema_id,
  ) {
    return _g_settings_new(
      schema_id,
    );
  }

  late final _g_settings_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSettings> Function(ffi.Pointer<gchar>)>>(
      'g_settings_new');
  late final _g_settings_new = _g_settings_newPtr
      .asFunction<ffi.Pointer<GSettings> Function(ffi.Pointer<gchar>)>();

  ffi.Pointer<GSettings> g_settings_new_with_path(
    ffi.Pointer<gchar> schema_id,
    ffi.Pointer<gchar> path,
  ) {
    return _g_settings_new_with_path(
      schema_id,
      path,
    );
  }

  late final _g_settings_new_with_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettings> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_settings_new_with_path');
  late final _g_settings_new_with_path =
      _g_settings_new_with_pathPtr.asFunction<
          ffi.Pointer<GSettings> Function(
              ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GSettings> g_settings_new_with_backend(
    ffi.Pointer<gchar> schema_id,
    ffi.Pointer<GSettingsBackend> backend,
  ) {
    return _g_settings_new_with_backend(
      schema_id,
      backend,
    );
  }

  late final _g_settings_new_with_backendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettings> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GSettingsBackend>)>>('g_settings_new_with_backend');
  late final _g_settings_new_with_backend =
      _g_settings_new_with_backendPtr.asFunction<
          ffi.Pointer<GSettings> Function(
              ffi.Pointer<gchar>, ffi.Pointer<GSettingsBackend>)>();

  ffi.Pointer<GSettings> g_settings_new_with_backend_and_path(
    ffi.Pointer<gchar> schema_id,
    ffi.Pointer<GSettingsBackend> backend,
    ffi.Pointer<gchar> path,
  ) {
    return _g_settings_new_with_backend_and_path(
      schema_id,
      backend,
      path,
    );
  }

  late final _g_settings_new_with_backend_and_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettings> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<GSettingsBackend>,
              ffi.Pointer<gchar>)>>('g_settings_new_with_backend_and_path');
  late final _g_settings_new_with_backend_and_path =
      _g_settings_new_with_backend_and_pathPtr.asFunction<
          ffi.Pointer<GSettings> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GSettingsBackend>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GSettings> g_settings_new_full(
    ffi.Pointer<GSettingsSchema> schema,
    ffi.Pointer<GSettingsBackend> backend,
    ffi.Pointer<gchar> path,
  ) {
    return _g_settings_new_full(
      schema,
      backend,
      path,
    );
  }

  late final _g_settings_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettings> Function(
              ffi.Pointer<GSettingsSchema>,
              ffi.Pointer<GSettingsBackend>,
              ffi.Pointer<gchar>)>>('g_settings_new_full');
  late final _g_settings_new_full = _g_settings_new_fullPtr.asFunction<
      ffi.Pointer<GSettings> Function(ffi.Pointer<GSettingsSchema>,
          ffi.Pointer<GSettingsBackend>, ffi.Pointer<gchar>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_list_children(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_list_children(
      settings,
    );
  }

  late final _g_settings_list_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GSettings>)>>('g_settings_list_children');
  late final _g_settings_list_children =
      _g_settings_list_childrenPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GSettings>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_list_keys(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_list_keys(
      settings,
    );
  }

  late final _g_settings_list_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GSettings>)>>('g_settings_list_keys');
  late final _g_settings_list_keys = _g_settings_list_keysPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GSettings>)>();

  ffi.Pointer<GVariant> g_settings_get_range(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_range(
      settings,
      key,
    );
  }

  late final _g_settings_get_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_range');
  late final _g_settings_get_range = _g_settings_get_rangePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_range_check(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_settings_range_check(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_range_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_settings_range_check');
  late final _g_settings_range_check = _g_settings_range_checkPtr.asFunction<
      int Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>, ffi.Pointer<GVariant>)>();

  int g_settings_set_value(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_settings_set_value(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_valuePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<GVariant>)>>('g_settings_set_value');
  late final _g_settings_set_value = _g_settings_set_valuePtr.asFunction<
      int Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_settings_get_value(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_value(
      settings,
      key,
    );
  }

  late final _g_settings_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_value');
  late final _g_settings_get_value = _g_settings_get_valuePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_settings_get_user_value(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_user_value(
      settings,
      key,
    );
  }

  late final _g_settings_get_user_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_user_value');
  late final _g_settings_get_user_value =
      _g_settings_get_user_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GVariant> g_settings_get_default_value(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_default_value(
      settings,
      key,
    );
  }

  late final _g_settings_get_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_default_value');
  late final _g_settings_get_default_value =
      _g_settings_get_default_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> format,
  ) {
    return _g_settings_set(
      settings,
      key,
      format,
    );
  }

  late final _g_settings_setPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_settings_set');
  late final _g_settings_set = _g_settings_setPtr.asFunction<
      int Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_settings_get(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> format,
  ) {
    return _g_settings_get(
      settings,
      key,
      format,
    );
  }

  late final _g_settings_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_settings_get');
  late final _g_settings_get = _g_settings_getPtr.asFunction<
      void Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  void g_settings_reset(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_reset(
      settings,
      key,
    );
  }

  late final _g_settings_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>>('g_settings_reset');
  late final _g_settings_reset = _g_settings_resetPtr
      .asFunction<void Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_get_int(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_int(
      settings,
      key,
    );
  }

  late final _g_settings_get_intPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_int');
  late final _g_settings_get_int = _g_settings_get_intPtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_int(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_int(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_intPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gint)>>('g_settings_set_int');
  late final _g_settings_set_int = _g_settings_set_intPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  int g_settings_get_int64(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_int64(
      settings,
      key,
    );
  }

  late final _g_settings_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          gint64 Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_int64');
  late final _g_settings_get_int64 = _g_settings_get_int64Ptr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_int64(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_int64(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gint64)>>('g_settings_set_int64');
  late final _g_settings_set_int64 = _g_settings_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  int g_settings_get_uint(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_uint(
      settings,
      key,
    );
  }

  late final _g_settings_get_uintPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_uint');
  late final _g_settings_get_uint = _g_settings_get_uintPtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_uint(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_uint(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_uintPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              guint)>>('g_settings_set_uint');
  late final _g_settings_set_uint = _g_settings_set_uintPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  int g_settings_get_uint64(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_uint64(
      settings,
      key,
    );
  }

  late final _g_settings_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_uint64');
  late final _g_settings_get_uint64 = _g_settings_get_uint64Ptr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_uint64(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_uint64(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              guint64)>>('g_settings_set_uint64');
  late final _g_settings_set_uint64 = _g_settings_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<gchar> g_settings_get_string(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_string(
      settings,
      key,
    );
  }

  late final _g_settings_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_string');
  late final _g_settings_get_string = _g_settings_get_stringPtr.asFunction<
      ffi.Pointer<gchar> Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_string(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<gchar> value,
  ) {
    return _g_settings_set_string(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_settings_set_string');
  late final _g_settings_set_string = _g_settings_set_stringPtr.asFunction<
      int Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>, ffi.Pointer<gchar>)>();

  int g_settings_get_boolean(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_boolean(
      settings,
      key,
    );
  }

  late final _g_settings_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_boolean');
  late final _g_settings_get_boolean = _g_settings_get_booleanPtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_boolean(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_boolean(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gboolean)>>('g_settings_set_boolean');
  late final _g_settings_set_boolean = _g_settings_set_booleanPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  double g_settings_get_double(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_double(
      settings,
      key,
    );
  }

  late final _g_settings_get_doublePtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_double');
  late final _g_settings_get_double = _g_settings_get_doublePtr.asFunction<
      double Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_double(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    double value,
  ) {
    return _g_settings_set_double(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_doublePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gdouble)>>('g_settings_set_double');
  late final _g_settings_set_double = _g_settings_set_doublePtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, double)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_settings_get_strv(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_strv(
      settings,
      key,
    );
  }

  late final _g_settings_get_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_strv');
  late final _g_settings_get_strv = _g_settings_get_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_strv(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    ffi.Pointer<ffi.Pointer<gchar>> value,
  ) {
    return _g_settings_set_strv(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_strvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_settings_set_strv');
  late final _g_settings_set_strv = _g_settings_set_strvPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
          ffi.Pointer<ffi.Pointer<gchar>>)>();

  int g_settings_get_enum(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_enum(
      settings,
      key,
    );
  }

  late final _g_settings_get_enumPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_enum');
  late final _g_settings_get_enum = _g_settings_get_enumPtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_enum(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_enum(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_enumPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gint)>>('g_settings_set_enum');
  late final _g_settings_set_enum = _g_settings_set_enumPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  int g_settings_get_flags(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_get_flags(
      settings,
      key,
    );
  }

  late final _g_settings_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_flags');
  late final _g_settings_get_flags = _g_settings_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_set_flags(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    int value,
  ) {
    return _g_settings_set_flags(
      settings,
      key,
      value,
    );
  }

  late final _g_settings_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              guint)>>('g_settings_set_flags');
  late final _g_settings_set_flags = _g_settings_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, int)>();

  ffi.Pointer<GSettings> g_settings_get_child(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> name,
  ) {
    return _g_settings_get_child(
      settings,
      name,
    );
  }

  late final _g_settings_get_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSettings> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_get_child');
  late final _g_settings_get_child = _g_settings_get_childPtr.asFunction<
      ffi.Pointer<GSettings> Function(
          ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  int g_settings_is_writable(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> name,
  ) {
    return _g_settings_is_writable(
      settings,
      name,
    );
  }

  late final _g_settings_is_writablePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_is_writable');
  late final _g_settings_is_writable = _g_settings_is_writablePtr
      .asFunction<int Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  void g_settings_delay(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_delay(
      settings,
    );
  }

  late final _g_settings_delayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSettings>)>>(
          'g_settings_delay');
  late final _g_settings_delay =
      _g_settings_delayPtr.asFunction<void Function(ffi.Pointer<GSettings>)>();

  void g_settings_apply(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_apply(
      settings,
    );
  }

  late final _g_settings_applyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSettings>)>>(
          'g_settings_apply');
  late final _g_settings_apply =
      _g_settings_applyPtr.asFunction<void Function(ffi.Pointer<GSettings>)>();

  void g_settings_revert(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_revert(
      settings,
    );
  }

  late final _g_settings_revertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSettings>)>>(
          'g_settings_revert');
  late final _g_settings_revert =
      _g_settings_revertPtr.asFunction<void Function(ffi.Pointer<GSettings>)>();

  int g_settings_get_has_unapplied(
    ffi.Pointer<GSettings> settings,
  ) {
    return _g_settings_get_has_unapplied(
      settings,
    );
  }

  late final _g_settings_get_has_unappliedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSettings>)>>(
          'g_settings_get_has_unapplied');
  late final _g_settings_get_has_unapplied = _g_settings_get_has_unappliedPtr
      .asFunction<int Function(ffi.Pointer<GSettings>)>();

  void g_settings_sync() {
    return _g_settings_sync();
  }

  late final _g_settings_syncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_settings_sync');
  late final _g_settings_sync =
      _g_settings_syncPtr.asFunction<void Function()>();

  void g_settings_bind(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    gpointer object,
    ffi.Pointer<gchar> property,
    int flags,
  ) {
    return _g_settings_bind(
      settings,
      key,
      object,
      property,
      flags,
    );
  }

  late final _g_settings_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              gpointer, ffi.Pointer<gchar>, ffi.Int32)>>('g_settings_bind');
  late final _g_settings_bind = _g_settings_bindPtr.asFunction<
      void Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, gpointer,
          ffi.Pointer<gchar>, int)>();

  void g_settings_bind_with_mapping(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    gpointer object,
    ffi.Pointer<gchar> property,
    int flags,
    GSettingsBindGetMapping get_mapping,
    GSettingsBindSetMapping set_mapping,
    gpointer user_data,
    GDestroyNotify destroy,
  ) {
    return _g_settings_bind_with_mapping(
      settings,
      key,
      object,
      property,
      flags,
      get_mapping,
      set_mapping,
      user_data,
      destroy,
    );
  }

  late final _g_settings_bind_with_mappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              ffi.Int32,
              GSettingsBindGetMapping,
              GSettingsBindSetMapping,
              gpointer,
              GDestroyNotify)>>('g_settings_bind_with_mapping');
  late final _g_settings_bind_with_mapping =
      _g_settings_bind_with_mappingPtr.asFunction<
          void Function(
              ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              int,
              GSettingsBindGetMapping,
              GSettingsBindSetMapping,
              gpointer,
              GDestroyNotify)>();

  void g_settings_bind_writable(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    gpointer object,
    ffi.Pointer<gchar> property,
    int inverted,
  ) {
    return _g_settings_bind_writable(
      settings,
      key,
      object,
      property,
      inverted,
    );
  }

  late final _g_settings_bind_writablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>,
              gpointer,
              ffi.Pointer<gchar>,
              gboolean)>>('g_settings_bind_writable');
  late final _g_settings_bind_writable =
      _g_settings_bind_writablePtr.asFunction<
          void Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>, gpointer,
              ffi.Pointer<gchar>, int)>();

  void g_settings_unbind(
    gpointer object,
    ffi.Pointer<gchar> property,
  ) {
    return _g_settings_unbind(
      object,
      property,
    );
  }

  late final _g_settings_unbindPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(gpointer, ffi.Pointer<gchar>)>>(
      'g_settings_unbind');
  late final _g_settings_unbind = _g_settings_unbindPtr
      .asFunction<void Function(gpointer, ffi.Pointer<gchar>)>();

  ffi.Pointer<GAction> g_settings_create_action(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
  ) {
    return _g_settings_create_action(
      settings,
      key,
    );
  }

  late final _g_settings_create_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAction> Function(ffi.Pointer<GSettings>,
              ffi.Pointer<gchar>)>>('g_settings_create_action');
  late final _g_settings_create_action =
      _g_settings_create_actionPtr.asFunction<
          ffi.Pointer<GAction> Function(
              ffi.Pointer<GSettings>, ffi.Pointer<gchar>)>();

  gpointer g_settings_get_mapped(
    ffi.Pointer<GSettings> settings,
    ffi.Pointer<gchar> key,
    GSettingsGetMapping mapping,
    gpointer user_data,
  ) {
    return _g_settings_get_mapped(
      settings,
      key,
      mapping,
      user_data,
    );
  }

  late final _g_settings_get_mappedPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
              GSettingsGetMapping, gpointer)>>('g_settings_get_mapped');
  late final _g_settings_get_mapped = _g_settings_get_mappedPtr.asFunction<
      gpointer Function(ffi.Pointer<GSettings>, ffi.Pointer<gchar>,
          GSettingsGetMapping, gpointer)>();

  int g_simple_action_get_type() {
    return _g_simple_action_get_type();
  }

  late final _g_simple_action_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_simple_action_get_type');
  late final _g_simple_action_get_type =
      _g_simple_action_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSimpleAction> g_simple_action_new(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GVariantType> parameter_type,
  ) {
    return _g_simple_action_new(
      name,
      parameter_type,
    );
  }

  late final _g_simple_action_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAction> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>)>>('g_simple_action_new');
  late final _g_simple_action_new = _g_simple_action_newPtr.asFunction<
      ffi.Pointer<GSimpleAction> Function(
          ffi.Pointer<gchar>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GSimpleAction> g_simple_action_new_stateful(
    ffi.Pointer<gchar> name,
    ffi.Pointer<GVariantType> parameter_type,
    ffi.Pointer<GVariant> state,
  ) {
    return _g_simple_action_new_stateful(
      name,
      parameter_type,
      state,
    );
  }

  late final _g_simple_action_new_statefulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAction> Function(
              ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>)>>('g_simple_action_new_stateful');
  late final _g_simple_action_new_stateful =
      _g_simple_action_new_statefulPtr.asFunction<
          ffi.Pointer<GSimpleAction> Function(ffi.Pointer<gchar>,
              ffi.Pointer<GVariantType>, ffi.Pointer<GVariant>)>();

  void g_simple_action_set_enabled(
    ffi.Pointer<GSimpleAction> simple,
    int enabled,
  ) {
    return _g_simple_action_set_enabled(
      simple,
      enabled,
    );
  }

  late final _g_simple_action_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAction>,
              gboolean)>>('g_simple_action_set_enabled');
  late final _g_simple_action_set_enabled = _g_simple_action_set_enabledPtr
      .asFunction<void Function(ffi.Pointer<GSimpleAction>, int)>();

  void g_simple_action_set_state(
    ffi.Pointer<GSimpleAction> simple,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_simple_action_set_state(
      simple,
      value,
    );
  }

  late final _g_simple_action_set_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAction>,
              ffi.Pointer<GVariant>)>>('g_simple_action_set_state');
  late final _g_simple_action_set_state =
      _g_simple_action_set_statePtr.asFunction<
          void Function(ffi.Pointer<GSimpleAction>, ffi.Pointer<GVariant>)>();

  void g_simple_action_set_state_hint(
    ffi.Pointer<GSimpleAction> simple,
    ffi.Pointer<GVariant> state_hint,
  ) {
    return _g_simple_action_set_state_hint(
      simple,
      state_hint,
    );
  }

  late final _g_simple_action_set_state_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAction>,
              ffi.Pointer<GVariant>)>>('g_simple_action_set_state_hint');
  late final _g_simple_action_set_state_hint =
      _g_simple_action_set_state_hintPtr.asFunction<
          void Function(ffi.Pointer<GSimpleAction>, ffi.Pointer<GVariant>)>();

  int g_simple_action_group_get_type() {
    return _g_simple_action_group_get_type();
  }

  late final _g_simple_action_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_simple_action_group_get_type');
  late final _g_simple_action_group_get_type =
      _g_simple_action_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSimpleActionGroup> g_simple_action_group_new() {
    return _g_simple_action_group_new();
  }

  late final _g_simple_action_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSimpleActionGroup> Function()>>(
          'g_simple_action_group_new');
  late final _g_simple_action_group_new = _g_simple_action_group_newPtr
      .asFunction<ffi.Pointer<GSimpleActionGroup> Function()>();

  ffi.Pointer<GAction> g_simple_action_group_lookup(
    ffi.Pointer<GSimpleActionGroup> simple,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_simple_action_group_lookup(
      simple,
      action_name,
    );
  }

  late final _g_simple_action_group_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAction> Function(ffi.Pointer<GSimpleActionGroup>,
              ffi.Pointer<gchar>)>>('g_simple_action_group_lookup');
  late final _g_simple_action_group_lookup =
      _g_simple_action_group_lookupPtr.asFunction<
          ffi.Pointer<GAction> Function(
              ffi.Pointer<GSimpleActionGroup>, ffi.Pointer<gchar>)>();

  void g_simple_action_group_insert(
    ffi.Pointer<GSimpleActionGroup> simple,
    ffi.Pointer<GAction> action,
  ) {
    return _g_simple_action_group_insert(
      simple,
      action,
    );
  }

  late final _g_simple_action_group_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleActionGroup>,
              ffi.Pointer<GAction>)>>('g_simple_action_group_insert');
  late final _g_simple_action_group_insert =
      _g_simple_action_group_insertPtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleActionGroup>, ffi.Pointer<GAction>)>();

  void g_simple_action_group_remove(
    ffi.Pointer<GSimpleActionGroup> simple,
    ffi.Pointer<gchar> action_name,
  ) {
    return _g_simple_action_group_remove(
      simple,
      action_name,
    );
  }

  late final _g_simple_action_group_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleActionGroup>,
              ffi.Pointer<gchar>)>>('g_simple_action_group_remove');
  late final _g_simple_action_group_remove =
      _g_simple_action_group_removePtr.asFunction<
          void Function(ffi.Pointer<GSimpleActionGroup>, ffi.Pointer<gchar>)>();

  void g_simple_action_group_add_entries(
    ffi.Pointer<GSimpleActionGroup> simple,
    ffi.Pointer<GActionEntry> entries,
    int n_entries,
    gpointer user_data,
  ) {
    return _g_simple_action_group_add_entries(
      simple,
      entries,
      n_entries,
      user_data,
    );
  }

  late final _g_simple_action_group_add_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSimpleActionGroup>,
              ffi.Pointer<GActionEntry>,
              gint,
              gpointer)>>('g_simple_action_group_add_entries');
  late final _g_simple_action_group_add_entries =
      _g_simple_action_group_add_entriesPtr.asFunction<
          void Function(ffi.Pointer<GSimpleActionGroup>,
              ffi.Pointer<GActionEntry>, int, gpointer)>();

  int g_simple_async_result_get_type() {
    return _g_simple_async_result_get_type();
  }

  late final _g_simple_async_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_simple_async_result_get_type');
  late final _g_simple_async_result_get_type =
      _g_simple_async_result_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSimpleAsyncResult> g_simple_async_result_new(
    ffi.Pointer<GObject> source_object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    gpointer source_tag,
  ) {
    return _g_simple_async_result_new(
      source_object,
      callback,
      user_data,
      source_tag,
    );
  }

  late final _g_simple_async_result_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              gpointer)>>('g_simple_async_result_new');
  late final _g_simple_async_result_new =
      _g_simple_async_result_newPtr.asFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>, GAsyncReadyCallback, gpointer, gpointer)>();

  ffi.Pointer<GSimpleAsyncResult> g_simple_async_result_new_error(
    ffi.Pointer<GObject> source_object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_simple_async_result_new_error(
      source_object,
      callback,
      user_data,
      domain,
      code,
      format,
    );
  }

  late final _g_simple_async_result_new_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              GQuark,
              gint,
              ffi.Pointer<ffi.Char>)>>('g_simple_async_result_new_error');
  late final _g_simple_async_result_new_error =
      _g_simple_async_result_new_errorPtr.asFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              int,
              int,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GSimpleAsyncResult> g_simple_async_result_new_from_error(
    ffi.Pointer<GObject> source_object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_result_new_from_error(
      source_object,
      callback,
      user_data,
      error,
    );
  }

  late final _g_simple_async_result_new_from_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              ffi.Pointer<GError>)>>('g_simple_async_result_new_from_error');
  late final _g_simple_async_result_new_from_error =
      _g_simple_async_result_new_from_errorPtr.asFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(ffi.Pointer<GObject>,
              GAsyncReadyCallback, gpointer, ffi.Pointer<GError>)>();

  ffi.Pointer<GSimpleAsyncResult> g_simple_async_result_new_take_error(
    ffi.Pointer<GObject> source_object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_result_new_take_error(
      source_object,
      callback,
      user_data,
      error,
    );
  }

  late final _g_simple_async_result_new_take_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              ffi.Pointer<GError>)>>('g_simple_async_result_new_take_error');
  late final _g_simple_async_result_new_take_error =
      _g_simple_async_result_new_take_errorPtr.asFunction<
          ffi.Pointer<GSimpleAsyncResult> Function(ffi.Pointer<GObject>,
              GAsyncReadyCallback, gpointer, ffi.Pointer<GError>)>();

  void g_simple_async_result_set_op_res_gpointer(
    ffi.Pointer<GSimpleAsyncResult> simple,
    gpointer op_res,
    GDestroyNotify destroy_op_res,
  ) {
    return _g_simple_async_result_set_op_res_gpointer(
      simple,
      op_res,
      destroy_op_res,
    );
  }

  late final _g_simple_async_result_set_op_res_gpointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>, gpointer,
              GDestroyNotify)>>('g_simple_async_result_set_op_res_gpointer');
  late final _g_simple_async_result_set_op_res_gpointer =
      _g_simple_async_result_set_op_res_gpointerPtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleAsyncResult>, gpointer, GDestroyNotify)>();

  gpointer g_simple_async_result_get_op_res_gpointer(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_get_op_res_gpointer(
      simple,
    );
  }

  late final _g_simple_async_result_get_op_res_gpointerPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_get_op_res_gpointer');
  late final _g_simple_async_result_get_op_res_gpointer =
      _g_simple_async_result_get_op_res_gpointerPtr
          .asFunction<gpointer Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_set_op_res_gssize(
    ffi.Pointer<GSimpleAsyncResult> simple,
    int op_res,
  ) {
    return _g_simple_async_result_set_op_res_gssize(
      simple,
      op_res,
    );
  }

  late final _g_simple_async_result_set_op_res_gssizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
              gssize)>>('g_simple_async_result_set_op_res_gssize');
  late final _g_simple_async_result_set_op_res_gssize =
      _g_simple_async_result_set_op_res_gssizePtr
          .asFunction<void Function(ffi.Pointer<GSimpleAsyncResult>, int)>();

  int g_simple_async_result_get_op_res_gssize(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_get_op_res_gssize(
      simple,
    );
  }

  late final _g_simple_async_result_get_op_res_gssizePtr = _lookup<
          ffi.NativeFunction<gssize Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_get_op_res_gssize');
  late final _g_simple_async_result_get_op_res_gssize =
      _g_simple_async_result_get_op_res_gssizePtr
          .asFunction<int Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_set_op_res_gboolean(
    ffi.Pointer<GSimpleAsyncResult> simple,
    int op_res,
  ) {
    return _g_simple_async_result_set_op_res_gboolean(
      simple,
      op_res,
    );
  }

  late final _g_simple_async_result_set_op_res_gbooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
              gboolean)>>('g_simple_async_result_set_op_res_gboolean');
  late final _g_simple_async_result_set_op_res_gboolean =
      _g_simple_async_result_set_op_res_gbooleanPtr
          .asFunction<void Function(ffi.Pointer<GSimpleAsyncResult>, int)>();

  int g_simple_async_result_get_op_res_gboolean(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_get_op_res_gboolean(
      simple,
    );
  }

  late final _g_simple_async_result_get_op_res_gbooleanPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_get_op_res_gboolean');
  late final _g_simple_async_result_get_op_res_gboolean =
      _g_simple_async_result_get_op_res_gbooleanPtr
          .asFunction<int Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_set_check_cancellable(
    ffi.Pointer<GSimpleAsyncResult> simple,
    ffi.Pointer<GCancellable> check_cancellable,
  ) {
    return _g_simple_async_result_set_check_cancellable(
      simple,
      check_cancellable,
    );
  }

  late final _g_simple_async_result_set_check_cancellablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSimpleAsyncResult>, ffi.Pointer<GCancellable>)>>(
      'g_simple_async_result_set_check_cancellable');
  late final _g_simple_async_result_set_check_cancellable =
      _g_simple_async_result_set_check_cancellablePtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleAsyncResult>, ffi.Pointer<GCancellable>)>();

  gpointer g_simple_async_result_get_source_tag(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_get_source_tag(
      simple,
    );
  }

  late final _g_simple_async_result_get_source_tagPtr = _lookup<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_get_source_tag');
  late final _g_simple_async_result_get_source_tag =
      _g_simple_async_result_get_source_tagPtr
          .asFunction<gpointer Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_set_handle_cancellation(
    ffi.Pointer<GSimpleAsyncResult> simple,
    int handle_cancellation,
  ) {
    return _g_simple_async_result_set_handle_cancellation(
      simple,
      handle_cancellation,
    );
  }

  late final _g_simple_async_result_set_handle_cancellationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
              gboolean)>>('g_simple_async_result_set_handle_cancellation');
  late final _g_simple_async_result_set_handle_cancellation =
      _g_simple_async_result_set_handle_cancellationPtr
          .asFunction<void Function(ffi.Pointer<GSimpleAsyncResult>, int)>();

  void g_simple_async_result_complete(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_complete(
      simple,
    );
  }

  late final _g_simple_async_result_completePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_complete');
  late final _g_simple_async_result_complete =
      _g_simple_async_result_completePtr
          .asFunction<void Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_complete_in_idle(
    ffi.Pointer<GSimpleAsyncResult> simple,
  ) {
    return _g_simple_async_result_complete_in_idle(
      simple,
    );
  }

  late final _g_simple_async_result_complete_in_idlePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>)>>(
      'g_simple_async_result_complete_in_idle');
  late final _g_simple_async_result_complete_in_idle =
      _g_simple_async_result_complete_in_idlePtr
          .asFunction<void Function(ffi.Pointer<GSimpleAsyncResult>)>();

  void g_simple_async_result_run_in_thread(
    ffi.Pointer<GSimpleAsyncResult> simple,
    GSimpleAsyncThreadFunc func,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_simple_async_result_run_in_thread(
      simple,
      func,
      io_priority,
      cancellable,
    );
  }

  late final _g_simple_async_result_run_in_threadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
                  GSimpleAsyncThreadFunc, ffi.Int, ffi.Pointer<GCancellable>)>>(
      'g_simple_async_result_run_in_thread');
  late final _g_simple_async_result_run_in_thread =
      _g_simple_async_result_run_in_threadPtr.asFunction<
          void Function(ffi.Pointer<GSimpleAsyncResult>, GSimpleAsyncThreadFunc,
              int, ffi.Pointer<GCancellable>)>();

  void g_simple_async_result_set_from_error(
    ffi.Pointer<GSimpleAsyncResult> simple,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_result_set_from_error(
      simple,
      error,
    );
  }

  late final _g_simple_async_result_set_from_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
              ffi.Pointer<GError>)>>('g_simple_async_result_set_from_error');
  late final _g_simple_async_result_set_from_error =
      _g_simple_async_result_set_from_errorPtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleAsyncResult>, ffi.Pointer<GError>)>();

  void g_simple_async_result_take_error(
    ffi.Pointer<GSimpleAsyncResult> simple,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_result_take_error(
      simple,
      error,
    );
  }

  late final _g_simple_async_result_take_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>,
              ffi.Pointer<GError>)>>('g_simple_async_result_take_error');
  late final _g_simple_async_result_take_error =
      _g_simple_async_result_take_errorPtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleAsyncResult>, ffi.Pointer<GError>)>();

  int g_simple_async_result_propagate_error(
    ffi.Pointer<GSimpleAsyncResult> simple,
    ffi.Pointer<ffi.Pointer<GError>> dest,
  ) {
    return _g_simple_async_result_propagate_error(
      simple,
      dest,
    );
  }

  late final _g_simple_async_result_propagate_errorPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GSimpleAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_simple_async_result_propagate_error');
  late final _g_simple_async_result_propagate_error =
      _g_simple_async_result_propagate_errorPtr.asFunction<
          int Function(ffi.Pointer<GSimpleAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_simple_async_result_set_error(
    ffi.Pointer<GSimpleAsyncResult> simple,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_simple_async_result_set_error(
      simple,
      domain,
      code,
      format,
    );
  }

  late final _g_simple_async_result_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>, GQuark, gint,
              ffi.Pointer<ffi.Char>)>>('g_simple_async_result_set_error');
  late final _g_simple_async_result_set_error =
      _g_simple_async_result_set_errorPtr.asFunction<
          void Function(ffi.Pointer<GSimpleAsyncResult>, int, int,
              ffi.Pointer<ffi.Char>)>();

  void g_simple_async_result_set_error_va(
    ffi.Pointer<GSimpleAsyncResult> simple,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_simple_async_result_set_error_va(
      simple,
      domain,
      code,
      format,
      args,
    );
  }

  late final _g_simple_async_result_set_error_vaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSimpleAsyncResult>, GQuark, gint,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'g_simple_async_result_set_error_va');
  late final _g_simple_async_result_set_error_va =
      _g_simple_async_result_set_error_vaPtr.asFunction<
          void Function(ffi.Pointer<GSimpleAsyncResult>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int g_simple_async_result_is_valid(
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<GObject> source,
    gpointer source_tag,
  ) {
    return _g_simple_async_result_is_valid(
      result,
      source,
      source_tag,
    );
  }

  late final _g_simple_async_result_is_validPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAsyncResult>, ffi.Pointer<GObject>,
              gpointer)>>('g_simple_async_result_is_valid');
  late final _g_simple_async_result_is_valid =
      _g_simple_async_result_is_validPtr.asFunction<
          int Function(
              ffi.Pointer<GAsyncResult>, ffi.Pointer<GObject>, gpointer)>();

  void g_simple_async_report_error_in_idle(
    ffi.Pointer<GObject> object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_simple_async_report_error_in_idle(
      object,
      callback,
      user_data,
      domain,
      code,
      format,
    );
  }

  late final _g_simple_async_report_error_in_idlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              GAsyncReadyCallback,
              gpointer,
              GQuark,
              gint,
              ffi.Pointer<ffi.Char>)>>('g_simple_async_report_error_in_idle');
  late final _g_simple_async_report_error_in_idle =
      _g_simple_async_report_error_in_idlePtr.asFunction<
          void Function(ffi.Pointer<GObject>, GAsyncReadyCallback, gpointer,
              int, int, ffi.Pointer<ffi.Char>)>();

  void g_simple_async_report_gerror_in_idle(
    ffi.Pointer<GObject> object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_report_gerror_in_idle(
      object,
      callback,
      user_data,
      error,
    );
  }

  late final _g_simple_async_report_gerror_in_idlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GAsyncReadyCallback, gpointer,
              ffi.Pointer<GError>)>>('g_simple_async_report_gerror_in_idle');
  late final _g_simple_async_report_gerror_in_idle =
      _g_simple_async_report_gerror_in_idlePtr.asFunction<
          void Function(ffi.Pointer<GObject>, GAsyncReadyCallback, gpointer,
              ffi.Pointer<GError>)>();

  void g_simple_async_report_take_gerror_in_idle(
    ffi.Pointer<GObject> object,
    GAsyncReadyCallback callback,
    gpointer user_data,
    ffi.Pointer<GError> error,
  ) {
    return _g_simple_async_report_take_gerror_in_idle(
      object,
      callback,
      user_data,
      error,
    );
  }

  late final _g_simple_async_report_take_gerror_in_idlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject>, GAsyncReadyCallback,
                  gpointer, ffi.Pointer<GError>)>>(
      'g_simple_async_report_take_gerror_in_idle');
  late final _g_simple_async_report_take_gerror_in_idle =
      _g_simple_async_report_take_gerror_in_idlePtr.asFunction<
          void Function(ffi.Pointer<GObject>, GAsyncReadyCallback, gpointer,
              ffi.Pointer<GError>)>();

  int g_simple_io_stream_get_type() {
    return _g_simple_io_stream_get_type();
  }

  late final _g_simple_io_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_simple_io_stream_get_type');
  late final _g_simple_io_stream_get_type =
      _g_simple_io_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIOStream> g_simple_io_stream_new(
    ffi.Pointer<GInputStream> input_stream,
    ffi.Pointer<GOutputStream> output_stream,
  ) {
    return _g_simple_io_stream_new(
      input_stream,
      output_stream,
    );
  }

  late final _g_simple_io_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(ffi.Pointer<GInputStream>,
              ffi.Pointer<GOutputStream>)>>('g_simple_io_stream_new');
  late final _g_simple_io_stream_new = _g_simple_io_stream_newPtr.asFunction<
      ffi.Pointer<GIOStream> Function(
          ffi.Pointer<GInputStream>, ffi.Pointer<GOutputStream>)>();

  int g_simple_permission_get_type() {
    return _g_simple_permission_get_type();
  }

  late final _g_simple_permission_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_simple_permission_get_type');
  late final _g_simple_permission_get_type =
      _g_simple_permission_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GPermission> g_simple_permission_new(
    int allowed,
  ) {
    return _g_simple_permission_new(
      allowed,
    );
  }

  late final _g_simple_permission_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPermission> Function(gboolean)>>(
          'g_simple_permission_new');
  late final _g_simple_permission_new = _g_simple_permission_newPtr
      .asFunction<ffi.Pointer<GPermission> Function(int)>();

  int g_simple_proxy_resolver_get_type() {
    return _g_simple_proxy_resolver_get_type();
  }

  late final _g_simple_proxy_resolver_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_simple_proxy_resolver_get_type');
  late final _g_simple_proxy_resolver_get_type =
      _g_simple_proxy_resolver_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GProxyResolver> g_simple_proxy_resolver_new(
    ffi.Pointer<gchar> default_proxy,
    ffi.Pointer<ffi.Pointer<gchar>> ignore_hosts,
  ) {
    return _g_simple_proxy_resolver_new(
      default_proxy,
      ignore_hosts,
    );
  }

  late final _g_simple_proxy_resolver_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GProxyResolver> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<gchar>>)>>('g_simple_proxy_resolver_new');
  late final _g_simple_proxy_resolver_new =
      _g_simple_proxy_resolver_newPtr.asFunction<
          ffi.Pointer<GProxyResolver> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_simple_proxy_resolver_set_default_proxy(
    ffi.Pointer<GSimpleProxyResolver> resolver,
    ffi.Pointer<gchar> default_proxy,
  ) {
    return _g_simple_proxy_resolver_set_default_proxy(
      resolver,
      default_proxy,
    );
  }

  late final _g_simple_proxy_resolver_set_default_proxyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSimpleProxyResolver>, ffi.Pointer<gchar>)>>(
      'g_simple_proxy_resolver_set_default_proxy');
  late final _g_simple_proxy_resolver_set_default_proxy =
      _g_simple_proxy_resolver_set_default_proxyPtr.asFunction<
          void Function(
              ffi.Pointer<GSimpleProxyResolver>, ffi.Pointer<gchar>)>();

  void g_simple_proxy_resolver_set_ignore_hosts(
    ffi.Pointer<GSimpleProxyResolver> resolver,
    ffi.Pointer<ffi.Pointer<gchar>> ignore_hosts,
  ) {
    return _g_simple_proxy_resolver_set_ignore_hosts(
      resolver,
      ignore_hosts,
    );
  }

  late final _g_simple_proxy_resolver_set_ignore_hostsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSimpleProxyResolver>,
                  ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_simple_proxy_resolver_set_ignore_hosts');
  late final _g_simple_proxy_resolver_set_ignore_hosts =
      _g_simple_proxy_resolver_set_ignore_hostsPtr.asFunction<
          void Function(ffi.Pointer<GSimpleProxyResolver>,
              ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_simple_proxy_resolver_set_uri_proxy(
    ffi.Pointer<GSimpleProxyResolver> resolver,
    ffi.Pointer<gchar> uri_scheme,
    ffi.Pointer<gchar> proxy,
  ) {
    return _g_simple_proxy_resolver_set_uri_proxy(
      resolver,
      uri_scheme,
      proxy,
    );
  }

  late final _g_simple_proxy_resolver_set_uri_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSimpleProxyResolver>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>>('g_simple_proxy_resolver_set_uri_proxy');
  late final _g_simple_proxy_resolver_set_uri_proxy =
      _g_simple_proxy_resolver_set_uri_proxyPtr.asFunction<
          void Function(ffi.Pointer<GSimpleProxyResolver>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>)>();

  int g_socket_get_type() {
    return _g_socket_get_type();
  }

  late final _g_socket_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_socket_get_type');
  late final _g_socket_get_type =
      _g_socket_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocket> g_socket_new(
    int family,
    int type,
    int protocol,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_new(
      family,
      type,
      protocol,
      error,
    );
  }

  late final _g_socket_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocket> Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_new');
  late final _g_socket_new = _g_socket_newPtr.asFunction<
      ffi.Pointer<GSocket> Function(
          int, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocket> g_socket_new_from_fd(
    int fd,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_new_from_fd(
      fd,
      error,
    );
  }

  late final _g_socket_new_from_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocket> Function(
              gint, ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_new_from_fd');
  late final _g_socket_new_from_fd = _g_socket_new_from_fdPtr.asFunction<
      ffi.Pointer<GSocket> Function(int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_get_fd(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_fd(
      socket,
    );
  }

  late final _g_socket_get_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_fd');
  late final _g_socket_get_fd =
      _g_socket_get_fdPtr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_get_family(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_family(
      socket,
    );
  }

  late final _g_socket_get_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_family');
  late final _g_socket_get_family =
      _g_socket_get_familyPtr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_get_socket_type(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_socket_type(
      socket,
    );
  }

  late final _g_socket_get_socket_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_socket_type');
  late final _g_socket_get_socket_type = _g_socket_get_socket_typePtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_get_protocol(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_protocol(
      socket,
    );
  }

  late final _g_socket_get_protocolPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_protocol');
  late final _g_socket_get_protocol = _g_socket_get_protocolPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  ffi.Pointer<GSocketAddress> g_socket_get_local_address(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_get_local_address(
      socket,
      error,
    );
  }

  late final _g_socket_get_local_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_get_local_address');
  late final _g_socket_get_local_address =
      _g_socket_get_local_addressPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketAddress> g_socket_get_remote_address(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_get_remote_address(
      socket,
      error,
    );
  }

  late final _g_socket_get_remote_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_get_remote_address');
  late final _g_socket_get_remote_address =
      _g_socket_get_remote_addressPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_set_blocking(
    ffi.Pointer<GSocket> socket,
    int blocking,
  ) {
    return _g_socket_set_blocking(
      socket,
      blocking,
    );
  }

  late final _g_socket_set_blockingPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, gboolean)>>(
      'g_socket_set_blocking');
  late final _g_socket_set_blocking = _g_socket_set_blockingPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_blocking(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_blocking(
      socket,
    );
  }

  late final _g_socket_get_blockingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_blocking');
  late final _g_socket_get_blocking = _g_socket_get_blockingPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_keepalive(
    ffi.Pointer<GSocket> socket,
    int keepalive,
  ) {
    return _g_socket_set_keepalive(
      socket,
      keepalive,
    );
  }

  late final _g_socket_set_keepalivePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, gboolean)>>(
      'g_socket_set_keepalive');
  late final _g_socket_set_keepalive = _g_socket_set_keepalivePtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_keepalive(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_keepalive(
      socket,
    );
  }

  late final _g_socket_get_keepalivePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_keepalive');
  late final _g_socket_get_keepalive = _g_socket_get_keepalivePtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_get_listen_backlog(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_listen_backlog(
      socket,
    );
  }

  late final _g_socket_get_listen_backlogPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_listen_backlog');
  late final _g_socket_get_listen_backlog = _g_socket_get_listen_backlogPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_listen_backlog(
    ffi.Pointer<GSocket> socket,
    int backlog,
  ) {
    return _g_socket_set_listen_backlog(
      socket,
      backlog,
    );
  }

  late final _g_socket_set_listen_backlogPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, gint)>>(
      'g_socket_set_listen_backlog');
  late final _g_socket_set_listen_backlog = _g_socket_set_listen_backlogPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_timeout(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_timeout(
      socket,
    );
  }

  late final _g_socket_get_timeoutPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_timeout');
  late final _g_socket_get_timeout =
      _g_socket_get_timeoutPtr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_timeout(
    ffi.Pointer<GSocket> socket,
    int timeout,
  ) {
    return _g_socket_set_timeout(
      socket,
      timeout,
    );
  }

  late final _g_socket_set_timeoutPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, guint)>>(
      'g_socket_set_timeout');
  late final _g_socket_set_timeout = _g_socket_set_timeoutPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_ttl(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_ttl(
      socket,
    );
  }

  late final _g_socket_get_ttlPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_ttl');
  late final _g_socket_get_ttl =
      _g_socket_get_ttlPtr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_ttl(
    ffi.Pointer<GSocket> socket,
    int ttl,
  ) {
    return _g_socket_set_ttl(
      socket,
      ttl,
    );
  }

  late final _g_socket_set_ttlPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, guint)>>(
      'g_socket_set_ttl');
  late final _g_socket_set_ttl = _g_socket_set_ttlPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_broadcast(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_broadcast(
      socket,
    );
  }

  late final _g_socket_get_broadcastPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_broadcast');
  late final _g_socket_get_broadcast = _g_socket_get_broadcastPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_broadcast(
    ffi.Pointer<GSocket> socket,
    int broadcast,
  ) {
    return _g_socket_set_broadcast(
      socket,
      broadcast,
    );
  }

  late final _g_socket_set_broadcastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, gboolean)>>(
      'g_socket_set_broadcast');
  late final _g_socket_set_broadcast = _g_socket_set_broadcastPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_multicast_loopback(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_multicast_loopback(
      socket,
    );
  }

  late final _g_socket_get_multicast_loopbackPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_multicast_loopback');
  late final _g_socket_get_multicast_loopback =
      _g_socket_get_multicast_loopbackPtr
          .asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_multicast_loopback(
    ffi.Pointer<GSocket> socket,
    int loopback,
  ) {
    return _g_socket_set_multicast_loopback(
      socket,
      loopback,
    );
  }

  late final _g_socket_set_multicast_loopbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, gboolean)>>(
      'g_socket_set_multicast_loopback');
  late final _g_socket_set_multicast_loopback =
      _g_socket_set_multicast_loopbackPtr
          .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_get_multicast_ttl(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_multicast_ttl(
      socket,
    );
  }

  late final _g_socket_get_multicast_ttlPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_multicast_ttl');
  late final _g_socket_get_multicast_ttl = _g_socket_get_multicast_ttlPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  void g_socket_set_multicast_ttl(
    ffi.Pointer<GSocket> socket,
    int ttl,
  ) {
    return _g_socket_set_multicast_ttl(
      socket,
      ttl,
    );
  }

  late final _g_socket_set_multicast_ttlPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocket>, guint)>>(
      'g_socket_set_multicast_ttl');
  late final _g_socket_set_multicast_ttl = _g_socket_set_multicast_ttlPtr
      .asFunction<void Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_is_connected(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_is_connected(
      socket,
    );
  }

  late final _g_socket_is_connectedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_is_connected');
  late final _g_socket_is_connected = _g_socket_is_connectedPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_bind(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GSocketAddress> address,
    int allow_reuse,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_bind(
      socket,
      address,
      allow_reuse,
      error,
    );
  }

  late final _g_socket_bindPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>, ffi.Pointer<GSocketAddress>,
              gboolean, ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_bind');
  late final _g_socket_bind = _g_socket_bindPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<GSocketAddress>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_join_multicast_group(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GInetAddress> group,
    int source_specific,
    ffi.Pointer<gchar> iface,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_join_multicast_group(
      socket,
      group,
      source_specific,
      iface,
      error,
    );
  }

  late final _g_socket_join_multicast_groupPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GInetAddress>,
                  gboolean,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_join_multicast_group');
  late final _g_socket_join_multicast_group =
      _g_socket_join_multicast_groupPtr.asFunction<
          int Function(ffi.Pointer<GSocket>, ffi.Pointer<GInetAddress>, int,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_leave_multicast_group(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GInetAddress> group,
    int source_specific,
    ffi.Pointer<gchar> iface,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_leave_multicast_group(
      socket,
      group,
      source_specific,
      iface,
      error,
    );
  }

  late final _g_socket_leave_multicast_groupPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GInetAddress>,
                  gboolean,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_leave_multicast_group');
  late final _g_socket_leave_multicast_group =
      _g_socket_leave_multicast_groupPtr.asFunction<
          int Function(ffi.Pointer<GSocket>, ffi.Pointer<GInetAddress>, int,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_join_multicast_group_ssm(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GInetAddress> group,
    ffi.Pointer<GInetAddress> source_specific,
    ffi.Pointer<gchar> iface,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_join_multicast_group_ssm(
      socket,
      group,
      source_specific,
      iface,
      error,
    );
  }

  late final _g_socket_join_multicast_group_ssmPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GInetAddress>,
                  ffi.Pointer<GInetAddress>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_join_multicast_group_ssm');
  late final _g_socket_join_multicast_group_ssm =
      _g_socket_join_multicast_group_ssmPtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_leave_multicast_group_ssm(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GInetAddress> group,
    ffi.Pointer<GInetAddress> source_specific,
    ffi.Pointer<gchar> iface,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_leave_multicast_group_ssm(
      socket,
      group,
      source_specific,
      iface,
      error,
    );
  }

  late final _g_socket_leave_multicast_group_ssmPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GInetAddress>,
                  ffi.Pointer<GInetAddress>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_leave_multicast_group_ssm');
  late final _g_socket_leave_multicast_group_ssm =
      _g_socket_leave_multicast_group_ssmPtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<GInetAddress>,
              ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_connect(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_connect(
      socket,
      address,
      cancellable,
      error,
    );
  }

  late final _g_socket_connectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_connect');
  late final _g_socket_connect = _g_socket_connectPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<GSocketAddress>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_check_connect_result(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_check_connect_result(
      socket,
      error,
    );
  }

  late final _g_socket_check_connect_resultPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_check_connect_result');
  late final _g_socket_check_connect_result =
      _g_socket_check_connect_resultPtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_get_available_bytes(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_get_available_bytes(
      socket,
    );
  }

  late final _g_socket_get_available_bytesPtr =
      _lookup<ffi.NativeFunction<gssize Function(ffi.Pointer<GSocket>)>>(
          'g_socket_get_available_bytes');
  late final _g_socket_get_available_bytes = _g_socket_get_available_bytesPtr
      .asFunction<int Function(ffi.Pointer<GSocket>)>();

  int g_socket_condition_check(
    ffi.Pointer<GSocket> socket,
    int condition,
  ) {
    return _g_socket_condition_check(
      socket,
      condition,
    );
  }

  late final _g_socket_condition_checkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocket>, ffi.Int32)>>(
      'g_socket_condition_check');
  late final _g_socket_condition_check = _g_socket_condition_checkPtr
      .asFunction<int Function(ffi.Pointer<GSocket>, int)>();

  int g_socket_condition_wait(
    ffi.Pointer<GSocket> socket,
    int condition,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_condition_wait(
      socket,
      condition,
      cancellable,
      error,
    );
  }

  late final _g_socket_condition_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSocket>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_condition_wait');
  late final _g_socket_condition_wait = _g_socket_condition_waitPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, int, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_condition_timed_wait(
    ffi.Pointer<GSocket> socket,
    int condition,
    int timeout_us,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_condition_timed_wait(
      socket,
      condition,
      timeout_us,
      cancellable,
      error,
    );
  }

  late final _g_socket_condition_timed_waitPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocket>,
                  ffi.Int32,
                  gint64,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_condition_timed_wait');
  late final _g_socket_condition_timed_wait =
      _g_socket_condition_timed_waitPtr.asFunction<
          int Function(ffi.Pointer<GSocket>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocket> g_socket_accept(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_accept(
      socket,
      cancellable,
      error,
    );
  }

  late final _g_socket_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocket> Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_accept');
  late final _g_socket_accept = _g_socket_acceptPtr.asFunction<
      ffi.Pointer<GSocket> Function(ffi.Pointer<GSocket>,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_listen(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listen(
      socket,
      error,
    );
  }

  late final _g_socket_listenPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_listen');
  late final _g_socket_listen = _g_socket_listenPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_receive(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<gchar> buffer,
    int size,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_receive(
      socket,
      buffer,
      size,
      cancellable,
      error,
    );
  }

  late final _g_socket_receivePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_receive');
  late final _g_socket_receive = _g_socket_receivePtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<gchar>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_receive_from(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GSocketAddress>> address,
    ffi.Pointer<gchar> buffer,
    int size,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_receive_from(
      socket,
      address,
      buffer,
      size,
      cancellable,
      error,
    );
  }

  late final _g_socket_receive_fromPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GSocketAddress>>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_receive_from');
  late final _g_socket_receive_from = _g_socket_receive_fromPtr.asFunction<
      int Function(
          ffi.Pointer<GSocket>,
          ffi.Pointer<ffi.Pointer<GSocketAddress>>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<gchar> buffer,
    int size,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send(
      socket,
      buffer,
      size,
      cancellable,
      error,
    );
  }

  late final _g_socket_sendPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_send');
  late final _g_socket_send = _g_socket_sendPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<gchar>, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send_to(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<gchar> buffer,
    int size,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send_to(
      socket,
      address,
      buffer,
      size,
      cancellable,
      error,
    );
  }

  late final _g_socket_send_toPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<gchar>,
              gsize,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_send_to');
  late final _g_socket_send_to = _g_socket_send_toPtr.asFunction<
      int Function(
          ffi.Pointer<GSocket>,
          ffi.Pointer<GSocketAddress>,
          ffi.Pointer<gchar>,
          int,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_receive_message(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GSocketAddress>> address,
    ffi.Pointer<GInputVector> vectors,
    int num_vectors,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<GSocketControlMessage>>> messages,
    ffi.Pointer<gint> num_messages,
    ffi.Pointer<gint> flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_receive_message(
      socket,
      address,
      vectors,
      num_vectors,
      messages,
      num_messages,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_socket_receive_messagePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GSocketAddress>>,
              ffi.Pointer<GInputVector>,
              gint,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<GSocketControlMessage>>>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_receive_message');
  late final _g_socket_receive_message =
      _g_socket_receive_messagePtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GSocketAddress>>,
              ffi.Pointer<GInputVector>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<GSocketControlMessage>>>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send_message(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<GOutputVector> vectors,
    int num_vectors,
    ffi.Pointer<ffi.Pointer<GSocketControlMessage>> messages,
    int num_messages,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send_message(
      socket,
      address,
      vectors,
      num_vectors,
      messages,
      num_messages,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_socket_send_messagePtr = _lookup<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GOutputVector>,
              gint,
              ffi.Pointer<ffi.Pointer<GSocketControlMessage>>,
              gint,
              gint,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_send_message');
  late final _g_socket_send_message = _g_socket_send_messagePtr.asFunction<
      int Function(
          ffi.Pointer<GSocket>,
          ffi.Pointer<GSocketAddress>,
          ffi.Pointer<GOutputVector>,
          int,
          ffi.Pointer<ffi.Pointer<GSocketControlMessage>>,
          int,
          int,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_receive_messages(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GInputMessage> messages,
    int num_messages,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_receive_messages(
      socket,
      messages,
      num_messages,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_socket_receive_messagesPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GInputMessage>,
              guint,
              gint,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_receive_messages');
  late final _g_socket_receive_messages =
      _g_socket_receive_messagesPtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GInputMessage>,
              int,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send_messages(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GOutputMessage> messages,
    int num_messages,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send_messages(
      socket,
      messages,
      num_messages,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_socket_send_messagesPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GOutputMessage>,
              guint,
              gint,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_send_messages');
  late final _g_socket_send_messages = _g_socket_send_messagesPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<GOutputMessage>, int, int,
          ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_close(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_close(
      socket,
      error,
    );
  }

  late final _g_socket_closePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_close');
  late final _g_socket_close = _g_socket_closePtr.asFunction<
      int Function(ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_shutdown(
    ffi.Pointer<GSocket> socket,
    int shutdown_read,
    int shutdown_write,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_shutdown(
      socket,
      shutdown_read,
      shutdown_write,
      error,
    );
  }

  late final _g_socket_shutdownPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>, gboolean, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_shutdown');
  late final _g_socket_shutdown = _g_socket_shutdownPtr.asFunction<
      int Function(
          ffi.Pointer<GSocket>, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_is_closed(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_is_closed(
      socket,
    );
  }

  late final _g_socket_is_closedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_is_closed');
  late final _g_socket_is_closed =
      _g_socket_is_closedPtr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  ffi.Pointer<GSource> g_socket_create_source(
    ffi.Pointer<GSocket> socket,
    int condition,
    ffi.Pointer<GCancellable> cancellable,
  ) {
    return _g_socket_create_source(
      socket,
      condition,
      cancellable,
    );
  }

  late final _g_socket_create_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GSocket>, ffi.Int32,
              ffi.Pointer<GCancellable>)>>('g_socket_create_source');
  late final _g_socket_create_source = _g_socket_create_sourcePtr.asFunction<
      ffi.Pointer<GSource> Function(
          ffi.Pointer<GSocket>, int, ffi.Pointer<GCancellable>)>();

  int g_socket_speaks_ipv4(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_speaks_ipv4(
      socket,
    );
  }

  late final _g_socket_speaks_ipv4Ptr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocket>)>>(
          'g_socket_speaks_ipv4');
  late final _g_socket_speaks_ipv4 =
      _g_socket_speaks_ipv4Ptr.asFunction<int Function(ffi.Pointer<GSocket>)>();

  ffi.Pointer<GCredentials> g_socket_get_credentials(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_get_credentials(
      socket,
      error,
    );
  }

  late final _g_socket_get_credentialsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GCredentials> Function(ffi.Pointer<GSocket>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_get_credentials');
  late final _g_socket_get_credentials =
      _g_socket_get_credentialsPtr.asFunction<
          ffi.Pointer<GCredentials> Function(
              ffi.Pointer<GSocket>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_receive_with_blocking(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<gchar> buffer,
    int size,
    int blocking,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_receive_with_blocking(
      socket,
      buffer,
      size,
      blocking,
      cancellable,
      error,
    );
  }

  late final _g_socket_receive_with_blockingPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<gchar>,
                  gsize,
                  gboolean,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_receive_with_blocking');
  late final _g_socket_receive_with_blocking =
      _g_socket_receive_with_blockingPtr.asFunction<
          int Function(ffi.Pointer<GSocket>, ffi.Pointer<gchar>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send_with_blocking(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<gchar> buffer,
    int size,
    int blocking,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send_with_blocking(
      socket,
      buffer,
      size,
      blocking,
      cancellable,
      error,
    );
  }

  late final _g_socket_send_with_blockingPtr = _lookup<
          ffi.NativeFunction<
              gssize Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<gchar>,
                  gsize,
                  gboolean,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_send_with_blocking');
  late final _g_socket_send_with_blocking =
      _g_socket_send_with_blockingPtr.asFunction<
          int Function(ffi.Pointer<GSocket>, ffi.Pointer<gchar>, int, int,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_send_message_with_timeout(
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<GOutputVector> vectors,
    int num_vectors,
    ffi.Pointer<ffi.Pointer<GSocketControlMessage>> messages,
    int num_messages,
    int flags,
    int timeout_us,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_send_message_with_timeout(
      socket,
      address,
      vectors,
      num_vectors,
      messages,
      num_messages,
      flags,
      timeout_us,
      bytes_written,
      cancellable,
      error,
    );
  }

  late final _g_socket_send_message_with_timeoutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GSocketAddress>,
                  ffi.Pointer<GOutputVector>,
                  gint,
                  ffi.Pointer<ffi.Pointer<GSocketControlMessage>>,
                  gint,
                  gint,
                  gint64,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_send_message_with_timeout');
  late final _g_socket_send_message_with_timeout =
      _g_socket_send_message_with_timeoutPtr.asFunction<
          int Function(
              ffi.Pointer<GSocket>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GOutputVector>,
              int,
              ffi.Pointer<ffi.Pointer<GSocketControlMessage>>,
              int,
              int,
              int,
              ffi.Pointer<gsize>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_get_option(
    ffi.Pointer<GSocket> socket,
    int level,
    int optname,
    ffi.Pointer<gint> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_get_option(
      socket,
      level,
      optname,
      value,
      error,
    );
  }

  late final _g_socket_get_optionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>, gint, gint, ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_get_option');
  late final _g_socket_get_option = _g_socket_get_optionPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, int, int, ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_set_option(
    ffi.Pointer<GSocket> socket,
    int level,
    int optname,
    int value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_set_option(
      socket,
      level,
      optname,
      value,
      error,
    );
  }

  late final _g_socket_set_optionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSocket>, gint, gint, gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_set_option');
  late final _g_socket_set_option = _g_socket_set_optionPtr.asFunction<
      int Function(ffi.Pointer<GSocket>, int, int, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_client_get_type() {
    return _g_socket_client_get_type();
  }

  late final _g_socket_client_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_socket_client_get_type');
  late final _g_socket_client_get_type =
      _g_socket_client_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketClient> g_socket_client_new() {
    return _g_socket_client_new();
  }

  late final _g_socket_client_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSocketClient> Function()>>(
          'g_socket_client_new');
  late final _g_socket_client_new = _g_socket_client_newPtr
      .asFunction<ffi.Pointer<GSocketClient> Function()>();

  int g_socket_client_get_family(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_family(
      client,
    );
  }

  late final _g_socket_client_get_familyPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_family');
  late final _g_socket_client_get_family = _g_socket_client_get_familyPtr
      .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_family(
    ffi.Pointer<GSocketClient> client,
    int family,
  ) {
    return _g_socket_client_set_family(
      client,
      family,
    );
  }

  late final _g_socket_client_set_familyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              ffi.Int32)>>('g_socket_client_set_family');
  late final _g_socket_client_set_family = _g_socket_client_set_familyPtr
      .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  int g_socket_client_get_socket_type(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_socket_type(
      client,
    );
  }

  late final _g_socket_client_get_socket_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_socket_type');
  late final _g_socket_client_get_socket_type =
      _g_socket_client_get_socket_typePtr
          .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_socket_type(
    ffi.Pointer<GSocketClient> client,
    int type,
  ) {
    return _g_socket_client_set_socket_type(
      client,
      type,
    );
  }

  late final _g_socket_client_set_socket_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              ffi.Int32)>>('g_socket_client_set_socket_type');
  late final _g_socket_client_set_socket_type =
      _g_socket_client_set_socket_typePtr
          .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  int g_socket_client_get_protocol(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_protocol(
      client,
    );
  }

  late final _g_socket_client_get_protocolPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_protocol');
  late final _g_socket_client_get_protocol = _g_socket_client_get_protocolPtr
      .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_protocol(
    ffi.Pointer<GSocketClient> client,
    int protocol,
  ) {
    return _g_socket_client_set_protocol(
      client,
      protocol,
    );
  }

  late final _g_socket_client_set_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              ffi.Int32)>>('g_socket_client_set_protocol');
  late final _g_socket_client_set_protocol = _g_socket_client_set_protocolPtr
      .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  ffi.Pointer<GSocketAddress> g_socket_client_get_local_address(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_local_address(
      client,
    );
  }

  late final _g_socket_client_get_local_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_local_address');
  late final _g_socket_client_get_local_address =
      _g_socket_client_get_local_addressPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_local_address(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GSocketAddress> address,
  ) {
    return _g_socket_client_set_local_address(
      client,
      address,
    );
  }

  late final _g_socket_client_set_local_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSocketClient>, ffi.Pointer<GSocketAddress>)>>(
      'g_socket_client_set_local_address');
  late final _g_socket_client_set_local_address =
      _g_socket_client_set_local_addressPtr.asFunction<
          void Function(
              ffi.Pointer<GSocketClient>, ffi.Pointer<GSocketAddress>)>();

  int g_socket_client_get_timeout(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_timeout(
      client,
    );
  }

  late final _g_socket_client_get_timeoutPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSocketClient>)>>(
          'g_socket_client_get_timeout');
  late final _g_socket_client_get_timeout = _g_socket_client_get_timeoutPtr
      .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_timeout(
    ffi.Pointer<GSocketClient> client,
    int timeout,
  ) {
    return _g_socket_client_set_timeout(
      client,
      timeout,
    );
  }

  late final _g_socket_client_set_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              guint)>>('g_socket_client_set_timeout');
  late final _g_socket_client_set_timeout = _g_socket_client_set_timeoutPtr
      .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  int g_socket_client_get_enable_proxy(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_enable_proxy(
      client,
    );
  }

  late final _g_socket_client_get_enable_proxyPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_enable_proxy');
  late final _g_socket_client_get_enable_proxy =
      _g_socket_client_get_enable_proxyPtr
          .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_enable_proxy(
    ffi.Pointer<GSocketClient> client,
    int enable,
  ) {
    return _g_socket_client_set_enable_proxy(
      client,
      enable,
    );
  }

  late final _g_socket_client_set_enable_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              gboolean)>>('g_socket_client_set_enable_proxy');
  late final _g_socket_client_set_enable_proxy =
      _g_socket_client_set_enable_proxyPtr
          .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  int g_socket_client_get_tls(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_tls(
      client,
    );
  }

  late final _g_socket_client_get_tlsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_tls');
  late final _g_socket_client_get_tls = _g_socket_client_get_tlsPtr
      .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_tls(
    ffi.Pointer<GSocketClient> client,
    int tls,
  ) {
    return _g_socket_client_set_tls(
      client,
      tls,
    );
  }

  late final _g_socket_client_set_tlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              gboolean)>>('g_socket_client_set_tls');
  late final _g_socket_client_set_tls = _g_socket_client_set_tlsPtr
      .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  int g_socket_client_get_tls_validation_flags(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_tls_validation_flags(
      client,
    );
  }

  late final _g_socket_client_get_tls_validation_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_tls_validation_flags');
  late final _g_socket_client_get_tls_validation_flags =
      _g_socket_client_get_tls_validation_flagsPtr
          .asFunction<int Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_tls_validation_flags(
    ffi.Pointer<GSocketClient> client,
    int flags,
  ) {
    return _g_socket_client_set_tls_validation_flags(
      client,
      flags,
    );
  }

  late final _g_socket_client_set_tls_validation_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              ffi.Int32)>>('g_socket_client_set_tls_validation_flags');
  late final _g_socket_client_set_tls_validation_flags =
      _g_socket_client_set_tls_validation_flagsPtr
          .asFunction<void Function(ffi.Pointer<GSocketClient>, int)>();

  ffi.Pointer<GProxyResolver> g_socket_client_get_proxy_resolver(
    ffi.Pointer<GSocketClient> client,
  ) {
    return _g_socket_client_get_proxy_resolver(
      client,
    );
  }

  late final _g_socket_client_get_proxy_resolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GProxyResolver> Function(
                  ffi.Pointer<GSocketClient>)>>(
      'g_socket_client_get_proxy_resolver');
  late final _g_socket_client_get_proxy_resolver =
      _g_socket_client_get_proxy_resolverPtr.asFunction<
          ffi.Pointer<GProxyResolver> Function(ffi.Pointer<GSocketClient>)>();

  void g_socket_client_set_proxy_resolver(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GProxyResolver> proxy_resolver,
  ) {
    return _g_socket_client_set_proxy_resolver(
      client,
      proxy_resolver,
    );
  }

  late final _g_socket_client_set_proxy_resolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSocketClient>, ffi.Pointer<GProxyResolver>)>>(
      'g_socket_client_set_proxy_resolver');
  late final _g_socket_client_set_proxy_resolver =
      _g_socket_client_set_proxy_resolverPtr.asFunction<
          void Function(
              ffi.Pointer<GSocketClient>, ffi.Pointer<GProxyResolver>)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GSocketConnectable> connectable,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect(
      client,
      connectable,
      cancellable,
      error,
    );
  }

  late final _g_socket_client_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_client_connect');
  late final _g_socket_client_connect = _g_socket_client_connectPtr.asFunction<
      ffi.Pointer<GSocketConnection> Function(
          ffi.Pointer<GSocketClient>,
          ffi.Pointer<GSocketConnectable>,
          ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_host(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> host_and_port,
    int default_port,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_host(
      client,
      host_and_port,
      default_port,
      cancellable,
      error,
    );
  }

  late final _g_socket_client_connect_to_hostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<gchar>,
                  guint16,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_host');
  late final _g_socket_client_connect_to_host =
      _g_socket_client_connect_to_hostPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_service(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> service,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_service(
      client,
      domain,
      service,
      cancellable,
      error,
    );
  }

  late final _g_socket_client_connect_to_servicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_service');
  late final _g_socket_client_connect_to_service =
      _g_socket_client_connect_to_servicePtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_uri(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> uri,
    int default_port,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_uri(
      client,
      uri,
      default_port,
      cancellable,
      error,
    );
  }

  late final _g_socket_client_connect_to_uriPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<gchar>,
                  guint16,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_uri');
  late final _g_socket_client_connect_to_uri =
      _g_socket_client_connect_to_uriPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_client_connect_async(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GSocketConnectable> connectable,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_client_connect_async(
      client,
      connectable,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_client_connect_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_client_connect_async');
  late final _g_socket_client_connect_async =
      _g_socket_client_connect_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_finish(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_finish(
      client,
      result,
      error,
    );
  }

  late final _g_socket_client_connect_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_finish');
  late final _g_socket_client_connect_finish =
      _g_socket_client_connect_finishPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocketClient>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_client_connect_to_host_async(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> host_and_port,
    int default_port,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_client_connect_to_host_async(
      client,
      host_and_port,
      default_port,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_client_connect_to_host_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              guint16,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_client_connect_to_host_async');
  late final _g_socket_client_connect_to_host_async =
      _g_socket_client_connect_to_host_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSocketClient>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_host_finish(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_host_finish(
      client,
      result,
      error,
    );
  }

  late final _g_socket_client_connect_to_host_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_host_finish');
  late final _g_socket_client_connect_to_host_finish =
      _g_socket_client_connect_to_host_finishPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocketClient>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_client_connect_to_service_async(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> domain,
    ffi.Pointer<gchar> service,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_client_connect_to_service_async(
      client,
      domain,
      service,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_client_connect_to_service_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_client_connect_to_service_async');
  late final _g_socket_client_connect_to_service_async =
      _g_socket_client_connect_to_service_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_service_finish(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_service_finish(
      client,
      result,
      error,
    );
  }

  late final _g_socket_client_connect_to_service_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_service_finish');
  late final _g_socket_client_connect_to_service_finish =
      _g_socket_client_connect_to_service_finishPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocketClient>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_client_connect_to_uri_async(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> uri,
    int default_port,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_client_connect_to_uri_async(
      client,
      uri,
      default_port,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_client_connect_to_uri_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>,
              guint16,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_client_connect_to_uri_async');
  late final _g_socket_client_connect_to_uri_async =
      _g_socket_client_connect_to_uri_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSocketClient>, ffi.Pointer<gchar>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GSocketConnection> g_socket_client_connect_to_uri_finish(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_client_connect_to_uri_finish(
      client,
      result,
      error,
    );
  }

  late final _g_socket_client_connect_to_uri_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketClient>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_client_connect_to_uri_finish');
  late final _g_socket_client_connect_to_uri_finish =
      _g_socket_client_connect_to_uri_finishPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocketClient>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_client_add_application_proxy(
    ffi.Pointer<GSocketClient> client,
    ffi.Pointer<gchar> protocol,
  ) {
    return _g_socket_client_add_application_proxy(
      client,
      protocol,
    );
  }

  late final _g_socket_client_add_application_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketClient>,
              ffi.Pointer<gchar>)>>('g_socket_client_add_application_proxy');
  late final _g_socket_client_add_application_proxy =
      _g_socket_client_add_application_proxyPtr.asFunction<
          void Function(ffi.Pointer<GSocketClient>, ffi.Pointer<gchar>)>();

  int g_socket_connectable_get_type() {
    return _g_socket_connectable_get_type();
  }

  late final _g_socket_connectable_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_connectable_get_type');
  late final _g_socket_connectable_get_type =
      _g_socket_connectable_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketAddressEnumerator> g_socket_connectable_enumerate(
    ffi.Pointer<GSocketConnectable> connectable,
  ) {
    return _g_socket_connectable_enumerate(
      connectable,
    );
  }

  late final _g_socket_connectable_enumeratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddressEnumerator> Function(
                  ffi.Pointer<GSocketConnectable>)>>(
      'g_socket_connectable_enumerate');
  late final _g_socket_connectable_enumerate =
      _g_socket_connectable_enumeratePtr.asFunction<
          ffi.Pointer<GSocketAddressEnumerator> Function(
              ffi.Pointer<GSocketConnectable>)>();

  ffi.Pointer<GSocketAddressEnumerator> g_socket_connectable_proxy_enumerate(
    ffi.Pointer<GSocketConnectable> connectable,
  ) {
    return _g_socket_connectable_proxy_enumerate(
      connectable,
    );
  }

  late final _g_socket_connectable_proxy_enumeratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddressEnumerator> Function(
                  ffi.Pointer<GSocketConnectable>)>>(
      'g_socket_connectable_proxy_enumerate');
  late final _g_socket_connectable_proxy_enumerate =
      _g_socket_connectable_proxy_enumeratePtr.asFunction<
          ffi.Pointer<GSocketAddressEnumerator> Function(
              ffi.Pointer<GSocketConnectable>)>();

  ffi.Pointer<gchar> g_socket_connectable_to_string(
    ffi.Pointer<GSocketConnectable> connectable,
  ) {
    return _g_socket_connectable_to_string(
      connectable,
    );
  }

  late final _g_socket_connectable_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GSocketConnectable>)>>(
      'g_socket_connectable_to_string');
  late final _g_socket_connectable_to_string =
      _g_socket_connectable_to_stringPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSocketConnectable>)>();

  int g_socket_connection_get_type() {
    return _g_socket_connection_get_type();
  }

  late final _g_socket_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_connection_get_type');
  late final _g_socket_connection_get_type =
      _g_socket_connection_get_typePtr.asFunction<int Function()>();

  int g_socket_connection_is_connected(
    ffi.Pointer<GSocketConnection> connection,
  ) {
    return _g_socket_connection_is_connected(
      connection,
    );
  }

  late final _g_socket_connection_is_connectedPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GSocketConnection>)>>(
      'g_socket_connection_is_connected');
  late final _g_socket_connection_is_connected =
      _g_socket_connection_is_connectedPtr
          .asFunction<int Function(ffi.Pointer<GSocketConnection>)>();

  int g_socket_connection_connect(
    ffi.Pointer<GSocketConnection> connection,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_connection_connect(
      connection,
      address,
      cancellable,
      error,
    );
  }

  late final _g_socket_connection_connectPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocketConnection>,
                  ffi.Pointer<GSocketAddress>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_connection_connect');
  late final _g_socket_connection_connect =
      _g_socket_connection_connectPtr.asFunction<
          int Function(
              ffi.Pointer<GSocketConnection>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_connection_connect_async(
    ffi.Pointer<GSocketConnection> connection,
    ffi.Pointer<GSocketAddress> address,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_connection_connect_async(
      connection,
      address,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_connection_connect_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketConnection>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_connection_connect_async');
  late final _g_socket_connection_connect_async =
      _g_socket_connection_connect_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GSocketConnection>,
              ffi.Pointer<GSocketAddress>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_socket_connection_connect_finish(
    ffi.Pointer<GSocketConnection> connection,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_connection_connect_finish(
      connection,
      result,
      error,
    );
  }

  late final _g_socket_connection_connect_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocketConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_connection_connect_finish');
  late final _g_socket_connection_connect_finish =
      _g_socket_connection_connect_finishPtr.asFunction<
          int Function(ffi.Pointer<GSocketConnection>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocket> g_socket_connection_get_socket(
    ffi.Pointer<GSocketConnection> connection,
  ) {
    return _g_socket_connection_get_socket(
      connection,
    );
  }

  late final _g_socket_connection_get_socketPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocket> Function(ffi.Pointer<GSocketConnection>)>>(
      'g_socket_connection_get_socket');
  late final _g_socket_connection_get_socket =
      _g_socket_connection_get_socketPtr.asFunction<
          ffi.Pointer<GSocket> Function(ffi.Pointer<GSocketConnection>)>();

  ffi.Pointer<GSocketAddress> g_socket_connection_get_local_address(
    ffi.Pointer<GSocketConnection> connection,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_connection_get_local_address(
      connection,
      error,
    );
  }

  late final _g_socket_connection_get_local_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocketConnection>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_connection_get_local_address');
  late final _g_socket_connection_get_local_address =
      _g_socket_connection_get_local_addressPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<GSocketConnection>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketAddress> g_socket_connection_get_remote_address(
    ffi.Pointer<GSocketConnection> connection,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_connection_get_remote_address(
      connection,
      error,
    );
  }

  late final _g_socket_connection_get_remote_addressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketAddress> Function(
                  ffi.Pointer<GSocketConnection>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_connection_get_remote_address');
  late final _g_socket_connection_get_remote_address =
      _g_socket_connection_get_remote_addressPtr.asFunction<
          ffi.Pointer<GSocketAddress> Function(ffi.Pointer<GSocketConnection>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_connection_factory_register_type(
    int g_type,
    int family,
    int type,
    int protocol,
  ) {
    return _g_socket_connection_factory_register_type(
      g_type,
      family,
      type,
      protocol,
    );
  }

  late final _g_socket_connection_factory_register_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Int32, ffi.Int32,
              gint)>>('g_socket_connection_factory_register_type');
  late final _g_socket_connection_factory_register_type =
      _g_socket_connection_factory_register_typePtr
          .asFunction<void Function(int, int, int, int)>();

  int g_socket_connection_factory_lookup_type(
    int family,
    int type,
    int protocol_id,
  ) {
    return _g_socket_connection_factory_lookup_type(
      family,
      type,
      protocol_id,
    );
  }

  late final _g_socket_connection_factory_lookup_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Int32, ffi.Int32, gint)>>(
          'g_socket_connection_factory_lookup_type');
  late final _g_socket_connection_factory_lookup_type =
      _g_socket_connection_factory_lookup_typePtr
          .asFunction<int Function(int, int, int)>();

  ffi.Pointer<GSocketConnection> g_socket_connection_factory_create_connection(
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_socket_connection_factory_create_connection(
      socket,
    );
  }

  late final _g_socket_connection_factory_create_connectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocket>)>>(
      'g_socket_connection_factory_create_connection');
  late final _g_socket_connection_factory_create_connection =
      _g_socket_connection_factory_create_connectionPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GSocket>)>();

  int g_socket_control_message_get_type() {
    return _g_socket_control_message_get_type();
  }

  late final _g_socket_control_message_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_control_message_get_type');
  late final _g_socket_control_message_get_type =
      _g_socket_control_message_get_typePtr.asFunction<int Function()>();

  int g_socket_control_message_get_size(
    ffi.Pointer<GSocketControlMessage> message,
  ) {
    return _g_socket_control_message_get_size(
      message,
    );
  }

  late final _g_socket_control_message_get_sizePtr = _lookup<
          ffi
          .NativeFunction<gsize Function(ffi.Pointer<GSocketControlMessage>)>>(
      'g_socket_control_message_get_size');
  late final _g_socket_control_message_get_size =
      _g_socket_control_message_get_sizePtr
          .asFunction<int Function(ffi.Pointer<GSocketControlMessage>)>();

  int g_socket_control_message_get_level(
    ffi.Pointer<GSocketControlMessage> message,
  ) {
    return _g_socket_control_message_get_level(
      message,
    );
  }

  late final _g_socket_control_message_get_levelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<GSocketControlMessage>)>>(
      'g_socket_control_message_get_level');
  late final _g_socket_control_message_get_level =
      _g_socket_control_message_get_levelPtr
          .asFunction<int Function(ffi.Pointer<GSocketControlMessage>)>();

  int g_socket_control_message_get_msg_type(
    ffi.Pointer<GSocketControlMessage> message,
  ) {
    return _g_socket_control_message_get_msg_type(
      message,
    );
  }

  late final _g_socket_control_message_get_msg_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<GSocketControlMessage>)>>(
      'g_socket_control_message_get_msg_type');
  late final _g_socket_control_message_get_msg_type =
      _g_socket_control_message_get_msg_typePtr
          .asFunction<int Function(ffi.Pointer<GSocketControlMessage>)>();

  void g_socket_control_message_serialize(
    ffi.Pointer<GSocketControlMessage> message,
    gpointer data,
  ) {
    return _g_socket_control_message_serialize(
      message,
      data,
    );
  }

  late final _g_socket_control_message_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketControlMessage>,
              gpointer)>>('g_socket_control_message_serialize');
  late final _g_socket_control_message_serialize =
      _g_socket_control_message_serializePtr.asFunction<
          void Function(ffi.Pointer<GSocketControlMessage>, gpointer)>();

  ffi.Pointer<GSocketControlMessage> g_socket_control_message_deserialize(
    int level,
    int type,
    int size,
    gpointer data,
  ) {
    return _g_socket_control_message_deserialize(
      level,
      type,
      size,
      data,
    );
  }

  late final _g_socket_control_message_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketControlMessage> Function(ffi.Int, ffi.Int, gsize,
              gpointer)>>('g_socket_control_message_deserialize');
  late final _g_socket_control_message_deserialize =
      _g_socket_control_message_deserializePtr.asFunction<
          ffi.Pointer<GSocketControlMessage> Function(
              int, int, int, gpointer)>();

  int g_socket_listener_get_type() {
    return _g_socket_listener_get_type();
  }

  late final _g_socket_listener_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_listener_get_type');
  late final _g_socket_listener_get_type =
      _g_socket_listener_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketListener> g_socket_listener_new() {
    return _g_socket_listener_new();
  }

  late final _g_socket_listener_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSocketListener> Function()>>(
          'g_socket_listener_new');
  late final _g_socket_listener_new = _g_socket_listener_newPtr
      .asFunction<ffi.Pointer<GSocketListener> Function()>();

  void g_socket_listener_set_backlog(
    ffi.Pointer<GSocketListener> listener,
    int listen_backlog,
  ) {
    return _g_socket_listener_set_backlog(
      listener,
      listen_backlog,
    );
  }

  late final _g_socket_listener_set_backlogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketListener>,
              ffi.Int)>>('g_socket_listener_set_backlog');
  late final _g_socket_listener_set_backlog = _g_socket_listener_set_backlogPtr
      .asFunction<void Function(ffi.Pointer<GSocketListener>, int)>();

  int g_socket_listener_add_socket(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GSocket> socket,
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_add_socket(
      listener,
      socket,
      source_object,
      error,
    );
  }

  late final _g_socket_listener_add_socketPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocketListener>,
                  ffi.Pointer<GSocket>,
                  ffi.Pointer<GObject>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_add_socket');
  late final _g_socket_listener_add_socket =
      _g_socket_listener_add_socketPtr.asFunction<
          int Function(ffi.Pointer<GSocketListener>, ffi.Pointer<GSocket>,
              ffi.Pointer<GObject>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_listener_add_address(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GSocketAddress> address,
    int type,
    int protocol,
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<ffi.Pointer<GSocketAddress>> effective_address,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_add_address(
      listener,
      address,
      type,
      protocol,
      source_object,
      effective_address,
      error,
    );
  }

  late final _g_socket_listener_add_addressPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSocketListener>,
                  ffi.Pointer<GSocketAddress>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<GObject>,
                  ffi.Pointer<ffi.Pointer<GSocketAddress>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_add_address');
  late final _g_socket_listener_add_address =
      _g_socket_listener_add_addressPtr.asFunction<
          int Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<GSocketAddress>,
              int,
              int,
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Pointer<GSocketAddress>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_listener_add_inet_port(
    ffi.Pointer<GSocketListener> listener,
    int port,
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_add_inet_port(
      listener,
      port,
      source_object,
      error,
    );
  }

  late final _g_socket_listener_add_inet_portPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GSocketListener>, guint16,
                  ffi.Pointer<GObject>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_add_inet_port');
  late final _g_socket_listener_add_inet_port =
      _g_socket_listener_add_inet_portPtr.asFunction<
          int Function(ffi.Pointer<GSocketListener>, int, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_socket_listener_add_any_inet_port(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_add_any_inet_port(
      listener,
      source_object,
      error,
    );
  }

  late final _g_socket_listener_add_any_inet_portPtr = _lookup<
          ffi.NativeFunction<
              guint16 Function(ffi.Pointer<GSocketListener>,
                  ffi.Pointer<GObject>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_add_any_inet_port');
  late final _g_socket_listener_add_any_inet_port =
      _g_socket_listener_add_any_inet_portPtr.asFunction<
          int Function(ffi.Pointer<GSocketListener>, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocket> g_socket_listener_accept_socket(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<ffi.Pointer<GObject>> source_object,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_accept_socket(
      listener,
      source_object,
      cancellable,
      error,
    );
  }

  late final _g_socket_listener_accept_socketPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocket> Function(
                  ffi.Pointer<GSocketListener>,
                  ffi.Pointer<ffi.Pointer<GObject>>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_accept_socket');
  late final _g_socket_listener_accept_socket =
      _g_socket_listener_accept_socketPtr.asFunction<
          ffi.Pointer<GSocket> Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_listener_accept_socket_async(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_listener_accept_socket_async(
      listener,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_listener_accept_socket_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_listener_accept_socket_async');
  late final _g_socket_listener_accept_socket_async =
      _g_socket_listener_accept_socket_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSocketListener>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GSocket> g_socket_listener_accept_socket_finish(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GObject>> source_object,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_accept_socket_finish(
      listener,
      result,
      source_object,
      error,
    );
  }

  late final _g_socket_listener_accept_socket_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocket> Function(
                  ffi.Pointer<GSocketListener>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GObject>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_accept_socket_finish');
  late final _g_socket_listener_accept_socket_finish =
      _g_socket_listener_accept_socket_finishPtr.asFunction<
          ffi.Pointer<GSocket> Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GSocketConnection> g_socket_listener_accept(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<ffi.Pointer<GObject>> source_object,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_accept(
      listener,
      source_object,
      cancellable,
      error,
    );
  }

  late final _g_socket_listener_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_socket_listener_accept');
  late final _g_socket_listener_accept =
      _g_socket_listener_acceptPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_listener_accept_async(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_socket_listener_accept_async(
      listener,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_socket_listener_accept_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_socket_listener_accept_async');
  late final _g_socket_listener_accept_async =
      _g_socket_listener_accept_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSocketListener>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  ffi.Pointer<GSocketConnection> g_socket_listener_accept_finish(
    ffi.Pointer<GSocketListener> listener,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GObject>> source_object,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_socket_listener_accept_finish(
      listener,
      result,
      source_object,
      error,
    );
  }

  late final _g_socket_listener_accept_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnection> Function(
                  ffi.Pointer<GSocketListener>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GObject>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_socket_listener_accept_finish');
  late final _g_socket_listener_accept_finish =
      _g_socket_listener_accept_finishPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GSocketListener>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_socket_listener_close(
    ffi.Pointer<GSocketListener> listener,
  ) {
    return _g_socket_listener_close(
      listener,
    );
  }

  late final _g_socket_listener_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocketListener>)>>(
      'g_socket_listener_close');
  late final _g_socket_listener_close = _g_socket_listener_closePtr
      .asFunction<void Function(ffi.Pointer<GSocketListener>)>();

  int g_socket_service_get_type() {
    return _g_socket_service_get_type();
  }

  late final _g_socket_service_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_socket_service_get_type');
  late final _g_socket_service_get_type =
      _g_socket_service_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketService> g_socket_service_new() {
    return _g_socket_service_new();
  }

  late final _g_socket_service_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSocketService> Function()>>(
          'g_socket_service_new');
  late final _g_socket_service_new = _g_socket_service_newPtr
      .asFunction<ffi.Pointer<GSocketService> Function()>();

  void g_socket_service_start(
    ffi.Pointer<GSocketService> service,
  ) {
    return _g_socket_service_start(
      service,
    );
  }

  late final _g_socket_service_startPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocketService>)>>(
      'g_socket_service_start');
  late final _g_socket_service_start = _g_socket_service_startPtr
      .asFunction<void Function(ffi.Pointer<GSocketService>)>();

  void g_socket_service_stop(
    ffi.Pointer<GSocketService> service,
  ) {
    return _g_socket_service_stop(
      service,
    );
  }

  late final _g_socket_service_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSocketService>)>>(
      'g_socket_service_stop');
  late final _g_socket_service_stop = _g_socket_service_stopPtr
      .asFunction<void Function(ffi.Pointer<GSocketService>)>();

  int g_socket_service_is_active(
    ffi.Pointer<GSocketService> service,
  ) {
    return _g_socket_service_is_active(
      service,
    );
  }

  late final _g_socket_service_is_activePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSocketService>)>>(
      'g_socket_service_is_active');
  late final _g_socket_service_is_active = _g_socket_service_is_activePtr
      .asFunction<int Function(ffi.Pointer<GSocketService>)>();

  int g_srv_target_get_type() {
    return _g_srv_target_get_type();
  }

  late final _g_srv_target_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_srv_target_get_type');
  late final _g_srv_target_get_type =
      _g_srv_target_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSrvTarget> g_srv_target_new(
    ffi.Pointer<gchar> hostname,
    int port,
    int priority,
    int weight,
  ) {
    return _g_srv_target_new(
      hostname,
      port,
      priority,
      weight,
    );
  }

  late final _g_srv_target_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSrvTarget> Function(ffi.Pointer<gchar>, guint16, guint16,
              guint16)>>('g_srv_target_new');
  late final _g_srv_target_new = _g_srv_target_newPtr.asFunction<
      ffi.Pointer<GSrvTarget> Function(ffi.Pointer<gchar>, int, int, int)>();

  ffi.Pointer<GSrvTarget> g_srv_target_copy(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_copy(
      target,
    );
  }

  late final _g_srv_target_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSrvTarget> Function(
              ffi.Pointer<GSrvTarget>)>>('g_srv_target_copy');
  late final _g_srv_target_copy = _g_srv_target_copyPtr
      .asFunction<ffi.Pointer<GSrvTarget> Function(ffi.Pointer<GSrvTarget>)>();

  void g_srv_target_free(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_free(
      target,
    );
  }

  late final _g_srv_target_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSrvTarget>)>>(
          'g_srv_target_free');
  late final _g_srv_target_free = _g_srv_target_freePtr
      .asFunction<void Function(ffi.Pointer<GSrvTarget>)>();

  ffi.Pointer<gchar> g_srv_target_get_hostname(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_get_hostname(
      target,
    );
  }

  late final _g_srv_target_get_hostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSrvTarget>)>>('g_srv_target_get_hostname');
  late final _g_srv_target_get_hostname = _g_srv_target_get_hostnamePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GSrvTarget>)>();

  int g_srv_target_get_port(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_get_port(
      target,
    );
  }

  late final _g_srv_target_get_portPtr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GSrvTarget>)>>(
          'g_srv_target_get_port');
  late final _g_srv_target_get_port = _g_srv_target_get_portPtr
      .asFunction<int Function(ffi.Pointer<GSrvTarget>)>();

  int g_srv_target_get_priority(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_get_priority(
      target,
    );
  }

  late final _g_srv_target_get_priorityPtr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GSrvTarget>)>>(
          'g_srv_target_get_priority');
  late final _g_srv_target_get_priority = _g_srv_target_get_priorityPtr
      .asFunction<int Function(ffi.Pointer<GSrvTarget>)>();

  int g_srv_target_get_weight(
    ffi.Pointer<GSrvTarget> target,
  ) {
    return _g_srv_target_get_weight(
      target,
    );
  }

  late final _g_srv_target_get_weightPtr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GSrvTarget>)>>(
          'g_srv_target_get_weight');
  late final _g_srv_target_get_weight = _g_srv_target_get_weightPtr
      .asFunction<int Function(ffi.Pointer<GSrvTarget>)>();

  ffi.Pointer<GList> g_srv_target_list_sort(
    ffi.Pointer<GList> targets,
  ) {
    return _g_srv_target_list_sort(
      targets,
    );
  }

  late final _g_srv_target_list_sortPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_srv_target_list_sort');
  late final _g_srv_target_list_sort = _g_srv_target_list_sortPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  int g_subprocess_get_type() {
    return _g_subprocess_get_type();
  }

  late final _g_subprocess_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_subprocess_get_type');
  late final _g_subprocess_get_type =
      _g_subprocess_get_typePtr.asFunction<int Function()>();

  /// Core API
  ffi.Pointer<GSubprocess> g_subprocess_new(
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> argv0,
  ) {
    return _g_subprocess_new(
      flags,
      error,
      argv0,
    );
  }

  late final _g_subprocess_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSubprocess> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_subprocess_new');
  late final _g_subprocess_new = _g_subprocess_newPtr.asFunction<
      ffi.Pointer<GSubprocess> Function(
          int, ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GSubprocess> g_subprocess_newv(
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_newv(
      argv,
      flags,
      error,
    );
  }

  late final _g_subprocess_newvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSubprocess> Function(
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_subprocess_newv');
  late final _g_subprocess_newv = _g_subprocess_newvPtr.asFunction<
      ffi.Pointer<GSubprocess> Function(ffi.Pointer<ffi.Pointer<gchar>>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GOutputStream> g_subprocess_get_stdin_pipe(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_stdin_pipe(
      subprocess,
    );
  }

  late final _g_subprocess_get_stdin_pipePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GSubprocess>)>>('g_subprocess_get_stdin_pipe');
  late final _g_subprocess_get_stdin_pipe =
      _g_subprocess_get_stdin_pipePtr.asFunction<
          ffi.Pointer<GOutputStream> Function(ffi.Pointer<GSubprocess>)>();

  ffi.Pointer<GInputStream> g_subprocess_get_stdout_pipe(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_stdout_pipe(
      subprocess,
    );
  }

  late final _g_subprocess_get_stdout_pipePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GSubprocess>)>>('g_subprocess_get_stdout_pipe');
  late final _g_subprocess_get_stdout_pipe =
      _g_subprocess_get_stdout_pipePtr.asFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GSubprocess>)>();

  ffi.Pointer<GInputStream> g_subprocess_get_stderr_pipe(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_stderr_pipe(
      subprocess,
    );
  }

  late final _g_subprocess_get_stderr_pipePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GSubprocess>)>>('g_subprocess_get_stderr_pipe');
  late final _g_subprocess_get_stderr_pipe =
      _g_subprocess_get_stderr_pipePtr.asFunction<
          ffi.Pointer<GInputStream> Function(ffi.Pointer<GSubprocess>)>();

  ffi.Pointer<gchar> g_subprocess_get_identifier(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_identifier(
      subprocess,
    );
  }

  late final _g_subprocess_get_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSubprocess>)>>('g_subprocess_get_identifier');
  late final _g_subprocess_get_identifier = _g_subprocess_get_identifierPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GSubprocess>)>();

  void g_subprocess_send_signal(
    ffi.Pointer<GSubprocess> subprocess,
    int signal_num,
  ) {
    return _g_subprocess_send_signal(
      subprocess,
      signal_num,
    );
  }

  late final _g_subprocess_send_signalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSubprocess>, gint)>>(
      'g_subprocess_send_signal');
  late final _g_subprocess_send_signal = _g_subprocess_send_signalPtr
      .asFunction<void Function(ffi.Pointer<GSubprocess>, int)>();

  void g_subprocess_force_exit(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_force_exit(
      subprocess,
    );
  }

  late final _g_subprocess_force_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_force_exit');
  late final _g_subprocess_force_exit = _g_subprocess_force_exitPtr
      .asFunction<void Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_wait(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_wait(
      subprocess,
      cancellable,
      error,
    );
  }

  late final _g_subprocess_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_subprocess_wait');
  late final _g_subprocess_wait = _g_subprocess_waitPtr.asFunction<
      int Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_subprocess_wait_async(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_subprocess_wait_async(
      subprocess,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_subprocess_wait_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_subprocess_wait_async');
  late final _g_subprocess_wait_async = _g_subprocess_wait_asyncPtr.asFunction<
      void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_subprocess_wait_finish(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_wait_finish(
      subprocess,
      result,
      error,
    );
  }

  late final _g_subprocess_wait_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_subprocess_wait_finish');
  late final _g_subprocess_wait_finish =
      _g_subprocess_wait_finishPtr.asFunction<
          int Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_subprocess_wait_check(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_wait_check(
      subprocess,
      cancellable,
      error,
    );
  }

  late final _g_subprocess_wait_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_subprocess_wait_check');
  late final _g_subprocess_wait_check = _g_subprocess_wait_checkPtr.asFunction<
      int Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_subprocess_wait_check_async(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_subprocess_wait_check_async(
      subprocess,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_subprocess_wait_check_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_subprocess_wait_check_async');
  late final _g_subprocess_wait_check_async =
      _g_subprocess_wait_check_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>();

  int g_subprocess_wait_check_finish(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_wait_check_finish(
      subprocess,
      result,
      error,
    );
  }

  late final _g_subprocess_wait_check_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSubprocess>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_subprocess_wait_check_finish');
  late final _g_subprocess_wait_check_finish =
      _g_subprocess_wait_check_finishPtr.asFunction<
          int Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_subprocess_get_status(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_status(
      subprocess,
    );
  }

  late final _g_subprocess_get_statusPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_status');
  late final _g_subprocess_get_status = _g_subprocess_get_statusPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_get_successful(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_successful(
      subprocess,
    );
  }

  late final _g_subprocess_get_successfulPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_successful');
  late final _g_subprocess_get_successful = _g_subprocess_get_successfulPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_get_if_exited(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_if_exited(
      subprocess,
    );
  }

  late final _g_subprocess_get_if_exitedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_if_exited');
  late final _g_subprocess_get_if_exited = _g_subprocess_get_if_exitedPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_get_exit_status(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_exit_status(
      subprocess,
    );
  }

  late final _g_subprocess_get_exit_statusPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_exit_status');
  late final _g_subprocess_get_exit_status = _g_subprocess_get_exit_statusPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_get_if_signaled(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_if_signaled(
      subprocess,
    );
  }

  late final _g_subprocess_get_if_signaledPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_if_signaled');
  late final _g_subprocess_get_if_signaled = _g_subprocess_get_if_signaledPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_get_term_sig(
    ffi.Pointer<GSubprocess> subprocess,
  ) {
    return _g_subprocess_get_term_sig(
      subprocess,
    );
  }

  late final _g_subprocess_get_term_sigPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSubprocess>)>>(
          'g_subprocess_get_term_sig');
  late final _g_subprocess_get_term_sig = _g_subprocess_get_term_sigPtr
      .asFunction<int Function(ffi.Pointer<GSubprocess>)>();

  int g_subprocess_communicate(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GBytes> stdin_buf,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GBytes>> stdout_buf,
    ffi.Pointer<ffi.Pointer<GBytes>> stderr_buf,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_communicate(
      subprocess,
      stdin_buf,
      cancellable,
      stdout_buf,
      stderr_buf,
      error,
    );
  }

  late final _g_subprocess_communicatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_subprocess_communicate');
  late final _g_subprocess_communicate =
      _g_subprocess_communicatePtr.asFunction<
          int Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_subprocess_communicate_async(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GBytes> stdin_buf,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_subprocess_communicate_async(
      subprocess,
      stdin_buf,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_subprocess_communicate_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_subprocess_communicate_async');
  late final _g_subprocess_communicate_async =
      _g_subprocess_communicate_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<GBytes>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_subprocess_communicate_finish(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GBytes>> stdout_buf,
    ffi.Pointer<ffi.Pointer<GBytes>> stderr_buf,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_communicate_finish(
      subprocess,
      result,
      stdout_buf,
      stderr_buf,
      error,
    );
  }

  late final _g_subprocess_communicate_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSubprocess>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GBytes>>,
                  ffi.Pointer<ffi.Pointer<GBytes>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_subprocess_communicate_finish');
  late final _g_subprocess_communicate_finish =
      _g_subprocess_communicate_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GBytes>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_subprocess_communicate_utf8(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<ffi.Char> stdin_buf,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stdout_buf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stderr_buf,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_communicate_utf8(
      subprocess,
      stdin_buf,
      cancellable,
      stdout_buf,
      stderr_buf,
      error,
    );
  }

  late final _g_subprocess_communicate_utf8Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSubprocess>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_subprocess_communicate_utf8');
  late final _g_subprocess_communicate_utf8 =
      _g_subprocess_communicate_utf8Ptr.asFunction<
          int Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_subprocess_communicate_utf8_async(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<ffi.Char> stdin_buf,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_subprocess_communicate_utf8_async(
      subprocess,
      stdin_buf,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_subprocess_communicate_utf8_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_subprocess_communicate_utf8_async');
  late final _g_subprocess_communicate_utf8_async =
      _g_subprocess_communicate_utf8_asyncPtr.asFunction<
          void Function(ffi.Pointer<GSubprocess>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_subprocess_communicate_utf8_finish(
    ffi.Pointer<GSubprocess> subprocess,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stdout_buf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stderr_buf,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_communicate_utf8_finish(
      subprocess,
      result,
      stdout_buf,
      stderr_buf,
      error,
    );
  }

  late final _g_subprocess_communicate_utf8_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSubprocess>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_subprocess_communicate_utf8_finish');
  late final _g_subprocess_communicate_utf8_finish =
      _g_subprocess_communicate_utf8_finishPtr.asFunction<
          int Function(
              ffi.Pointer<GSubprocess>,
              ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_subprocess_launcher_get_type() {
    return _g_subprocess_launcher_get_type();
  }

  late final _g_subprocess_launcher_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_subprocess_launcher_get_type');
  late final _g_subprocess_launcher_get_type =
      _g_subprocess_launcher_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSubprocessLauncher> g_subprocess_launcher_new(
    int flags,
  ) {
    return _g_subprocess_launcher_new(
      flags,
    );
  }

  late final _g_subprocess_launcher_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSubprocessLauncher> Function(
              ffi.Int32)>>('g_subprocess_launcher_new');
  late final _g_subprocess_launcher_new = _g_subprocess_launcher_newPtr
      .asFunction<ffi.Pointer<GSubprocessLauncher> Function(int)>();

  ffi.Pointer<GSubprocess> g_subprocess_launcher_spawn(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<ffi.Pointer<GError>> error,
    ffi.Pointer<gchar> argv0,
  ) {
    return _g_subprocess_launcher_spawn(
      self,
      error,
      argv0,
    );
  }

  late final _g_subprocess_launcher_spawnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSubprocess> Function(
              ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<gchar>)>>('g_subprocess_launcher_spawn');
  late final _g_subprocess_launcher_spawn =
      _g_subprocess_launcher_spawnPtr.asFunction<
          ffi.Pointer<GSubprocess> Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<gchar>)>();

  ffi.Pointer<GSubprocess> g_subprocess_launcher_spawnv(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<ffi.Pointer<gchar>> argv,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_subprocess_launcher_spawnv(
      self,
      argv,
      error,
    );
  }

  late final _g_subprocess_launcher_spawnvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSubprocess> Function(
                  ffi.Pointer<GSubprocessLauncher>,
                  ffi.Pointer<ffi.Pointer<gchar>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_subprocess_launcher_spawnv');
  late final _g_subprocess_launcher_spawnv =
      _g_subprocess_launcher_spawnvPtr.asFunction<
          ffi.Pointer<GSubprocess> Function(
              ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<ffi.Pointer<gchar>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_subprocess_launcher_set_environ(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<ffi.Pointer<gchar>> env,
  ) {
    return _g_subprocess_launcher_set_environ(
      self,
      env,
    );
  }

  late final _g_subprocess_launcher_set_environPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
                  ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_subprocess_launcher_set_environ');
  late final _g_subprocess_launcher_set_environ =
      _g_subprocess_launcher_set_environPtr.asFunction<
          void Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<ffi.Pointer<gchar>>)>();

  void g_subprocess_launcher_setenv(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> variable,
    ffi.Pointer<gchar> value,
    int overwrite,
  ) {
    return _g_subprocess_launcher_setenv(
      self,
      variable,
      value,
      overwrite,
    );
  }

  late final _g_subprocess_launcher_setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<gchar>,
              ffi.Pointer<gchar>,
              gboolean)>>('g_subprocess_launcher_setenv');
  late final _g_subprocess_launcher_setenv =
      _g_subprocess_launcher_setenvPtr.asFunction<
          void Function(ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, int)>();

  void g_subprocess_launcher_unsetenv(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> variable,
  ) {
    return _g_subprocess_launcher_unsetenv(
      self,
      variable,
    );
  }

  late final _g_subprocess_launcher_unsetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<gchar>)>>('g_subprocess_launcher_unsetenv');
  late final _g_subprocess_launcher_unsetenv =
      _g_subprocess_launcher_unsetenvPtr.asFunction<
          void Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_subprocess_launcher_getenv(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> variable,
  ) {
    return _g_subprocess_launcher_getenv(
      self,
      variable,
    );
  }

  late final _g_subprocess_launcher_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<gchar>)>>('g_subprocess_launcher_getenv');
  late final _g_subprocess_launcher_getenv =
      _g_subprocess_launcher_getenvPtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  void g_subprocess_launcher_set_cwd(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> cwd,
  ) {
    return _g_subprocess_launcher_set_cwd(
      self,
      cwd,
    );
  }

  late final _g_subprocess_launcher_set_cwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Pointer<gchar>)>>('g_subprocess_launcher_set_cwd');
  late final _g_subprocess_launcher_set_cwd =
      _g_subprocess_launcher_set_cwdPtr.asFunction<
          void Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  void g_subprocess_launcher_set_flags(
    ffi.Pointer<GSubprocessLauncher> self,
    int flags,
  ) {
    return _g_subprocess_launcher_set_flags(
      self,
      flags,
    );
  }

  late final _g_subprocess_launcher_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              ffi.Int32)>>('g_subprocess_launcher_set_flags');
  late final _g_subprocess_launcher_set_flags =
      _g_subprocess_launcher_set_flagsPtr
          .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>, int)>();

  void g_subprocess_launcher_set_stdin_file_path(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> path,
  ) {
    return _g_subprocess_launcher_set_stdin_file_path(
      self,
      path,
    );
  }

  late final _g_subprocess_launcher_set_stdin_file_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>>(
      'g_subprocess_launcher_set_stdin_file_path');
  late final _g_subprocess_launcher_set_stdin_file_path =
      _g_subprocess_launcher_set_stdin_file_pathPtr.asFunction<
          void Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  void g_subprocess_launcher_take_stdin_fd(
    ffi.Pointer<GSubprocessLauncher> self,
    int fd,
  ) {
    return _g_subprocess_launcher_take_stdin_fd(
      self,
      fd,
    );
  }

  late final _g_subprocess_launcher_take_stdin_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              gint)>>('g_subprocess_launcher_take_stdin_fd');
  late final _g_subprocess_launcher_take_stdin_fd =
      _g_subprocess_launcher_take_stdin_fdPtr
          .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>, int)>();

  void g_subprocess_launcher_set_stdout_file_path(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> path,
  ) {
    return _g_subprocess_launcher_set_stdout_file_path(
      self,
      path,
    );
  }

  late final _g_subprocess_launcher_set_stdout_file_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>>(
      'g_subprocess_launcher_set_stdout_file_path');
  late final _g_subprocess_launcher_set_stdout_file_path =
      _g_subprocess_launcher_set_stdout_file_pathPtr.asFunction<
          void Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  void g_subprocess_launcher_take_stdout_fd(
    ffi.Pointer<GSubprocessLauncher> self,
    int fd,
  ) {
    return _g_subprocess_launcher_take_stdout_fd(
      self,
      fd,
    );
  }

  late final _g_subprocess_launcher_take_stdout_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              gint)>>('g_subprocess_launcher_take_stdout_fd');
  late final _g_subprocess_launcher_take_stdout_fd =
      _g_subprocess_launcher_take_stdout_fdPtr
          .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>, int)>();

  void g_subprocess_launcher_set_stderr_file_path(
    ffi.Pointer<GSubprocessLauncher> self,
    ffi.Pointer<gchar> path,
  ) {
    return _g_subprocess_launcher_set_stderr_file_path(
      self,
      path,
    );
  }

  late final _g_subprocess_launcher_set_stderr_file_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>>(
      'g_subprocess_launcher_set_stderr_file_path');
  late final _g_subprocess_launcher_set_stderr_file_path =
      _g_subprocess_launcher_set_stderr_file_pathPtr.asFunction<
          void Function(
              ffi.Pointer<GSubprocessLauncher>, ffi.Pointer<gchar>)>();

  void g_subprocess_launcher_take_stderr_fd(
    ffi.Pointer<GSubprocessLauncher> self,
    int fd,
  ) {
    return _g_subprocess_launcher_take_stderr_fd(
      self,
      fd,
    );
  }

  late final _g_subprocess_launcher_take_stderr_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>,
              gint)>>('g_subprocess_launcher_take_stderr_fd');
  late final _g_subprocess_launcher_take_stderr_fd =
      _g_subprocess_launcher_take_stderr_fdPtr
          .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>, int)>();

  void g_subprocess_launcher_take_fd(
    ffi.Pointer<GSubprocessLauncher> self,
    int source_fd,
    int target_fd,
  ) {
    return _g_subprocess_launcher_take_fd(
      self,
      source_fd,
      target_fd,
    );
  }

  late final _g_subprocess_launcher_take_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSubprocessLauncher>, gint,
              gint)>>('g_subprocess_launcher_take_fd');
  late final _g_subprocess_launcher_take_fd = _g_subprocess_launcher_take_fdPtr
      .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>, int, int)>();

  void g_subprocess_launcher_close(
    ffi.Pointer<GSubprocessLauncher> self,
  ) {
    return _g_subprocess_launcher_close(
      self,
    );
  }

  late final _g_subprocess_launcher_closePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSubprocessLauncher>)>>(
      'g_subprocess_launcher_close');
  late final _g_subprocess_launcher_close = _g_subprocess_launcher_closePtr
      .asFunction<void Function(ffi.Pointer<GSubprocessLauncher>)>();

  void g_subprocess_launcher_set_child_setup(
    ffi.Pointer<GSubprocessLauncher> self,
    GSpawnChildSetupFunc child_setup,
    gpointer user_data,
    GDestroyNotify destroy_notify,
  ) {
    return _g_subprocess_launcher_set_child_setup(
      self,
      child_setup,
      user_data,
      destroy_notify,
    );
  }

  late final _g_subprocess_launcher_set_child_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSubprocessLauncher>,
              GSpawnChildSetupFunc,
              gpointer,
              GDestroyNotify)>>('g_subprocess_launcher_set_child_setup');
  late final _g_subprocess_launcher_set_child_setup =
      _g_subprocess_launcher_set_child_setupPtr.asFunction<
          void Function(ffi.Pointer<GSubprocessLauncher>, GSpawnChildSetupFunc,
              gpointer, GDestroyNotify)>();

  int g_task_get_type() {
    return _g_task_get_type();
  }

  late final _g_task_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_task_get_type');
  late final _g_task_get_type =
      _g_task_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTask> g_task_new(
    gpointer source_object,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer callback_data,
  ) {
    return _g_task_new(
      source_object,
      cancellable,
      callback,
      callback_data,
    );
  }

  late final _g_task_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTask> Function(gpointer, ffi.Pointer<GCancellable>,
              GAsyncReadyCallback, gpointer)>>('g_task_new');
  late final _g_task_new = _g_task_newPtr.asFunction<
      ffi.Pointer<GTask> Function(gpointer, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  void g_task_report_error(
    gpointer source_object,
    GAsyncReadyCallback callback,
    gpointer callback_data,
    gpointer source_tag,
    ffi.Pointer<GError> error,
  ) {
    return _g_task_report_error(
      source_object,
      callback,
      callback_data,
      source_tag,
      error,
    );
  }

  late final _g_task_report_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer, GAsyncReadyCallback, gpointer, gpointer,
              ffi.Pointer<GError>)>>('g_task_report_error');
  late final _g_task_report_error = _g_task_report_errorPtr.asFunction<
      void Function(gpointer, GAsyncReadyCallback, gpointer, gpointer,
          ffi.Pointer<GError>)>();

  void g_task_report_new_error(
    gpointer source_object,
    GAsyncReadyCallback callback,
    gpointer callback_data,
    gpointer source_tag,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_task_report_new_error(
      source_object,
      callback,
      callback_data,
      source_tag,
      domain,
      code,
      format,
    );
  }

  late final _g_task_report_new_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gpointer, GAsyncReadyCallback, gpointer, gpointer,
              GQuark, gint, ffi.Pointer<ffi.Char>)>>('g_task_report_new_error');
  late final _g_task_report_new_error = _g_task_report_new_errorPtr.asFunction<
      void Function(gpointer, GAsyncReadyCallback, gpointer, gpointer, int, int,
          ffi.Pointer<ffi.Char>)>();

  void g_task_set_task_data(
    ffi.Pointer<GTask> task,
    gpointer task_data,
    GDestroyNotify task_data_destroy,
  ) {
    return _g_task_set_task_data(
      task,
      task_data,
      task_data_destroy,
    );
  }

  late final _g_task_set_task_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTask>, gpointer,
              GDestroyNotify)>>('g_task_set_task_data');
  late final _g_task_set_task_data = _g_task_set_task_dataPtr.asFunction<
      void Function(ffi.Pointer<GTask>, gpointer, GDestroyNotify)>();

  void g_task_set_priority(
    ffi.Pointer<GTask> task,
    int priority,
  ) {
    return _g_task_set_priority(
      task,
      priority,
    );
  }

  late final _g_task_set_priorityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTask>, gint)>>(
          'g_task_set_priority');
  late final _g_task_set_priority = _g_task_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GTask>, int)>();

  void g_task_set_check_cancellable(
    ffi.Pointer<GTask> task,
    int check_cancellable,
  ) {
    return _g_task_set_check_cancellable(
      task,
      check_cancellable,
    );
  }

  late final _g_task_set_check_cancellablePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTask>, gboolean)>>(
      'g_task_set_check_cancellable');
  late final _g_task_set_check_cancellable = _g_task_set_check_cancellablePtr
      .asFunction<void Function(ffi.Pointer<GTask>, int)>();

  void g_task_set_source_tag(
    ffi.Pointer<GTask> task,
    gpointer source_tag,
  ) {
    return _g_task_set_source_tag(
      task,
      source_tag,
    );
  }

  late final _g_task_set_source_tagPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTask>, gpointer)>>(
      'g_task_set_source_tag');
  late final _g_task_set_source_tag = _g_task_set_source_tagPtr
      .asFunction<void Function(ffi.Pointer<GTask>, gpointer)>();

  void g_task_set_name(
    ffi.Pointer<GTask> task,
    ffi.Pointer<gchar> name,
  ) {
    return _g_task_set_name(
      task,
      name,
    );
  }

  late final _g_task_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTask>, ffi.Pointer<gchar>)>>('g_task_set_name');
  late final _g_task_set_name = _g_task_set_namePtr
      .asFunction<void Function(ffi.Pointer<GTask>, ffi.Pointer<gchar>)>();

  gpointer g_task_get_source_object(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_source_object(
      task,
    );
  }

  late final _g_task_get_source_objectPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GTask>)>>(
          'g_task_get_source_object');
  late final _g_task_get_source_object = _g_task_get_source_objectPtr
      .asFunction<gpointer Function(ffi.Pointer<GTask>)>();

  gpointer g_task_get_task_data(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_task_data(
      task,
    );
  }

  late final _g_task_get_task_dataPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GTask>)>>(
          'g_task_get_task_data');
  late final _g_task_get_task_data = _g_task_get_task_dataPtr
      .asFunction<gpointer Function(ffi.Pointer<GTask>)>();

  int g_task_get_priority(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_priority(
      task,
    );
  }

  late final _g_task_get_priorityPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GTask>)>>(
          'g_task_get_priority');
  late final _g_task_get_priority =
      _g_task_get_priorityPtr.asFunction<int Function(ffi.Pointer<GTask>)>();

  ffi.Pointer<GMainContext> g_task_get_context(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_context(
      task,
    );
  }

  late final _g_task_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GTask>)>>('g_task_get_context');
  late final _g_task_get_context = _g_task_get_contextPtr
      .asFunction<ffi.Pointer<GMainContext> Function(ffi.Pointer<GTask>)>();

  ffi.Pointer<GCancellable> g_task_get_cancellable(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_cancellable(
      task,
    );
  }

  late final _g_task_get_cancellablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GCancellable> Function(
              ffi.Pointer<GTask>)>>('g_task_get_cancellable');
  late final _g_task_get_cancellable = _g_task_get_cancellablePtr
      .asFunction<ffi.Pointer<GCancellable> Function(ffi.Pointer<GTask>)>();

  int g_task_get_check_cancellable(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_check_cancellable(
      task,
    );
  }

  late final _g_task_get_check_cancellablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>)>>(
          'g_task_get_check_cancellable');
  late final _g_task_get_check_cancellable = _g_task_get_check_cancellablePtr
      .asFunction<int Function(ffi.Pointer<GTask>)>();

  gpointer g_task_get_source_tag(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_source_tag(
      task,
    );
  }

  late final _g_task_get_source_tagPtr =
      _lookup<ffi.NativeFunction<gpointer Function(ffi.Pointer<GTask>)>>(
          'g_task_get_source_tag');
  late final _g_task_get_source_tag = _g_task_get_source_tagPtr
      .asFunction<gpointer Function(ffi.Pointer<GTask>)>();

  ffi.Pointer<gchar> g_task_get_name(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_name(
      task,
    );
  }

  late final _g_task_get_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTask>)>>(
      'g_task_get_name');
  late final _g_task_get_name = _g_task_get_namePtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTask>)>();

  int g_task_is_valid(
    gpointer result,
    gpointer source_object,
  ) {
    return _g_task_is_valid(
      result,
      source_object,
    );
  }

  late final _g_task_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gpointer, gpointer)>>(
          'g_task_is_valid');
  late final _g_task_is_valid =
      _g_task_is_validPtr.asFunction<int Function(gpointer, gpointer)>();

  void g_task_run_in_thread(
    ffi.Pointer<GTask> task,
    GTaskThreadFunc task_func,
  ) {
    return _g_task_run_in_thread(
      task,
      task_func,
    );
  }

  late final _g_task_run_in_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTask>, GTaskThreadFunc)>>('g_task_run_in_thread');
  late final _g_task_run_in_thread = _g_task_run_in_threadPtr
      .asFunction<void Function(ffi.Pointer<GTask>, GTaskThreadFunc)>();

  void g_task_run_in_thread_sync(
    ffi.Pointer<GTask> task,
    GTaskThreadFunc task_func,
  ) {
    return _g_task_run_in_thread_sync(
      task,
      task_func,
    );
  }

  late final _g_task_run_in_thread_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTask>,
              GTaskThreadFunc)>>('g_task_run_in_thread_sync');
  late final _g_task_run_in_thread_sync = _g_task_run_in_thread_syncPtr
      .asFunction<void Function(ffi.Pointer<GTask>, GTaskThreadFunc)>();

  int g_task_set_return_on_cancel(
    ffi.Pointer<GTask> task,
    int return_on_cancel,
  ) {
    return _g_task_set_return_on_cancel(
      task,
      return_on_cancel,
    );
  }

  late final _g_task_set_return_on_cancelPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>, gboolean)>>(
      'g_task_set_return_on_cancel');
  late final _g_task_set_return_on_cancel = _g_task_set_return_on_cancelPtr
      .asFunction<int Function(ffi.Pointer<GTask>, int)>();

  int g_task_get_return_on_cancel(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_return_on_cancel(
      task,
    );
  }

  late final _g_task_get_return_on_cancelPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>)>>(
          'g_task_get_return_on_cancel');
  late final _g_task_get_return_on_cancel = _g_task_get_return_on_cancelPtr
      .asFunction<int Function(ffi.Pointer<GTask>)>();

  void g_task_attach_source(
    ffi.Pointer<GTask> task,
    ffi.Pointer<GSource> source,
    GSourceFunc callback,
  ) {
    return _g_task_attach_source(
      task,
      source,
      callback,
    );
  }

  late final _g_task_attach_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTask>, ffi.Pointer<GSource>,
              GSourceFunc)>>('g_task_attach_source');
  late final _g_task_attach_source = _g_task_attach_sourcePtr.asFunction<
      void Function(ffi.Pointer<GTask>, ffi.Pointer<GSource>, GSourceFunc)>();

  void g_task_return_pointer(
    ffi.Pointer<GTask> task,
    gpointer result,
    GDestroyNotify result_destroy,
  ) {
    return _g_task_return_pointer(
      task,
      result,
      result_destroy,
    );
  }

  late final _g_task_return_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTask>, gpointer,
              GDestroyNotify)>>('g_task_return_pointer');
  late final _g_task_return_pointer = _g_task_return_pointerPtr.asFunction<
      void Function(ffi.Pointer<GTask>, gpointer, GDestroyNotify)>();

  void g_task_return_boolean(
    ffi.Pointer<GTask> task,
    int result,
  ) {
    return _g_task_return_boolean(
      task,
      result,
    );
  }

  late final _g_task_return_booleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTask>, gboolean)>>(
      'g_task_return_boolean');
  late final _g_task_return_boolean = _g_task_return_booleanPtr
      .asFunction<void Function(ffi.Pointer<GTask>, int)>();

  void g_task_return_int(
    ffi.Pointer<GTask> task,
    int result,
  ) {
    return _g_task_return_int(
      task,
      result,
    );
  }

  late final _g_task_return_intPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTask>, gssize)>>(
      'g_task_return_int');
  late final _g_task_return_int = _g_task_return_intPtr
      .asFunction<void Function(ffi.Pointer<GTask>, int)>();

  void g_task_return_error(
    ffi.Pointer<GTask> task,
    ffi.Pointer<GError> error,
  ) {
    return _g_task_return_error(
      task,
      error,
    );
  }

  late final _g_task_return_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTask>, ffi.Pointer<GError>)>>('g_task_return_error');
  late final _g_task_return_error = _g_task_return_errorPtr
      .asFunction<void Function(ffi.Pointer<GTask>, ffi.Pointer<GError>)>();

  void g_task_return_new_error(
    ffi.Pointer<GTask> task,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_task_return_new_error(
      task,
      domain,
      code,
      format,
    );
  }

  late final _g_task_return_new_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTask>, GQuark, gint,
              ffi.Pointer<ffi.Char>)>>('g_task_return_new_error');
  late final _g_task_return_new_error = _g_task_return_new_errorPtr.asFunction<
      void Function(ffi.Pointer<GTask>, int, int, ffi.Pointer<ffi.Char>)>();

  void g_task_return_value(
    ffi.Pointer<GTask> task,
    ffi.Pointer<GValue> result,
  ) {
    return _g_task_return_value(
      task,
      result,
    );
  }

  late final _g_task_return_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTask>, ffi.Pointer<GValue>)>>('g_task_return_value');
  late final _g_task_return_value = _g_task_return_valuePtr
      .asFunction<void Function(ffi.Pointer<GTask>, ffi.Pointer<GValue>)>();

  int g_task_return_error_if_cancelled(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_return_error_if_cancelled(
      task,
    );
  }

  late final _g_task_return_error_if_cancelledPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>)>>(
          'g_task_return_error_if_cancelled');
  late final _g_task_return_error_if_cancelled =
      _g_task_return_error_if_cancelledPtr
          .asFunction<int Function(ffi.Pointer<GTask>)>();

  gpointer g_task_propagate_pointer(
    ffi.Pointer<GTask> task,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_task_propagate_pointer(
      task,
      error,
    );
  }

  late final _g_task_propagate_pointerPtr = _lookup<
      ffi.NativeFunction<
          gpointer Function(ffi.Pointer<GTask>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_task_propagate_pointer');
  late final _g_task_propagate_pointer =
      _g_task_propagate_pointerPtr.asFunction<
          gpointer Function(
              ffi.Pointer<GTask>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_task_propagate_boolean(
    ffi.Pointer<GTask> task,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_task_propagate_boolean(
      task,
      error,
    );
  }

  late final _g_task_propagate_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTask>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_task_propagate_boolean');
  late final _g_task_propagate_boolean =
      _g_task_propagate_booleanPtr.asFunction<
          int Function(ffi.Pointer<GTask>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_task_propagate_int(
    ffi.Pointer<GTask> task,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_task_propagate_int(
      task,
      error,
    );
  }

  late final _g_task_propagate_intPtr = _lookup<
      ffi.NativeFunction<
          gssize Function(ffi.Pointer<GTask>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_task_propagate_int');
  late final _g_task_propagate_int = _g_task_propagate_intPtr.asFunction<
      int Function(ffi.Pointer<GTask>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_task_propagate_value(
    ffi.Pointer<GTask> task,
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_task_propagate_value(
      task,
      value,
      error,
    );
  }

  late final _g_task_propagate_valuePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTask>, ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_task_propagate_value');
  late final _g_task_propagate_value = _g_task_propagate_valuePtr.asFunction<
      int Function(ffi.Pointer<GTask>, ffi.Pointer<GValue>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_task_had_error(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_had_error(
      task,
    );
  }

  late final _g_task_had_errorPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>)>>(
          'g_task_had_error');
  late final _g_task_had_error =
      _g_task_had_errorPtr.asFunction<int Function(ffi.Pointer<GTask>)>();

  int g_task_get_completed(
    ffi.Pointer<GTask> task,
  ) {
    return _g_task_get_completed(
      task,
    );
  }

  late final _g_task_get_completedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTask>)>>(
          'g_task_get_completed');
  late final _g_task_get_completed =
      _g_task_get_completedPtr.asFunction<int Function(ffi.Pointer<GTask>)>();

  int g_tcp_connection_get_type() {
    return _g_tcp_connection_get_type();
  }

  late final _g_tcp_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tcp_connection_get_type');
  late final _g_tcp_connection_get_type =
      _g_tcp_connection_get_typePtr.asFunction<int Function()>();

  void g_tcp_connection_set_graceful_disconnect(
    ffi.Pointer<GTcpConnection> connection,
    int graceful_disconnect,
  ) {
    return _g_tcp_connection_set_graceful_disconnect(
      connection,
      graceful_disconnect,
    );
  }

  late final _g_tcp_connection_set_graceful_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTcpConnection>,
              gboolean)>>('g_tcp_connection_set_graceful_disconnect');
  late final _g_tcp_connection_set_graceful_disconnect =
      _g_tcp_connection_set_graceful_disconnectPtr
          .asFunction<void Function(ffi.Pointer<GTcpConnection>, int)>();

  int g_tcp_connection_get_graceful_disconnect(
    ffi.Pointer<GTcpConnection> connection,
  ) {
    return _g_tcp_connection_get_graceful_disconnect(
      connection,
    );
  }

  late final _g_tcp_connection_get_graceful_disconnectPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTcpConnection>)>>(
      'g_tcp_connection_get_graceful_disconnect');
  late final _g_tcp_connection_get_graceful_disconnect =
      _g_tcp_connection_get_graceful_disconnectPtr
          .asFunction<int Function(ffi.Pointer<GTcpConnection>)>();

  int g_tcp_wrapper_connection_get_type() {
    return _g_tcp_wrapper_connection_get_type();
  }

  late final _g_tcp_wrapper_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tcp_wrapper_connection_get_type');
  late final _g_tcp_wrapper_connection_get_type =
      _g_tcp_wrapper_connection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketConnection> g_tcp_wrapper_connection_new(
    ffi.Pointer<GIOStream> base_io_stream,
    ffi.Pointer<GSocket> socket,
  ) {
    return _g_tcp_wrapper_connection_new(
      base_io_stream,
      socket,
    );
  }

  late final _g_tcp_wrapper_connection_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSocketConnection> Function(ffi.Pointer<GIOStream>,
              ffi.Pointer<GSocket>)>>('g_tcp_wrapper_connection_new');
  late final _g_tcp_wrapper_connection_new =
      _g_tcp_wrapper_connection_newPtr.asFunction<
          ffi.Pointer<GSocketConnection> Function(
              ffi.Pointer<GIOStream>, ffi.Pointer<GSocket>)>();

  ffi.Pointer<GIOStream> g_tcp_wrapper_connection_get_base_io_stream(
    ffi.Pointer<GTcpWrapperConnection> conn,
  ) {
    return _g_tcp_wrapper_connection_get_base_io_stream(
      conn,
    );
  }

  late final _g_tcp_wrapper_connection_get_base_io_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOStream> Function(
                  ffi.Pointer<GTcpWrapperConnection>)>>(
      'g_tcp_wrapper_connection_get_base_io_stream');
  late final _g_tcp_wrapper_connection_get_base_io_stream =
      _g_tcp_wrapper_connection_get_base_io_streamPtr.asFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GTcpWrapperConnection>)>();

  int g_test_dbus_get_type() {
    return _g_test_dbus_get_type();
  }

  late final _g_test_dbus_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_test_dbus_get_type');
  late final _g_test_dbus_get_type =
      _g_test_dbus_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTestDBus> g_test_dbus_new(
    int flags,
  ) {
    return _g_test_dbus_new(
      flags,
    );
  }

  late final _g_test_dbus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTestDBus> Function(ffi.Int32)>>(
          'g_test_dbus_new');
  late final _g_test_dbus_new =
      _g_test_dbus_newPtr.asFunction<ffi.Pointer<GTestDBus> Function(int)>();

  int g_test_dbus_get_flags(
    ffi.Pointer<GTestDBus> self,
  ) {
    return _g_test_dbus_get_flags(
      self,
    );
  }

  late final _g_test_dbus_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GTestDBus>)>>(
          'g_test_dbus_get_flags');
  late final _g_test_dbus_get_flags = _g_test_dbus_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GTestDBus>)>();

  ffi.Pointer<gchar> g_test_dbus_get_bus_address(
    ffi.Pointer<GTestDBus> self,
  ) {
    return _g_test_dbus_get_bus_address(
      self,
    );
  }

  late final _g_test_dbus_get_bus_addressPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTestDBus>)>>(
      'g_test_dbus_get_bus_address');
  late final _g_test_dbus_get_bus_address = _g_test_dbus_get_bus_addressPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTestDBus>)>();

  void g_test_dbus_add_service_dir(
    ffi.Pointer<GTestDBus> self,
    ffi.Pointer<gchar> path,
  ) {
    return _g_test_dbus_add_service_dir(
      self,
      path,
    );
  }

  late final _g_test_dbus_add_service_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestDBus>,
              ffi.Pointer<gchar>)>>('g_test_dbus_add_service_dir');
  late final _g_test_dbus_add_service_dir = _g_test_dbus_add_service_dirPtr
      .asFunction<void Function(ffi.Pointer<GTestDBus>, ffi.Pointer<gchar>)>();

  void g_test_dbus_up(
    ffi.Pointer<GTestDBus> self,
  ) {
    return _g_test_dbus_up(
      self,
    );
  }

  late final _g_test_dbus_upPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestDBus>)>>(
          'g_test_dbus_up');
  late final _g_test_dbus_up =
      _g_test_dbus_upPtr.asFunction<void Function(ffi.Pointer<GTestDBus>)>();

  void g_test_dbus_stop(
    ffi.Pointer<GTestDBus> self,
  ) {
    return _g_test_dbus_stop(
      self,
    );
  }

  late final _g_test_dbus_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestDBus>)>>(
          'g_test_dbus_stop');
  late final _g_test_dbus_stop =
      _g_test_dbus_stopPtr.asFunction<void Function(ffi.Pointer<GTestDBus>)>();

  void g_test_dbus_down(
    ffi.Pointer<GTestDBus> self,
  ) {
    return _g_test_dbus_down(
      self,
    );
  }

  late final _g_test_dbus_downPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestDBus>)>>(
          'g_test_dbus_down');
  late final _g_test_dbus_down =
      _g_test_dbus_downPtr.asFunction<void Function(ffi.Pointer<GTestDBus>)>();

  void g_test_dbus_unset() {
    return _g_test_dbus_unset();
  }

  late final _g_test_dbus_unsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_test_dbus_unset');
  late final _g_test_dbus_unset =
      _g_test_dbus_unsetPtr.asFunction<void Function()>();

  int g_themed_icon_get_type() {
    return _g_themed_icon_get_type();
  }

  late final _g_themed_icon_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_themed_icon_get_type');
  late final _g_themed_icon_get_type =
      _g_themed_icon_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIcon> g_themed_icon_new(
    ffi.Pointer<ffi.Char> iconname,
  ) {
    return _g_themed_icon_new(
      iconname,
    );
  }

  late final _g_themed_icon_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<ffi.Char>)>>(
      'g_themed_icon_new');
  late final _g_themed_icon_new = _g_themed_icon_newPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GIcon> g_themed_icon_new_with_default_fallbacks(
    ffi.Pointer<ffi.Char> iconname,
  ) {
    return _g_themed_icon_new_with_default_fallbacks(
      iconname,
    );
  }

  late final _g_themed_icon_new_with_default_fallbacksPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<ffi.Char>)>>(
      'g_themed_icon_new_with_default_fallbacks');
  late final _g_themed_icon_new_with_default_fallbacks =
      _g_themed_icon_new_with_default_fallbacksPtr
          .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GIcon> g_themed_icon_new_from_names(
    ffi.Pointer<ffi.Pointer<ffi.Char>> iconnames,
    int len,
  ) {
    return _g_themed_icon_new_from_names(
      iconnames,
      len,
    );
  }

  late final _g_themed_icon_new_from_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('g_themed_icon_new_from_names');
  late final _g_themed_icon_new_from_names =
      _g_themed_icon_new_from_namesPtr.asFunction<
          ffi.Pointer<GIcon> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  void g_themed_icon_prepend_name(
    ffi.Pointer<GThemedIcon> icon,
    ffi.Pointer<ffi.Char> iconname,
  ) {
    return _g_themed_icon_prepend_name(
      icon,
      iconname,
    );
  }

  late final _g_themed_icon_prepend_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThemedIcon>,
              ffi.Pointer<ffi.Char>)>>('g_themed_icon_prepend_name');
  late final _g_themed_icon_prepend_name =
      _g_themed_icon_prepend_namePtr.asFunction<
          void Function(ffi.Pointer<GThemedIcon>, ffi.Pointer<ffi.Char>)>();

  void g_themed_icon_append_name(
    ffi.Pointer<GThemedIcon> icon,
    ffi.Pointer<ffi.Char> iconname,
  ) {
    return _g_themed_icon_append_name(
      icon,
      iconname,
    );
  }

  late final _g_themed_icon_append_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThemedIcon>,
              ffi.Pointer<ffi.Char>)>>('g_themed_icon_append_name');
  late final _g_themed_icon_append_name =
      _g_themed_icon_append_namePtr.asFunction<
          void Function(ffi.Pointer<GThemedIcon>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_themed_icon_get_names(
    ffi.Pointer<GThemedIcon> icon,
  ) {
    return _g_themed_icon_get_names(
      icon,
    );
  }

  late final _g_themed_icon_get_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GThemedIcon>)>>('g_themed_icon_get_names');
  late final _g_themed_icon_get_names = _g_themed_icon_get_namesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GThemedIcon>)>();

  int g_threaded_socket_service_get_type() {
    return _g_threaded_socket_service_get_type();
  }

  late final _g_threaded_socket_service_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_threaded_socket_service_get_type');
  late final _g_threaded_socket_service_get_type =
      _g_threaded_socket_service_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSocketService> g_threaded_socket_service_new(
    int max_threads,
  ) {
    return _g_threaded_socket_service_new(
      max_threads,
    );
  }

  late final _g_threaded_socket_service_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GSocketService> Function(ffi.Int)>>(
      'g_threaded_socket_service_new');
  late final _g_threaded_socket_service_new = _g_threaded_socket_service_newPtr
      .asFunction<ffi.Pointer<GSocketService> Function(int)>();

  int g_tls_backend_get_type() {
    return _g_tls_backend_get_type();
  }

  late final _g_tls_backend_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tls_backend_get_type');
  late final _g_tls_backend_get_type =
      _g_tls_backend_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTlsBackend> g_tls_backend_get_default() {
    return _g_tls_backend_get_default();
  }

  late final _g_tls_backend_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTlsBackend> Function()>>(
          'g_tls_backend_get_default');
  late final _g_tls_backend_get_default = _g_tls_backend_get_defaultPtr
      .asFunction<ffi.Pointer<GTlsBackend> Function()>();

  ffi.Pointer<GTlsDatabase> g_tls_backend_get_default_database(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_default_database(
      backend,
    );
  }

  late final _g_tls_backend_get_default_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsDatabase> Function(
              ffi.Pointer<GTlsBackend>)>>('g_tls_backend_get_default_database');
  late final _g_tls_backend_get_default_database =
      _g_tls_backend_get_default_databasePtr.asFunction<
          ffi.Pointer<GTlsDatabase> Function(ffi.Pointer<GTlsBackend>)>();

  void g_tls_backend_set_default_database(
    ffi.Pointer<GTlsBackend> backend,
    ffi.Pointer<GTlsDatabase> database,
  ) {
    return _g_tls_backend_set_default_database(
      backend,
      database,
    );
  }

  late final _g_tls_backend_set_default_databasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GTlsBackend>, ffi.Pointer<GTlsDatabase>)>>(
      'g_tls_backend_set_default_database');
  late final _g_tls_backend_set_default_database =
      _g_tls_backend_set_default_databasePtr.asFunction<
          void Function(ffi.Pointer<GTlsBackend>, ffi.Pointer<GTlsDatabase>)>();

  int g_tls_backend_supports_tls(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_supports_tls(
      backend,
    );
  }

  late final _g_tls_backend_supports_tlsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_supports_tls');
  late final _g_tls_backend_supports_tls = _g_tls_backend_supports_tlsPtr
      .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_supports_dtls(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_supports_dtls(
      backend,
    );
  }

  late final _g_tls_backend_supports_dtlsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_supports_dtls');
  late final _g_tls_backend_supports_dtls = _g_tls_backend_supports_dtlsPtr
      .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_certificate_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_certificate_type(
      backend,
    );
  }

  late final _g_tls_backend_get_certificate_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_certificate_type');
  late final _g_tls_backend_get_certificate_type =
      _g_tls_backend_get_certificate_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_client_connection_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_client_connection_type(
      backend,
    );
  }

  late final _g_tls_backend_get_client_connection_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_client_connection_type');
  late final _g_tls_backend_get_client_connection_type =
      _g_tls_backend_get_client_connection_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_server_connection_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_server_connection_type(
      backend,
    );
  }

  late final _g_tls_backend_get_server_connection_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_server_connection_type');
  late final _g_tls_backend_get_server_connection_type =
      _g_tls_backend_get_server_connection_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_file_database_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_file_database_type(
      backend,
    );
  }

  late final _g_tls_backend_get_file_database_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_file_database_type');
  late final _g_tls_backend_get_file_database_type =
      _g_tls_backend_get_file_database_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_dtls_client_connection_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_dtls_client_connection_type(
      backend,
    );
  }

  late final _g_tls_backend_get_dtls_client_connection_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_dtls_client_connection_type');
  late final _g_tls_backend_get_dtls_client_connection_type =
      _g_tls_backend_get_dtls_client_connection_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_backend_get_dtls_server_connection_type(
    ffi.Pointer<GTlsBackend> backend,
  ) {
    return _g_tls_backend_get_dtls_server_connection_type(
      backend,
    );
  }

  late final _g_tls_backend_get_dtls_server_connection_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GTlsBackend>)>>(
          'g_tls_backend_get_dtls_server_connection_type');
  late final _g_tls_backend_get_dtls_server_connection_type =
      _g_tls_backend_get_dtls_server_connection_typePtr
          .asFunction<int Function(ffi.Pointer<GTlsBackend>)>();

  int g_tls_certificate_get_type() {
    return _g_tls_certificate_get_type();
  }

  late final _g_tls_certificate_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_certificate_get_type');
  late final _g_tls_certificate_get_type =
      _g_tls_certificate_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_pem(
    ffi.Pointer<gchar> data,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_pem(
      data,
      length,
      error,
    );
  }

  late final _g_tls_certificate_new_from_pemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>, gssize,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_pem');
  late final _g_tls_certificate_new_from_pem =
      _g_tls_certificate_new_from_pemPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<gchar>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_pkcs12(
    ffi.Pointer<guint8> data,
    int length,
    ffi.Pointer<gchar> password,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_pkcs12(
      data,
      length,
      password,
      error,
    );
  }

  late final _g_tls_certificate_new_from_pkcs12Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<guint8>, gsize,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_pkcs12');
  late final _g_tls_certificate_new_from_pkcs12 =
      _g_tls_certificate_new_from_pkcs12Ptr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<guint8>, int,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_file_with_password(
    ffi.Pointer<gchar> file,
    ffi.Pointer<gchar> password,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_file_with_password(
      file,
      password,
      error,
    );
  }

  late final _g_tls_certificate_new_from_file_with_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_file_with_password');
  late final _g_tls_certificate_new_from_file_with_password =
      _g_tls_certificate_new_from_file_with_passwordPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_file(
    ffi.Pointer<gchar> file,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_file(
      file,
      error,
    );
  }

  late final _g_tls_certificate_new_from_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_file');
  late final _g_tls_certificate_new_from_file =
      _g_tls_certificate_new_from_filePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_files(
    ffi.Pointer<gchar> cert_file,
    ffi.Pointer<gchar> key_file,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_files(
      cert_file,
      key_file,
      error,
    );
  }

  late final _g_tls_certificate_new_from_filesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_files');
  late final _g_tls_certificate_new_from_files =
      _g_tls_certificate_new_from_filesPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_new_from_pkcs11_uris(
    ffi.Pointer<gchar> pkcs11_uri,
    ffi.Pointer<gchar> private_key_pkcs11_uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_new_from_pkcs11_uris(
      pkcs11_uri,
      private_key_pkcs11_uri,
      error,
    );
  }

  late final _g_tls_certificate_new_from_pkcs11_urisPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_new_from_pkcs11_uris');
  late final _g_tls_certificate_new_from_pkcs11_uris =
      _g_tls_certificate_new_from_pkcs11_urisPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<gchar>,
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_tls_certificate_list_new_from_file(
    ffi.Pointer<gchar> file,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_certificate_list_new_from_file(
      file,
      error,
    );
  }

  late final _g_tls_certificate_list_new_from_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_certificate_list_new_from_file');
  late final _g_tls_certificate_list_new_from_file =
      _g_tls_certificate_list_new_from_filePtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_certificate_get_issuer(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_issuer(
      cert,
    );
  }

  late final _g_tls_certificate_get_issuerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GTlsCertificate>)>>('g_tls_certificate_get_issuer');
  late final _g_tls_certificate_get_issuer =
      _g_tls_certificate_get_issuerPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GTlsCertificate>)>();

  int g_tls_certificate_verify(
    ffi.Pointer<GTlsCertificate> cert,
    ffi.Pointer<GSocketConnectable> identity,
    ffi.Pointer<GTlsCertificate> trusted_ca,
  ) {
    return _g_tls_certificate_verify(
      cert,
      identity,
      trusted_ca,
    );
  }

  late final _g_tls_certificate_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GTlsCertificate>)>>('g_tls_certificate_verify');
  late final _g_tls_certificate_verify =
      _g_tls_certificate_verifyPtr.asFunction<
          int Function(ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GSocketConnectable>, ffi.Pointer<GTlsCertificate>)>();

  int g_tls_certificate_is_same(
    ffi.Pointer<GTlsCertificate> cert_one,
    ffi.Pointer<GTlsCertificate> cert_two,
  ) {
    return _g_tls_certificate_is_same(
      cert_one,
      cert_two,
    );
  }

  late final _g_tls_certificate_is_samePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GTlsCertificate>)>>('g_tls_certificate_is_same');
  late final _g_tls_certificate_is_same =
      _g_tls_certificate_is_samePtr.asFunction<
          int Function(
              ffi.Pointer<GTlsCertificate>, ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GDateTime> g_tls_certificate_get_not_valid_before(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_not_valid_before(
      cert,
    );
  }

  late final _g_tls_certificate_get_not_valid_beforePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_not_valid_before');
  late final _g_tls_certificate_get_not_valid_before =
      _g_tls_certificate_get_not_valid_beforePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GDateTime> g_tls_certificate_get_not_valid_after(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_not_valid_after(
      cert,
    );
  }

  late final _g_tls_certificate_get_not_valid_afterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_not_valid_after');
  late final _g_tls_certificate_get_not_valid_after =
      _g_tls_certificate_get_not_valid_afterPtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<gchar> g_tls_certificate_get_subject_name(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_subject_name(
      cert,
    );
  }

  late final _g_tls_certificate_get_subject_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_subject_name');
  late final _g_tls_certificate_get_subject_name =
      _g_tls_certificate_get_subject_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<gchar> g_tls_certificate_get_issuer_name(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_issuer_name(
      cert,
    );
  }

  late final _g_tls_certificate_get_issuer_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_issuer_name');
  late final _g_tls_certificate_get_issuer_name =
      _g_tls_certificate_get_issuer_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GPtrArray> g_tls_certificate_get_dns_names(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_dns_names(
      cert,
    );
  }

  late final _g_tls_certificate_get_dns_namesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GPtrArray> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_dns_names');
  late final _g_tls_certificate_get_dns_names =
      _g_tls_certificate_get_dns_namesPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GPtrArray> g_tls_certificate_get_ip_addresses(
    ffi.Pointer<GTlsCertificate> cert,
  ) {
    return _g_tls_certificate_get_ip_addresses(
      cert,
    );
  }

  late final _g_tls_certificate_get_ip_addressesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GPtrArray> Function(ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_certificate_get_ip_addresses');
  late final _g_tls_certificate_get_ip_addresses =
      _g_tls_certificate_get_ip_addressesPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GTlsCertificate>)>();

  int g_tls_connection_get_type() {
    return _g_tls_connection_get_type();
  }

  late final _g_tls_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_connection_get_type');
  late final _g_tls_connection_get_type =
      _g_tls_connection_get_typePtr.asFunction<int Function()>();

  void g_tls_connection_set_use_system_certdb(
    ffi.Pointer<GTlsConnection> conn,
    int use_system_certdb,
  ) {
    return _g_tls_connection_set_use_system_certdb(
      conn,
      use_system_certdb,
    );
  }

  late final _g_tls_connection_set_use_system_certdbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsConnection>,
              gboolean)>>('g_tls_connection_set_use_system_certdb');
  late final _g_tls_connection_set_use_system_certdb =
      _g_tls_connection_set_use_system_certdbPtr
          .asFunction<void Function(ffi.Pointer<GTlsConnection>, int)>();

  int g_tls_connection_get_use_system_certdb(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_use_system_certdb(
      conn,
    );
  }

  late final _g_tls_connection_get_use_system_certdbPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_use_system_certdb');
  late final _g_tls_connection_get_use_system_certdb =
      _g_tls_connection_get_use_system_certdbPtr
          .asFunction<int Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_database(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GTlsDatabase> database,
  ) {
    return _g_tls_connection_set_database(
      conn,
      database,
    );
  }

  late final _g_tls_connection_set_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsConnection>,
              ffi.Pointer<GTlsDatabase>)>>('g_tls_connection_set_database');
  late final _g_tls_connection_set_database =
      _g_tls_connection_set_databasePtr.asFunction<
          void Function(
              ffi.Pointer<GTlsConnection>, ffi.Pointer<GTlsDatabase>)>();

  ffi.Pointer<GTlsDatabase> g_tls_connection_get_database(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_database(
      conn,
    );
  }

  late final _g_tls_connection_get_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsDatabase> Function(
              ffi.Pointer<GTlsConnection>)>>('g_tls_connection_get_database');
  late final _g_tls_connection_get_database =
      _g_tls_connection_get_databasePtr.asFunction<
          ffi.Pointer<GTlsDatabase> Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_certificate(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GTlsCertificate> certificate,
  ) {
    return _g_tls_connection_set_certificate(
      conn,
      certificate,
    );
  }

  late final _g_tls_connection_set_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GTlsConnection>, ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_connection_set_certificate');
  late final _g_tls_connection_set_certificate =
      _g_tls_connection_set_certificatePtr.asFunction<
          void Function(
              ffi.Pointer<GTlsConnection>, ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GTlsCertificate> g_tls_connection_get_certificate(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_certificate(
      conn,
    );
  }

  late final _g_tls_connection_get_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_certificate');
  late final _g_tls_connection_get_certificate =
      _g_tls_connection_get_certificatePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_interaction(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GTlsInteraction> interaction,
  ) {
    return _g_tls_connection_set_interaction(
      conn,
      interaction,
    );
  }

  late final _g_tls_connection_set_interactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GTlsConnection>, ffi.Pointer<GTlsInteraction>)>>(
      'g_tls_connection_set_interaction');
  late final _g_tls_connection_set_interaction =
      _g_tls_connection_set_interactionPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsConnection>, ffi.Pointer<GTlsInteraction>)>();

  ffi.Pointer<GTlsInteraction> g_tls_connection_get_interaction(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_interaction(
      conn,
    );
  }

  late final _g_tls_connection_get_interactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsInteraction> Function(
                  ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_interaction');
  late final _g_tls_connection_get_interaction =
      _g_tls_connection_get_interactionPtr.asFunction<
          ffi.Pointer<GTlsInteraction> Function(ffi.Pointer<GTlsConnection>)>();

  ffi.Pointer<GTlsCertificate> g_tls_connection_get_peer_certificate(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_peer_certificate(
      conn,
    );
  }

  late final _g_tls_connection_get_peer_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_peer_certificate');
  late final _g_tls_connection_get_peer_certificate =
      _g_tls_connection_get_peer_certificatePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<GTlsConnection>)>();

  int g_tls_connection_get_peer_certificate_errors(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_peer_certificate_errors(
      conn,
    );
  }

  late final _g_tls_connection_get_peer_certificate_errorsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_peer_certificate_errors');
  late final _g_tls_connection_get_peer_certificate_errors =
      _g_tls_connection_get_peer_certificate_errorsPtr
          .asFunction<int Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_require_close_notify(
    ffi.Pointer<GTlsConnection> conn,
    int require_close_notify,
  ) {
    return _g_tls_connection_set_require_close_notify(
      conn,
      require_close_notify,
    );
  }

  late final _g_tls_connection_set_require_close_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsConnection>,
              gboolean)>>('g_tls_connection_set_require_close_notify');
  late final _g_tls_connection_set_require_close_notify =
      _g_tls_connection_set_require_close_notifyPtr
          .asFunction<void Function(ffi.Pointer<GTlsConnection>, int)>();

  int g_tls_connection_get_require_close_notify(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_require_close_notify(
      conn,
    );
  }

  late final _g_tls_connection_get_require_close_notifyPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_require_close_notify');
  late final _g_tls_connection_get_require_close_notify =
      _g_tls_connection_get_require_close_notifyPtr
          .asFunction<int Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_rehandshake_mode(
    ffi.Pointer<GTlsConnection> conn,
    int mode,
  ) {
    return _g_tls_connection_set_rehandshake_mode(
      conn,
      mode,
    );
  }

  late final _g_tls_connection_set_rehandshake_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsConnection>,
              ffi.Int32)>>('g_tls_connection_set_rehandshake_mode');
  late final _g_tls_connection_set_rehandshake_mode =
      _g_tls_connection_set_rehandshake_modePtr
          .asFunction<void Function(ffi.Pointer<GTlsConnection>, int)>();

  int g_tls_connection_get_rehandshake_mode(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_rehandshake_mode(
      conn,
    );
  }

  late final _g_tls_connection_get_rehandshake_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_rehandshake_mode');
  late final _g_tls_connection_get_rehandshake_mode =
      _g_tls_connection_get_rehandshake_modePtr
          .asFunction<int Function(ffi.Pointer<GTlsConnection>)>();

  void g_tls_connection_set_advertised_protocols(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<ffi.Pointer<gchar>> protocols,
  ) {
    return _g_tls_connection_set_advertised_protocols(
      conn,
      protocols,
    );
  }

  late final _g_tls_connection_set_advertised_protocolsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTlsConnection>,
                  ffi.Pointer<ffi.Pointer<gchar>>)>>(
      'g_tls_connection_set_advertised_protocols');
  late final _g_tls_connection_set_advertised_protocols =
      _g_tls_connection_set_advertised_protocolsPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsConnection>, ffi.Pointer<ffi.Pointer<gchar>>)>();

  ffi.Pointer<gchar> g_tls_connection_get_negotiated_protocol(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_negotiated_protocol(
      conn,
    );
  }

  late final _g_tls_connection_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_negotiated_protocol');
  late final _g_tls_connection_get_negotiated_protocol =
      _g_tls_connection_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GTlsConnection>)>();

  int g_tls_connection_get_channel_binding_data(
    ffi.Pointer<GTlsConnection> conn,
    int type,
    ffi.Pointer<GByteArray> data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_connection_get_channel_binding_data(
      conn,
      type,
      data,
      error,
    );
  }

  late final _g_tls_connection_get_channel_binding_dataPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GTlsConnection>, ffi.Int32,
                  ffi.Pointer<GByteArray>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_connection_get_channel_binding_data');
  late final _g_tls_connection_get_channel_binding_data =
      _g_tls_connection_get_channel_binding_dataPtr.asFunction<
          int Function(ffi.Pointer<GTlsConnection>, int,
              ffi.Pointer<GByteArray>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_connection_handshake(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_connection_handshake(
      conn,
      cancellable,
      error,
    );
  }

  late final _g_tls_connection_handshakePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection>,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_tls_connection_handshake');
  late final _g_tls_connection_handshake =
      _g_tls_connection_handshakePtr.asFunction<
          int Function(ffi.Pointer<GTlsConnection>, ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_connection_handshake_async(
    ffi.Pointer<GTlsConnection> conn,
    int io_priority,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_connection_handshake_async(
      conn,
      io_priority,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_connection_handshake_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsConnection>,
              ffi.Int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_connection_handshake_async');
  late final _g_tls_connection_handshake_async =
      _g_tls_connection_handshake_asyncPtr.asFunction<
          void Function(ffi.Pointer<GTlsConnection>, int,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_tls_connection_handshake_finish(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_connection_handshake_finish(
      conn,
      result,
      error,
    );
  }

  late final _g_tls_connection_handshake_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GTlsConnection>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_connection_handshake_finish');
  late final _g_tls_connection_handshake_finish =
      _g_tls_connection_handshake_finishPtr.asFunction<
          int Function(ffi.Pointer<GTlsConnection>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_connection_get_protocol_version(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_protocol_version(
      conn,
    );
  }

  late final _g_tls_connection_get_protocol_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_protocol_version');
  late final _g_tls_connection_get_protocol_version =
      _g_tls_connection_get_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<GTlsConnection>)>();

  ffi.Pointer<gchar> g_tls_connection_get_ciphersuite_name(
    ffi.Pointer<GTlsConnection> conn,
  ) {
    return _g_tls_connection_get_ciphersuite_name(
      conn,
    );
  }

  late final _g_tls_connection_get_ciphersuite_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsConnection>)>>(
      'g_tls_connection_get_ciphersuite_name');
  late final _g_tls_connection_get_ciphersuite_name =
      _g_tls_connection_get_ciphersuite_namePtr.asFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GTlsConnection>)>();

  int g_tls_error_quark() {
    return _g_tls_error_quark();
  }

  late final _g_tls_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_tls_error_quark');
  late final _g_tls_error_quark =
      _g_tls_error_quarkPtr.asFunction<int Function()>();

  int g_tls_channel_binding_error_quark() {
    return _g_tls_channel_binding_error_quark();
  }

  late final _g_tls_channel_binding_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_tls_channel_binding_error_quark');
  late final _g_tls_channel_binding_error_quark =
      _g_tls_channel_binding_error_quarkPtr.asFunction<int Function()>();

  int g_tls_connection_emit_accept_certificate(
    ffi.Pointer<GTlsConnection> conn,
    ffi.Pointer<GTlsCertificate> peer_cert,
    int errors,
  ) {
    return _g_tls_connection_emit_accept_certificate(
      conn,
      peer_cert,
      errors,
    );
  }

  late final _g_tls_connection_emit_accept_certificatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Int32)>>('g_tls_connection_emit_accept_certificate');
  late final _g_tls_connection_emit_accept_certificate =
      _g_tls_connection_emit_accept_certificatePtr.asFunction<
          int Function(ffi.Pointer<GTlsConnection>,
              ffi.Pointer<GTlsCertificate>, int)>();

  int g_tls_client_connection_get_type() {
    return _g_tls_client_connection_get_type();
  }

  late final _g_tls_client_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_client_connection_get_type');
  late final _g_tls_client_connection_get_type =
      _g_tls_client_connection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIOStream> g_tls_client_connection_new(
    ffi.Pointer<GIOStream> base_io_stream,
    ffi.Pointer<GSocketConnectable> server_identity,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_client_connection_new(
      base_io_stream,
      server_identity,
      error,
    );
  }

  late final _g_tls_client_connection_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOStream> Function(
                  ffi.Pointer<GIOStream>,
                  ffi.Pointer<GSocketConnectable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_client_connection_new');
  late final _g_tls_client_connection_new =
      _g_tls_client_connection_newPtr.asFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_client_connection_get_validation_flags(
    ffi.Pointer<GTlsClientConnection> conn,
  ) {
    return _g_tls_client_connection_get_validation_flags(
      conn,
    );
  }

  late final _g_tls_client_connection_get_validation_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GTlsClientConnection>)>>(
      'g_tls_client_connection_get_validation_flags');
  late final _g_tls_client_connection_get_validation_flags =
      _g_tls_client_connection_get_validation_flagsPtr
          .asFunction<int Function(ffi.Pointer<GTlsClientConnection>)>();

  void g_tls_client_connection_set_validation_flags(
    ffi.Pointer<GTlsClientConnection> conn,
    int flags,
  ) {
    return _g_tls_client_connection_set_validation_flags(
      conn,
      flags,
    );
  }

  late final _g_tls_client_connection_set_validation_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsClientConnection>,
              ffi.Int32)>>('g_tls_client_connection_set_validation_flags');
  late final _g_tls_client_connection_set_validation_flags =
      _g_tls_client_connection_set_validation_flagsPtr
          .asFunction<void Function(ffi.Pointer<GTlsClientConnection>, int)>();

  ffi.Pointer<GSocketConnectable> g_tls_client_connection_get_server_identity(
    ffi.Pointer<GTlsClientConnection> conn,
  ) {
    return _g_tls_client_connection_get_server_identity(
      conn,
    );
  }

  late final _g_tls_client_connection_get_server_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSocketConnectable> Function(
                  ffi.Pointer<GTlsClientConnection>)>>(
      'g_tls_client_connection_get_server_identity');
  late final _g_tls_client_connection_get_server_identity =
      _g_tls_client_connection_get_server_identityPtr.asFunction<
          ffi.Pointer<GSocketConnectable> Function(
              ffi.Pointer<GTlsClientConnection>)>();

  void g_tls_client_connection_set_server_identity(
    ffi.Pointer<GTlsClientConnection> conn,
    ffi.Pointer<GSocketConnectable> identity,
  ) {
    return _g_tls_client_connection_set_server_identity(
      conn,
      identity,
    );
  }

  late final _g_tls_client_connection_set_server_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTlsClientConnection>,
                  ffi.Pointer<GSocketConnectable>)>>(
      'g_tls_client_connection_set_server_identity');
  late final _g_tls_client_connection_set_server_identity =
      _g_tls_client_connection_set_server_identityPtr.asFunction<
          void Function(ffi.Pointer<GTlsClientConnection>,
              ffi.Pointer<GSocketConnectable>)>();

  int g_tls_client_connection_get_use_ssl3(
    ffi.Pointer<GTlsClientConnection> conn,
  ) {
    return _g_tls_client_connection_get_use_ssl3(
      conn,
    );
  }

  late final _g_tls_client_connection_get_use_ssl3Ptr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GTlsClientConnection>)>>(
      'g_tls_client_connection_get_use_ssl3');
  late final _g_tls_client_connection_get_use_ssl3 =
      _g_tls_client_connection_get_use_ssl3Ptr
          .asFunction<int Function(ffi.Pointer<GTlsClientConnection>)>();

  void g_tls_client_connection_set_use_ssl3(
    ffi.Pointer<GTlsClientConnection> conn,
    int use_ssl3,
  ) {
    return _g_tls_client_connection_set_use_ssl3(
      conn,
      use_ssl3,
    );
  }

  late final _g_tls_client_connection_set_use_ssl3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsClientConnection>,
              gboolean)>>('g_tls_client_connection_set_use_ssl3');
  late final _g_tls_client_connection_set_use_ssl3 =
      _g_tls_client_connection_set_use_ssl3Ptr
          .asFunction<void Function(ffi.Pointer<GTlsClientConnection>, int)>();

  ffi.Pointer<GList> g_tls_client_connection_get_accepted_cas(
    ffi.Pointer<GTlsClientConnection> conn,
  ) {
    return _g_tls_client_connection_get_accepted_cas(
      conn,
    );
  }

  late final _g_tls_client_connection_get_accepted_casPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GTlsClientConnection>)>>(
      'g_tls_client_connection_get_accepted_cas');
  late final _g_tls_client_connection_get_accepted_cas =
      _g_tls_client_connection_get_accepted_casPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GTlsClientConnection>)>();

  void g_tls_client_connection_copy_session_state(
    ffi.Pointer<GTlsClientConnection> conn,
    ffi.Pointer<GTlsClientConnection> source,
  ) {
    return _g_tls_client_connection_copy_session_state(
      conn,
      source,
    );
  }

  late final _g_tls_client_connection_copy_session_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTlsClientConnection>,
                  ffi.Pointer<GTlsClientConnection>)>>(
      'g_tls_client_connection_copy_session_state');
  late final _g_tls_client_connection_copy_session_state =
      _g_tls_client_connection_copy_session_statePtr.asFunction<
          void Function(ffi.Pointer<GTlsClientConnection>,
              ffi.Pointer<GTlsClientConnection>)>();

  int g_tls_database_get_type() {
    return _g_tls_database_get_type();
  }

  late final _g_tls_database_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tls_database_get_type');
  late final _g_tls_database_get_type =
      _g_tls_database_get_typePtr.asFunction<int Function()>();

  int g_tls_database_verify_chain(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GTlsCertificate> chain,
    ffi.Pointer<gchar> purpose,
    ffi.Pointer<GSocketConnectable> identity,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_verify_chain(
      self,
      chain,
      purpose,
      identity,
      interaction,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_database_verify_chainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GTlsCertificate>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GSocketConnectable>,
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_verify_chain');
  late final _g_tls_database_verify_chain =
      _g_tls_database_verify_chainPtr.asFunction<
          int Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_database_verify_chain_async(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GTlsCertificate> chain,
    ffi.Pointer<gchar> purpose,
    ffi.Pointer<GSocketConnectable> identity,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_database_verify_chain_async(
      self,
      chain,
      purpose,
      identity,
      interaction,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_database_verify_chain_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GTlsInteraction>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_database_verify_chain_async');
  late final _g_tls_database_verify_chain_async =
      _g_tls_database_verify_chain_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GSocketConnectable>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_tls_database_verify_chain_finish(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_verify_chain_finish(
      self,
      result,
      error,
    );
  }

  late final _g_tls_database_verify_chain_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_verify_chain_finish');
  late final _g_tls_database_verify_chain_finish =
      _g_tls_database_verify_chain_finishPtr.asFunction<
          int Function(ffi.Pointer<GTlsDatabase>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_tls_database_create_certificate_handle(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GTlsCertificate> certificate,
  ) {
    return _g_tls_database_create_certificate_handle(
      self,
      certificate,
    );
  }

  late final _g_tls_database_create_certificate_handlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GTlsDatabase>, ffi.Pointer<GTlsCertificate>)>>(
      'g_tls_database_create_certificate_handle');
  late final _g_tls_database_create_certificate_handle =
      _g_tls_database_create_certificate_handlePtr.asFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTlsDatabase>, ffi.Pointer<GTlsCertificate>)>();

  ffi.Pointer<GTlsCertificate> g_tls_database_lookup_certificate_for_handle(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<gchar> handle,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificate_for_handle(
      self,
      handle,
      interaction,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_database_lookup_certificate_for_handlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<gchar>,
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificate_for_handle');
  late final _g_tls_database_lookup_certificate_for_handle =
      _g_tls_database_lookup_certificate_for_handlePtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_database_lookup_certificate_for_handle_async(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<gchar> handle,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_database_lookup_certificate_for_handle_async(
      self,
      handle,
      interaction,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_database_lookup_certificate_for_handle_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTlsInteraction>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_database_lookup_certificate_for_handle_async');
  late final _g_tls_database_lookup_certificate_for_handle_async =
      _g_tls_database_lookup_certificate_for_handle_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<gchar>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GTlsCertificate>
      g_tls_database_lookup_certificate_for_handle_finish(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificate_for_handle_finish(
      self,
      result,
      error,
    );
  }

  late final _g_tls_database_lookup_certificate_for_handle_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificate_for_handle_finish');
  late final _g_tls_database_lookup_certificate_for_handle_finish =
      _g_tls_database_lookup_certificate_for_handle_finishPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GTlsCertificate> g_tls_database_lookup_certificate_issuer(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GTlsCertificate> certificate,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificate_issuer(
      self,
      certificate,
      interaction,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_database_lookup_certificate_issuerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GTlsCertificate>,
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificate_issuer');
  late final _g_tls_database_lookup_certificate_issuer =
      _g_tls_database_lookup_certificate_issuerPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_database_lookup_certificate_issuer_async(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GTlsCertificate> certificate,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_database_lookup_certificate_issuer_async(
      self,
      certificate,
      interaction,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_database_lookup_certificate_issuer_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GTlsInteraction>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_database_lookup_certificate_issuer_async');
  late final _g_tls_database_lookup_certificate_issuer_async =
      _g_tls_database_lookup_certificate_issuer_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GTlsCertificate> g_tls_database_lookup_certificate_issuer_finish(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificate_issuer_finish(
      self,
      result,
      error,
    );
  }

  late final _g_tls_database_lookup_certificate_issuer_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificate_issuer_finish');
  late final _g_tls_database_lookup_certificate_issuer_finish =
      _g_tls_database_lookup_certificate_issuer_finishPtr.asFunction<
          ffi.Pointer<GTlsCertificate> Function(ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GList> g_tls_database_lookup_certificates_issued_by(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GByteArray> issuer_raw_dn,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificates_issued_by(
      self,
      issuer_raw_dn,
      interaction,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_database_lookup_certificates_issued_byPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GByteArray>,
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificates_issued_by');
  late final _g_tls_database_lookup_certificates_issued_by =
      _g_tls_database_lookup_certificates_issued_byPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GByteArray>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_database_lookup_certificates_issued_by_async(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GByteArray> issuer_raw_dn,
    ffi.Pointer<GTlsInteraction> interaction,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_database_lookup_certificates_issued_by_async(
      self,
      issuer_raw_dn,
      interaction,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_database_lookup_certificates_issued_by_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GByteArray>,
              ffi.Pointer<GTlsInteraction>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_database_lookup_certificates_issued_by_async');
  late final _g_tls_database_lookup_certificates_issued_by_async =
      _g_tls_database_lookup_certificates_issued_by_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GByteArray>,
              ffi.Pointer<GTlsInteraction>,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  ffi.Pointer<GList> g_tls_database_lookup_certificates_issued_by_finish(
    ffi.Pointer<GTlsDatabase> self,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_database_lookup_certificates_issued_by_finish(
      self,
      result,
      error,
    );
  }

  late final _g_tls_database_lookup_certificates_issued_by_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GTlsDatabase>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_database_lookup_certificates_issued_by_finish');
  late final _g_tls_database_lookup_certificates_issued_by_finish =
      _g_tls_database_lookup_certificates_issued_by_finishPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GTlsDatabase>,
              ffi.Pointer<GAsyncResult>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_file_database_get_type() {
    return _g_tls_file_database_get_type();
  }

  late final _g_tls_file_database_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_file_database_get_type');
  late final _g_tls_file_database_get_type =
      _g_tls_file_database_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTlsDatabase> g_tls_file_database_new(
    ffi.Pointer<gchar> anchors,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_file_database_new(
      anchors,
      error,
    );
  }

  late final _g_tls_file_database_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsDatabase> Function(ffi.Pointer<gchar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_tls_file_database_new');
  late final _g_tls_file_database_new = _g_tls_file_database_newPtr.asFunction<
      ffi.Pointer<GTlsDatabase> Function(
          ffi.Pointer<gchar>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_interaction_get_type() {
    return _g_tls_interaction_get_type();
  }

  late final _g_tls_interaction_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_interaction_get_type');
  late final _g_tls_interaction_get_type =
      _g_tls_interaction_get_typePtr.asFunction<int Function()>();

  int g_tls_interaction_invoke_ask_password(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_invoke_ask_password(
      interaction,
      password,
      cancellable,
      error,
    );
  }

  late final _g_tls_interaction_invoke_ask_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GTlsPassword>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_invoke_ask_password');
  late final _g_tls_interaction_invoke_ask_password =
      _g_tls_interaction_invoke_ask_passwordPtr.asFunction<
          int Function(ffi.Pointer<GTlsInteraction>, ffi.Pointer<GTlsPassword>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_interaction_ask_password(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_ask_password(
      interaction,
      password,
      cancellable,
      error,
    );
  }

  late final _g_tls_interaction_ask_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GTlsPassword>,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_ask_password');
  late final _g_tls_interaction_ask_password =
      _g_tls_interaction_ask_passwordPtr.asFunction<
          int Function(ffi.Pointer<GTlsInteraction>, ffi.Pointer<GTlsPassword>,
              ffi.Pointer<GCancellable>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_interaction_ask_password_async(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_interaction_ask_password_async(
      interaction,
      password,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_interaction_ask_password_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsInteraction>,
              ffi.Pointer<GTlsPassword>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_interaction_ask_password_async');
  late final _g_tls_interaction_ask_password_async =
      _g_tls_interaction_ask_password_asyncPtr.asFunction<
          void Function(ffi.Pointer<GTlsInteraction>, ffi.Pointer<GTlsPassword>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_tls_interaction_ask_password_finish(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_ask_password_finish(
      interaction,
      result,
      error,
    );
  }

  late final _g_tls_interaction_ask_password_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_ask_password_finish');
  late final _g_tls_interaction_ask_password_finish =
      _g_tls_interaction_ask_password_finishPtr.asFunction<
          int Function(ffi.Pointer<GTlsInteraction>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_interaction_invoke_request_certificate(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsConnection> connection,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_invoke_request_certificate(
      interaction,
      connection,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_interaction_invoke_request_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GTlsConnection>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_invoke_request_certificate');
  late final _g_tls_interaction_invoke_request_certificate =
      _g_tls_interaction_invoke_request_certificatePtr.asFunction<
          int Function(
              ffi.Pointer<GTlsInteraction>,
              ffi.Pointer<GTlsConnection>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_interaction_request_certificate(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsConnection> connection,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_request_certificate(
      interaction,
      connection,
      flags,
      cancellable,
      error,
    );
  }

  late final _g_tls_interaction_request_certificatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GTlsConnection>,
                  ffi.Int32,
                  ffi.Pointer<GCancellable>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_request_certificate');
  late final _g_tls_interaction_request_certificate =
      _g_tls_interaction_request_certificatePtr.asFunction<
          int Function(
              ffi.Pointer<GTlsInteraction>,
              ffi.Pointer<GTlsConnection>,
              int,
              ffi.Pointer<GCancellable>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_tls_interaction_request_certificate_async(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GTlsConnection> connection,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_tls_interaction_request_certificate_async(
      interaction,
      connection,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_tls_interaction_request_certificate_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsInteraction>,
              ffi.Pointer<GTlsConnection>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_tls_interaction_request_certificate_async');
  late final _g_tls_interaction_request_certificate_async =
      _g_tls_interaction_request_certificate_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<GTlsInteraction>,
              ffi.Pointer<GTlsConnection>,
              int,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>();

  int g_tls_interaction_request_certificate_finish(
    ffi.Pointer<GTlsInteraction> interaction,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_interaction_request_certificate_finish(
      interaction,
      result,
      error,
    );
  }

  late final _g_tls_interaction_request_certificate_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction>,
                  ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_interaction_request_certificate_finish');
  late final _g_tls_interaction_request_certificate_finish =
      _g_tls_interaction_request_certificate_finishPtr.asFunction<
          int Function(ffi.Pointer<GTlsInteraction>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_tls_password_get_type() {
    return _g_tls_password_get_type();
  }

  late final _g_tls_password_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tls_password_get_type');
  late final _g_tls_password_get_type =
      _g_tls_password_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GTlsPassword> g_tls_password_new(
    int flags,
    ffi.Pointer<gchar> description,
  ) {
    return _g_tls_password_new(
      flags,
      description,
    );
  }

  late final _g_tls_password_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTlsPassword> Function(
              ffi.Int32, ffi.Pointer<gchar>)>>('g_tls_password_new');
  late final _g_tls_password_new = _g_tls_password_newPtr.asFunction<
      ffi.Pointer<GTlsPassword> Function(int, ffi.Pointer<gchar>)>();

  ffi.Pointer<guchar> g_tls_password_get_value(
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<gsize> length,
  ) {
    return _g_tls_password_get_value(
      password,
      length,
    );
  }

  late final _g_tls_password_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(ffi.Pointer<GTlsPassword>,
              ffi.Pointer<gsize>)>>('g_tls_password_get_value');
  late final _g_tls_password_get_value =
      _g_tls_password_get_valuePtr.asFunction<
          ffi.Pointer<guchar> Function(
              ffi.Pointer<GTlsPassword>, ffi.Pointer<gsize>)>();

  void g_tls_password_set_value(
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<guchar> value,
    int length,
  ) {
    return _g_tls_password_set_value(
      password,
      value,
      length,
    );
  }

  late final _g_tls_password_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<guchar>,
              gssize)>>('g_tls_password_set_value');
  late final _g_tls_password_set_value =
      _g_tls_password_set_valuePtr.asFunction<
          void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<guchar>, int)>();

  void g_tls_password_set_value_full(
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<guchar> value,
    int length,
    GDestroyNotify destroy,
  ) {
    return _g_tls_password_set_value_full(
      password,
      value,
      length,
      destroy,
    );
  }

  late final _g_tls_password_set_value_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<guchar>,
              gssize, GDestroyNotify)>>('g_tls_password_set_value_full');
  late final _g_tls_password_set_value_full =
      _g_tls_password_set_value_fullPtr.asFunction<
          void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<guchar>, int,
              GDestroyNotify)>();

  int g_tls_password_get_flags(
    ffi.Pointer<GTlsPassword> password,
  ) {
    return _g_tls_password_get_flags(
      password,
    );
  }

  late final _g_tls_password_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GTlsPassword>)>>(
      'g_tls_password_get_flags');
  late final _g_tls_password_get_flags = _g_tls_password_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GTlsPassword>)>();

  void g_tls_password_set_flags(
    ffi.Pointer<GTlsPassword> password,
    int flags,
  ) {
    return _g_tls_password_set_flags(
      password,
      flags,
    );
  }

  late final _g_tls_password_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsPassword>,
              ffi.Int32)>>('g_tls_password_set_flags');
  late final _g_tls_password_set_flags = _g_tls_password_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GTlsPassword>, int)>();

  ffi.Pointer<gchar> g_tls_password_get_description(
    ffi.Pointer<GTlsPassword> password,
  ) {
    return _g_tls_password_get_description(
      password,
    );
  }

  late final _g_tls_password_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTlsPassword>)>>('g_tls_password_get_description');
  late final _g_tls_password_get_description =
      _g_tls_password_get_descriptionPtr
          .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTlsPassword>)>();

  void g_tls_password_set_description(
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<gchar> description,
  ) {
    return _g_tls_password_set_description(
      password,
      description,
    );
  }

  late final _g_tls_password_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsPassword>,
              ffi.Pointer<gchar>)>>('g_tls_password_set_description');
  late final _g_tls_password_set_description =
      _g_tls_password_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<gchar>)>();

  ffi.Pointer<gchar> g_tls_password_get_warning(
    ffi.Pointer<GTlsPassword> password,
  ) {
    return _g_tls_password_get_warning(
      password,
    );
  }

  late final _g_tls_password_get_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GTlsPassword>)>>('g_tls_password_get_warning');
  late final _g_tls_password_get_warning = _g_tls_password_get_warningPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GTlsPassword>)>();

  void g_tls_password_set_warning(
    ffi.Pointer<GTlsPassword> password,
    ffi.Pointer<gchar> warning,
  ) {
    return _g_tls_password_set_warning(
      password,
      warning,
    );
  }

  late final _g_tls_password_set_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsPassword>,
              ffi.Pointer<gchar>)>>('g_tls_password_set_warning');
  late final _g_tls_password_set_warning =
      _g_tls_password_set_warningPtr.asFunction<
          void Function(ffi.Pointer<GTlsPassword>, ffi.Pointer<gchar>)>();

  int g_tls_server_connection_get_type() {
    return _g_tls_server_connection_get_type();
  }

  late final _g_tls_server_connection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_tls_server_connection_get_type');
  late final _g_tls_server_connection_get_type =
      _g_tls_server_connection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GIOStream> g_tls_server_connection_new(
    ffi.Pointer<GIOStream> base_io_stream,
    ffi.Pointer<GTlsCertificate> certificate,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_tls_server_connection_new(
      base_io_stream,
      certificate,
      error,
    );
  }

  late final _g_tls_server_connection_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GIOStream> Function(
                  ffi.Pointer<GIOStream>,
                  ffi.Pointer<GTlsCertificate>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_tls_server_connection_new');
  late final _g_tls_server_connection_new =
      _g_tls_server_connection_newPtr.asFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GIOStream>,
              ffi.Pointer<GTlsCertificate>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_vfs_get_type() {
    return _g_vfs_get_type();
  }

  late final _g_vfs_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_vfs_get_type');
  late final _g_vfs_get_type = _g_vfs_get_typePtr.asFunction<int Function()>();

  int g_vfs_is_active(
    ffi.Pointer<GVfs> vfs,
  ) {
    return _g_vfs_is_active(
      vfs,
    );
  }

  late final _g_vfs_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVfs>)>>(
          'g_vfs_is_active');
  late final _g_vfs_is_active =
      _g_vfs_is_activePtr.asFunction<int Function(ffi.Pointer<GVfs>)>();

  ffi.Pointer<GFile> g_vfs_get_file_for_path(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _g_vfs_get_file_for_path(
      vfs,
      path,
    );
  }

  late final _g_vfs_get_file_for_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GVfs>,
              ffi.Pointer<ffi.Char>)>>('g_vfs_get_file_for_path');
  late final _g_vfs_get_file_for_path = _g_vfs_get_file_for_pathPtr.asFunction<
      ffi.Pointer<GFile> Function(ffi.Pointer<GVfs>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFile> g_vfs_get_file_for_uri(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_vfs_get_file_for_uri(
      vfs,
      uri,
    );
  }

  late final _g_vfs_get_file_for_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GVfs>,
              ffi.Pointer<ffi.Char>)>>('g_vfs_get_file_for_uri');
  late final _g_vfs_get_file_for_uri = _g_vfs_get_file_for_uriPtr.asFunction<
      ffi.Pointer<GFile> Function(ffi.Pointer<GVfs>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<gchar>> g_vfs_get_supported_uri_schemes(
    ffi.Pointer<GVfs> vfs,
  ) {
    return _g_vfs_get_supported_uri_schemes(
      vfs,
    );
  }

  late final _g_vfs_get_supported_uri_schemesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GVfs>)>>('g_vfs_get_supported_uri_schemes');
  late final _g_vfs_get_supported_uri_schemes =
      _g_vfs_get_supported_uri_schemesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVfs>)>();

  ffi.Pointer<GFile> g_vfs_parse_name(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> parse_name,
  ) {
    return _g_vfs_parse_name(
      vfs,
      parse_name,
    );
  }

  late final _g_vfs_parse_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GVfs>, ffi.Pointer<ffi.Char>)>>('g_vfs_parse_name');
  late final _g_vfs_parse_name = _g_vfs_parse_namePtr.asFunction<
      ffi.Pointer<GFile> Function(ffi.Pointer<GVfs>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVfs> g_vfs_get_default() {
    return _g_vfs_get_default();
  }

  late final _g_vfs_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVfs> Function()>>(
          'g_vfs_get_default');
  late final _g_vfs_get_default =
      _g_vfs_get_defaultPtr.asFunction<ffi.Pointer<GVfs> Function()>();

  ffi.Pointer<GVfs> g_vfs_get_local() {
    return _g_vfs_get_local();
  }

  late final _g_vfs_get_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVfs> Function()>>(
          'g_vfs_get_local');
  late final _g_vfs_get_local =
      _g_vfs_get_localPtr.asFunction<ffi.Pointer<GVfs> Function()>();

  int g_vfs_register_uri_scheme(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> scheme,
    GVfsFileLookupFunc uri_func,
    gpointer uri_data,
    GDestroyNotify uri_destroy,
    GVfsFileLookupFunc parse_name_func,
    gpointer parse_name_data,
    GDestroyNotify parse_name_destroy,
  ) {
    return _g_vfs_register_uri_scheme(
      vfs,
      scheme,
      uri_func,
      uri_data,
      uri_destroy,
      parse_name_func,
      parse_name_data,
      parse_name_destroy,
    );
  }

  late final _g_vfs_register_uri_schemePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GVfs>,
              ffi.Pointer<ffi.Char>,
              GVfsFileLookupFunc,
              gpointer,
              GDestroyNotify,
              GVfsFileLookupFunc,
              gpointer,
              GDestroyNotify)>>('g_vfs_register_uri_scheme');
  late final _g_vfs_register_uri_scheme =
      _g_vfs_register_uri_schemePtr.asFunction<
          int Function(
              ffi.Pointer<GVfs>,
              ffi.Pointer<ffi.Char>,
              GVfsFileLookupFunc,
              gpointer,
              GDestroyNotify,
              GVfsFileLookupFunc,
              gpointer,
              GDestroyNotify)>();

  int g_vfs_unregister_uri_scheme(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> scheme,
  ) {
    return _g_vfs_unregister_uri_scheme(
      vfs,
      scheme,
    );
  }

  late final _g_vfs_unregister_uri_schemePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVfs>,
              ffi.Pointer<ffi.Char>)>>('g_vfs_unregister_uri_scheme');
  late final _g_vfs_unregister_uri_scheme = _g_vfs_unregister_uri_schemePtr
      .asFunction<int Function(ffi.Pointer<GVfs>, ffi.Pointer<ffi.Char>)>();

  int g_volume_get_type() {
    return _g_volume_get_type();
  }

  late final _g_volume_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_volume_get_type');
  late final _g_volume_get_type =
      _g_volume_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> g_volume_get_name(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_name(
      volume,
    );
  }

  late final _g_volume_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVolume>)>>('g_volume_get_name');
  late final _g_volume_get_name = _g_volume_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<GIcon> g_volume_get_icon(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_icon(
      volume,
    );
  }

  late final _g_volume_get_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_icon');
  late final _g_volume_get_icon = _g_volume_get_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<GIcon> g_volume_get_symbolic_icon(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_symbolic_icon(
      volume,
    );
  }

  late final _g_volume_get_symbolic_iconPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_symbolic_icon');
  late final _g_volume_get_symbolic_icon = _g_volume_get_symbolic_iconPtr
      .asFunction<ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<ffi.Char> g_volume_get_uuid(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_uuid(
      volume,
    );
  }

  late final _g_volume_get_uuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVolume>)>>('g_volume_get_uuid');
  late final _g_volume_get_uuid = _g_volume_get_uuidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<GDrive> g_volume_get_drive(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_drive(
      volume,
    );
  }

  late final _g_volume_get_drivePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GDrive> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_drive');
  late final _g_volume_get_drive = _g_volume_get_drivePtr
      .asFunction<ffi.Pointer<GDrive> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<GMount> g_volume_get_mount(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_mount(
      volume,
    );
  }

  late final _g_volume_get_mountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GMount> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_mount');
  late final _g_volume_get_mount = _g_volume_get_mountPtr
      .asFunction<ffi.Pointer<GMount> Function(ffi.Pointer<GVolume>)>();

  int g_volume_can_mount(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_can_mount(
      volume,
    );
  }

  late final _g_volume_can_mountPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume>)>>(
          'g_volume_can_mount');
  late final _g_volume_can_mount =
      _g_volume_can_mountPtr.asFunction<int Function(ffi.Pointer<GVolume>)>();

  int g_volume_can_eject(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_can_eject(
      volume,
    );
  }

  late final _g_volume_can_ejectPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume>)>>(
          'g_volume_can_eject');
  late final _g_volume_can_eject =
      _g_volume_can_ejectPtr.asFunction<int Function(ffi.Pointer<GVolume>)>();

  int g_volume_should_automount(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_should_automount(
      volume,
    );
  }

  late final _g_volume_should_automountPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume>)>>(
          'g_volume_should_automount');
  late final _g_volume_should_automount = _g_volume_should_automountPtr
      .asFunction<int Function(ffi.Pointer<GVolume>)>();

  void g_volume_mount(
    ffi.Pointer<GVolume> volume,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_volume_mount(
      volume,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_volume_mountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_volume_mount');
  late final _g_volume_mount = _g_volume_mountPtr.asFunction<
      void Function(ffi.Pointer<GVolume>, int, ffi.Pointer<GMountOperation>,
          ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_volume_mount_finish(
    ffi.Pointer<GVolume> volume,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_volume_mount_finish(
      volume,
      result,
      error,
    );
  }

  late final _g_volume_mount_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_volume_mount_finish');
  late final _g_volume_mount_finish = _g_volume_mount_finishPtr.asFunction<
      int Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_volume_eject(
    ffi.Pointer<GVolume> volume,
    int flags,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_volume_eject(
      volume,
      flags,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_volume_ejectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume>,
              ffi.Int32,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_volume_eject');
  late final _g_volume_eject = _g_volume_ejectPtr.asFunction<
      void Function(ffi.Pointer<GVolume>, int, ffi.Pointer<GCancellable>,
          GAsyncReadyCallback, gpointer)>();

  int g_volume_eject_finish(
    ffi.Pointer<GVolume> volume,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_volume_eject_finish(
      volume,
      result,
      error,
    );
  }

  late final _g_volume_eject_finishPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_volume_eject_finish');
  late final _g_volume_eject_finish = _g_volume_eject_finishPtr.asFunction<
      int Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_volume_get_identifier(
    ffi.Pointer<GVolume> volume,
    ffi.Pointer<ffi.Char> kind,
  ) {
    return _g_volume_get_identifier(
      volume,
      kind,
    );
  }

  late final _g_volume_get_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVolume>,
              ffi.Pointer<ffi.Char>)>>('g_volume_get_identifier');
  late final _g_volume_get_identifier = _g_volume_get_identifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GVolume>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_volume_enumerate_identifiers(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_enumerate_identifiers(
      volume,
    );
  }

  late final _g_volume_enumerate_identifiersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GVolume>)>>('g_volume_enumerate_identifiers');
  late final _g_volume_enumerate_identifiers =
      _g_volume_enumerate_identifiersPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVolume>)>();

  ffi.Pointer<GFile> g_volume_get_activation_root(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_activation_root(
      volume,
    );
  }

  late final _g_volume_get_activation_rootPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_activation_root');
  late final _g_volume_get_activation_root = _g_volume_get_activation_rootPtr
      .asFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GVolume>)>();

  void g_volume_eject_with_operation(
    ffi.Pointer<GVolume> volume,
    int flags,
    ffi.Pointer<GMountOperation> mount_operation,
    ffi.Pointer<GCancellable> cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data,
  ) {
    return _g_volume_eject_with_operation(
      volume,
      flags,
      mount_operation,
      cancellable,
      callback,
      user_data,
    );
  }

  late final _g_volume_eject_with_operationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume>,
              ffi.Int32,
              ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>,
              GAsyncReadyCallback,
              gpointer)>>('g_volume_eject_with_operation');
  late final _g_volume_eject_with_operation =
      _g_volume_eject_with_operationPtr.asFunction<
          void Function(ffi.Pointer<GVolume>, int, ffi.Pointer<GMountOperation>,
              ffi.Pointer<GCancellable>, GAsyncReadyCallback, gpointer)>();

  int g_volume_eject_with_operation_finish(
    ffi.Pointer<GVolume> volume,
    ffi.Pointer<GAsyncResult> result,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_volume_eject_with_operation_finish(
      volume,
      result,
      error,
    );
  }

  late final _g_volume_eject_with_operation_finishPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_volume_eject_with_operation_finish');
  late final _g_volume_eject_with_operation_finish =
      _g_volume_eject_with_operation_finishPtr.asFunction<
          int Function(ffi.Pointer<GVolume>, ffi.Pointer<GAsyncResult>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gchar> g_volume_get_sort_key(
    ffi.Pointer<GVolume> volume,
  ) {
    return _g_volume_get_sort_key(
      volume,
    );
  }

  late final _g_volume_get_sort_keyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVolume>)>>(
      'g_volume_get_sort_key');
  late final _g_volume_get_sort_key = _g_volume_get_sort_keyPtr
      .asFunction<ffi.Pointer<gchar> Function(ffi.Pointer<GVolume>)>();

  int g_zlib_compressor_get_type() {
    return _g_zlib_compressor_get_type();
  }

  late final _g_zlib_compressor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_zlib_compressor_get_type');
  late final _g_zlib_compressor_get_type =
      _g_zlib_compressor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GZlibCompressor> g_zlib_compressor_new(
    int format,
    int level,
  ) {
    return _g_zlib_compressor_new(
      format,
      level,
    );
  }

  late final _g_zlib_compressor_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GZlibCompressor> Function(
              ffi.Int32, ffi.Int)>>('g_zlib_compressor_new');
  late final _g_zlib_compressor_new = _g_zlib_compressor_newPtr
      .asFunction<ffi.Pointer<GZlibCompressor> Function(int, int)>();

  ffi.Pointer<GFileInfo> g_zlib_compressor_get_file_info(
    ffi.Pointer<GZlibCompressor> compressor,
  ) {
    return _g_zlib_compressor_get_file_info(
      compressor,
    );
  }

  late final _g_zlib_compressor_get_file_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(ffi.Pointer<GZlibCompressor>)>>(
      'g_zlib_compressor_get_file_info');
  late final _g_zlib_compressor_get_file_info =
      _g_zlib_compressor_get_file_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GZlibCompressor>)>();

  void g_zlib_compressor_set_file_info(
    ffi.Pointer<GZlibCompressor> compressor,
    ffi.Pointer<GFileInfo> file_info,
  ) {
    return _g_zlib_compressor_set_file_info(
      compressor,
      file_info,
    );
  }

  late final _g_zlib_compressor_set_file_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GZlibCompressor>,
              ffi.Pointer<GFileInfo>)>>('g_zlib_compressor_set_file_info');
  late final _g_zlib_compressor_set_file_info =
      _g_zlib_compressor_set_file_infoPtr.asFunction<
          void Function(
              ffi.Pointer<GZlibCompressor>, ffi.Pointer<GFileInfo>)>();

  int g_zlib_decompressor_get_type() {
    return _g_zlib_decompressor_get_type();
  }

  late final _g_zlib_decompressor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_zlib_decompressor_get_type');
  late final _g_zlib_decompressor_get_type =
      _g_zlib_decompressor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GZlibDecompressor> g_zlib_decompressor_new(
    int format,
  ) {
    return _g_zlib_decompressor_new(
      format,
    );
  }

  late final _g_zlib_decompressor_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GZlibDecompressor> Function(ffi.Int32)>>(
      'g_zlib_decompressor_new');
  late final _g_zlib_decompressor_new = _g_zlib_decompressor_newPtr
      .asFunction<ffi.Pointer<GZlibDecompressor> Function(int)>();

  ffi.Pointer<GFileInfo> g_zlib_decompressor_get_file_info(
    ffi.Pointer<GZlibDecompressor> decompressor,
  ) {
    return _g_zlib_decompressor_get_file_info(
      decompressor,
    );
  }

  late final _g_zlib_decompressor_get_file_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(ffi.Pointer<GZlibDecompressor>)>>(
      'g_zlib_decompressor_get_file_info');
  late final _g_zlib_decompressor_get_file_info =
      _g_zlib_decompressor_get_file_infoPtr.asFunction<
          ffi.Pointer<GFileInfo> Function(ffi.Pointer<GZlibDecompressor>)>();
}

final class _GDoubleIEEE754 extends ffi.Opaque {}

final class _GFloatIEEE754 extends ffi.Opaque {}

final class _GTimeVal extends ffi.Struct {
  @glong()
  external int tv_sec;

  @glong()
  external int tv_usec;
}

typedef glong = ffi.Long;
typedef Dartglong = int;

final class _GBytes extends ffi.Opaque {}

final class _GArray extends ffi.Struct {
  external ffi.Pointer<gchar> data;

  @guint()
  external int len;
}

typedef gchar = ffi.Char;
typedef Dartgchar = int;
typedef guint = ffi.UnsignedInt;
typedef Dartguint = int;

final class _GByteArray extends ffi.Struct {
  external ffi.Pointer<guint8> data;

  @guint()
  external int len;
}

typedef guint8 = ffi.UnsignedChar;
typedef Dartguint8 = int;

final class _GPtrArray extends ffi.Struct {
  external ffi.Pointer<gpointer> pdata;

  @guint()
  external int len;
}

typedef gpointer = ffi.Pointer<ffi.Void>;
typedef GArray = _GArray;
typedef gboolean = gint;
typedef gint = ffi.Int;
typedef Dartgint = int;
typedef gsize = ffi.UnsignedLong;
typedef Dartgsize = int;
typedef gconstpointer = ffi.Pointer<ffi.Void>;
typedef GCompareFunc = ffi.Pointer<ffi.NativeFunction<GCompareFuncFunction>>;
typedef GCompareFuncFunction = gint Function(gconstpointer a, gconstpointer b);
typedef DartGCompareFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b);
typedef GCompareDataFunc
    = ffi.Pointer<ffi.NativeFunction<GCompareDataFuncFunction>>;
typedef GCompareDataFuncFunction = gint Function(
    gconstpointer a, gconstpointer b, gpointer user_data);
typedef DartGCompareDataFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b, gpointer user_data);
typedef GDestroyNotify
    = ffi.Pointer<ffi.NativeFunction<GDestroyNotifyFunction>>;
typedef GDestroyNotifyFunction = ffi.Void Function(gpointer data);
typedef DartGDestroyNotifyFunction = void Function(gpointer data);
typedef GPtrArray = _GPtrArray;

/// GCopyFunc:
/// @src: (not nullable): A pointer to the data which should be copied
/// @data: Additional data
///
/// A function of this signature is used to copy the node data
/// when doing a deep-copy of a tree.
///
/// Returns: (not nullable): A pointer to the copy
///
/// Since: 2.4
typedef GCopyFunc = ffi.Pointer<ffi.NativeFunction<GCopyFuncFunction>>;
typedef GCopyFuncFunction = gpointer Function(gconstpointer src, gpointer data);
typedef GFunc = ffi.Pointer<ffi.NativeFunction<GFuncFunction>>;
typedef GFuncFunction = ffi.Void Function(gpointer data, gpointer user_data);
typedef DartGFuncFunction = void Function(gpointer data, gpointer user_data);
typedef GEqualFunc = ffi.Pointer<ffi.NativeFunction<GEqualFuncFunction>>;
typedef GEqualFuncFunction = gboolean Function(
    gconstpointer a, gconstpointer b);
typedef DartGEqualFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b);
typedef GByteArray = _GByteArray;
typedef GBytes = _GBytes;
typedef GQuark = guint32;
typedef guint32 = ffi.UnsignedInt;
typedef Dartguint32 = int;

final class _GError extends ffi.Struct {
  @GQuark()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<gchar> message;
}

/// GErrorInitFunc:
/// @error: extended error
///
/// Specifies the type of function which is called just after an
/// extended error instance is created and its fields filled. It should
/// only initialize the fields in the private data, which can be
/// received with the generated `*_get_private()` function.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @error.
///
/// Since: 2.68
typedef GErrorInitFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorInitFuncFunction>>;
typedef GErrorInitFuncFunction = ffi.Void Function(ffi.Pointer<GError> error);
typedef DartGErrorInitFuncFunction = void Function(ffi.Pointer<GError> error);

/// GError:
/// @domain: error domain, e.g. %G_FILE_ERROR
/// @code: error code, e.g. %G_FILE_ERROR_NOENT
/// @message: human-readable informative error message
///
/// The `GError` structure contains information about
/// an error that has occurred.
typedef GError = _GError;

/// GErrorCopyFunc:
/// @src_error: source extended error
/// @dest_error: destination extended error
///
/// Specifies the type of function which is called when an extended
/// error instance is copied. It is passed the pointer to the
/// destination error and source error, and should copy only the fields
/// of the private data from @src_error to @dest_error.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @src_error and
/// @dest_error.
///
/// Since: 2.68
typedef GErrorCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorCopyFuncFunction>>;
typedef GErrorCopyFuncFunction = ffi.Void Function(
    ffi.Pointer<GError> src_error, ffi.Pointer<GError> dest_error);
typedef DartGErrorCopyFuncFunction = void Function(
    ffi.Pointer<GError> src_error, ffi.Pointer<GError> dest_error);

/// GErrorClearFunc:
/// @error: extended error to clear
///
/// Specifies the type of function which is called when an extended
/// error instance is freed. It is passed the error pointer about to be
/// freed, and should free the error's private data fields.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @error.
///
/// Since: 2.68
typedef GErrorClearFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorClearFuncFunction>>;
typedef GErrorClearFuncFunction = ffi.Void Function(ffi.Pointer<GError> error);
typedef DartGErrorClearFuncFunction = void Function(ffi.Pointer<GError> error);

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// GUserDirectory:
/// @G_USER_DIRECTORY_DESKTOP: the user's Desktop directory
/// @G_USER_DIRECTORY_DOCUMENTS: the user's Documents directory
/// @G_USER_DIRECTORY_DOWNLOAD: the user's Downloads directory
/// @G_USER_DIRECTORY_MUSIC: the user's Music directory
/// @G_USER_DIRECTORY_PICTURES: the user's Pictures directory
/// @G_USER_DIRECTORY_PUBLIC_SHARE: the user's shared directory
/// @G_USER_DIRECTORY_TEMPLATES: the user's Templates directory
/// @G_USER_DIRECTORY_VIDEOS: the user's Movies directory
/// @G_USER_N_DIRECTORIES: the number of enum values
///
/// These are logical ids for special directories which are defined
/// depending on the platform used. You should use g_get_user_special_dir()
/// to retrieve the full path associated to the logical id.
///
/// The #GUserDirectory enumeration can be extended at later date. Not
/// every platform has a directory for every logical id in this
/// enumeration.
///
/// Since: 2.14
abstract class GUserDirectory {
  static const int G_USER_DIRECTORY_DESKTOP = 0;
  static const int G_USER_DIRECTORY_DOCUMENTS = 1;
  static const int G_USER_DIRECTORY_DOWNLOAD = 2;
  static const int G_USER_DIRECTORY_MUSIC = 3;
  static const int G_USER_DIRECTORY_PICTURES = 4;
  static const int G_USER_DIRECTORY_PUBLIC_SHARE = 5;
  static const int G_USER_DIRECTORY_TEMPLATES = 6;
  static const int G_USER_DIRECTORY_VIDEOS = 7;
  static const int G_USER_N_DIRECTORIES = 8;
}

final class _GDebugKey extends ffi.Struct {
  external ffi.Pointer<gchar> key;

  @guint()
  external int value;
}

/// GDebugKey:
/// @key: the string
/// @value: the flag
///
/// Associates a string with a bit flag.
/// Used in g_parse_debug_string().
typedef GDebugKey = _GDebugKey;
typedef gulong = ffi.UnsignedLong;
typedef Dartgulong = int;

abstract class GFormatSizeFlags {
  static const int G_FORMAT_SIZE_DEFAULT = 0;
  static const int G_FORMAT_SIZE_LONG_FORMAT = 1;
  static const int G_FORMAT_SIZE_IEC_UNITS = 2;
  static const int G_FORMAT_SIZE_BITS = 4;
}

typedef guint64 = ffi.UnsignedLong;
typedef Dartguint64 = int;
typedef goffset = gint64;
typedef gint64 = ffi.Long;
typedef Dartgint64 = int;

/// GVoidFunc:
///
/// Declares a type of function which takes no arguments
/// and has no return value. It is used to specify the type
/// function passed to g_atexit().
typedef GVoidFunc = ffi.Pointer<ffi.NativeFunction<GVoidFuncFunction>>;
typedef GVoidFuncFunction = ffi.Void Function();
typedef DartGVoidFuncFunction = void Function();

abstract class GThreadError {
  static const int G_THREAD_ERROR_AGAIN = 0;
}

final class _GThread extends ffi.Struct {
  external GThreadFunc func;

  external gpointer data;

  @gboolean()
  external int joinable;

  @ffi.Int32()
  external int priority;
}

typedef GThreadFunc = ffi.Pointer<ffi.NativeFunction<GThreadFuncFunction>>;
typedef GThreadFuncFunction = gpointer Function(gpointer data);

abstract class GThreadPriority {
  static const int G_THREAD_PRIORITY_LOW = 0;
  static const int G_THREAD_PRIORITY_NORMAL = 1;
  static const int G_THREAD_PRIORITY_HIGH = 2;
  static const int G_THREAD_PRIORITY_URGENT = 3;
}

final class _GMutex extends ffi.Union {
  external gpointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GRecMutex extends ffi.Struct {
  external gpointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GRWLock extends ffi.Struct {
  external gpointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GCond extends ffi.Struct {
  external gpointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GPrivate extends ffi.Struct {
  external gpointer p;

  external GDestroyNotify notify;

  @ffi.Array.multi([2])
  external ffi.Array<gpointer> future;
}

final class _GOnce extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external gpointer retval;
}

abstract class GOnceStatus {
  static const int G_ONCE_STATUS_NOTCALLED = 0;
  static const int G_ONCE_STATUS_PROGRESS = 1;
  static const int G_ONCE_STATUS_READY = 2;
}

typedef GThread = _GThread;
typedef GMutex = _GMutex;
typedef GRWLock = _GRWLock;
typedef GRecMutex = _GRecMutex;
typedef GCond = _GCond;
typedef GPrivate = _GPrivate;
typedef GOnce = _GOnce;

final class _GAsyncQueue extends ffi.Opaque {}

typedef GAsyncQueue = _GAsyncQueue;
typedef GTimeVal = _GTimeVal;
typedef guchar = ffi.UnsignedChar;
typedef Dartguchar = int;

final class _GTimeZone extends ffi.Opaque {}

/// GTimeType:
/// @G_TIME_TYPE_STANDARD: the time is in local standard time
/// @G_TIME_TYPE_DAYLIGHT: the time is in local daylight time
/// @G_TIME_TYPE_UNIVERSAL: the time is in UTC
///
/// Disambiguates a given time in two ways.
///
/// First, specifies if the given time is in universal or local time.
///
/// Second, if the time is in local time, specifies if it is local
/// standard time or local daylight time.  This is important for the case
/// where the same local time occurs twice (during daylight savings time
/// transitions, for example).
abstract class GTimeType {
  static const int G_TIME_TYPE_STANDARD = 0;
  static const int G_TIME_TYPE_DAYLIGHT = 1;
  static const int G_TIME_TYPE_UNIVERSAL = 2;
}

typedef GTimeZone = _GTimeZone;
typedef gint32 = ffi.Int;
typedef Dartgint32 = int;

final class _GDateTime extends ffi.Opaque {}

/// GDateTime:
///
/// An opaque structure that represents a date and time, including a time zone.
///
/// Since: 2.26
typedef GDateTime = _GDateTime;
typedef gdouble = ffi.Double;
typedef Dartgdouble = double;

/// GTimeSpan:
///
/// A value representing an interval of time, in microseconds.
///
/// Since: 2.26
typedef GTimeSpan = gint64;

/// GBookmarkFileError:
/// @G_BOOKMARK_FILE_ERROR_INVALID_URI: URI was ill-formed
/// @G_BOOKMARK_FILE_ERROR_INVALID_VALUE: a requested field was not found
/// @G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: a requested application did
/// not register a bookmark
/// @G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: a requested URI was not found
/// @G_BOOKMARK_FILE_ERROR_READ: document was ill formed
/// @G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: the text being parsed was
/// in an unknown encoding
/// @G_BOOKMARK_FILE_ERROR_WRITE: an error occurred while writing
/// @G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: requested file was not found
///
/// Error codes returned by bookmark file parsing.
abstract class GBookmarkFileError {
  static const int G_BOOKMARK_FILE_ERROR_INVALID_URI = 0;
  static const int G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
  static const int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
  static const int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
  static const int G_BOOKMARK_FILE_ERROR_READ = 4;
  static const int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
  static const int G_BOOKMARK_FILE_ERROR_WRITE = 6;
  static const int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;
}

final class _GBookmarkFile extends ffi.Opaque {}

/// GBookmarkFile:
///
/// An opaque data structure representing a set of bookmarks.
typedef GBookmarkFile = _GBookmarkFile;
typedef time_t = __time_t;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;

/// GChecksumType:
/// @G_CHECKSUM_MD5: Use the MD5 hashing algorithm
/// @G_CHECKSUM_SHA1: Use the SHA-1 hashing algorithm
/// @G_CHECKSUM_SHA256: Use the SHA-256 hashing algorithm
/// @G_CHECKSUM_SHA384: Use the SHA-384 hashing algorithm (Since: 2.51)
/// @G_CHECKSUM_SHA512: Use the SHA-512 hashing algorithm (Since: 2.36)
///
/// The hashing algorithm to be used by #GChecksum when performing the
/// digest of some data.
///
/// Note that the #GChecksumType enumeration may be extended at a later
/// date to include new hashing algorithm types.
///
/// Since: 2.16
abstract class GChecksumType {
  static const int G_CHECKSUM_MD5 = 0;
  static const int G_CHECKSUM_SHA1 = 1;
  static const int G_CHECKSUM_SHA256 = 2;
  static const int G_CHECKSUM_SHA512 = 3;
  static const int G_CHECKSUM_SHA384 = 4;
}

final class _GChecksum extends ffi.Opaque {}

typedef gssize = ffi.Long;
typedef Dartgssize = int;

/// GChecksum:
///
/// An opaque structure representing a checksumming operation.
///
/// To create a new GChecksum, use g_checksum_new(). To free
/// a GChecksum, use g_checksum_free().
///
/// Since: 2.16
typedef GChecksum = _GChecksum;

/// GConvertError:
/// @G_CONVERT_ERROR_NO_CONVERSION: Conversion between the requested character
/// sets is not supported.
/// @G_CONVERT_ERROR_ILLEGAL_SEQUENCE: Invalid byte sequence in conversion input;
/// or the character sequence could not be represented in the target
/// character set.
/// @G_CONVERT_ERROR_FAILED: Conversion failed for some reason.
/// @G_CONVERT_ERROR_PARTIAL_INPUT: Partial character sequence at end of input.
/// @G_CONVERT_ERROR_BAD_URI: URI is invalid.
/// @G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: Pathname is not an absolute path.
/// @G_CONVERT_ERROR_NO_MEMORY: No memory available. Since: 2.40
/// @G_CONVERT_ERROR_EMBEDDED_NUL: An embedded NUL character is present in
/// conversion output where a NUL-terminated string is expected.
/// Since: 2.56
///
/// Error codes returned by character set conversion routines.
abstract class GConvertError {
  static const int G_CONVERT_ERROR_NO_CONVERSION = 0;
  static const int G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
  static const int G_CONVERT_ERROR_FAILED = 2;
  static const int G_CONVERT_ERROR_PARTIAL_INPUT = 3;
  static const int G_CONVERT_ERROR_BAD_URI = 4;
  static const int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;
  static const int G_CONVERT_ERROR_NO_MEMORY = 6;
  static const int G_CONVERT_ERROR_EMBEDDED_NUL = 7;
}

final class _GIConv extends ffi.Opaque {}

/// GIConv: (skip)
///
/// The GIConv struct wraps an iconv() conversion descriptor. It contains
/// private data and should only be accessed using the following functions.
typedef GIConv = ffi.Pointer<_GIConv>;

final class _GData extends ffi.Opaque {}

typedef GData = _GData;
typedef GDuplicateFunc
    = ffi.Pointer<ffi.NativeFunction<GDuplicateFuncFunction>>;
typedef GDuplicateFuncFunction = gpointer Function(
    gpointer data, gpointer user_data);
typedef GDataForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GDataForeachFuncFunction>>;
typedef GDataForeachFuncFunction = ffi.Void Function(
    GQuark key_id, gpointer data, gpointer user_data);
typedef DartGDataForeachFuncFunction = void Function(
    Dartguint32 key_id, gpointer data, gpointer user_data);

final class _GDate extends ffi.Opaque {}

abstract class GDateDMY {
  static const int G_DATE_DAY = 0;
  static const int G_DATE_MONTH = 1;
  static const int G_DATE_YEAR = 2;
}

abstract class GDateWeekday {
  static const int G_DATE_BAD_WEEKDAY = 0;
  static const int G_DATE_MONDAY = 1;
  static const int G_DATE_TUESDAY = 2;
  static const int G_DATE_WEDNESDAY = 3;
  static const int G_DATE_THURSDAY = 4;
  static const int G_DATE_FRIDAY = 5;
  static const int G_DATE_SATURDAY = 6;
  static const int G_DATE_SUNDAY = 7;
}

abstract class GDateMonth {
  static const int G_DATE_BAD_MONTH = 0;
  static const int G_DATE_JANUARY = 1;
  static const int G_DATE_FEBRUARY = 2;
  static const int G_DATE_MARCH = 3;
  static const int G_DATE_APRIL = 4;
  static const int G_DATE_MAY = 5;
  static const int G_DATE_JUNE = 6;
  static const int G_DATE_JULY = 7;
  static const int G_DATE_AUGUST = 8;
  static const int G_DATE_SEPTEMBER = 9;
  static const int G_DATE_OCTOBER = 10;
  static const int G_DATE_NOVEMBER = 11;
  static const int G_DATE_DECEMBER = 12;
}

typedef GDate = _GDate;
typedef GDateDay = guint8;
typedef GDateYear = guint16;
typedef guint16 = ffi.UnsignedShort;
typedef Dartguint16 = int;
typedef GTime = gint32;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class _GDir extends ffi.Opaque {}

typedef GDir = _GDir;

abstract class GFileError {
  static const int G_FILE_ERROR_EXIST = 0;
  static const int G_FILE_ERROR_ISDIR = 1;
  static const int G_FILE_ERROR_ACCES = 2;
  static const int G_FILE_ERROR_NAMETOOLONG = 3;
  static const int G_FILE_ERROR_NOENT = 4;
  static const int G_FILE_ERROR_NOTDIR = 5;
  static const int G_FILE_ERROR_NXIO = 6;
  static const int G_FILE_ERROR_NODEV = 7;
  static const int G_FILE_ERROR_ROFS = 8;
  static const int G_FILE_ERROR_TXTBSY = 9;
  static const int G_FILE_ERROR_FAULT = 10;
  static const int G_FILE_ERROR_LOOP = 11;
  static const int G_FILE_ERROR_NOSPC = 12;
  static const int G_FILE_ERROR_NOMEM = 13;
  static const int G_FILE_ERROR_MFILE = 14;
  static const int G_FILE_ERROR_NFILE = 15;
  static const int G_FILE_ERROR_BADF = 16;
  static const int G_FILE_ERROR_INVAL = 17;
  static const int G_FILE_ERROR_PIPE = 18;
  static const int G_FILE_ERROR_AGAIN = 19;
  static const int G_FILE_ERROR_INTR = 20;
  static const int G_FILE_ERROR_IO = 21;
  static const int G_FILE_ERROR_PERM = 22;
  static const int G_FILE_ERROR_NOSYS = 23;
  static const int G_FILE_ERROR_FAILED = 24;
}

abstract class GFileTest {
  static const int G_FILE_TEST_IS_REGULAR = 1;
  static const int G_FILE_TEST_IS_SYMLINK = 2;
  static const int G_FILE_TEST_IS_DIR = 4;
  static const int G_FILE_TEST_IS_EXECUTABLE = 8;
  static const int G_FILE_TEST_EXISTS = 16;
}

/// GFileSetContentsFlags:
/// @G_FILE_SET_CONTENTS_NONE: No guarantees about file consistency or durability.
/// The most dangerous setting, which is slightly faster than other settings.
/// @G_FILE_SET_CONTENTS_CONSISTENT: Guarantee file consistency: after a crash,
/// either the old version of the file or the new version of the file will be
/// available, but not a mixture. On Unix systems this equates to an `fsync()`
/// on the file and use of an atomic `rename()` of the new version of the file
/// over the old.
/// @G_FILE_SET_CONTENTS_DURABLE: Guarantee file durability: after a crash, the
/// new version of the file will be available. On Unix systems this equates to
/// an `fsync()` on the file (if %G_FILE_SET_CONTENTS_CONSISTENT is unset), or
/// the effects of %G_FILE_SET_CONTENTS_CONSISTENT plus an `fsync()` on the
/// directory containing the file after calling `rename()`.
/// @G_FILE_SET_CONTENTS_ONLY_EXISTING: Only apply consistency and durability
/// guarantees if the file already exists. This may speed up file operations
/// if the file doesn’t currently exist, but may result in a corrupted version
/// of the new file if the system crashes while writing it.
///
/// Flags to pass to g_file_set_contents_full() to affect its safety and
/// performance.
///
/// Since: 2.66
abstract class GFileSetContentsFlags {
  static const int G_FILE_SET_CONTENTS_NONE = 0;
  static const int G_FILE_SET_CONTENTS_CONSISTENT = 1;
  static const int G_FILE_SET_CONTENTS_DURABLE = 2;
  static const int G_FILE_SET_CONTENTS_ONLY_EXISTING = 4;
}

final class _GMemVTable extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<gpointer Function(gsize n_bytes)>>
      malloc;

  external ffi.Pointer<
          ffi.NativeFunction<gpointer Function(gpointer mem, gsize n_bytes)>>
      realloc;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer mem)>>
      free;

  external ffi.Pointer<
      ffi.NativeFunction<
          gpointer Function(gsize n_blocks, gsize n_block_bytes)>> calloc;

  external ffi.Pointer<ffi.NativeFunction<gpointer Function(gsize n_bytes)>>
      try_malloc;

  external ffi.Pointer<
          ffi.NativeFunction<gpointer Function(gpointer mem, gsize n_bytes)>>
      try_realloc;
}

/// GMemVTable:
/// @malloc: function to use for allocating memory.
/// @realloc: function to use for reallocating memory.
/// @free: function to use to free memory.
/// @calloc: function to use for allocating zero-filled memory.
/// @try_malloc: function to use for allocating memory without a default error handler.
/// @try_realloc: function to use for reallocating memory without a default error handler.
///
/// A set of functions used to perform memory allocation. The same #GMemVTable must
/// be used for all allocations in the same program; a call to g_mem_set_vtable(),
/// if it exists, should be prior to any use of GLib.
///
/// This functions related to this has been deprecated in 2.46, and no longer work.
typedef GMemVTable = _GMemVTable;

final class _GNode extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GNode> next;

  external ffi.Pointer<GNode> prev;

  external ffi.Pointer<GNode> parent;

  external ffi.Pointer<GNode> children;
}

typedef GNode = _GNode;

abstract class GTraverseFlags {
  static const int G_TRAVERSE_LEAVES = 1;
  static const int G_TRAVERSE_NON_LEAVES = 2;
  static const int G_TRAVERSE_ALL = 3;
  static const int G_TRAVERSE_MASK = 3;
  static const int G_TRAVERSE_LEAFS = 1;
  static const int G_TRAVERSE_NON_LEAFS = 2;
}

abstract class GTraverseType {
  static const int G_IN_ORDER = 0;
  static const int G_PRE_ORDER = 1;
  static const int G_POST_ORDER = 2;
  static const int G_LEVEL_ORDER = 3;
}

typedef GNodeTraverseFunc
    = ffi.Pointer<ffi.NativeFunction<GNodeTraverseFuncFunction>>;
typedef GNodeTraverseFuncFunction = gboolean Function(
    ffi.Pointer<GNode> node, gpointer data);
typedef DartGNodeTraverseFuncFunction = Dartgint Function(
    ffi.Pointer<GNode> node, gpointer data);
typedef GNodeForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GNodeForeachFuncFunction>>;
typedef GNodeForeachFuncFunction = ffi.Void Function(
    ffi.Pointer<GNode> node, gpointer data);
typedef DartGNodeForeachFuncFunction = void Function(
    ffi.Pointer<GNode> node, gpointer data);

final class _GList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GList> next;

  external ffi.Pointer<GList> prev;
}

typedef GList = _GList;

final class _GHashTable extends ffi.Opaque {}

final class _GHashTableIter extends ffi.Struct {
  external gpointer dummy1;

  external gpointer dummy2;

  external gpointer dummy3;

  @ffi.Int()
  external int dummy4;

  @gboolean()
  external int dummy5;

  external gpointer dummy6;
}

typedef GHashTable = _GHashTable;
typedef GHashFunc = ffi.Pointer<ffi.NativeFunction<GHashFuncFunction>>;
typedef GHashFuncFunction = guint Function(gconstpointer key);
typedef DartGHashFuncFunction = Dartguint Function(gconstpointer key);
typedef GHFunc = ffi.Pointer<ffi.NativeFunction<GHFuncFunction>>;
typedef GHFuncFunction = ffi.Void Function(
    gpointer key, gpointer value, gpointer user_data);
typedef DartGHFuncFunction = void Function(
    gpointer key, gpointer value, gpointer user_data);
typedef GHRFunc = ffi.Pointer<ffi.NativeFunction<GHRFuncFunction>>;
typedef GHRFuncFunction = gboolean Function(
    gpointer key, gpointer value, gpointer user_data);
typedef DartGHRFuncFunction = Dartgint Function(
    gpointer key, gpointer value, gpointer user_data);
typedef GHashTableIter = _GHashTableIter;

final class _GHmac extends ffi.Opaque {}

/// GHmac:
///
/// An opaque structure representing a HMAC operation.
/// To create a new GHmac, use g_hmac_new(). To free
/// a GHmac, use g_hmac_unref().
///
/// Since: 2.30
typedef GHmac = _GHmac;

final class _GHook extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GHook> next;

  external ffi.Pointer<GHook> prev;

  @guint()
  external int ref_count;

  @gulong()
  external int hook_id;

  @guint()
  external int flags;

  external gpointer func;

  external GDestroyNotify destroy;
}

typedef GHook = _GHook;

final class _GHookList extends ffi.Opaque {}

abstract class GHookFlagMask {
  static const int G_HOOK_FLAG_ACTIVE = 1;
  static const int G_HOOK_FLAG_IN_CALL = 2;
  static const int G_HOOK_FLAG_MASK = 15;
}

typedef GHookList = _GHookList;
typedef GHookCompareFunc
    = ffi.Pointer<ffi.NativeFunction<GHookCompareFuncFunction>>;
typedef GHookCompareFuncFunction = gint Function(
    ffi.Pointer<GHook> new_hook, ffi.Pointer<GHook> sibling);
typedef DartGHookCompareFuncFunction = Dartgint Function(
    ffi.Pointer<GHook> new_hook, ffi.Pointer<GHook> sibling);
typedef GHookFindFunc = ffi.Pointer<ffi.NativeFunction<GHookFindFuncFunction>>;
typedef GHookFindFuncFunction = gboolean Function(
    ffi.Pointer<GHook> hook, gpointer data);
typedef DartGHookFindFuncFunction = Dartgint Function(
    ffi.Pointer<GHook> hook, gpointer data);
typedef GHookMarshaller
    = ffi.Pointer<ffi.NativeFunction<GHookMarshallerFunction>>;
typedef GHookMarshallerFunction = ffi.Void Function(
    ffi.Pointer<GHook> hook, gpointer marshal_data);
typedef DartGHookMarshallerFunction = void Function(
    ffi.Pointer<GHook> hook, gpointer marshal_data);
typedef GHookCheckMarshaller
    = ffi.Pointer<ffi.NativeFunction<GHookCheckMarshallerFunction>>;
typedef GHookCheckMarshallerFunction = gboolean Function(
    ffi.Pointer<GHook> hook, gpointer marshal_data);
typedef DartGHookCheckMarshallerFunction = Dartgint Function(
    ffi.Pointer<GHook> hook, gpointer marshal_data);

/// GPollFD:
/// @fd: the file descriptor to poll (or a HANDLE on Win32)
/// @events: a bitwise combination from #GIOCondition, specifying which
/// events should be polled for. Typically for reading from a file
/// descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and
/// for writing you would use %G_IO_OUT | %G_IO_ERR.
/// @revents: a bitwise combination of flags from #GIOCondition, returned
/// from the poll() function to indicate which events occurred.
///
/// Represents a file descriptor, which events to poll for, and which events
/// occurred.
final class _GPollFD extends ffi.Struct {
  @gint()
  external int fd;

  @gushort()
  external int events;

  @gushort()
  external int revents;
}

typedef gushort = ffi.UnsignedShort;
typedef Dartgushort = int;
typedef GPollFD = _GPollFD;

final class _GSList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GSList> next;
}

typedef GSList = _GSList;

abstract class GIOCondition {
  static const int G_IO_IN = 1;
  static const int G_IO_OUT = 4;
  static const int G_IO_PRI = 2;
  static const int G_IO_ERR = 8;
  static const int G_IO_HUP = 16;
  static const int G_IO_NVAL = 32;
}

/// GMainContextFlags:
/// @G_MAIN_CONTEXT_FLAGS_NONE: Default behaviour.
/// @G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING: Assume that polling for events will
/// free the thread to process other jobs. That's useful if you're using
/// `g_main_context_{prepare,query,check,dispatch}` to integrate GMainContext in
/// other event loops.
///
/// Flags to pass to g_main_context_new_with_flags() which affect the behaviour
/// of a #GMainContext.
///
/// Since: 2.72
abstract class GMainContextFlags {
  static const int G_MAIN_CONTEXT_FLAGS_NONE = 0;
  static const int G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1;
}

final class _GMainContext extends ffi.Opaque {}

final class _GMainLoop extends ffi.Opaque {}

final class _GSource extends ffi.Struct {
  external gpointer callback_data;

  external ffi.Pointer<GSourceCallbackFuncs> callback_funcs;

  external ffi.Pointer<GSourceFuncs> source_funcs;

  @guint()
  external int ref_count;

  external ffi.Pointer<GMainContext> context;

  @gint()
  external int priority;

  @guint()
  external int flags;

  @guint()
  external int source_id;

  external ffi.Pointer<GSList> poll_fds;

  external ffi.Pointer<GSource> prev;

  external ffi.Pointer<GSource> next;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<GSourcePrivate> priv;
}

/// GSourceCallbackFuncs:
/// @ref: Called when a reference is added to the callback object
/// @unref: Called when a reference to the callback object is dropped
/// @get: Called to extract the callback function and data from the
/// callback object.
///
/// The `GSourceCallbackFuncs` struct contains
/// functions for managing callback objects.
typedef GSourceCallbackFuncs = _GSourceCallbackFuncs;

final class _GSourceCallbackFuncs extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer cb_data)>>
      ref;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer cb_data)>>
      unref;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(gpointer cb_data, ffi.Pointer<GSource> source,
              ffi.Pointer<GSourceFunc> func, ffi.Pointer<gpointer> data)>> get1;
}

/// GSource:
///
/// The `GSource` struct is an opaque data type
/// representing an event source.
typedef GSource = _GSource;

/// GSourceFunc:
/// @user_data: data passed to the function, set when the source was
/// created with one of the above functions
///
/// Specifies the type of function passed to g_timeout_add(),
/// g_timeout_add_full(), g_idle_add(), and g_idle_add_full().
///
/// When calling g_source_set_callback(), you may need to cast a function of a
/// different type to this type. Use G_SOURCE_FUNC() to avoid warnings about
/// incompatible function types.
///
/// Returns: %FALSE if the source should be removed. %G_SOURCE_CONTINUE and
/// %G_SOURCE_REMOVE are more memorable names for the return value.
typedef GSourceFunc = ffi.Pointer<ffi.NativeFunction<GSourceFuncFunction>>;
typedef GSourceFuncFunction = gboolean Function(gpointer user_data);
typedef DartGSourceFuncFunction = Dartgint Function(gpointer user_data);

/// GSourceFuncs:
/// @prepare: Called before all the file descriptors are polled. If the
/// source can determine that it is ready here (without waiting for the
/// results of the poll() call) it should return %TRUE. It can also return
/// a @timeout_ value which should be the maximum timeout (in milliseconds)
/// which should be passed to the poll() call. The actual timeout used will
/// be -1 if all sources returned -1, or it will be the minimum of all
/// the @timeout_ values returned which were >= 0.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE with a timeout of -1.  If @prepare returns a
/// timeout and the source also has a ready time set, then the
/// lower of the two will be used.
/// @check: Called after all the file descriptors are polled. The source
/// should return %TRUE if it is ready to be dispatched. Note that some
/// time may have passed since the previous prepare function was called,
/// so the source should be checked again here.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE.
/// @dispatch: Called to dispatch the event source, after it has returned
/// %TRUE in either its @prepare or its @check function, or if a ready time
/// has been reached. The @dispatch function receives a callback function and
/// user data. The callback function may be %NULL if the source was never
/// connected to a callback using g_source_set_callback(). The @dispatch
/// function should call the callback function with @user_data and whatever
/// additional parameters are needed for this type of event source. The
/// return value of the @dispatch function should be %G_SOURCE_REMOVE if the
/// source should be removed or %G_SOURCE_CONTINUE to keep it.
/// @finalize: Called when the source is finalized. At this point, the source
/// will have been destroyed, had its callback cleared, and have been removed
/// from its #GMainContext, but it will still have its final reference count,
/// so methods can be called on it from within this function.
///
/// The `GSourceFuncs` struct contains a table of
/// functions used to handle event sources in a generic manner.
///
/// For idle sources, the prepare and check functions always return %TRUE
/// to indicate that the source is always ready to be processed. The prepare
/// function also returns a timeout value of 0 to ensure that the poll() call
/// doesn't block (since that would be time wasted which could have been spent
/// running the idle function).
///
/// For timeout sources, the prepare and check functions both return %TRUE
/// if the timeout interval has expired. The prepare function also returns
/// a timeout value to ensure that the poll() call doesn't block too long
/// and miss the next timeout.
///
/// For file descriptor sources, the prepare function typically returns %FALSE,
/// since it must wait until poll() has been called before it knows whether
/// any events need to be processed. It sets the returned timeout to -1 to
/// indicate that it doesn't mind how long the poll() call blocks. In the
/// check function, it tests the results of the poll() call to see if the
/// required condition has been met, and returns %TRUE if so.
typedef GSourceFuncs = _GSourceFuncs;

final class _GSourceFuncs extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSource> source, ffi.Pointer<gint> timeout_)>>
      prepare;

  external ffi.Pointer<
      ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource> source)>> check;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSource> source, GSourceFunc callback,
              gpointer user_data)>> dispatch;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource> source)>>
      finalize;

  external GSourceFunc closure_callback;

  external GSourceDummyMarshal closure_marshal;
}

/// GSourceDummyMarshal:
///
/// This is just a placeholder for #GClosureMarshal,
/// which cannot be used here for dependency reasons.
typedef GSourceDummyMarshal
    = ffi.Pointer<ffi.NativeFunction<GSourceDummyMarshalFunction>>;
typedef GSourceDummyMarshalFunction = ffi.Void Function();
typedef DartGSourceDummyMarshalFunction = void Function();

/// GMainContext:
///
/// The `GMainContext` struct is an opaque data
/// type representing a set of sources to be handled in a main loop.
typedef GMainContext = _GMainContext;
typedef GSourcePrivate = _GSourcePrivate;

final class _GSourcePrivate extends ffi.Opaque {}

/// GPollFunc:
/// @ufds: an array of #GPollFD elements
/// @nfsd: the number of elements in @ufds
/// @timeout_: the maximum time to wait for an event of the file descriptors.
/// A negative value indicates an infinite timeout.
///
/// Specifies the type of function passed to g_main_context_set_poll_func().
/// The semantics of the function should match those of the poll() system call.
///
/// Returns: the number of #GPollFD elements which have events or errors
/// reported, or -1 if an error occurred.
typedef GPollFunc = ffi.Pointer<ffi.NativeFunction<GPollFuncFunction>>;
typedef GPollFuncFunction = gint Function(
    ffi.Pointer<GPollFD> ufds, guint nfsd, gint timeout_);
typedef DartGPollFuncFunction = Dartgint Function(
    ffi.Pointer<GPollFD> ufds, Dartguint nfsd, Dartgint timeout_);

/// GMainLoop:
///
/// The `GMainLoop` struct is an opaque data type
/// representing the main event loop of a GLib or GTK+ application.
typedef GMainLoop = _GMainLoop;

/// GSourceDisposeFunc:
/// @source: #GSource that is currently being disposed
///
/// Dispose function for @source. See g_source_set_dispose_function() for
/// details.
///
/// Since: 2.64
typedef GSourceDisposeFunc
    = ffi.Pointer<ffi.NativeFunction<GSourceDisposeFuncFunction>>;
typedef GSourceDisposeFuncFunction = ffi.Void Function(
    ffi.Pointer<GSource> source);
typedef DartGSourceDisposeFuncFunction = void Function(
    ffi.Pointer<GSource> source);
typedef GPid = ffi.Int;
typedef DartGPid = int;

/// GClearHandleFunc:
/// @handle_id: the handle ID to clear
///
/// Specifies the type of function passed to g_clear_handle_id().
/// The implementation is expected to free the resource identified
/// by @handle_id; for instance, if @handle_id is a #GSource ID,
/// g_source_remove() can be used.
///
/// Since: 2.56
typedef GClearHandleFunc
    = ffi.Pointer<ffi.NativeFunction<GClearHandleFuncFunction>>;
typedef GClearHandleFuncFunction = ffi.Void Function(guint handle_id);
typedef DartGClearHandleFuncFunction = void Function(Dartguint handle_id);

/// GChildWatchFunc:
/// @pid: the process id of the child process
/// @wait_status: Status information about the child process, encoded
/// in a platform-specific manner
/// @user_data: user data passed to g_child_watch_add()
///
/// Prototype of a #GChildWatchSource callback, called when a child
/// process has exited.
///
/// To interpret @wait_status, see the documentation
/// for g_spawn_check_wait_status(). In particular,
/// on Unix platforms, note that it is usually not equal
/// to the integer passed to `exit()` or returned from `main()`.
typedef GChildWatchFunc
    = ffi.Pointer<ffi.NativeFunction<GChildWatchFuncFunction>>;
typedef GChildWatchFuncFunction = ffi.Void Function(
    GPid pid, gint wait_status, gpointer user_data);
typedef DartGChildWatchFuncFunction = void Function(
    DartGPid pid, Dartgint wait_status, gpointer user_data);

/// GUnicodeType:
/// @G_UNICODE_CONTROL: General category "Other, Control" (Cc)
/// @G_UNICODE_FORMAT: General category "Other, Format" (Cf)
/// @G_UNICODE_UNASSIGNED: General category "Other, Not Assigned" (Cn)
/// @G_UNICODE_PRIVATE_USE: General category "Other, Private Use" (Co)
/// @G_UNICODE_SURROGATE: General category "Other, Surrogate" (Cs)
/// @G_UNICODE_LOWERCASE_LETTER: General category "Letter, Lowercase" (Ll)
/// @G_UNICODE_MODIFIER_LETTER: General category "Letter, Modifier" (Lm)
/// @G_UNICODE_OTHER_LETTER: General category "Letter, Other" (Lo)
/// @G_UNICODE_TITLECASE_LETTER: General category "Letter, Titlecase" (Lt)
/// @G_UNICODE_UPPERCASE_LETTER: General category "Letter, Uppercase" (Lu)
/// @G_UNICODE_SPACING_MARK: General category "Mark, Spacing" (Mc)
/// @G_UNICODE_ENCLOSING_MARK: General category "Mark, Enclosing" (Me)
/// @G_UNICODE_NON_SPACING_MARK: General category "Mark, Nonspacing" (Mn)
/// @G_UNICODE_DECIMAL_NUMBER: General category "Number, Decimal Digit" (Nd)
/// @G_UNICODE_LETTER_NUMBER: General category "Number, Letter" (Nl)
/// @G_UNICODE_OTHER_NUMBER: General category "Number, Other" (No)
/// @G_UNICODE_CONNECT_PUNCTUATION: General category "Punctuation, Connector" (Pc)
/// @G_UNICODE_DASH_PUNCTUATION: General category "Punctuation, Dash" (Pd)
/// @G_UNICODE_CLOSE_PUNCTUATION: General category "Punctuation, Close" (Pe)
/// @G_UNICODE_FINAL_PUNCTUATION: General category "Punctuation, Final quote" (Pf)
/// @G_UNICODE_INITIAL_PUNCTUATION: General category "Punctuation, Initial quote" (Pi)
/// @G_UNICODE_OTHER_PUNCTUATION: General category "Punctuation, Other" (Po)
/// @G_UNICODE_OPEN_PUNCTUATION: General category "Punctuation, Open" (Ps)
/// @G_UNICODE_CURRENCY_SYMBOL: General category "Symbol, Currency" (Sc)
/// @G_UNICODE_MODIFIER_SYMBOL: General category "Symbol, Modifier" (Sk)
/// @G_UNICODE_MATH_SYMBOL: General category "Symbol, Math" (Sm)
/// @G_UNICODE_OTHER_SYMBOL: General category "Symbol, Other" (So)
/// @G_UNICODE_LINE_SEPARATOR: General category "Separator, Line" (Zl)
/// @G_UNICODE_PARAGRAPH_SEPARATOR: General category "Separator, Paragraph" (Zp)
/// @G_UNICODE_SPACE_SEPARATOR: General category "Separator, Space" (Zs)
///
/// These are the possible character classifications from the
/// Unicode specification.
/// See [Unicode Character Database](http://www.unicode.org/reports/tr44/#General_Category_Values).
abstract class GUnicodeType {
  static const int G_UNICODE_CONTROL = 0;
  static const int G_UNICODE_FORMAT = 1;
  static const int G_UNICODE_UNASSIGNED = 2;
  static const int G_UNICODE_PRIVATE_USE = 3;
  static const int G_UNICODE_SURROGATE = 4;
  static const int G_UNICODE_LOWERCASE_LETTER = 5;
  static const int G_UNICODE_MODIFIER_LETTER = 6;
  static const int G_UNICODE_OTHER_LETTER = 7;
  static const int G_UNICODE_TITLECASE_LETTER = 8;
  static const int G_UNICODE_UPPERCASE_LETTER = 9;
  static const int G_UNICODE_SPACING_MARK = 10;
  static const int G_UNICODE_ENCLOSING_MARK = 11;
  static const int G_UNICODE_NON_SPACING_MARK = 12;
  static const int G_UNICODE_DECIMAL_NUMBER = 13;
  static const int G_UNICODE_LETTER_NUMBER = 14;
  static const int G_UNICODE_OTHER_NUMBER = 15;
  static const int G_UNICODE_CONNECT_PUNCTUATION = 16;
  static const int G_UNICODE_DASH_PUNCTUATION = 17;
  static const int G_UNICODE_CLOSE_PUNCTUATION = 18;
  static const int G_UNICODE_FINAL_PUNCTUATION = 19;
  static const int G_UNICODE_INITIAL_PUNCTUATION = 20;
  static const int G_UNICODE_OTHER_PUNCTUATION = 21;
  static const int G_UNICODE_OPEN_PUNCTUATION = 22;
  static const int G_UNICODE_CURRENCY_SYMBOL = 23;
  static const int G_UNICODE_MODIFIER_SYMBOL = 24;
  static const int G_UNICODE_MATH_SYMBOL = 25;
  static const int G_UNICODE_OTHER_SYMBOL = 26;
  static const int G_UNICODE_LINE_SEPARATOR = 27;
  static const int G_UNICODE_PARAGRAPH_SEPARATOR = 28;
  static const int G_UNICODE_SPACE_SEPARATOR = 29;
}

/// GUnicodeBreakType:
/// @G_UNICODE_BREAK_MANDATORY: Mandatory Break (BK)
/// @G_UNICODE_BREAK_CARRIAGE_RETURN: Carriage Return (CR)
/// @G_UNICODE_BREAK_LINE_FEED: Line Feed (LF)
/// @G_UNICODE_BREAK_COMBINING_MARK: Attached Characters and Combining Marks (CM)
/// @G_UNICODE_BREAK_SURROGATE: Surrogates (SG)
/// @G_UNICODE_BREAK_ZERO_WIDTH_SPACE: Zero Width Space (ZW)
/// @G_UNICODE_BREAK_INSEPARABLE: Inseparable (IN)
/// @G_UNICODE_BREAK_NON_BREAKING_GLUE: Non-breaking ("Glue") (GL)
/// @G_UNICODE_BREAK_CONTINGENT: Contingent Break Opportunity (CB)
/// @G_UNICODE_BREAK_SPACE: Space (SP)
/// @G_UNICODE_BREAK_AFTER: Break Opportunity After (BA)
/// @G_UNICODE_BREAK_BEFORE: Break Opportunity Before (BB)
/// @G_UNICODE_BREAK_BEFORE_AND_AFTER: Break Opportunity Before and After (B2)
/// @G_UNICODE_BREAK_HYPHEN: Hyphen (HY)
/// @G_UNICODE_BREAK_NON_STARTER: Nonstarter (NS)
/// @G_UNICODE_BREAK_OPEN_PUNCTUATION: Opening Punctuation (OP)
/// @G_UNICODE_BREAK_CLOSE_PUNCTUATION: Closing Punctuation (CL)
/// @G_UNICODE_BREAK_QUOTATION: Ambiguous Quotation (QU)
/// @G_UNICODE_BREAK_EXCLAMATION: Exclamation/Interrogation (EX)
/// @G_UNICODE_BREAK_IDEOGRAPHIC: Ideographic (ID)
/// @G_UNICODE_BREAK_NUMERIC: Numeric (NU)
/// @G_UNICODE_BREAK_INFIX_SEPARATOR: Infix Separator (Numeric) (IS)
/// @G_UNICODE_BREAK_SYMBOL: Symbols Allowing Break After (SY)
/// @G_UNICODE_BREAK_ALPHABETIC: Ordinary Alphabetic and Symbol Characters (AL)
/// @G_UNICODE_BREAK_PREFIX: Prefix (Numeric) (PR)
/// @G_UNICODE_BREAK_POSTFIX: Postfix (Numeric) (PO)
/// @G_UNICODE_BREAK_COMPLEX_CONTEXT: Complex Content Dependent (South East Asian) (SA)
/// @G_UNICODE_BREAK_AMBIGUOUS: Ambiguous (Alphabetic or Ideographic) (AI)
/// @G_UNICODE_BREAK_UNKNOWN: Unknown (XX)
/// @G_UNICODE_BREAK_NEXT_LINE: Next Line (NL)
/// @G_UNICODE_BREAK_WORD_JOINER: Word Joiner (WJ)
/// @G_UNICODE_BREAK_HANGUL_L_JAMO: Hangul L Jamo (JL)
/// @G_UNICODE_BREAK_HANGUL_V_JAMO: Hangul V Jamo (JV)
/// @G_UNICODE_BREAK_HANGUL_T_JAMO: Hangul T Jamo (JT)
/// @G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: Hangul LV Syllable (H2)
/// @G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: Hangul LVT Syllable (H3)
/// @G_UNICODE_BREAK_CLOSE_PARANTHESIS: Closing Parenthesis (CP). Since 2.28. Deprecated: 2.70: Use %G_UNICODE_BREAK_CLOSE_PARENTHESIS instead.
/// @G_UNICODE_BREAK_CLOSE_PARENTHESIS: Closing Parenthesis (CP). Since 2.70
/// @G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: Conditional Japanese Starter (CJ). Since: 2.32
/// @G_UNICODE_BREAK_HEBREW_LETTER: Hebrew Letter (HL). Since: 2.32
/// @G_UNICODE_BREAK_REGIONAL_INDICATOR: Regional Indicator (RI). Since: 2.36
/// @G_UNICODE_BREAK_EMOJI_BASE: Emoji Base (EB). Since: 2.50
/// @G_UNICODE_BREAK_EMOJI_MODIFIER: Emoji Modifier (EM). Since: 2.50
/// @G_UNICODE_BREAK_ZERO_WIDTH_JOINER: Zero Width Joiner (ZWJ). Since: 2.50
///
/// These are the possible line break classifications.
///
/// Since new unicode versions may add new types here, applications should be ready
/// to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.
///
/// See [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/).
abstract class GUnicodeBreakType {
  static const int G_UNICODE_BREAK_MANDATORY = 0;
  static const int G_UNICODE_BREAK_CARRIAGE_RETURN = 1;
  static const int G_UNICODE_BREAK_LINE_FEED = 2;
  static const int G_UNICODE_BREAK_COMBINING_MARK = 3;
  static const int G_UNICODE_BREAK_SURROGATE = 4;
  static const int G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5;
  static const int G_UNICODE_BREAK_INSEPARABLE = 6;
  static const int G_UNICODE_BREAK_NON_BREAKING_GLUE = 7;
  static const int G_UNICODE_BREAK_CONTINGENT = 8;
  static const int G_UNICODE_BREAK_SPACE = 9;
  static const int G_UNICODE_BREAK_AFTER = 10;
  static const int G_UNICODE_BREAK_BEFORE = 11;
  static const int G_UNICODE_BREAK_BEFORE_AND_AFTER = 12;
  static const int G_UNICODE_BREAK_HYPHEN = 13;
  static const int G_UNICODE_BREAK_NON_STARTER = 14;
  static const int G_UNICODE_BREAK_OPEN_PUNCTUATION = 15;
  static const int G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16;
  static const int G_UNICODE_BREAK_QUOTATION = 17;
  static const int G_UNICODE_BREAK_EXCLAMATION = 18;
  static const int G_UNICODE_BREAK_IDEOGRAPHIC = 19;
  static const int G_UNICODE_BREAK_NUMERIC = 20;
  static const int G_UNICODE_BREAK_INFIX_SEPARATOR = 21;
  static const int G_UNICODE_BREAK_SYMBOL = 22;
  static const int G_UNICODE_BREAK_ALPHABETIC = 23;
  static const int G_UNICODE_BREAK_PREFIX = 24;
  static const int G_UNICODE_BREAK_POSTFIX = 25;
  static const int G_UNICODE_BREAK_COMPLEX_CONTEXT = 26;
  static const int G_UNICODE_BREAK_AMBIGUOUS = 27;
  static const int G_UNICODE_BREAK_UNKNOWN = 28;
  static const int G_UNICODE_BREAK_NEXT_LINE = 29;
  static const int G_UNICODE_BREAK_WORD_JOINER = 30;
  static const int G_UNICODE_BREAK_HANGUL_L_JAMO = 31;
  static const int G_UNICODE_BREAK_HANGUL_V_JAMO = 32;
  static const int G_UNICODE_BREAK_HANGUL_T_JAMO = 33;
  static const int G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34;
  static const int G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35;
  static const int G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36;
  static const int G_UNICODE_BREAK_CLOSE_PARENTHESIS = 36;
  static const int G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37;
  static const int G_UNICODE_BREAK_HEBREW_LETTER = 38;
  static const int G_UNICODE_BREAK_REGIONAL_INDICATOR = 39;
  static const int G_UNICODE_BREAK_EMOJI_BASE = 40;
  static const int G_UNICODE_BREAK_EMOJI_MODIFIER = 41;
  static const int G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42;
}

/// GUnicodeScript:
/// @G_UNICODE_SCRIPT_INVALID_CODE:
/// a value never returned from g_unichar_get_script()
/// @G_UNICODE_SCRIPT_COMMON:     a character used by multiple different scripts
/// @G_UNICODE_SCRIPT_INHERITED:  a mark glyph that takes its script from the
/// base glyph to which it is attached
/// @G_UNICODE_SCRIPT_ARABIC:     Arabic
/// @G_UNICODE_SCRIPT_ARMENIAN:   Armenian
/// @G_UNICODE_SCRIPT_BENGALI:    Bengali
/// @G_UNICODE_SCRIPT_BOPOMOFO:   Bopomofo
/// @G_UNICODE_SCRIPT_CHEROKEE:   Cherokee
/// @G_UNICODE_SCRIPT_COPTIC:     Coptic
/// @G_UNICODE_SCRIPT_CYRILLIC:   Cyrillic
/// @G_UNICODE_SCRIPT_DESERET:    Deseret
/// @G_UNICODE_SCRIPT_DEVANAGARI: Devanagari
/// @G_UNICODE_SCRIPT_ETHIOPIC:   Ethiopic
/// @G_UNICODE_SCRIPT_GEORGIAN:   Georgian
/// @G_UNICODE_SCRIPT_GOTHIC:     Gothic
/// @G_UNICODE_SCRIPT_GREEK:      Greek
/// @G_UNICODE_SCRIPT_GUJARATI:   Gujarati
/// @G_UNICODE_SCRIPT_GURMUKHI:   Gurmukhi
/// @G_UNICODE_SCRIPT_HAN:        Han
/// @G_UNICODE_SCRIPT_HANGUL:     Hangul
/// @G_UNICODE_SCRIPT_HEBREW:     Hebrew
/// @G_UNICODE_SCRIPT_HIRAGANA:   Hiragana
/// @G_UNICODE_SCRIPT_KANNADA:    Kannada
/// @G_UNICODE_SCRIPT_KATAKANA:   Katakana
/// @G_UNICODE_SCRIPT_KHMER:      Khmer
/// @G_UNICODE_SCRIPT_LAO:        Lao
/// @G_UNICODE_SCRIPT_LATIN:      Latin
/// @G_UNICODE_SCRIPT_MALAYALAM:  Malayalam
/// @G_UNICODE_SCRIPT_MONGOLIAN:  Mongolian
/// @G_UNICODE_SCRIPT_MYANMAR:    Myanmar
/// @G_UNICODE_SCRIPT_OGHAM:      Ogham
/// @G_UNICODE_SCRIPT_OLD_ITALIC: Old Italic
/// @G_UNICODE_SCRIPT_ORIYA:      Oriya
/// @G_UNICODE_SCRIPT_RUNIC:      Runic
/// @G_UNICODE_SCRIPT_SINHALA:    Sinhala
/// @G_UNICODE_SCRIPT_SYRIAC:     Syriac
/// @G_UNICODE_SCRIPT_TAMIL:      Tamil
/// @G_UNICODE_SCRIPT_TELUGU:     Telugu
/// @G_UNICODE_SCRIPT_THAANA:     Thaana
/// @G_UNICODE_SCRIPT_THAI:       Thai
/// @G_UNICODE_SCRIPT_TIBETAN:    Tibetan
/// @G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL:
/// Canadian Aboriginal
/// @G_UNICODE_SCRIPT_YI:         Yi
/// @G_UNICODE_SCRIPT_TAGALOG:    Tagalog
/// @G_UNICODE_SCRIPT_HANUNOO:    Hanunoo
/// @G_UNICODE_SCRIPT_BUHID:      Buhid
/// @G_UNICODE_SCRIPT_TAGBANWA:   Tagbanwa
/// @G_UNICODE_SCRIPT_BRAILLE:    Braille
/// @G_UNICODE_SCRIPT_CYPRIOT:    Cypriot
/// @G_UNICODE_SCRIPT_LIMBU:      Limbu
/// @G_UNICODE_SCRIPT_OSMANYA:    Osmanya
/// @G_UNICODE_SCRIPT_SHAVIAN:    Shavian
/// @G_UNICODE_SCRIPT_LINEAR_B:   Linear B
/// @G_UNICODE_SCRIPT_TAI_LE:     Tai Le
/// @G_UNICODE_SCRIPT_UGARITIC:   Ugaritic
/// @G_UNICODE_SCRIPT_NEW_TAI_LUE:
/// New Tai Lue
/// @G_UNICODE_SCRIPT_BUGINESE:   Buginese
/// @G_UNICODE_SCRIPT_GLAGOLITIC: Glagolitic
/// @G_UNICODE_SCRIPT_TIFINAGH:   Tifinagh
/// @G_UNICODE_SCRIPT_SYLOTI_NAGRI:
/// Syloti Nagri
/// @G_UNICODE_SCRIPT_OLD_PERSIAN:
/// Old Persian
/// @G_UNICODE_SCRIPT_KHAROSHTHI: Kharoshthi
/// @G_UNICODE_SCRIPT_UNKNOWN:    an unassigned code point
/// @G_UNICODE_SCRIPT_BALINESE:   Balinese
/// @G_UNICODE_SCRIPT_CUNEIFORM:  Cuneiform
/// @G_UNICODE_SCRIPT_PHOENICIAN: Phoenician
/// @G_UNICODE_SCRIPT_PHAGS_PA:   Phags-pa
/// @G_UNICODE_SCRIPT_NKO:        N'Ko
/// @G_UNICODE_SCRIPT_KAYAH_LI:   Kayah Li. Since 2.16.3
/// @G_UNICODE_SCRIPT_LEPCHA:     Lepcha. Since 2.16.3
/// @G_UNICODE_SCRIPT_REJANG:     Rejang. Since 2.16.3
/// @G_UNICODE_SCRIPT_SUNDANESE:  Sundanese. Since 2.16.3
/// @G_UNICODE_SCRIPT_SAURASHTRA: Saurashtra. Since 2.16.3
/// @G_UNICODE_SCRIPT_CHAM:       Cham. Since 2.16.3
/// @G_UNICODE_SCRIPT_OL_CHIKI:   Ol Chiki. Since 2.16.3
/// @G_UNICODE_SCRIPT_VAI:        Vai. Since 2.16.3
/// @G_UNICODE_SCRIPT_CARIAN:     Carian. Since 2.16.3
/// @G_UNICODE_SCRIPT_LYCIAN:     Lycian. Since 2.16.3
/// @G_UNICODE_SCRIPT_LYDIAN:     Lydian. Since 2.16.3
/// @G_UNICODE_SCRIPT_AVESTAN:    Avestan. Since 2.26
/// @G_UNICODE_SCRIPT_BAMUM:      Bamum. Since 2.26
/// @G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS:
/// Egyptian Hieroglpyhs. Since 2.26
/// @G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC:
/// Imperial Aramaic. Since 2.26
/// @G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI:
/// Inscriptional Pahlavi. Since 2.26
/// @G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN:
/// Inscriptional Parthian. Since 2.26
/// @G_UNICODE_SCRIPT_JAVANESE:   Javanese. Since 2.26
/// @G_UNICODE_SCRIPT_KAITHI:     Kaithi. Since 2.26
/// @G_UNICODE_SCRIPT_LISU:       Lisu. Since 2.26
/// @G_UNICODE_SCRIPT_MEETEI_MAYEK:
/// Meetei Mayek. Since 2.26
/// @G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN:
/// Old South Arabian. Since 2.26
/// @G_UNICODE_SCRIPT_OLD_TURKIC: Old Turkic. Since 2.28
/// @G_UNICODE_SCRIPT_SAMARITAN:  Samaritan. Since 2.26
/// @G_UNICODE_SCRIPT_TAI_THAM:   Tai Tham. Since 2.26
/// @G_UNICODE_SCRIPT_TAI_VIET:   Tai Viet. Since 2.26
/// @G_UNICODE_SCRIPT_BATAK:      Batak. Since 2.28
/// @G_UNICODE_SCRIPT_BRAHMI:     Brahmi. Since 2.28
/// @G_UNICODE_SCRIPT_MANDAIC:    Mandaic. Since 2.28
/// @G_UNICODE_SCRIPT_CHAKMA:               Chakma. Since: 2.32
/// @G_UNICODE_SCRIPT_MEROITIC_CURSIVE:     Meroitic Cursive. Since: 2.32
/// @G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: Meroitic Hieroglyphs. Since: 2.32
/// @G_UNICODE_SCRIPT_MIAO:                 Miao. Since: 2.32
/// @G_UNICODE_SCRIPT_SHARADA:              Sharada. Since: 2.32
/// @G_UNICODE_SCRIPT_SORA_SOMPENG:         Sora Sompeng. Since: 2.32
/// @G_UNICODE_SCRIPT_TAKRI:                Takri. Since: 2.32
/// @G_UNICODE_SCRIPT_BASSA_VAH:            Bassa. Since: 2.42
/// @G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN:   Caucasian Albanian. Since: 2.42
/// @G_UNICODE_SCRIPT_DUPLOYAN:             Duployan. Since: 2.42
/// @G_UNICODE_SCRIPT_ELBASAN:              Elbasan. Since: 2.42
/// @G_UNICODE_SCRIPT_GRANTHA:              Grantha. Since: 2.42
/// @G_UNICODE_SCRIPT_KHOJKI:               Kjohki. Since: 2.42
/// @G_UNICODE_SCRIPT_KHUDAWADI:            Khudawadi, Sindhi. Since: 2.42
/// @G_UNICODE_SCRIPT_LINEAR_A:             Linear A. Since: 2.42
/// @G_UNICODE_SCRIPT_MAHAJANI:             Mahajani. Since: 2.42
/// @G_UNICODE_SCRIPT_MANICHAEAN:           Manichaean. Since: 2.42
/// @G_UNICODE_SCRIPT_MENDE_KIKAKUI:        Mende Kikakui. Since: 2.42
/// @G_UNICODE_SCRIPT_MODI:                 Modi. Since: 2.42
/// @G_UNICODE_SCRIPT_MRO:                  Mro. Since: 2.42
/// @G_UNICODE_SCRIPT_NABATAEAN:            Nabataean. Since: 2.42
/// @G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN:    Old North Arabian. Since: 2.42
/// @G_UNICODE_SCRIPT_OLD_PERMIC:           Old Permic. Since: 2.42
/// @G_UNICODE_SCRIPT_PAHAWH_HMONG:         Pahawh Hmong. Since: 2.42
/// @G_UNICODE_SCRIPT_PALMYRENE:            Palmyrene. Since: 2.42
/// @G_UNICODE_SCRIPT_PAU_CIN_HAU:          Pau Cin Hau. Since: 2.42
/// @G_UNICODE_SCRIPT_PSALTER_PAHLAVI:      Psalter Pahlavi. Since: 2.42
/// @G_UNICODE_SCRIPT_SIDDHAM:              Siddham. Since: 2.42
/// @G_UNICODE_SCRIPT_TIRHUTA:              Tirhuta. Since: 2.42
/// @G_UNICODE_SCRIPT_WARANG_CITI:          Warang Citi. Since: 2.42
/// @G_UNICODE_SCRIPT_AHOM:                 Ahom. Since: 2.48
/// @G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: Anatolian Hieroglyphs. Since: 2.48
/// @G_UNICODE_SCRIPT_HATRAN:               Hatran. Since: 2.48
/// @G_UNICODE_SCRIPT_MULTANI:              Multani. Since: 2.48
/// @G_UNICODE_SCRIPT_OLD_HUNGARIAN:        Old Hungarian. Since: 2.48
/// @G_UNICODE_SCRIPT_SIGNWRITING:          Signwriting. Since: 2.48
/// @G_UNICODE_SCRIPT_ADLAM:                Adlam. Since: 2.50
/// @G_UNICODE_SCRIPT_BHAIKSUKI:            Bhaiksuki. Since: 2.50
/// @G_UNICODE_SCRIPT_MARCHEN:              Marchen. Since: 2.50
/// @G_UNICODE_SCRIPT_NEWA:                 Newa. Since: 2.50
/// @G_UNICODE_SCRIPT_OSAGE:                Osage. Since: 2.50
/// @G_UNICODE_SCRIPT_TANGUT:               Tangut. Since: 2.50
/// @G_UNICODE_SCRIPT_MASARAM_GONDI:        Masaram Gondi. Since: 2.54
/// @G_UNICODE_SCRIPT_NUSHU:                Nushu. Since: 2.54
/// @G_UNICODE_SCRIPT_SOYOMBO:              Soyombo. Since: 2.54
/// @G_UNICODE_SCRIPT_ZANABAZAR_SQUARE:     Zanabazar Square. Since: 2.54
/// @G_UNICODE_SCRIPT_DOGRA:                Dogra. Since: 2.58
/// @G_UNICODE_SCRIPT_GUNJALA_GONDI:        Gunjala Gondi. Since: 2.58
/// @G_UNICODE_SCRIPT_HANIFI_ROHINGYA:      Hanifi Rohingya. Since: 2.58
/// @G_UNICODE_SCRIPT_MAKASAR:              Makasar. Since: 2.58
/// @G_UNICODE_SCRIPT_MEDEFAIDRIN:          Medefaidrin. Since: 2.58
/// @G_UNICODE_SCRIPT_OLD_SOGDIAN:          Old Sogdian. Since: 2.58
/// @G_UNICODE_SCRIPT_SOGDIAN:              Sogdian. Since: 2.58
/// @G_UNICODE_SCRIPT_ELYMAIC:              Elym. Since: 2.62
/// @G_UNICODE_SCRIPT_NANDINAGARI:          Nand. Since: 2.62
/// @G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: Rohg. Since: 2.62
/// @G_UNICODE_SCRIPT_WANCHO:               Wcho. Since: 2.62
/// @G_UNICODE_SCRIPT_CHORASMIAN:           Chorasmian. Since: 2.66
/// @G_UNICODE_SCRIPT_DIVES_AKURU:          Dives Akuru. Since: 2.66
/// @G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT:  Khitan small script. Since: 2.66
/// @G_UNICODE_SCRIPT_YEZIDI:               Yezidi. Since: 2.66
/// @G_UNICODE_SCRIPT_CYPRO_MINOAN:         Cypro-Minoan. Since: 2.72
/// @G_UNICODE_SCRIPT_OLD_UYGHUR:           Old Uyghur. Since: 2.72
/// @G_UNICODE_SCRIPT_TANGSA:               Tangsa. Since: 2.72
/// @G_UNICODE_SCRIPT_TOTO:                 Toto. Since: 2.72
/// @G_UNICODE_SCRIPT_VITHKUQI:             Vithkuqi. Since: 2.72
/// @G_UNICODE_SCRIPT_MATH:                 Mathematical notation. Since: 2.72
///
/// The #GUnicodeScript enumeration identifies different writing
/// systems. The values correspond to the names as defined in the
/// Unicode standard. The enumeration has been added in GLib 2.14,
/// and is interchangeable with #PangoScript.
///
/// Note that new types may be added in the future. Applications
/// should be ready to handle unknown values.
/// See [Unicode Standard Annex #24: Script names](http://www.unicode.org/reports/tr24/).
abstract class GUnicodeScript {
  static const int G_UNICODE_SCRIPT_INVALID_CODE = -1;
  static const int G_UNICODE_SCRIPT_COMMON = 0;
  static const int G_UNICODE_SCRIPT_INHERITED = 1;
  static const int G_UNICODE_SCRIPT_ARABIC = 2;
  static const int G_UNICODE_SCRIPT_ARMENIAN = 3;
  static const int G_UNICODE_SCRIPT_BENGALI = 4;
  static const int G_UNICODE_SCRIPT_BOPOMOFO = 5;
  static const int G_UNICODE_SCRIPT_CHEROKEE = 6;
  static const int G_UNICODE_SCRIPT_COPTIC = 7;
  static const int G_UNICODE_SCRIPT_CYRILLIC = 8;
  static const int G_UNICODE_SCRIPT_DESERET = 9;
  static const int G_UNICODE_SCRIPT_DEVANAGARI = 10;
  static const int G_UNICODE_SCRIPT_ETHIOPIC = 11;
  static const int G_UNICODE_SCRIPT_GEORGIAN = 12;
  static const int G_UNICODE_SCRIPT_GOTHIC = 13;
  static const int G_UNICODE_SCRIPT_GREEK = 14;
  static const int G_UNICODE_SCRIPT_GUJARATI = 15;
  static const int G_UNICODE_SCRIPT_GURMUKHI = 16;
  static const int G_UNICODE_SCRIPT_HAN = 17;
  static const int G_UNICODE_SCRIPT_HANGUL = 18;
  static const int G_UNICODE_SCRIPT_HEBREW = 19;
  static const int G_UNICODE_SCRIPT_HIRAGANA = 20;
  static const int G_UNICODE_SCRIPT_KANNADA = 21;
  static const int G_UNICODE_SCRIPT_KATAKANA = 22;
  static const int G_UNICODE_SCRIPT_KHMER = 23;
  static const int G_UNICODE_SCRIPT_LAO = 24;
  static const int G_UNICODE_SCRIPT_LATIN = 25;
  static const int G_UNICODE_SCRIPT_MALAYALAM = 26;
  static const int G_UNICODE_SCRIPT_MONGOLIAN = 27;
  static const int G_UNICODE_SCRIPT_MYANMAR = 28;
  static const int G_UNICODE_SCRIPT_OGHAM = 29;
  static const int G_UNICODE_SCRIPT_OLD_ITALIC = 30;
  static const int G_UNICODE_SCRIPT_ORIYA = 31;
  static const int G_UNICODE_SCRIPT_RUNIC = 32;
  static const int G_UNICODE_SCRIPT_SINHALA = 33;
  static const int G_UNICODE_SCRIPT_SYRIAC = 34;
  static const int G_UNICODE_SCRIPT_TAMIL = 35;
  static const int G_UNICODE_SCRIPT_TELUGU = 36;
  static const int G_UNICODE_SCRIPT_THAANA = 37;
  static const int G_UNICODE_SCRIPT_THAI = 38;
  static const int G_UNICODE_SCRIPT_TIBETAN = 39;
  static const int G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40;
  static const int G_UNICODE_SCRIPT_YI = 41;
  static const int G_UNICODE_SCRIPT_TAGALOG = 42;
  static const int G_UNICODE_SCRIPT_HANUNOO = 43;
  static const int G_UNICODE_SCRIPT_BUHID = 44;
  static const int G_UNICODE_SCRIPT_TAGBANWA = 45;
  static const int G_UNICODE_SCRIPT_BRAILLE = 46;
  static const int G_UNICODE_SCRIPT_CYPRIOT = 47;
  static const int G_UNICODE_SCRIPT_LIMBU = 48;
  static const int G_UNICODE_SCRIPT_OSMANYA = 49;
  static const int G_UNICODE_SCRIPT_SHAVIAN = 50;
  static const int G_UNICODE_SCRIPT_LINEAR_B = 51;
  static const int G_UNICODE_SCRIPT_TAI_LE = 52;
  static const int G_UNICODE_SCRIPT_UGARITIC = 53;
  static const int G_UNICODE_SCRIPT_NEW_TAI_LUE = 54;
  static const int G_UNICODE_SCRIPT_BUGINESE = 55;
  static const int G_UNICODE_SCRIPT_GLAGOLITIC = 56;
  static const int G_UNICODE_SCRIPT_TIFINAGH = 57;
  static const int G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58;
  static const int G_UNICODE_SCRIPT_OLD_PERSIAN = 59;
  static const int G_UNICODE_SCRIPT_KHAROSHTHI = 60;
  static const int G_UNICODE_SCRIPT_UNKNOWN = 61;
  static const int G_UNICODE_SCRIPT_BALINESE = 62;
  static const int G_UNICODE_SCRIPT_CUNEIFORM = 63;
  static const int G_UNICODE_SCRIPT_PHOENICIAN = 64;
  static const int G_UNICODE_SCRIPT_PHAGS_PA = 65;
  static const int G_UNICODE_SCRIPT_NKO = 66;
  static const int G_UNICODE_SCRIPT_KAYAH_LI = 67;
  static const int G_UNICODE_SCRIPT_LEPCHA = 68;
  static const int G_UNICODE_SCRIPT_REJANG = 69;
  static const int G_UNICODE_SCRIPT_SUNDANESE = 70;
  static const int G_UNICODE_SCRIPT_SAURASHTRA = 71;
  static const int G_UNICODE_SCRIPT_CHAM = 72;
  static const int G_UNICODE_SCRIPT_OL_CHIKI = 73;
  static const int G_UNICODE_SCRIPT_VAI = 74;
  static const int G_UNICODE_SCRIPT_CARIAN = 75;
  static const int G_UNICODE_SCRIPT_LYCIAN = 76;
  static const int G_UNICODE_SCRIPT_LYDIAN = 77;
  static const int G_UNICODE_SCRIPT_AVESTAN = 78;
  static const int G_UNICODE_SCRIPT_BAMUM = 79;
  static const int G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80;
  static const int G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81;
  static const int G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82;
  static const int G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83;
  static const int G_UNICODE_SCRIPT_JAVANESE = 84;
  static const int G_UNICODE_SCRIPT_KAITHI = 85;
  static const int G_UNICODE_SCRIPT_LISU = 86;
  static const int G_UNICODE_SCRIPT_MEETEI_MAYEK = 87;
  static const int G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88;
  static const int G_UNICODE_SCRIPT_OLD_TURKIC = 89;
  static const int G_UNICODE_SCRIPT_SAMARITAN = 90;
  static const int G_UNICODE_SCRIPT_TAI_THAM = 91;
  static const int G_UNICODE_SCRIPT_TAI_VIET = 92;
  static const int G_UNICODE_SCRIPT_BATAK = 93;
  static const int G_UNICODE_SCRIPT_BRAHMI = 94;
  static const int G_UNICODE_SCRIPT_MANDAIC = 95;
  static const int G_UNICODE_SCRIPT_CHAKMA = 96;
  static const int G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97;
  static const int G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98;
  static const int G_UNICODE_SCRIPT_MIAO = 99;
  static const int G_UNICODE_SCRIPT_SHARADA = 100;
  static const int G_UNICODE_SCRIPT_SORA_SOMPENG = 101;
  static const int G_UNICODE_SCRIPT_TAKRI = 102;
  static const int G_UNICODE_SCRIPT_BASSA_VAH = 103;
  static const int G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104;
  static const int G_UNICODE_SCRIPT_DUPLOYAN = 105;
  static const int G_UNICODE_SCRIPT_ELBASAN = 106;
  static const int G_UNICODE_SCRIPT_GRANTHA = 107;
  static const int G_UNICODE_SCRIPT_KHOJKI = 108;
  static const int G_UNICODE_SCRIPT_KHUDAWADI = 109;
  static const int G_UNICODE_SCRIPT_LINEAR_A = 110;
  static const int G_UNICODE_SCRIPT_MAHAJANI = 111;
  static const int G_UNICODE_SCRIPT_MANICHAEAN = 112;
  static const int G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113;
  static const int G_UNICODE_SCRIPT_MODI = 114;
  static const int G_UNICODE_SCRIPT_MRO = 115;
  static const int G_UNICODE_SCRIPT_NABATAEAN = 116;
  static const int G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117;
  static const int G_UNICODE_SCRIPT_OLD_PERMIC = 118;
  static const int G_UNICODE_SCRIPT_PAHAWH_HMONG = 119;
  static const int G_UNICODE_SCRIPT_PALMYRENE = 120;
  static const int G_UNICODE_SCRIPT_PAU_CIN_HAU = 121;
  static const int G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122;
  static const int G_UNICODE_SCRIPT_SIDDHAM = 123;
  static const int G_UNICODE_SCRIPT_TIRHUTA = 124;
  static const int G_UNICODE_SCRIPT_WARANG_CITI = 125;
  static const int G_UNICODE_SCRIPT_AHOM = 126;
  static const int G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127;
  static const int G_UNICODE_SCRIPT_HATRAN = 128;
  static const int G_UNICODE_SCRIPT_MULTANI = 129;
  static const int G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130;
  static const int G_UNICODE_SCRIPT_SIGNWRITING = 131;
  static const int G_UNICODE_SCRIPT_ADLAM = 132;
  static const int G_UNICODE_SCRIPT_BHAIKSUKI = 133;
  static const int G_UNICODE_SCRIPT_MARCHEN = 134;
  static const int G_UNICODE_SCRIPT_NEWA = 135;
  static const int G_UNICODE_SCRIPT_OSAGE = 136;
  static const int G_UNICODE_SCRIPT_TANGUT = 137;
  static const int G_UNICODE_SCRIPT_MASARAM_GONDI = 138;
  static const int G_UNICODE_SCRIPT_NUSHU = 139;
  static const int G_UNICODE_SCRIPT_SOYOMBO = 140;
  static const int G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141;
  static const int G_UNICODE_SCRIPT_DOGRA = 142;
  static const int G_UNICODE_SCRIPT_GUNJALA_GONDI = 143;
  static const int G_UNICODE_SCRIPT_HANIFI_ROHINGYA = 144;
  static const int G_UNICODE_SCRIPT_MAKASAR = 145;
  static const int G_UNICODE_SCRIPT_MEDEFAIDRIN = 146;
  static const int G_UNICODE_SCRIPT_OLD_SOGDIAN = 147;
  static const int G_UNICODE_SCRIPT_SOGDIAN = 148;
  static const int G_UNICODE_SCRIPT_ELYMAIC = 149;
  static const int G_UNICODE_SCRIPT_NANDINAGARI = 150;
  static const int G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151;
  static const int G_UNICODE_SCRIPT_WANCHO = 152;
  static const int G_UNICODE_SCRIPT_CHORASMIAN = 153;
  static const int G_UNICODE_SCRIPT_DIVES_AKURU = 154;
  static const int G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT = 155;
  static const int G_UNICODE_SCRIPT_YEZIDI = 156;
  static const int G_UNICODE_SCRIPT_CYPRO_MINOAN = 157;
  static const int G_UNICODE_SCRIPT_OLD_UYGHUR = 158;
  static const int G_UNICODE_SCRIPT_TANGSA = 159;
  static const int G_UNICODE_SCRIPT_TOTO = 160;
  static const int G_UNICODE_SCRIPT_VITHKUQI = 161;
  static const int G_UNICODE_SCRIPT_MATH = 162;
}

/// gunichar:
///
/// A type which can hold any UTF-32 or UCS-4 character code,
/// also known as a Unicode code point.
///
/// If you want to produce the UTF-8 representation of a #gunichar,
/// use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse
/// process.
///
/// To print/scan values of this type as integer, use
/// %G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.
///
/// The notation to express a Unicode code point in running text is
/// as a hexadecimal number with four to six digits and uppercase
/// letters, prefixed by the string "U+". Leading zeros are omitted,
/// unless the code point would have fewer than four hexadecimal digits.
/// For example, "U+0041 LATIN CAPITAL LETTER A". To print a code point
/// in the U+-notation, use the format string "U+\%04"G_GINT32_FORMAT"X".
/// To scan, use the format string "U+\%06"G_GINT32_FORMAT"X".
///
/// |[
/// gunichar c;
/// sscanf ("U+0041", "U+%06"G_GINT32_FORMAT"X", &amp;c)
/// g_print ("Read U+%04"G_GINT32_FORMAT"X", c);
/// ]|
typedef gunichar = guint32;

/// gunichar2:
///
/// A type which can hold any UTF-16 code
/// point<footnote id="utf16_surrogate_pairs">UTF-16 also has so called
/// <firstterm>surrogate pairs</firstterm> to encode characters beyond
/// the BMP as pairs of 16bit numbers. Surrogate pairs cannot be stored
/// in a single gunichar2 field, but all GLib functions accepting gunichar2
/// arrays will correctly interpret surrogate pairs.</footnote>.
///
/// To print/scan values of this type to/from text you need to convert
/// to/from UTF-8, using g_utf16_to_utf8()/g_utf8_to_utf16().
///
/// To print/scan values of this type as integer, use
/// %G_GINT16_MODIFIER and/or %G_GUINT16_FORMAT.
typedef gunichar2 = guint16;

/// GNormalizeMode:
/// @G_NORMALIZE_DEFAULT: standardize differences that do not affect the
/// text content, such as the above-mentioned accent representation
/// @G_NORMALIZE_NFD: another name for %G_NORMALIZE_DEFAULT
/// @G_NORMALIZE_DEFAULT_COMPOSE: like %G_NORMALIZE_DEFAULT, but with
/// composed forms rather than a maximally decomposed form
/// @G_NORMALIZE_NFC: another name for %G_NORMALIZE_DEFAULT_COMPOSE
/// @G_NORMALIZE_ALL: beyond %G_NORMALIZE_DEFAULT also standardize the
/// "compatibility" characters in Unicode, such as SUPERSCRIPT THREE
/// to the standard forms (in this case DIGIT THREE). Formatting
/// information may be lost but for most text operations such
/// characters should be considered the same
/// @G_NORMALIZE_NFKD: another name for %G_NORMALIZE_ALL
/// @G_NORMALIZE_ALL_COMPOSE: like %G_NORMALIZE_ALL, but with composed
/// forms rather than a maximally decomposed form
/// @G_NORMALIZE_NFKC: another name for %G_NORMALIZE_ALL_COMPOSE
///
/// Defines how a Unicode string is transformed in a canonical
/// form, standardizing such issues as whether a character with
/// an accent is represented as a base character and combining
/// accent or as a single precomposed character. Unicode strings
/// should generally be normalized before comparing them.
abstract class GNormalizeMode {
  static const int G_NORMALIZE_DEFAULT = 0;
  static const int G_NORMALIZE_NFD = 0;
  static const int G_NORMALIZE_DEFAULT_COMPOSE = 1;
  static const int G_NORMALIZE_NFC = 1;
  static const int G_NORMALIZE_ALL = 2;
  static const int G_NORMALIZE_NFKD = 2;
  static const int G_NORMALIZE_ALL_COMPOSE = 3;
  static const int G_NORMALIZE_NFKC = 3;
}

final class _GString extends ffi.Struct {
  external ffi.Pointer<gchar> str;

  @gsize()
  external int len;

  @gsize()
  external int allocated_len;
}

typedef GString = _GString;

final class _GIOChannel extends ffi.Opaque {}

final class _GIOFuncs extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<gchar> buf,
              gsize count,
              ffi.Pointer<gsize> bytes_read,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_read;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<gchar> buf,
              gsize count,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_write;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel, gint64 offset,
              ffi.Int32 type, ffi.Pointer<ffi.Pointer<GError>> err)>> io_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_close;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GSource> Function(
                  ffi.Pointer<GIOChannel> channel, ffi.Int32 condition)>>
      io_create_watch;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel> channel)>>
      io_free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel, ffi.Int32 flags,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_set_flags;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel> channel)>>
      io_get_flags;
}

abstract class GIOStatus {
  static const int G_IO_STATUS_ERROR = 0;
  static const int G_IO_STATUS_NORMAL = 1;
  static const int G_IO_STATUS_EOF = 2;
  static const int G_IO_STATUS_AGAIN = 3;
}

typedef GIOChannel = _GIOChannel;

abstract class GSeekType {
  static const int G_SEEK_CUR = 0;
  static const int G_SEEK_SET = 1;
  static const int G_SEEK_END = 2;
}

abstract class GIOFlags {
  static const int G_IO_FLAG_APPEND = 1;
  static const int G_IO_FLAG_NONBLOCK = 2;
  static const int G_IO_FLAG_IS_READABLE = 4;
  static const int G_IO_FLAG_IS_WRITABLE = 8;
  static const int G_IO_FLAG_IS_WRITEABLE = 8;
  static const int G_IO_FLAG_IS_SEEKABLE = 16;
  static const int G_IO_FLAG_MASK = 31;
  static const int G_IO_FLAG_GET_MASK = 31;
  static const int G_IO_FLAG_SET_MASK = 3;
}

abstract class GIOError {
  static const int G_IO_ERROR_NONE = 0;
  static const int G_IO_ERROR_AGAIN = 1;
  static const int G_IO_ERROR_INVAL = 2;
  static const int G_IO_ERROR_UNKNOWN = 3;
}

abstract class GIOChannelError {
  static const int G_IO_CHANNEL_ERROR_FBIG = 0;
  static const int G_IO_CHANNEL_ERROR_INVAL = 1;
  static const int G_IO_CHANNEL_ERROR_IO = 2;
  static const int G_IO_CHANNEL_ERROR_ISDIR = 3;
  static const int G_IO_CHANNEL_ERROR_NOSPC = 4;
  static const int G_IO_CHANNEL_ERROR_NXIO = 5;
  static const int G_IO_CHANNEL_ERROR_OVERFLOW = 6;
  static const int G_IO_CHANNEL_ERROR_PIPE = 7;
  static const int G_IO_CHANNEL_ERROR_FAILED = 8;
}

typedef GIOFunc = ffi.Pointer<ffi.NativeFunction<GIOFuncFunction>>;
typedef GIOFuncFunction = gboolean Function(
    ffi.Pointer<GIOChannel> source, ffi.Int32 condition, gpointer data);
typedef DartGIOFuncFunction = Dartgint Function(
    ffi.Pointer<GIOChannel> source, int condition, gpointer data);

abstract class GKeyFileError {
  static const int G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0;
  static const int G_KEY_FILE_ERROR_PARSE = 1;
  static const int G_KEY_FILE_ERROR_NOT_FOUND = 2;
  static const int G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3;
  static const int G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4;
  static const int G_KEY_FILE_ERROR_INVALID_VALUE = 5;
}

final class _GKeyFile extends ffi.Opaque {}

abstract class GKeyFileFlags {
  static const int G_KEY_FILE_NONE = 0;
  static const int G_KEY_FILE_KEEP_COMMENTS = 1;
  static const int G_KEY_FILE_KEEP_TRANSLATIONS = 2;
}

typedef GKeyFile = _GKeyFile;

final class _GMappedFile extends ffi.Opaque {}

typedef GMappedFile = _GMappedFile;

/// GMarkupError:
/// @G_MARKUP_ERROR_BAD_UTF8: text being parsed was not valid UTF-8
/// @G_MARKUP_ERROR_EMPTY: document contained nothing, or only whitespace
/// @G_MARKUP_ERROR_PARSE: document was ill-formed
/// @G_MARKUP_ERROR_UNKNOWN_ELEMENT: error should be set by #GMarkupParser
/// functions; element wasn't known
/// @G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: error should be set by #GMarkupParser
/// functions; attribute wasn't known
/// @G_MARKUP_ERROR_INVALID_CONTENT: error should be set by #GMarkupParser
/// functions; content was invalid
/// @G_MARKUP_ERROR_MISSING_ATTRIBUTE: error should be set by #GMarkupParser
/// functions; a required attribute was missing
///
/// Error codes returned by markup parsing.
abstract class GMarkupError {
  static const int G_MARKUP_ERROR_BAD_UTF8 = 0;
  static const int G_MARKUP_ERROR_EMPTY = 1;
  static const int G_MARKUP_ERROR_PARSE = 2;
  static const int G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3;
  static const int G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4;
  static const int G_MARKUP_ERROR_INVALID_CONTENT = 5;
  static const int G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6;
}

/// GMarkupParseFlags:
/// @G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: flag you should not use
/// @G_MARKUP_TREAT_CDATA_AS_TEXT: When this flag is set, CDATA marked
/// sections are not passed literally to the @passthrough function of
/// the parser. Instead, the content of the section (without the
/// `<![CDATA[` and `]]>`) is
/// passed to the @text function. This flag was added in GLib 2.12
/// @G_MARKUP_PREFIX_ERROR_POSITION: Normally errors caught by GMarkup
/// itself have line/column information prefixed to them to let the
/// caller know the location of the error. When this flag is set the
/// location information is also prefixed to errors generated by the
/// #GMarkupParser implementation functions
/// @G_MARKUP_IGNORE_QUALIFIED: Ignore (don't report) qualified
/// attributes and tags, along with their contents.  A qualified
/// attribute or tag is one that contains ':' in its name (ie: is in
/// another namespace).  Since: 2.40.
///
/// Flags that affect the behaviour of the parser.
abstract class GMarkupParseFlags {
  static const int G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1;
  static const int G_MARKUP_TREAT_CDATA_AS_TEXT = 2;
  static const int G_MARKUP_PREFIX_ERROR_POSITION = 4;
  static const int G_MARKUP_IGNORE_QUALIFIED = 8;
}

final class _GMarkupParseContext extends ffi.Opaque {}

/// GMarkupParser:
/// @start_element: Callback to invoke when the opening tag of an element
/// is seen. The callback's @attribute_names and @attribute_values parameters
/// are %NULL-terminated.
/// @end_element: Callback to invoke when the closing tag of an element
/// is seen. Note that this is also called for empty tags like
/// `<empty/>`.
/// @text: Callback to invoke when some text is seen (text is always
/// inside an element). Note that the text of an element may be spread
/// over multiple calls of this function. If the
/// %G_MARKUP_TREAT_CDATA_AS_TEXT flag is set, this function is also
/// called for the content of CDATA marked sections.
/// @passthrough: Callback to invoke for comments, processing instructions
/// and doctype declarations; if you're re-writing the parsed document,
/// write the passthrough text back out in the same position. If the
/// %G_MARKUP_TREAT_CDATA_AS_TEXT flag is not set, this function is also
/// called for CDATA marked sections.
/// @error: Callback to invoke when an error occurs.
///
/// Any of the fields in #GMarkupParser can be %NULL, in which case they
/// will be ignored. Except for the @error function, any of these callbacks
/// can set an error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT,
/// %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT
/// errors are intended to be set from these callbacks. If you set an error
/// from a callback, g_markup_parse_context_parse() will report that error
/// back to its caller.
final class _GMarkupParser extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<gchar> element_name,
              ffi.Pointer<ffi.Pointer<gchar>> attribute_names,
              ffi.Pointer<ffi.Pointer<gchar>> attribute_values,
              gpointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> start_element;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<gchar> element_name,
              gpointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> end_element;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<gchar> text,
              gsize text_len,
              gpointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> text;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<gchar> passthrough_text,
              gsize text_len,
              gpointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> passthrough;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<GError> error, gpointer user_data)>> error;
}

/// GMarkupParseContext:
///
/// A parse context is used to parse a stream of bytes that
/// you expect to contain marked-up text.
///
/// See g_markup_parse_context_new(), #GMarkupParser, and so
/// on for more details.
typedef GMarkupParseContext = _GMarkupParseContext;
typedef GMarkupParser = _GMarkupParser;

abstract class GMarkupCollectType {
  static const int G_MARKUP_COLLECT_INVALID = 0;
  static const int G_MARKUP_COLLECT_STRING = 1;
  static const int G_MARKUP_COLLECT_STRDUP = 2;
  static const int G_MARKUP_COLLECT_BOOLEAN = 3;
  static const int G_MARKUP_COLLECT_TRISTATE = 4;
  static const int G_MARKUP_COLLECT_OPTIONAL = 65536;
}

final class _GVariantType extends ffi.Opaque {}

/// GVariantType:
///
/// A type in the GVariant type system.
///
/// Two types may not be compared by value; use g_variant_type_equal() or
/// g_variant_type_is_subtype_of().  May be copied using
/// g_variant_type_copy() and freed using g_variant_type_free().
typedef GVariantType = _GVariantType;

final class _GVariant extends ffi.Opaque {}

abstract class GVariantClass {
  static const int G_VARIANT_CLASS_BOOLEAN = 98;
  static const int G_VARIANT_CLASS_BYTE = 121;
  static const int G_VARIANT_CLASS_INT16 = 110;
  static const int G_VARIANT_CLASS_UINT16 = 113;
  static const int G_VARIANT_CLASS_INT32 = 105;
  static const int G_VARIANT_CLASS_UINT32 = 117;
  static const int G_VARIANT_CLASS_INT64 = 120;
  static const int G_VARIANT_CLASS_UINT64 = 116;
  static const int G_VARIANT_CLASS_HANDLE = 104;
  static const int G_VARIANT_CLASS_DOUBLE = 100;
  static const int G_VARIANT_CLASS_STRING = 115;
  static const int G_VARIANT_CLASS_OBJECT_PATH = 111;
  static const int G_VARIANT_CLASS_SIGNATURE = 103;
  static const int G_VARIANT_CLASS_VARIANT = 118;
  static const int G_VARIANT_CLASS_MAYBE = 109;
  static const int G_VARIANT_CLASS_ARRAY = 97;
  static const int G_VARIANT_CLASS_TUPLE = 40;
  static const int G_VARIANT_CLASS_DICT_ENTRY = 123;
}

typedef GVariant = _GVariant;
typedef gint16 = ffi.Short;
typedef Dartgint16 = int;

final class _GVariantIter extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<gsize> x;
}

typedef GVariantIter = _GVariantIter;

final class _GVariantBuilder extends ffi.Struct {
  external UnnamedUnion1 u;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct3 s;

  @ffi.Array.multi([16])
  external ffi.Array<gsize> x;
}

final class UnnamedStruct3 extends ffi.Struct {
  @gsize()
  external int partial_magic;

  external ffi.Pointer<GVariantType> type;

  @ffi.Array.multi([14])
  external ffi.Array<gsize> y;
}

abstract class GVariantParseError {
  static const int G_VARIANT_PARSE_ERROR_FAILED = 0;
  static const int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1;
  static const int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2;
  static const int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3;
  static const int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4;
  static const int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5;
  static const int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6;
  static const int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7;
  static const int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8;
  static const int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9;
  static const int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10;
  static const int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11;
  static const int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12;
  static const int G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13;
  static const int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14;
  static const int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15;
  static const int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16;
  static const int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17;
  static const int G_VARIANT_PARSE_ERROR_RECURSION = 18;
}

typedef GVariantBuilder = _GVariantBuilder;

final class _GVariantDict extends ffi.Struct {
  external UnnamedUnion2 u;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct4 s;

  @ffi.Array.multi([16])
  external ffi.Array<gsize> x;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<GVariant> asv;

  @gsize()
  external int partial_magic;

  @ffi.Array.multi([14])
  external ffi.Array<gsize> y;
}

typedef GVariantDict = _GVariantDict;

abstract class GLogLevelFlags {
  static const int G_LOG_FLAG_RECURSION = 1;
  static const int G_LOG_FLAG_FATAL = 2;
  static const int G_LOG_LEVEL_ERROR = 4;
  static const int G_LOG_LEVEL_CRITICAL = 8;
  static const int G_LOG_LEVEL_WARNING = 16;
  static const int G_LOG_LEVEL_MESSAGE = 32;
  static const int G_LOG_LEVEL_INFO = 64;
  static const int G_LOG_LEVEL_DEBUG = 128;
  static const int G_LOG_LEVEL_MASK = -4;
}

typedef GLogFunc = ffi.Pointer<ffi.NativeFunction<GLogFuncFunction>>;
typedef GLogFuncFunction = ffi.Void Function(ffi.Pointer<gchar> log_domain,
    ffi.Int32 log_level, ffi.Pointer<gchar> message, gpointer user_data);
typedef DartGLogFuncFunction = void Function(ffi.Pointer<gchar> log_domain,
    int log_level, ffi.Pointer<gchar> message, gpointer user_data);

/// GLogWriterOutput:
/// @G_LOG_WRITER_HANDLED: Log writer has handled the log entry.
/// @G_LOG_WRITER_UNHANDLED: Log writer could not handle the log entry.
///
/// Return values from #GLogWriterFuncs to indicate whether the given log entry
/// was successfully handled by the writer, or whether there was an error in
/// handling it (and hence a fallback writer should be used).
///
/// If a #GLogWriterFunc ignores a log entry, it should return
/// %G_LOG_WRITER_HANDLED.
///
/// Since: 2.50
abstract class GLogWriterOutput {
  static const int G_LOG_WRITER_HANDLED = 1;
  static const int G_LOG_WRITER_UNHANDLED = 0;
}

final class _GLogField extends ffi.Struct {
  external ffi.Pointer<gchar> key;

  external gconstpointer value;

  @gssize()
  external int length;
}

/// GLogField:
/// @key: field name (UTF-8 string)
/// @value: field value (arbitrary bytes)
/// @length: length of @value, in bytes, or -1 if it is nul-terminated
///
/// Structure representing a single field in a structured log entry. See
/// g_log_structured() for details.
///
/// Log fields may contain arbitrary values, including binary with embedded nul
/// bytes. If the field contains a string, the string must be UTF-8 encoded and
/// have a trailing nul byte. Otherwise, @length must be set to a non-negative
/// value.
///
/// Since: 2.50
typedef GLogField = _GLogField;

/// GLogWriterFunc:
/// @log_level: log level of the message
/// @fields: (array length=n_fields): fields forming the message
/// @n_fields: number of @fields
/// @user_data: user data passed to g_log_set_writer_func()
///
/// Writer function for log entries. A log entry is a collection of one or more
/// #GLogFields, using the standard [field names from journal
/// specification](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html).
/// See g_log_structured() for more information.
///
/// Writer functions must ignore fields which they do not recognise, unless they
/// can write arbitrary binary output, as field values may be arbitrary binary.
///
/// @log_level is guaranteed to be included in @fields as the `PRIORITY` field,
/// but is provided separately for convenience of deciding whether or where to
/// output the log entry.
///
/// Writer functions should return %G_LOG_WRITER_HANDLED if they handled the log
/// message successfully or if they deliberately ignored it. If there was an
/// error handling the message (for example, if the writer function is meant to
/// send messages to a remote logging server and there is a network error), it
/// should return %G_LOG_WRITER_UNHANDLED. This allows writer functions to be
/// chained and fall back to simpler handlers in case of failure.
///
/// Returns: %G_LOG_WRITER_HANDLED if the log entry was handled successfully;
/// %G_LOG_WRITER_UNHANDLED otherwise
///
/// Since: 2.50
typedef GLogWriterFunc
    = ffi.Pointer<ffi.NativeFunction<GLogWriterFuncFunction>>;
typedef GLogWriterFuncFunction = ffi.Int32 Function(ffi.Int32 log_level,
    ffi.Pointer<GLogField> fields, gsize n_fields, gpointer user_data);
typedef DartGLogWriterFuncFunction = int Function(int log_level,
    ffi.Pointer<GLogField> fields, Dartgsize n_fields, gpointer user_data);

/// GPrintFunc:
/// @string: the message to output
///
/// Specifies the type of the print handler functions.
/// These are called with the complete formatted string to output.
typedef GPrintFunc = ffi.Pointer<ffi.NativeFunction<GPrintFuncFunction>>;
typedef GPrintFuncFunction = ffi.Void Function(ffi.Pointer<gchar> string);
typedef DartGPrintFuncFunction = void Function(ffi.Pointer<gchar> string);

final class _GOptionContext extends ffi.Opaque {}

final class _GOptionGroup extends ffi.Opaque {}

/// GOptionEntry:
/// @long_name: The long name of an option can be used to specify it
/// in a commandline as `--long_name`. Every option must have a
/// long name. To resolve conflicts if multiple option groups contain
/// the same long name, it is also possible to specify the option as
/// `--groupname-long_name`.
/// @short_name: If an option has a short name, it can be specified
/// `-short_name` in a commandline. @short_name must be  a printable
/// ASCII character different from '-', or zero if the option has no
/// short name.
/// @flags: Flags from #GOptionFlags
/// @arg: The type of the option, as a #GOptionArg
/// @arg_data: If the @arg type is %G_OPTION_ARG_CALLBACK, then @arg_data
/// must point to a #GOptionArgFunc callback function, which will be
/// called to handle the extra argument. Otherwise, @arg_data is a
/// pointer to a location to store the value, the required type of
/// the location depends on the @arg type:
/// - %G_OPTION_ARG_NONE: %gboolean
/// - %G_OPTION_ARG_STRING: %gchar*
/// - %G_OPTION_ARG_INT: %gint
/// - %G_OPTION_ARG_FILENAME: %gchar*
/// - %G_OPTION_ARG_STRING_ARRAY: %gchar**
/// - %G_OPTION_ARG_FILENAME_ARRAY: %gchar**
/// - %G_OPTION_ARG_DOUBLE: %gdouble
/// If @arg type is %G_OPTION_ARG_STRING or %G_OPTION_ARG_FILENAME,
/// the location will contain a newly allocated string if the option
/// was given. That string needs to be freed by the callee using g_free().
/// Likewise if @arg type is %G_OPTION_ARG_STRING_ARRAY or
/// %G_OPTION_ARG_FILENAME_ARRAY, the data should be freed using g_strfreev().
/// @description: the description for the option in `--help`
/// output. The @description is translated using the @translate_func
/// of the group, see g_option_group_set_translation_domain().
/// @arg_description: The placeholder to use for the extra argument parsed
/// by the option in `--help` output. The @arg_description is translated
/// using the @translate_func of the group, see
/// g_option_group_set_translation_domain().
///
/// A GOptionEntry struct defines a single option. To have an effect, they
/// must be added to a #GOptionGroup with g_option_context_add_main_entries()
/// or g_option_group_add_entries().
final class _GOptionEntry extends ffi.Struct {
  external ffi.Pointer<gchar> long_name;

  @gchar()
  external int short_name;

  @gint()
  external int flags;

  @ffi.Int32()
  external int arg;

  external gpointer arg_data;

  external ffi.Pointer<gchar> description;

  external ffi.Pointer<gchar> arg_description;
}

/// GOptionArg:
/// @G_OPTION_ARG_NONE: No extra argument. This is useful for simple flags.
/// @G_OPTION_ARG_STRING: The option takes a UTF-8 string argument.
/// @G_OPTION_ARG_INT: The option takes an integer argument.
/// @G_OPTION_ARG_CALLBACK: The option provides a callback (of type
/// #GOptionArgFunc) to parse the extra argument.
/// @G_OPTION_ARG_FILENAME: The option takes a filename as argument, which will
/// be in the GLib filename encoding rather than UTF-8.
/// @G_OPTION_ARG_STRING_ARRAY: The option takes a string argument, multiple
/// uses of the option are collected into an array of strings.
/// @G_OPTION_ARG_FILENAME_ARRAY: The option takes a filename as argument,
/// multiple uses of the option are collected into an array of strings.
/// @G_OPTION_ARG_DOUBLE: The option takes a double argument. The argument
/// can be formatted either for the user's locale or for the "C" locale.
/// Since 2.12
/// @G_OPTION_ARG_INT64: The option takes a 64-bit integer. Like
/// %G_OPTION_ARG_INT but for larger numbers. The number can be in
/// decimal base, or in hexadecimal (when prefixed with `0x`, for
/// example, `0xffffffff`). Since 2.12
///
/// The #GOptionArg enum values determine which type of extra argument the
/// options expect to find. If an option expects an extra argument, it can
/// be specified in several ways; with a short option: `-x arg`, with a long
/// option: `--name arg` or combined in a single argument: `--name=arg`.
abstract class GOptionArg {
  static const int G_OPTION_ARG_NONE = 0;
  static const int G_OPTION_ARG_STRING = 1;
  static const int G_OPTION_ARG_INT = 2;
  static const int G_OPTION_ARG_CALLBACK = 3;
  static const int G_OPTION_ARG_FILENAME = 4;
  static const int G_OPTION_ARG_STRING_ARRAY = 5;
  static const int G_OPTION_ARG_FILENAME_ARRAY = 6;
  static const int G_OPTION_ARG_DOUBLE = 7;
  static const int G_OPTION_ARG_INT64 = 8;
}

/// GOptionFlags:
/// @G_OPTION_FLAG_NONE: No flags. Since: 2.42.
/// @G_OPTION_FLAG_HIDDEN: The option doesn't appear in `--help` output.
/// @G_OPTION_FLAG_IN_MAIN: The option appears in the main section of the
/// `--help` output, even if it is defined in a group.
/// @G_OPTION_FLAG_REVERSE: For options of the %G_OPTION_ARG_NONE kind, this
/// flag indicates that the sense of the option is reversed.
/// @G_OPTION_FLAG_NO_ARG: For options of the %G_OPTION_ARG_CALLBACK kind,
/// this flag indicates that the callback does not take any argument
/// (like a %G_OPTION_ARG_NONE option). Since 2.8
/// @G_OPTION_FLAG_FILENAME: For options of the %G_OPTION_ARG_CALLBACK
/// kind, this flag indicates that the argument should be passed to the
/// callback in the GLib filename encoding rather than UTF-8. Since 2.8
/// @G_OPTION_FLAG_OPTIONAL_ARG: For options of the %G_OPTION_ARG_CALLBACK
/// kind, this flag indicates that the argument supply is optional.
/// If no argument is given then data of %GOptionParseFunc will be
/// set to NULL. Since 2.8
/// @G_OPTION_FLAG_NOALIAS: This flag turns off the automatic conflict
/// resolution which prefixes long option names with `groupname-` if
/// there is a conflict. This option should only be used in situations
/// where aliasing is necessary to model some legacy commandline interface.
/// It is not safe to use this option, unless all option groups are under
/// your direct control. Since 2.8.
///
/// Flags which modify individual options.
abstract class GOptionFlags {
  static const int G_OPTION_FLAG_NONE = 0;
  static const int G_OPTION_FLAG_HIDDEN = 1;
  static const int G_OPTION_FLAG_IN_MAIN = 2;
  static const int G_OPTION_FLAG_REVERSE = 4;
  static const int G_OPTION_FLAG_NO_ARG = 8;
  static const int G_OPTION_FLAG_FILENAME = 16;
  static const int G_OPTION_FLAG_OPTIONAL_ARG = 32;
  static const int G_OPTION_FLAG_NOALIAS = 64;
}

/// GOptionError:
/// @G_OPTION_ERROR_UNKNOWN_OPTION: An option was not known to the parser.
/// This error will only be reported, if the parser hasn't been instructed
/// to ignore unknown options, see g_option_context_set_ignore_unknown_options().
/// @G_OPTION_ERROR_BAD_VALUE: A value couldn't be parsed.
/// @G_OPTION_ERROR_FAILED: A #GOptionArgFunc callback failed.
///
/// Error codes returned by option parsing.
abstract class GOptionError {
  static const int G_OPTION_ERROR_UNKNOWN_OPTION = 0;
  static const int G_OPTION_ERROR_BAD_VALUE = 1;
  static const int G_OPTION_ERROR_FAILED = 2;
}

/// GOptionContext:
///
/// A `GOptionContext` struct defines which options
/// are accepted by the commandline option parser. The struct has only private
/// fields and should not be directly accessed.
typedef GOptionContext = _GOptionContext;
typedef GOptionEntry = _GOptionEntry;

/// GTranslateFunc:
/// @str: the untranslated string
/// @data: user data specified when installing the function, e.g.
/// in g_option_group_set_translate_func()
///
/// The type of functions which are used to translate user-visible
/// strings, for <option>--help</option> output.
///
/// Returns: a translation of the string for the current locale.
/// The returned string is owned by GLib and must not be freed.
typedef GTranslateFunc
    = ffi.Pointer<ffi.NativeFunction<GTranslateFuncFunction>>;
typedef GTranslateFuncFunction = ffi.Pointer<gchar> Function(
    ffi.Pointer<gchar> str, gpointer data);

/// GOptionGroup:
///
/// A `GOptionGroup` struct defines the options in a single
/// group. The struct has only private fields and should not be directly accessed.
///
/// All options in a group share the same translation function. Libraries which
/// need to parse commandline options are expected to provide a function for
/// getting a `GOptionGroup` holding their options, which
/// the application can then add to its #GOptionContext.
typedef GOptionGroup = _GOptionGroup;

/// GOptionParseFunc:
/// @context: The active #GOptionContext
/// @group: The group to which the function belongs
/// @data: User data added to the #GOptionGroup containing the option when it
/// was created with g_option_group_new()
/// @error: A return location for error details
///
/// The type of function that can be called before and after parsing.
///
/// Returns: %TRUE if the function completed successfully, %FALSE if an error
/// occurred, in which case @error should be set with g_set_error()
typedef GOptionParseFunc
    = ffi.Pointer<ffi.NativeFunction<GOptionParseFuncFunction>>;
typedef GOptionParseFuncFunction = gboolean Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);
typedef DartGOptionParseFuncFunction = Dartgint Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);

/// GOptionErrorFunc:
/// @context: The active #GOptionContext
/// @group: The group to which the function belongs
/// @data: User data added to the #GOptionGroup containing the option when it
/// was created with g_option_group_new()
/// @error: The #GError containing details about the parse error
///
/// The type of function to be used as callback when a parse error occurs.
typedef GOptionErrorFunc
    = ffi.Pointer<ffi.NativeFunction<GOptionErrorFuncFunction>>;
typedef GOptionErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);
typedef DartGOptionErrorFuncFunction = void Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    gpointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);

final class _GPatternSpec extends ffi.Opaque {}

typedef GPatternSpec = _GPatternSpec;

/// GQueue:
/// @head: a pointer to the first element of the queue
/// @tail: a pointer to the last element of the queue
/// @length: the number of elements in the queue
///
/// Contains the public fields of a
/// [Queue][glib-Double-ended-Queues].
final class _GQueue extends ffi.Struct {
  external ffi.Pointer<GList> head;

  external ffi.Pointer<GList> tail;

  @guint()
  external int length;
}

typedef GQueue = _GQueue;

final class _GRand extends ffi.Opaque {}

typedef GRand = _GRand;
typedef grefcount = gint;
typedef gatomicrefcount = gint;

/// GRegexError:
/// @G_REGEX_ERROR_COMPILE: Compilation of the regular expression failed.
/// @G_REGEX_ERROR_OPTIMIZE: Optimization of the regular expression failed.
/// @G_REGEX_ERROR_REPLACE: Replacement failed due to an ill-formed replacement
/// string.
/// @G_REGEX_ERROR_MATCH: The match process failed.
/// @G_REGEX_ERROR_INTERNAL: Internal error of the regular expression engine.
/// Since 2.16
/// @G_REGEX_ERROR_STRAY_BACKSLASH: "\\" at end of pattern. Since 2.16
/// @G_REGEX_ERROR_MISSING_CONTROL_CHAR: "\\c" at end of pattern. Since 2.16
/// @G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: Unrecognized character follows "\\".
/// Since 2.16
/// @G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: Numbers out of order in "{}"
/// quantifier. Since 2.16
/// @G_REGEX_ERROR_QUANTIFIER_TOO_BIG: Number too big in "{}" quantifier.
/// Since 2.16
/// @G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: Missing terminating "]" for
/// character class. Since 2.16
/// @G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: Invalid escape sequence
/// in character class. Since 2.16
/// @G_REGEX_ERROR_RANGE_OUT_OF_ORDER: Range out of order in character class.
/// Since 2.16
/// @G_REGEX_ERROR_NOTHING_TO_REPEAT: Nothing to repeat. Since 2.16
/// @G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: Unrecognized character after "(?",
/// "(?<" or "(?P". Since 2.16
/// @G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: POSIX named classes are
/// supported only within a class. Since 2.16
/// @G_REGEX_ERROR_UNMATCHED_PARENTHESIS: Missing terminating ")" or ")"
/// without opening "(". Since 2.16
/// @G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: Reference to non-existent
/// subpattern. Since 2.16
/// @G_REGEX_ERROR_UNTERMINATED_COMMENT: Missing terminating ")" after comment.
/// Since 2.16
/// @G_REGEX_ERROR_EXPRESSION_TOO_LARGE: Regular expression too large.
/// Since 2.16
/// @G_REGEX_ERROR_MEMORY_ERROR: Failed to get memory. Since 2.16
/// @G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: Lookbehind assertion is not
/// fixed length. Since 2.16
/// @G_REGEX_ERROR_MALFORMED_CONDITION: Malformed number or name after "(?(".
/// Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: Conditional group contains
/// more than two branches. Since 2.16
/// @G_REGEX_ERROR_ASSERTION_EXPECTED: Assertion expected after "(?(".
/// Since 2.16
/// @G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: Unknown POSIX class name.
/// Since 2.16
/// @G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: POSIX collating
/// elements are not supported. Since 2.16
/// @G_REGEX_ERROR_HEX_CODE_TOO_LARGE: Character value in "\\x{...}" sequence
/// is too large. Since 2.16
/// @G_REGEX_ERROR_INVALID_CONDITION: Invalid condition "(?(0)". Since 2.16
/// @G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: \\C not allowed in
/// lookbehind assertion. Since 2.16
/// @G_REGEX_ERROR_INFINITE_LOOP: Recursive call could loop indefinitely.
/// Since 2.16
/// @G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: Missing terminator
/// in subpattern name. Since 2.16
/// @G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: Two named subpatterns have
/// the same name. Since 2.16
/// @G_REGEX_ERROR_MALFORMED_PROPERTY: Malformed "\\P" or "\\p" sequence.
/// Since 2.16
/// @G_REGEX_ERROR_UNKNOWN_PROPERTY: Unknown property name after "\\P" or
/// "\\p". Since 2.16
/// @G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: Subpattern name is too long
/// (maximum 32 characters). Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: Too many named subpatterns (maximum
/// 10,000). Since 2.16
/// @G_REGEX_ERROR_INVALID_OCTAL_VALUE: Octal value is greater than "\\377".
/// Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: "DEFINE" group contains more
/// than one branch. Since 2.16
/// @G_REGEX_ERROR_DEFINE_REPETION: Repeating a "DEFINE" group is not allowed.
/// This error is never raised. Since: 2.16 Deprecated: 2.34
/// @G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: Inconsistent newline options.
/// Since 2.16
/// @G_REGEX_ERROR_MISSING_BACK_REFERENCE: "\\g" is not followed by a braced,
/// angle-bracketed, or quoted name or number, or by a plain number. Since: 2.16
/// @G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: relative reference must not be zero. Since: 2.34
/// @G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: the backtracing
/// control verb used does not allow an argument. Since: 2.34
/// @G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: unknown backtracing
/// control verb. Since: 2.34
/// @G_REGEX_ERROR_NUMBER_TOO_BIG: number is too big in escape sequence. Since: 2.34
/// @G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: Missing subpattern name. Since: 2.34
/// @G_REGEX_ERROR_MISSING_DIGIT: Missing digit. Since 2.34
/// @G_REGEX_ERROR_INVALID_DATA_CHARACTER: In JavaScript compatibility mode,
/// "[" is an invalid data character. Since: 2.34
/// @G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: different names for subpatterns of the
/// same number are not allowed. Since: 2.34
/// @G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: the backtracing control
/// verb requires an argument. Since: 2.34
/// @G_REGEX_ERROR_INVALID_CONTROL_CHAR: "\\c" must be followed by an ASCII
/// character. Since: 2.34
/// @G_REGEX_ERROR_MISSING_NAME: "\\k" is not followed by a braced, angle-bracketed, or
/// quoted name. Since: 2.34
/// @G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: "\\N" is not supported in a class. Since: 2.34
/// @G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: too many forward references. Since: 2.34
/// @G_REGEX_ERROR_NAME_TOO_LONG: the name is too long in "(*MARK)", "(*PRUNE)",
/// "(*SKIP)", or "(*THEN)". Since: 2.34
/// @G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: the character value in the \\u sequence is
/// too large. Since: 2.34
///
/// Error codes returned by regular expressions functions.
///
/// Since: 2.14
abstract class GRegexError {
  static const int G_REGEX_ERROR_COMPILE = 0;
  static const int G_REGEX_ERROR_OPTIMIZE = 1;
  static const int G_REGEX_ERROR_REPLACE = 2;
  static const int G_REGEX_ERROR_MATCH = 3;
  static const int G_REGEX_ERROR_INTERNAL = 4;
  static const int G_REGEX_ERROR_STRAY_BACKSLASH = 101;
  static const int G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
  static const int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
  static const int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
  static const int G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
  static const int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
  static const int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
  static const int G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
  static const int G_REGEX_ERROR_NOTHING_TO_REPEAT = 109;
  static const int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
  static const int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
  static const int G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
  static const int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
  static const int G_REGEX_ERROR_UNTERMINATED_COMMENT = 118;
  static const int G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
  static const int G_REGEX_ERROR_MEMORY_ERROR = 121;
  static const int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
  static const int G_REGEX_ERROR_MALFORMED_CONDITION = 126;
  static const int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
  static const int G_REGEX_ERROR_ASSERTION_EXPECTED = 128;
  static const int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
  static const int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
  static const int G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
  static const int G_REGEX_ERROR_INVALID_CONDITION = 135;
  static const int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
  static const int G_REGEX_ERROR_INFINITE_LOOP = 140;
  static const int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
  static const int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
  static const int G_REGEX_ERROR_MALFORMED_PROPERTY = 146;
  static const int G_REGEX_ERROR_UNKNOWN_PROPERTY = 147;
  static const int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
  static const int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
  static const int G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
  static const int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
  static const int G_REGEX_ERROR_DEFINE_REPETION = 155;
  static const int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
  static const int G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157;
  static const int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158;
  static const int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN =
      159;
  static const int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160;
  static const int G_REGEX_ERROR_NUMBER_TOO_BIG = 161;
  static const int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162;
  static const int G_REGEX_ERROR_MISSING_DIGIT = 163;
  static const int G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164;
  static const int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165;
  static const int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED =
      166;
  static const int G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168;
  static const int G_REGEX_ERROR_MISSING_NAME = 169;
  static const int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171;
  static const int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172;
  static const int G_REGEX_ERROR_NAME_TOO_LONG = 175;
  static const int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176;
}

/// GRegexCompileFlags:
/// @G_REGEX_CASELESS: Letters in the pattern match both upper- and
/// lowercase letters. This option can be changed within a pattern
/// by a "(?i)" option setting.
/// @G_REGEX_MULTILINE: By default, GRegex treats the strings as consisting
/// of a single line of characters (even if it actually contains
/// newlines). The "start of line" metacharacter ("^") matches only
/// at the start of the string, while the "end of line" metacharacter
/// ("$") matches only at the end of the string, or before a terminating
/// newline (unless %G_REGEX_DOLLAR_ENDONLY is set). When
/// %G_REGEX_MULTILINE is set, the "start of line" and "end of line"
/// constructs match immediately following or immediately before any
/// newline in the string, respectively, as well as at the very start
/// and end. This can be changed within a pattern by a "(?m)" option
/// setting.
/// @G_REGEX_DOTALL: A dot metacharacter (".") in the pattern matches all
/// characters, including newlines. Without it, newlines are excluded.
/// This option can be changed within a pattern by a ("?s") option setting.
/// @G_REGEX_EXTENDED: Whitespace data characters in the pattern are
/// totally ignored except when escaped or inside a character class.
/// Whitespace does not include the VT character (code 11). In addition,
/// characters between an unescaped "#" outside a character class and
/// the next newline character, inclusive, are also ignored. This can
/// be changed within a pattern by a "(?x)" option setting.
/// @G_REGEX_ANCHORED: The pattern is forced to be "anchored", that is,
/// it is constrained to match only at the first matching point in the
/// string that is being searched. This effect can also be achieved by
/// appropriate constructs in the pattern itself such as the "^"
/// metacharacter.
/// @G_REGEX_DOLLAR_ENDONLY: A dollar metacharacter ("$") in the pattern
/// matches only at the end of the string. Without this option, a
/// dollar also matches immediately before the final character if
/// it is a newline (but not before any other newlines). This option
/// is ignored if %G_REGEX_MULTILINE is set.
/// @G_REGEX_UNGREEDY: Inverts the "greediness" of the quantifiers so that
/// they are not greedy by default, but become greedy if followed by "?".
/// It can also be set by a "(?U)" option setting within the pattern.
/// @G_REGEX_RAW: Usually strings must be valid UTF-8 strings, using this
/// flag they are considered as a raw sequence of bytes.
/// @G_REGEX_NO_AUTO_CAPTURE: Disables the use of numbered capturing
/// parentheses in the pattern. Any opening parenthesis that is not
/// followed by "?" behaves as if it were followed by "?:" but named
/// parentheses can still be used for capturing (and they acquire numbers
/// in the usual way).
/// @G_REGEX_OPTIMIZE: Optimize the regular expression. If the pattern will
/// be used many times, then it may be worth the effort to optimize it
/// to improve the speed of matches.
/// @G_REGEX_FIRSTLINE: Limits an unanchored pattern to match before (or at) the
/// first newline. Since: 2.34
/// @G_REGEX_DUPNAMES: Names used to identify capturing subpatterns need not
/// be unique. This can be helpful for certain types of pattern when it
/// is known that only one instance of the named subpattern can ever be
/// matched.
/// @G_REGEX_NEWLINE_CR: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// is '\r'.
/// @G_REGEX_NEWLINE_LF: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// is '\n'.
/// @G_REGEX_NEWLINE_CRLF: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// sequence is '\r\n'.
/// @G_REGEX_NEWLINE_ANYCRLF: Usually any newline character or character sequence
/// is recognized. If this option is set, the only recognized newline character
/// sequences are '\r', '\n', and '\r\n'. Since: 2.34
/// @G_REGEX_BSR_ANYCRLF: Usually any newline character or character sequence
/// is recognised. If this option is set, then "\R" only recognizes the newline
/// characters '\r', '\n' and '\r\n'. Since: 2.34
/// @G_REGEX_JAVASCRIPT_COMPAT: Changes behaviour so that it is compatible with
/// JavaScript rather than PCRE. Since: 2.34
///
/// Flags specifying compile-time options.
///
/// Since: 2.14
abstract class GRegexCompileFlags {
  static const int G_REGEX_CASELESS = 1;
  static const int G_REGEX_MULTILINE = 2;
  static const int G_REGEX_DOTALL = 4;
  static const int G_REGEX_EXTENDED = 8;
  static const int G_REGEX_ANCHORED = 16;
  static const int G_REGEX_DOLLAR_ENDONLY = 32;
  static const int G_REGEX_UNGREEDY = 512;
  static const int G_REGEX_RAW = 2048;
  static const int G_REGEX_NO_AUTO_CAPTURE = 4096;
  static const int G_REGEX_OPTIMIZE = 8192;
  static const int G_REGEX_FIRSTLINE = 262144;
  static const int G_REGEX_DUPNAMES = 524288;
  static const int G_REGEX_NEWLINE_CR = 1048576;
  static const int G_REGEX_NEWLINE_LF = 2097152;
  static const int G_REGEX_NEWLINE_CRLF = 3145728;
  static const int G_REGEX_NEWLINE_ANYCRLF = 5242880;
  static const int G_REGEX_BSR_ANYCRLF = 8388608;
  static const int G_REGEX_JAVASCRIPT_COMPAT = 33554432;
}

/// GRegexMatchFlags:
/// @G_REGEX_MATCH_ANCHORED: The pattern is forced to be "anchored", that is,
/// it is constrained to match only at the first matching point in the
/// string that is being searched. This effect can also be achieved by
/// appropriate constructs in the pattern itself such as the "^"
/// metacharacter.
/// @G_REGEX_MATCH_NOTBOL: Specifies that first character of the string is
/// not the beginning of a line, so the circumflex metacharacter should
/// not match before it. Setting this without %G_REGEX_MULTILINE (at
/// compile time) causes circumflex never to match. This option affects
/// only the behaviour of the circumflex metacharacter, it does not
/// affect "\A".
/// @G_REGEX_MATCH_NOTEOL: Specifies that the end of the subject string is
/// not the end of a line, so the dollar metacharacter should not match
/// it nor (except in multiline mode) a newline immediately before it.
/// Setting this without %G_REGEX_MULTILINE (at compile time) causes
/// dollar never to match. This option affects only the behaviour of
/// the dollar metacharacter, it does not affect "\Z" or "\z".
/// @G_REGEX_MATCH_NOTEMPTY: An empty string is not considered to be a valid
/// match if this option is set. If there are alternatives in the pattern,
/// they are tried. If all the alternatives match the empty string, the
/// entire match fails. For example, if the pattern "a?b?" is applied to
/// a string not beginning with "a" or "b", it matches the empty string
/// at the start of the string. With this flag set, this match is not
/// valid, so GRegex searches further into the string for occurrences
/// of "a" or "b".
/// @G_REGEX_MATCH_PARTIAL: Turns on the partial matching feature, for more
/// documentation on partial matching see g_match_info_is_partial_match().
/// @G_REGEX_MATCH_NEWLINE_CR: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\r' character as line terminator.
/// @G_REGEX_MATCH_NEWLINE_LF: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\n' character as line terminator.
/// @G_REGEX_MATCH_NEWLINE_CRLF: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\r\n' characters sequence as line terminator.
/// @G_REGEX_MATCH_NEWLINE_ANY: Overrides the newline definition set when
/// creating a new #GRegex, any Unicode newline sequence
/// is recognised as a newline. These are '\r', '\n' and '\rn', and the
/// single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
/// U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
/// U+2029 PARAGRAPH SEPARATOR.
/// @G_REGEX_MATCH_NEWLINE_ANYCRLF: Overrides the newline definition set when
/// creating a new #GRegex; any '\r', '\n', or '\r\n' character sequence
/// is recognized as a newline. Since: 2.34
/// @G_REGEX_MATCH_BSR_ANYCRLF: Overrides the newline definition for "\R" set when
/// creating a new #GRegex; only '\r', '\n', or '\r\n' character sequences
/// are recognized as a newline by "\R". Since: 2.34
/// @G_REGEX_MATCH_BSR_ANY: Overrides the newline definition for "\R" set when
/// creating a new #GRegex; any Unicode newline character or character sequence
/// are recognized as a newline by "\R". These are '\r', '\n' and '\rn', and the
/// single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
/// U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
/// U+2029 PARAGRAPH SEPARATOR. Since: 2.34
/// @G_REGEX_MATCH_PARTIAL_SOFT: An alias for %G_REGEX_MATCH_PARTIAL. Since: 2.34
/// @G_REGEX_MATCH_PARTIAL_HARD: Turns on the partial matching feature. In contrast to
/// to %G_REGEX_MATCH_PARTIAL_SOFT, this stops matching as soon as a partial match
/// is found, without continuing to search for a possible complete match. See
/// g_match_info_is_partial_match() for more information. Since: 2.34
/// @G_REGEX_MATCH_NOTEMPTY_ATSTART: Like %G_REGEX_MATCH_NOTEMPTY, but only applied to
/// the start of the matched string. For anchored
/// patterns this can only happen for pattern containing "\K". Since: 2.34
///
/// Flags specifying match-time options.
///
/// Since: 2.14
abstract class GRegexMatchFlags {
  static const int G_REGEX_MATCH_ANCHORED = 16;
  static const int G_REGEX_MATCH_NOTBOL = 128;
  static const int G_REGEX_MATCH_NOTEOL = 256;
  static const int G_REGEX_MATCH_NOTEMPTY = 1024;
  static const int G_REGEX_MATCH_PARTIAL = 32768;
  static const int G_REGEX_MATCH_NEWLINE_CR = 1048576;
  static const int G_REGEX_MATCH_NEWLINE_LF = 2097152;
  static const int G_REGEX_MATCH_NEWLINE_CRLF = 3145728;
  static const int G_REGEX_MATCH_NEWLINE_ANY = 4194304;
  static const int G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880;
  static const int G_REGEX_MATCH_BSR_ANYCRLF = 8388608;
  static const int G_REGEX_MATCH_BSR_ANY = 16777216;
  static const int G_REGEX_MATCH_PARTIAL_SOFT = 32768;
  static const int G_REGEX_MATCH_PARTIAL_HARD = 134217728;
  static const int G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456;
}

final class _GRegex extends ffi.Opaque {}

final class _GMatchInfo extends ffi.Opaque {}

/// GRegex:
///
/// A GRegex is the "compiled" form of a regular expression pattern.
/// This structure is opaque and its fields cannot be accessed directly.
///
/// Since: 2.14
typedef GRegex = _GRegex;

/// GMatchInfo:
///
/// A GMatchInfo is an opaque struct used to return information about
/// matches.
typedef GMatchInfo = _GMatchInfo;

/// GRegexEvalCallback:
/// @match_info: the #GMatchInfo generated by the match.
/// Use g_match_info_get_regex() and g_match_info_get_string() if you
/// need the #GRegex or the matched string.
/// @result: a #GString containing the new string
/// @user_data: user data passed to g_regex_replace_eval()
///
/// Specifies the type of the function passed to g_regex_replace_eval().
/// It is called for each occurrence of the pattern in the string passed
/// to g_regex_replace_eval(), and it should append the replacement to
/// @result.
///
/// Returns: %FALSE to continue the replacement process, %TRUE to stop it
///
/// Since: 2.14
typedef GRegexEvalCallback
    = ffi.Pointer<ffi.NativeFunction<GRegexEvalCallbackFunction>>;
typedef GRegexEvalCallbackFunction = gboolean Function(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<GString> result,
    gpointer user_data);
typedef DartGRegexEvalCallbackFunction = Dartgint Function(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<GString> result,
    gpointer user_data);

final class _GScanner extends ffi.Struct {
  external gpointer user_data;

  @guint()
  external int max_parse_errors;

  @guint()
  external int parse_errors;

  external ffi.Pointer<gchar> input_name;

  external ffi.Pointer<GData> qdata;

  external ffi.Pointer<GScannerConfig> config;

  @ffi.Int32()
  external int token;

  external GTokenValue value;

  @guint()
  external int line;

  @guint()
  external int position;

  @ffi.Int32()
  external int next_token;

  external GTokenValue next_value;

  @guint()
  external int next_line;

  @guint()
  external int next_position;

  external ffi.Pointer<GHashTable> symbol_table;

  @gint()
  external int input_fd;

  external ffi.Pointer<gchar> text;

  external ffi.Pointer<gchar> text_end;

  external ffi.Pointer<gchar> buffer;

  @guint()
  external int scope_id;

  external GScannerMsgFunc msg_handler;
}

typedef GScannerConfig = _GScannerConfig;

final class _GScannerConfig extends ffi.Opaque {}

abstract class GTokenType {
  static const int G_TOKEN_EOF = 0;
  static const int G_TOKEN_LEFT_PAREN = 40;
  static const int G_TOKEN_RIGHT_PAREN = 41;
  static const int G_TOKEN_LEFT_CURLY = 123;
  static const int G_TOKEN_RIGHT_CURLY = 125;
  static const int G_TOKEN_LEFT_BRACE = 91;
  static const int G_TOKEN_RIGHT_BRACE = 93;
  static const int G_TOKEN_EQUAL_SIGN = 61;
  static const int G_TOKEN_COMMA = 44;
  static const int G_TOKEN_NONE = 256;
  static const int G_TOKEN_ERROR = 257;
  static const int G_TOKEN_CHAR = 258;
  static const int G_TOKEN_BINARY = 259;
  static const int G_TOKEN_OCTAL = 260;
  static const int G_TOKEN_INT = 261;
  static const int G_TOKEN_HEX = 262;
  static const int G_TOKEN_FLOAT = 263;
  static const int G_TOKEN_STRING = 264;
  static const int G_TOKEN_SYMBOL = 265;
  static const int G_TOKEN_IDENTIFIER = 266;
  static const int G_TOKEN_IDENTIFIER_NULL = 267;
  static const int G_TOKEN_COMMENT_SINGLE = 268;
  static const int G_TOKEN_COMMENT_MULTI = 269;
  static const int G_TOKEN_LAST = 270;
}

typedef GTokenValue = _GTokenValue;

final class _GTokenValue extends ffi.Union {
  external gpointer v_symbol;

  external ffi.Pointer<gchar> v_identifier;

  @gulong()
  external int v_binary;

  @gulong()
  external int v_octal;

  @gulong()
  external int v_int;

  @guint64()
  external int v_int64;

  @gdouble()
  external double v_float;

  @gulong()
  external int v_hex;

  external ffi.Pointer<gchar> v_string;

  external ffi.Pointer<gchar> v_comment;

  @guchar()
  external int v_char;

  @guint()
  external int v_error;
}

typedef GScannerMsgFunc
    = ffi.Pointer<ffi.NativeFunction<GScannerMsgFuncFunction>>;
typedef GScannerMsgFuncFunction = ffi.Void Function(
    ffi.Pointer<GScanner> scanner, ffi.Pointer<gchar> message, gboolean error);
typedef DartGScannerMsgFuncFunction = void Function(
    ffi.Pointer<GScanner> scanner, ffi.Pointer<gchar> message, Dartgint error);
typedef GScanner = _GScanner;

abstract class GErrorType {
  static const int G_ERR_UNKNOWN = 0;
  static const int G_ERR_UNEXP_EOF = 1;
  static const int G_ERR_UNEXP_EOF_IN_STRING = 2;
  static const int G_ERR_UNEXP_EOF_IN_COMMENT = 3;
  static const int G_ERR_NON_DIGIT_IN_CONST = 4;
  static const int G_ERR_DIGIT_RADIX = 5;
  static const int G_ERR_FLOAT_RADIX = 6;
  static const int G_ERR_FLOAT_MALFORMED = 7;
}

final class _GSequence extends ffi.Opaque {}

final class _GSequenceNode extends ffi.Opaque {}

typedef GSequence = _GSequence;
typedef GSequenceIter = _GSequenceNode;
typedef GSequenceIterCompareFunc
    = ffi.Pointer<ffi.NativeFunction<GSequenceIterCompareFuncFunction>>;
typedef GSequenceIterCompareFuncFunction = gint Function(
    ffi.Pointer<GSequenceIter> a, ffi.Pointer<GSequenceIter> b, gpointer data);
typedef DartGSequenceIterCompareFuncFunction = Dartgint Function(
    ffi.Pointer<GSequenceIter> a, ffi.Pointer<GSequenceIter> b, gpointer data);

abstract class GShellError {
  static const int G_SHELL_ERROR_BAD_QUOTING = 0;
  static const int G_SHELL_ERROR_EMPTY_STRING = 1;
  static const int G_SHELL_ERROR_FAILED = 2;
}

abstract class GSliceConfig {
  static const int G_SLICE_CONFIG_ALWAYS_MALLOC = 1;
  static const int G_SLICE_CONFIG_BYPASS_MAGAZINES = 2;
  static const int G_SLICE_CONFIG_WORKING_SET_MSECS = 3;
  static const int G_SLICE_CONFIG_COLOR_INCREMENT = 4;
  static const int G_SLICE_CONFIG_CHUNK_SIZES = 5;
  static const int G_SLICE_CONFIG_CONTENTION_COUNTER = 6;
}

/// GSpawnError:
/// @G_SPAWN_ERROR_FORK: Fork failed due to lack of memory.
/// @G_SPAWN_ERROR_READ: Read or select on pipes failed.
/// @G_SPAWN_ERROR_CHDIR: Changing to working directory failed.
/// @G_SPAWN_ERROR_ACCES: execv() returned `EACCES`
/// @G_SPAWN_ERROR_PERM: execv() returned `EPERM`
/// @G_SPAWN_ERROR_TOO_BIG: execv() returned `E2BIG`
/// @G_SPAWN_ERROR_2BIG: deprecated alias for %G_SPAWN_ERROR_TOO_BIG (deprecated since GLib 2.32)
/// @G_SPAWN_ERROR_NOEXEC: execv() returned `ENOEXEC`
/// @G_SPAWN_ERROR_NAMETOOLONG: execv() returned `ENAMETOOLONG`
/// @G_SPAWN_ERROR_NOENT: execv() returned `ENOENT`
/// @G_SPAWN_ERROR_NOMEM: execv() returned `ENOMEM`
/// @G_SPAWN_ERROR_NOTDIR: execv() returned `ENOTDIR`
/// @G_SPAWN_ERROR_LOOP: execv() returned `ELOOP`
/// @G_SPAWN_ERROR_TXTBUSY: execv() returned `ETXTBUSY`
/// @G_SPAWN_ERROR_IO: execv() returned `EIO`
/// @G_SPAWN_ERROR_NFILE: execv() returned `ENFILE`
/// @G_SPAWN_ERROR_MFILE: execv() returned `EMFILE`
/// @G_SPAWN_ERROR_INVAL: execv() returned `EINVAL`
/// @G_SPAWN_ERROR_ISDIR: execv() returned `EISDIR`
/// @G_SPAWN_ERROR_LIBBAD: execv() returned `ELIBBAD`
/// @G_SPAWN_ERROR_FAILED: Some other fatal failure,
/// `error->message` should explain.
///
/// Error codes returned by spawning processes.
abstract class GSpawnError {
  static const int G_SPAWN_ERROR_FORK = 0;
  static const int G_SPAWN_ERROR_READ = 1;
  static const int G_SPAWN_ERROR_CHDIR = 2;
  static const int G_SPAWN_ERROR_ACCES = 3;
  static const int G_SPAWN_ERROR_PERM = 4;
  static const int G_SPAWN_ERROR_TOO_BIG = 5;
  static const int G_SPAWN_ERROR_2BIG = 5;
  static const int G_SPAWN_ERROR_NOEXEC = 6;
  static const int G_SPAWN_ERROR_NAMETOOLONG = 7;
  static const int G_SPAWN_ERROR_NOENT = 8;
  static const int G_SPAWN_ERROR_NOMEM = 9;
  static const int G_SPAWN_ERROR_NOTDIR = 10;
  static const int G_SPAWN_ERROR_LOOP = 11;
  static const int G_SPAWN_ERROR_TXTBUSY = 12;
  static const int G_SPAWN_ERROR_IO = 13;
  static const int G_SPAWN_ERROR_NFILE = 14;
  static const int G_SPAWN_ERROR_MFILE = 15;
  static const int G_SPAWN_ERROR_INVAL = 16;
  static const int G_SPAWN_ERROR_ISDIR = 17;
  static const int G_SPAWN_ERROR_LIBBAD = 18;
  static const int G_SPAWN_ERROR_FAILED = 19;
}

/// GSpawnFlags:
/// @G_SPAWN_DEFAULT: no flags, default behaviour
/// @G_SPAWN_LEAVE_DESCRIPTORS_OPEN: the parent's open file descriptors will
/// be inherited by the child; otherwise all descriptors except stdin,
/// stdout and stderr will be closed before calling exec() in the child.
/// @G_SPAWN_DO_NOT_REAP_CHILD: the child will not be automatically reaped;
/// you must use g_child_watch_add() yourself (or call waitpid() or handle
/// `SIGCHLD` yourself), or the child will become a zombie.
/// @G_SPAWN_SEARCH_PATH: `argv[0]` need not be an absolute path, it will be
/// looked for in the user's `PATH`.
/// @G_SPAWN_STDOUT_TO_DEV_NULL: the child's standard output will be discarded,
/// instead of going to the same location as the parent's standard output.
/// @G_SPAWN_STDERR_TO_DEV_NULL: the child's standard error will be discarded.
/// @G_SPAWN_CHILD_INHERITS_STDIN: the child will inherit the parent's standard
/// input (by default, the child's standard input is attached to `/dev/null`).
/// @G_SPAWN_FILE_AND_ARGV_ZERO: the first element of `argv` is the file to
/// execute, while the remaining elements are the actual argument vector
/// to pass to the file. Normally g_spawn_async_with_pipes() uses `argv[0]`
/// as the file to execute, and passes all of `argv` to the child.
/// @G_SPAWN_SEARCH_PATH_FROM_ENVP: if `argv[0]` is not an absolute path,
/// it will be looked for in the `PATH` from the passed child environment.
/// Since: 2.34
/// @G_SPAWN_CLOEXEC_PIPES: create all pipes with the `O_CLOEXEC` flag set.
/// Since: 2.40
///
/// Flags passed to g_spawn_sync(), g_spawn_async() and g_spawn_async_with_pipes().
abstract class GSpawnFlags {
  static const int G_SPAWN_DEFAULT = 0;
  static const int G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
  static const int G_SPAWN_DO_NOT_REAP_CHILD = 2;
  static const int G_SPAWN_SEARCH_PATH = 4;
  static const int G_SPAWN_STDOUT_TO_DEV_NULL = 8;
  static const int G_SPAWN_STDERR_TO_DEV_NULL = 16;
  static const int G_SPAWN_CHILD_INHERITS_STDIN = 32;
  static const int G_SPAWN_FILE_AND_ARGV_ZERO = 64;
  static const int G_SPAWN_SEARCH_PATH_FROM_ENVP = 128;
  static const int G_SPAWN_CLOEXEC_PIPES = 256;
}

/// GSpawnChildSetupFunc:
/// @user_data: (closure): user data to pass to the function.
///
/// Specifies the type of the setup function passed to g_spawn_async(),
/// g_spawn_sync() and g_spawn_async_with_pipes(), which can, in very
/// limited ways, be used to affect the child's execution.
///
/// On POSIX platforms, the function is called in the child after GLib
/// has performed all the setup it plans to perform, but before calling
/// exec(). Actions taken in this function will only affect the child,
/// not the parent.
///
/// On Windows, the function is called in the parent. Its usefulness on
/// Windows is thus questionable. In many cases executing the child setup
/// function in the parent can have ill effects, and you should be very
/// careful when porting software to Windows that uses child setup
/// functions.
///
/// However, even on POSIX, you are extremely limited in what you can
/// safely do from a #GSpawnChildSetupFunc, because any mutexes that were
/// held by other threads in the parent process at the time of the fork()
/// will still be locked in the child process, and they will never be
/// unlocked (since the threads that held them don't exist in the child).
/// POSIX allows only async-signal-safe functions (see signal(7)) to be
/// called in the child between fork() and exec(), which drastically limits
/// the usefulness of child setup functions.
///
/// In particular, it is not safe to call any function which may
/// call malloc(), which includes POSIX functions such as setenv().
/// If you need to set up the child environment differently from
/// the parent, you should use g_get_environ(), g_environ_setenv(),
/// and g_environ_unsetenv(), and then pass the complete environment
/// list to the `g_spawn...` function.
typedef GSpawnChildSetupFunc
    = ffi.Pointer<ffi.NativeFunction<GSpawnChildSetupFuncFunction>>;
typedef GSpawnChildSetupFuncFunction = ffi.Void Function(gpointer user_data);
typedef DartGSpawnChildSetupFuncFunction = void Function(gpointer user_data);

abstract class GAsciiType {
  static const int G_ASCII_ALNUM = 1;
  static const int G_ASCII_ALPHA = 2;
  static const int G_ASCII_CNTRL = 4;
  static const int G_ASCII_DIGIT = 8;
  static const int G_ASCII_GRAPH = 16;
  static const int G_ASCII_LOWER = 32;
  static const int G_ASCII_PRINT = 64;
  static const int G_ASCII_PUNCT = 128;
  static const int G_ASCII_SPACE = 256;
  static const int G_ASCII_UPPER = 512;
  static const int G_ASCII_XDIGIT = 1024;
}

/// GNumberParserError:
/// @G_NUMBER_PARSER_ERROR_INVALID: String was not a valid number.
/// @G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS: String was a number, but out of bounds.
///
/// Error codes returned by functions converting a string to a number.
///
/// Since: 2.54
abstract class GNumberParserError {
  static const int G_NUMBER_PARSER_ERROR_INVALID = 0;
  static const int G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1;
}

final class _GStringChunk extends ffi.Opaque {}

typedef GStringChunk = _GStringChunk;

final class _GStrvBuilder extends ffi.Opaque {}

/// GStrvBuilder:
///
/// A helper object to build a %NULL-terminated string array
/// by appending. See g_strv_builder_new().
///
/// Since: 2.68
typedef GStrvBuilder = _GStrvBuilder;
typedef GStrv = ffi.Pointer<ffi.Pointer<gchar>>;

final class GTestCase extends ffi.Opaque {}

final class GTestSuite extends ffi.Opaque {}

typedef GTestFunc = ffi.Pointer<ffi.NativeFunction<GTestFuncFunction>>;
typedef GTestFuncFunction = ffi.Void Function();
typedef DartGTestFuncFunction = void Function();
typedef GTestDataFunc = ffi.Pointer<ffi.NativeFunction<GTestDataFuncFunction>>;
typedef GTestDataFuncFunction = ffi.Void Function(gconstpointer user_data);
typedef DartGTestDataFuncFunction = void Function(gconstpointer user_data);

/// GTestTrapFlags:
/// @G_TEST_TRAP_SILENCE_STDOUT: Redirect stdout of the test child to
/// `/dev/null` so it cannot be observed on the console during test
/// runs. The actual output is still captured though to allow later
/// tests with g_test_trap_assert_stdout().
/// @G_TEST_TRAP_SILENCE_STDERR: Redirect stderr of the test child to
/// `/dev/null` so it cannot be observed on the console during test
/// runs. The actual output is still captured though to allow later
/// tests with g_test_trap_assert_stderr().
/// @G_TEST_TRAP_INHERIT_STDIN: If this flag is given, stdin of the
/// child process is shared with stdin of its parent process.
/// It is redirected to `/dev/null` otherwise.
///
/// Test traps are guards around forked tests.
/// These flags determine what traps to set.
///
/// Deprecated: 2.38: #GTestTrapFlags is used only with g_test_trap_fork(),
/// which is deprecated. g_test_trap_subprocess() uses
/// #GTestSubprocessFlags.
abstract class GTestTrapFlags {
  static const int G_TEST_TRAP_SILENCE_STDOUT = 128;
  static const int G_TEST_TRAP_SILENCE_STDERR = 256;
  static const int G_TEST_TRAP_INHERIT_STDIN = 512;
}

abstract class GTestSubprocessFlags {
  static const int G_TEST_SUBPROCESS_INHERIT_STDIN = 1;
  static const int G_TEST_SUBPROCESS_INHERIT_STDOUT = 2;
  static const int G_TEST_SUBPROCESS_INHERIT_STDERR = 4;
}

typedef GTestFixtureFunc
    = ffi.Pointer<ffi.NativeFunction<GTestFixtureFuncFunction>>;
typedef GTestFixtureFuncFunction = ffi.Void Function(
    gpointer fixture, gconstpointer user_data);
typedef DartGTestFixtureFuncFunction = void Function(
    gpointer fixture, gconstpointer user_data);

final class GTestConfig extends ffi.Struct {
  @gboolean()
  external int test_initialized;

  @gboolean()
  external int test_quick;

  @gboolean()
  external int test_perf;

  @gboolean()
  external int test_verbose;

  @gboolean()
  external int test_quiet;

  @gboolean()
  external int test_undefined;
}

abstract class GTestResult {
  static const int G_TEST_RUN_SUCCESS = 0;
  static const int G_TEST_RUN_SKIPPED = 1;
  static const int G_TEST_RUN_FAILURE = 2;
  static const int G_TEST_RUN_INCOMPLETE = 3;
}

abstract class GTestLogType {
  static const int G_TEST_LOG_NONE = 0;
  static const int G_TEST_LOG_ERROR = 1;
  static const int G_TEST_LOG_START_BINARY = 2;
  static const int G_TEST_LOG_LIST_CASE = 3;
  static const int G_TEST_LOG_SKIP_CASE = 4;
  static const int G_TEST_LOG_START_CASE = 5;
  static const int G_TEST_LOG_STOP_CASE = 6;
  static const int G_TEST_LOG_MIN_RESULT = 7;
  static const int G_TEST_LOG_MAX_RESULT = 8;
  static const int G_TEST_LOG_MESSAGE = 9;
  static const int G_TEST_LOG_START_SUITE = 10;
  static const int G_TEST_LOG_STOP_SUITE = 11;
}

final class GTestLogMsg extends ffi.Opaque {}

final class GTestLogBuffer extends ffi.Struct {
  external ffi.Pointer<GString> data;

  external ffi.Pointer<GSList> msgs;
}

/// GTestLogFatalFunc:
/// @log_domain: the log domain of the message
/// @log_level: the log level of the message (including the fatal and recursion flags)
/// @message: the message to process
/// @user_data: user data, set in g_test_log_set_fatal_handler()
///
/// Specifies the prototype of fatal log handler functions.
///
/// Returns: %TRUE if the program should abort, %FALSE otherwise
///
/// Since: 2.22
typedef GTestLogFatalFunc
    = ffi.Pointer<ffi.NativeFunction<GTestLogFatalFuncFunction>>;
typedef GTestLogFatalFuncFunction = gboolean Function(
    ffi.Pointer<gchar> log_domain,
    ffi.Int32 log_level,
    ffi.Pointer<gchar> message,
    gpointer user_data);
typedef DartGTestLogFatalFuncFunction = Dartgint Function(
    ffi.Pointer<gchar> log_domain,
    int log_level,
    ffi.Pointer<gchar> message,
    gpointer user_data);

abstract class GTestFileType {
  static const int G_TEST_DIST = 0;
  static const int G_TEST_BUILT = 1;
}

final class _GThreadPool extends ffi.Struct {
  external GFunc func;

  external gpointer user_data;

  @gboolean()
  external int exclusive;
}

typedef GThreadPool = _GThreadPool;

final class _GTimer extends ffi.Opaque {}

typedef GTimer = _GTimer;

final class _GTrashStack extends ffi.Struct {
  external ffi.Pointer<GTrashStack> next;
}

typedef GTrashStack = _GTrashStack;

final class _GTree extends ffi.Opaque {}

final class _GTreeNode extends ffi.Opaque {}

typedef GTree = _GTree;

/// GTreeNode:
///
/// An opaque type which identifies a specific node in a #GTree.
///
/// Since: 2.68
typedef GTreeNode = _GTreeNode;
typedef GTraverseFunc = ffi.Pointer<ffi.NativeFunction<GTraverseFuncFunction>>;
typedef GTraverseFuncFunction = gboolean Function(
    gpointer key, gpointer value, gpointer data);
typedef DartGTraverseFuncFunction = Dartgint Function(
    gpointer key, gpointer value, gpointer data);

/// GTraverseNodeFunc:
/// @node: a #GTreeNode
/// @data: user data passed to g_tree_foreach_node()
///
/// Specifies the type of function passed to g_tree_foreach_node(). It is
/// passed each node, together with the @user_data parameter passed to
/// g_tree_foreach_node(). If the function returns %TRUE, the traversal is
/// stopped.
///
/// Returns: %TRUE to stop the traversal
/// Since: 2.68
typedef GTraverseNodeFunc
    = ffi.Pointer<ffi.NativeFunction<GTraverseNodeFuncFunction>>;
typedef GTraverseNodeFuncFunction = gboolean Function(
    ffi.Pointer<GTreeNode> node, gpointer data);
typedef DartGTraverseNodeFuncFunction = Dartgint Function(
    ffi.Pointer<GTreeNode> node, gpointer data);

final class _GUri extends ffi.Opaque {}

typedef GUri = _GUri;

/// GUriFlags:
/// @G_URI_FLAGS_NONE: No flags set.
/// @G_URI_FLAGS_PARSE_RELAXED: Parse the URI more relaxedly than the
/// [RFC 3986](https://tools.ietf.org/html/rfc3986) grammar specifies,
/// fixing up or ignoring common mistakes in URIs coming from external
/// sources. This is also needed for some obscure URI schemes where `;`
/// separates the host from the path. Don’t use this flag unless you need to.
/// @G_URI_FLAGS_HAS_PASSWORD: The userinfo field may contain a password,
/// which will be separated from the username by `:`.
/// @G_URI_FLAGS_HAS_AUTH_PARAMS: The userinfo may contain additional
/// authentication-related parameters, which will be separated from
/// the username and/or password by `;`.
/// @G_URI_FLAGS_NON_DNS: The host component should not be assumed to be a
/// DNS hostname or IP address (for example, for `smb` URIs with NetBIOS
/// hostnames).
/// @G_URI_FLAGS_ENCODED: When parsing a URI, this indicates that `%`-encoded
/// characters in the userinfo, path, query, and fragment fields
/// should not be decoded. (And likewise the host field if
/// %G_URI_FLAGS_NON_DNS is also set.) When building a URI, it indicates
/// that you have already `%`-encoded the components, and so #GUri
/// should not do any encoding itself.
/// @G_URI_FLAGS_ENCODED_QUERY: Same as %G_URI_FLAGS_ENCODED, for the query
/// field only.
/// @G_URI_FLAGS_ENCODED_PATH: Same as %G_URI_FLAGS_ENCODED, for the path only.
/// @G_URI_FLAGS_ENCODED_FRAGMENT: Same as %G_URI_FLAGS_ENCODED, for the
/// fragment only.
/// @G_URI_FLAGS_SCHEME_NORMALIZE: A scheme-based normalization will be applied.
/// For example, when parsing an HTTP URI changing omitted path to `/` and
/// omitted port to `80`; and when building a URI, changing empty path to `/`
/// and default port `80`). This only supports a subset of known schemes. (Since: 2.68)
///
/// Flags that describe a URI.
///
/// When parsing a URI, if you need to choose different flags based on
/// the type of URI, you can use g_uri_peek_scheme() on the URI string
/// to check the scheme first, and use that to decide what flags to
/// parse it with.
///
/// Since: 2.66
abstract class GUriFlags {
  static const int G_URI_FLAGS_NONE = 0;
  static const int G_URI_FLAGS_PARSE_RELAXED = 1;
  static const int G_URI_FLAGS_HAS_PASSWORD = 2;
  static const int G_URI_FLAGS_HAS_AUTH_PARAMS = 4;
  static const int G_URI_FLAGS_ENCODED = 8;
  static const int G_URI_FLAGS_NON_DNS = 16;
  static const int G_URI_FLAGS_ENCODED_QUERY = 32;
  static const int G_URI_FLAGS_ENCODED_PATH = 64;
  static const int G_URI_FLAGS_ENCODED_FRAGMENT = 128;
  static const int G_URI_FLAGS_SCHEME_NORMALIZE = 256;
}

/// GUriHideFlags:
/// @G_URI_HIDE_NONE: No flags set.
/// @G_URI_HIDE_USERINFO: Hide the userinfo.
/// @G_URI_HIDE_PASSWORD: Hide the password.
/// @G_URI_HIDE_AUTH_PARAMS: Hide the auth_params.
/// @G_URI_HIDE_QUERY: Hide the query.
/// @G_URI_HIDE_FRAGMENT: Hide the fragment.
///
/// Flags describing what parts of the URI to hide in
/// g_uri_to_string_partial(). Note that %G_URI_HIDE_PASSWORD and
/// %G_URI_HIDE_AUTH_PARAMS will only work if the #GUri was parsed with
/// the corresponding flags.
///
/// Since: 2.66
abstract class GUriHideFlags {
  static const int G_URI_HIDE_NONE = 0;
  static const int G_URI_HIDE_USERINFO = 1;
  static const int G_URI_HIDE_PASSWORD = 2;
  static const int G_URI_HIDE_AUTH_PARAMS = 4;
  static const int G_URI_HIDE_QUERY = 8;
  static const int G_URI_HIDE_FRAGMENT = 16;
}

/// GUriParamsFlags:
/// @G_URI_PARAMS_NONE: No flags set.
/// @G_URI_PARAMS_CASE_INSENSITIVE: Parameter names are case insensitive.
/// @G_URI_PARAMS_WWW_FORM: Replace `+` with space character. Only useful for
/// URLs on the web, using the `https` or `http` schemas.
/// @G_URI_PARAMS_PARSE_RELAXED: See %G_URI_FLAGS_PARSE_RELAXED.
///
/// Flags modifying the way parameters are handled by g_uri_parse_params() and
/// #GUriParamsIter.
///
/// Since: 2.66
abstract class GUriParamsFlags {
  static const int G_URI_PARAMS_NONE = 0;
  static const int G_URI_PARAMS_CASE_INSENSITIVE = 1;
  static const int G_URI_PARAMS_WWW_FORM = 2;
  static const int G_URI_PARAMS_PARSE_RELAXED = 4;
}

final class _GUriParamsIter extends ffi.Struct {
  @gint()
  external int dummy0;

  external gpointer dummy1;

  external gpointer dummy2;

  @ffi.Array.multi([256])
  external ffi.Array<guint8> dummy3;
}

typedef GUriParamsIter = _GUriParamsIter;

/// GUriError:
/// @G_URI_ERROR_FAILED: Generic error if no more specific error is available.
/// See the error message for details.
/// @G_URI_ERROR_BAD_SCHEME: The scheme of a URI could not be parsed.
/// @G_URI_ERROR_BAD_USER: The user/userinfo of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PASSWORD: The password of a URI could not be parsed.
/// @G_URI_ERROR_BAD_AUTH_PARAMS: The authentication parameters of a URI could not be parsed.
/// @G_URI_ERROR_BAD_HOST: The host of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PORT: The port of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PATH: The path of a URI could not be parsed.
/// @G_URI_ERROR_BAD_QUERY: The query of a URI could not be parsed.
/// @G_URI_ERROR_BAD_FRAGMENT: The fragment of a URI could not be parsed.
///
/// Error codes returned by #GUri methods.
///
/// Since: 2.66
abstract class GUriError {
  static const int G_URI_ERROR_FAILED = 0;
  static const int G_URI_ERROR_BAD_SCHEME = 1;
  static const int G_URI_ERROR_BAD_USER = 2;
  static const int G_URI_ERROR_BAD_PASSWORD = 3;
  static const int G_URI_ERROR_BAD_AUTH_PARAMS = 4;
  static const int G_URI_ERROR_BAD_HOST = 5;
  static const int G_URI_ERROR_BAD_PORT = 6;
  static const int G_URI_ERROR_BAD_PATH = 7;
  static const int G_URI_ERROR_BAD_QUERY = 8;
  static const int G_URI_ERROR_BAD_FRAGMENT = 9;
}

final class _GAllocator extends ffi.Opaque {}

final class _GMemChunk extends ffi.Opaque {}

typedef GMemChunk = _GMemChunk;
typedef GAllocator = _GAllocator;

final class _GCache extends ffi.Opaque {}

typedef GCache = _GCache;
typedef GCacheNewFunc = ffi.Pointer<ffi.NativeFunction<GCacheNewFuncFunction>>;
typedef GCacheNewFuncFunction = gpointer Function(gpointer key);
typedef GCacheDestroyFunc
    = ffi.Pointer<ffi.NativeFunction<GCacheDestroyFuncFunction>>;
typedef GCacheDestroyFuncFunction = ffi.Void Function(gpointer value);
typedef DartGCacheDestroyFuncFunction = void Function(gpointer value);
typedef GCacheDupFunc = ffi.Pointer<ffi.NativeFunction<GCacheDupFuncFunction>>;
typedef GCacheDupFuncFunction = gpointer Function(gpointer value);

final class _GCompletion extends ffi.Struct {
  external ffi.Pointer<GList> items;

  external GCompletionFunc func;

  external ffi.Pointer<gchar> prefix;

  external ffi.Pointer<GList> cache;

  external GCompletionStrncmpFunc strncmp_func;
}

typedef GCompletionFunc
    = ffi.Pointer<ffi.NativeFunction<GCompletionFuncFunction>>;
typedef GCompletionFuncFunction = ffi.Pointer<gchar> Function(gpointer);
typedef GCompletionStrncmpFunc
    = ffi.Pointer<ffi.NativeFunction<GCompletionStrncmpFuncFunction>>;
typedef GCompletionStrncmpFuncFunction = gint Function(
    ffi.Pointer<gchar> s1, ffi.Pointer<gchar> s2, gsize n);
typedef DartGCompletionStrncmpFuncFunction = Dartgint Function(
    ffi.Pointer<gchar> s1, ffi.Pointer<gchar> s2, Dartgsize n);
typedef GCompletion = _GCompletion;

final class _GRelation extends ffi.Opaque {}

final class _GTuples extends ffi.Struct {
  @guint()
  external int len;
}

typedef GRelation = _GRelation;
typedef GTuples = _GTuples;

final class _GThreadFunctions extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<GMutex> Function()>>
      mutex_new;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_lock;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMutex> mutex)>>
      mutex_trylock;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_unlock;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_free;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<GCond> Function()>>
      cond_new;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_signal;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_broadcast;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCond> cond, ffi.Pointer<GMutex> mutex)>> cond_wait;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond> cond, ffi.Pointer<GMutex> mutex,
              ffi.Pointer<GTimeVal> end_time)>> cond_timed_wait;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GPrivate> Function(GDestroyNotify destructor)>>
      private_new;

  external ffi.Pointer<
          ffi
          .NativeFunction<gpointer Function(ffi.Pointer<GPrivate> private_key)>>
      private_get;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPrivate> private_key, gpointer data)>> private_set;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GThreadFunc func,
              gpointer data,
              gulong stack_size,
              gboolean joinable,
              gboolean bound,
              ffi.Int32 priority,
              gpointer thread,
              ffi.Pointer<ffi.Pointer<GError>> error)>> thread_create;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> thread_yield;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer thread)>>
      thread_join;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> thread_exit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(gpointer thread, ffi.Int32 priority)>>
      thread_set_priority;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(gpointer thread)>>
      thread_self;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(gpointer thread1, gpointer thread2)>> thread_equal;
}

typedef GThreadFunctions = _GThreadFunctions;

final class GStaticMutex extends ffi.Struct {
  external ffi.Pointer<GMutex> mutex;

  external pthread_mutex_t unused;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class _GStaticRecMutex extends ffi.Struct {
  external GStaticMutex mutex;

  @guint()
  external int depth;

  external UnnamedUnion3 unused;
}

final class UnnamedUnion3 extends ffi.Union {
  @pthread_t()
  external int owner;

  @gdouble()
  external double dummy;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef GStaticRecMutex = _GStaticRecMutex;

final class _GStaticRWLock extends ffi.Struct {
  external GStaticMutex mutex;

  external ffi.Pointer<GCond> read_cond;

  external ffi.Pointer<GCond> write_cond;

  @guint()
  external int read_counter;

  @gboolean()
  external int have_writer;

  @guint()
  external int want_to_read;

  @guint()
  external int want_to_write;
}

typedef GStaticRWLock = _GStaticRWLock;

final class _GStaticPrivate extends ffi.Struct {
  @guint()
  external int index;
}

typedef GStaticPrivate = _GStaticPrivate;

/// GValue:
///
/// An opaque structure used to hold different types of values.
///
/// The data within the structure has protected scope: it is accessible only
/// to functions within a #GTypeValueTable structure, or implementations of
/// the g_value_*() API. That is, code portions which implement new fundamental
/// types.
///
/// #GValue users cannot make any assumptions about how data is stored
/// within the 2 element @data union, and the @g_type member should
/// only be accessed through the G_VALUE_TYPE() macro.
final class _GValue extends ffi.Struct {
  @GType()
  external int g_type;

  @ffi.Array.multi([2])
  external ffi.Array<UnnamedUnion4> data;
}

typedef GType = gsize;

final class UnnamedUnion4 extends ffi.Union {
  @gint()
  external int v_int;

  @guint()
  external int v_uint;

  @glong()
  external int v_long;

  @gulong()
  external int v_ulong;

  @gint64()
  external int v_int64;

  @guint64()
  external int v_uint64;

  @gfloat()
  external double v_float;

  @gdouble()
  external double v_double;

  external gpointer v_pointer;
}

typedef gfloat = ffi.Float;
typedef Dartgfloat = double;

final class _GTypeCValue extends ffi.Opaque {}

final class _GTypePlugin extends ffi.Opaque {}

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
final class _GTypeClass extends ffi.Struct {
  @GType()
  external int g_type;
}

/// GTypeInterface:
///
/// An opaque structure used as the base of all interface types.
final class _GTypeInterface extends ffi.Struct {
  @GType()
  external int g_type;

  @GType()
  external int g_instance_type;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
final class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeClass = _GTypeClass;

/// GTypeInfo:
/// @class_size: Size of the class structure (required for interface, classed and instantiatable types)
/// @base_init: Location of the base initialization function (optional)
/// @base_finalize: Location of the base finalization function (optional)
/// @class_init: Location of the class initialization function for
/// classed and instantiatable types. Location of the default vtable
/// inititalization function for interface types. (optional) This function
/// is used both to fill in virtual functions in the class or default vtable,
/// and to do type-specific setup such as registering signals and object
/// properties.
/// @class_finalize: Location of the class finalization function for
/// classed and instantiatable types. Location of the default vtable
/// finalization function for interface types. (optional)
/// @class_data: User-supplied data passed to the class init/finalize functions
/// @instance_size: Size of the instance (object) structure (required for instantiatable types only)
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
/// @instance_init: Location of the instance initialization function (optional, for instantiatable types only)
/// @value_table: A #GTypeValueTable function table for generic handling of GValues
/// of this type (usually only useful for fundamental types)
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a type's class and
/// its instances.
///
/// The initialized structure is passed to the g_type_register_static() function
/// (or is copied into the provided #GTypeInfo structure in the
/// g_type_plugin_complete_type_info()). The type system will perform a deep
/// copy of this structure, so its memory does not need to be persistent
/// across invocation of g_type_register_static().
final class _GTypeInfo extends ffi.Struct {
  @guint16()
  external int class_size;

  external GBaseInitFunc base_init;

  external GBaseFinalizeFunc base_finalize;

  external GClassInitFunc class_init;

  external GClassFinalizeFunc class_finalize;

  external gconstpointer class_data;

  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external GInstanceInitFunc instance_init;

  external ffi.Pointer<GTypeValueTable> value_table;
}

/// GBaseInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize
///
/// A callback function used by the type system to do base initialization
/// of the class structures of derived types.
///
/// This function is called as part of the initialization process of all derived
/// classes and should reallocate or reset all dynamic class members copied over
/// from the parent class.
///
/// For example, class members (such as strings) that are not sufficiently
/// handled by a plain memory copy of the parent class into the derived class
/// have to be altered. See GClassInitFunc() for a discussion of the class
/// initialization process.
typedef GBaseInitFunc = ffi.Pointer<ffi.NativeFunction<GBaseInitFuncFunction>>;
typedef GBaseInitFuncFunction = ffi.Void Function(gpointer g_class);
typedef DartGBaseInitFuncFunction = void Function(gpointer g_class);

/// GBaseFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
///
/// A callback function used by the type system to finalize those portions
/// of a derived types class structure that were setup from the corresponding
/// GBaseInitFunc() function.
///
/// Class finalization basically works the inverse way in which class
/// initialization is performed.
///
/// See GClassInitFunc() for a discussion of the class initialization process.
typedef GBaseFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GBaseFinalizeFuncFunction>>;
typedef GBaseFinalizeFuncFunction = ffi.Void Function(gpointer g_class);
typedef DartGBaseFinalizeFuncFunction = void Function(gpointer g_class);

/// GClassInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize.
/// @class_data: The @class_data member supplied via the #GTypeInfo structure.
///
/// A callback function used by the type system to initialize the class
/// of a specific type.
///
/// This function should initialize all static class members.
///
/// The initialization process of a class involves:
///
/// - Copying common members from the parent class over to the
/// derived class structure.
/// - Zero initialization of the remaining members not copied
/// over from the parent class.
/// - Invocation of the GBaseInitFunc() initializers of all parent
/// types and the class' type.
/// - Invocation of the class' GClassInitFunc() initializer.
///
/// Since derived classes are partially initialized through a memory copy
/// of the parent class, the general rule is that GBaseInitFunc() and
/// GBaseFinalizeFunc() should take care of necessary reinitialization
/// and release of those class members that were introduced by the type
/// that specified these GBaseInitFunc()/GBaseFinalizeFunc().
/// GClassInitFunc() should only care about initializing static
/// class members, while dynamic class members (such as allocated strings
/// or reference counted resources) are better handled by a GBaseInitFunc()
/// for this type, so proper initialization of the dynamic class members
/// is performed for class initialization of derived types as well.
///
/// An example may help to correspond the intend of the different class
/// initializers:
///
/// |[<!-- language="C" -->
/// typedef struct {
/// GObjectClass parent_class;
/// gint         static_integer;
/// gchar       *dynamic_string;
/// } TypeAClass;
/// static void
/// type_a_base_class_init (TypeAClass *class)
/// {
/// class->dynamic_string = g_strdup ("some string");
/// }
/// static void
/// type_a_base_class_finalize (TypeAClass *class)
/// {
/// g_free (class->dynamic_string);
/// }
/// static void
/// type_a_class_init (TypeAClass *class)
/// {
/// class->static_integer = 42;
/// }
///
/// typedef struct {
/// TypeAClass   parent_class;
/// gfloat       static_float;
/// GString     *dynamic_gstring;
/// } TypeBClass;
/// static void
/// type_b_base_class_init (TypeBClass *class)
/// {
/// class->dynamic_gstring = g_string_new ("some other string");
/// }
/// static void
/// type_b_base_class_finalize (TypeBClass *class)
/// {
/// g_string_free (class->dynamic_gstring);
/// }
/// static void
/// type_b_class_init (TypeBClass *class)
/// {
/// class->static_float = 3.14159265358979323846;
/// }
/// ]|
///
/// Initialization of TypeBClass will first cause initialization of
/// TypeAClass (derived classes reference their parent classes, see
/// g_type_class_ref() on this).
///
/// Initialization of TypeAClass roughly involves zero-initializing its fields,
/// then calling its GBaseInitFunc() type_a_base_class_init() to allocate
/// its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
/// type_a_class_init() to initialize its static members (static_integer).
/// The first step in the initialization process of TypeBClass is then
/// a plain memory copy of the contents of TypeAClass into TypeBClass and
/// zero-initialization of the remaining fields in TypeBClass.
/// The dynamic members of TypeAClass within TypeBClass now need
/// reinitialization which is performed by calling type_a_base_class_init()
/// with an argument of TypeBClass.
///
/// After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
/// is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
/// and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
/// is called to complete the initialization process with the static members
/// (static_float).
///
/// Corresponding finalization counter parts to the GBaseInitFunc() functions
/// have to be provided to release allocated resources at class finalization
/// time.
typedef GClassInitFunc
    = ffi.Pointer<ffi.NativeFunction<GClassInitFuncFunction>>;
typedef GClassInitFuncFunction = ffi.Void Function(
    gpointer g_class, gpointer class_data);
typedef DartGClassInitFuncFunction = void Function(
    gpointer g_class, gpointer class_data);

/// GClassFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
/// @class_data: The @class_data member supplied via the #GTypeInfo structure
///
/// A callback function used by the type system to finalize a class.
///
/// This function is rarely needed, as dynamically allocated class resources
/// should be handled by GBaseInitFunc() and GBaseFinalizeFunc().
///
/// Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
/// structure of a static type is invalid, because classes of static types
/// will never be finalized (they are artificially kept alive when their
/// reference count drops to zero).
typedef GClassFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GClassFinalizeFuncFunction>>;
typedef GClassFinalizeFuncFunction = ffi.Void Function(
    gpointer g_class, gpointer class_data);
typedef DartGClassFinalizeFuncFunction = void Function(
    gpointer g_class, gpointer class_data);

/// GInstanceInitFunc:
/// @instance: The instance to initialize
/// @g_class: (type GObject.TypeClass): The class of the type the instance is
/// created for
///
/// A callback function used by the type system to initialize a new
/// instance of a type.
///
/// This function initializes all instance members and allocates any resources
/// required by it.
///
/// Initialization of a derived instance involves calling all its parent
/// types instance initializers, so the class member of the instance
/// is altered during its initialization to always point to the class that
/// belongs to the type the current initializer was introduced for.
///
/// The extended members of @instance are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInstanceInitFunc
    = ffi.Pointer<ffi.NativeFunction<GInstanceInitFuncFunction>>;
typedef GInstanceInitFuncFunction = ffi.Void Function(
    ffi.Pointer<GTypeInstance> instance, gpointer g_class);
typedef DartGInstanceInitFuncFunction = void Function(
    ffi.Pointer<GTypeInstance> instance, gpointer g_class);
typedef GTypeInstance = _GTypeInstance;
typedef GTypeValueTable = _GTypeValueTable;

/// GTypeValueTable:
/// @value_init: Default initialize @values contents by poking values
/// directly into the value->data array. The data array of
/// the #GValue passed into this function was zero-filled
/// with `memset()`, so no care has to be taken to free any
/// old contents. E.g. for the implementation of a string
/// value that may never be %NULL, the implementation might
/// look like:
/// |[<!-- language="C" -->
/// value->data[0].v_pointer = g_strdup ("");
/// ]|
/// @value_free: Free any old contents that might be left in the
/// data array of the passed in @value. No resources may
/// remain allocated through the #GValue contents after
/// this function returns. E.g. for our above string type:
/// |[<!-- language="C" -->
/// // only free strings without a specific flag for static storage
/// if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS))
/// g_free (value->data[0].v_pointer);
/// ]|
/// @value_copy: @dest_value is a #GValue with zero-filled data section
/// and @src_value is a properly setup #GValue of same or
/// derived type.
/// The purpose of this function is to copy the contents of
/// @src_value into @dest_value in a way, that even after
/// @src_value has been freed, the contents of @dest_value
/// remain valid. String type example:
/// |[<!-- language="C" -->
/// dest_value->data[0].v_pointer = g_strdup (src_value->data[0].v_pointer);
/// ]|
/// @value_peek_pointer: If the value contents fit into a pointer, such as objects
/// or strings, return this pointer, so the caller can peek at
/// the current contents. To extend on our above string example:
/// |[<!-- language="C" -->
/// return value->data[0].v_pointer;
/// ]|
/// @collect_format: A string format describing how to collect the contents of
/// this value bit-by-bit. Each character in the format represents
/// an argument to be collected, and the characters themselves indicate
/// the type of the argument. Currently supported arguments are:
/// - 'i' - Integers. passed as collect_values[].v_int.
/// - 'l' - Longs. passed as collect_values[].v_long.
/// - 'd' - Doubles. passed as collect_values[].v_double.
/// - 'p' - Pointers. passed as collect_values[].v_pointer.
/// It should be noted that for variable argument list construction,
/// ANSI C promotes every type smaller than an integer to an int, and
/// floats to doubles. So for collection of short int or char, 'i'
/// needs to be used, and for collection of floats 'd'.
/// @collect_value: The collect_value() function is responsible for converting the
/// values collected from a variable argument list into contents
/// suitable for storage in a GValue. This function should setup
/// @value similar to value_init(); e.g. for a string value that
/// does not allow %NULL pointers, it needs to either spew an error,
/// or do an implicit conversion by storing an empty string.
/// The @value passed in to this function has a zero-filled data
/// array, so just like for value_init() it is guaranteed to not
/// contain any old contents that might need freeing.
/// @n_collect_values is exactly the string length of @collect_format,
/// and @collect_values is an array of unions #GTypeCValue with
/// length @n_collect_values, containing the collected values
/// according to @collect_format.
/// @collect_flags is an argument provided as a hint by the caller.
/// It may contain the flag %G_VALUE_NOCOPY_CONTENTS indicating,
/// that the collected value contents may be considered "static"
/// for the duration of the @value lifetime.
/// Thus an extra copy of the contents stored in @collect_values is
/// not required for assignment to @value.
/// For our above string example, we continue with:
/// |[<!-- language="C" -->
/// if (!collect_values[0].v_pointer)
/// value->data[0].v_pointer = g_strdup ("");
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// {
/// value->data[0].v_pointer = collect_values[0].v_pointer;
/// // keep a flag for the value_free() implementation to not free this string
/// value->data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;
/// }
/// else
/// value->data[0].v_pointer = g_strdup (collect_values[0].v_pointer);
/// return NULL;
/// ]|
/// It should be noted, that it is generally a bad idea to follow the
/// %G_VALUE_NOCOPY_CONTENTS hint for reference counted types. Due to
/// reentrancy requirements and reference count assertions performed
/// by the signal emission code, reference counts should always be
/// incremented for reference counted contents stored in the value->data
/// array.  To deviate from our string example for a moment, and taking
/// a look at an exemplary implementation for collect_value() of
/// #GObject:
/// |[<!-- language="C" -->
/// GObject *object = G_OBJECT (collect_values[0].v_pointer);
/// g_return_val_if_fail (object != NULL,
/// g_strdup_printf ("Object passed as invalid NULL pointer"));
/// // never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types
/// value->data[0].v_pointer = g_object_ref (object);
/// return NULL;
/// ]|
/// The reference count for valid objects is always incremented,
/// regardless of @collect_flags. For invalid objects, the example
/// returns a newly allocated string without altering @value.
/// Upon success, collect_value() needs to return %NULL. If, however,
/// an error condition occurred, collect_value() may spew an
/// error by returning a newly allocated non-%NULL string, giving
/// a suitable description of the error condition.
/// The calling code makes no assumptions about the @value
/// contents being valid upon error returns, @value
/// is simply thrown away without further freeing. As such, it is
/// a good idea to not allocate #GValue contents, prior to returning
/// an error, however, collect_values() is not obliged to return
/// a correctly setup @value for error returns, simply because
/// any non-%NULL return is considered a fatal condition so further
/// program behaviour is undefined.
/// @lcopy_format: Format description of the arguments to collect for @lcopy_value,
/// analogous to @collect_format. Usually, @lcopy_format string consists
/// only of 'p's to provide lcopy_value() with pointers to storage locations.
/// @lcopy_value: This function is responsible for storing the @value contents into
/// arguments passed through a variable argument list which got
/// collected into @collect_values according to @lcopy_format.
/// @n_collect_values equals the string length of @lcopy_format,
/// and @collect_flags may contain %G_VALUE_NOCOPY_CONTENTS.
/// In contrast to collect_value(), lcopy_value() is obliged to
/// always properly support %G_VALUE_NOCOPY_CONTENTS.
/// Similar to collect_value() the function may prematurely abort
/// by returning a newly allocated string describing an error condition.
/// To complete the string example:
/// |[<!-- language="C" -->
/// gchar **string_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (string_p != NULL,
/// g_strdup_printf ("string location passed as NULL"));
/// if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// *string_p = value->data[0].v_pointer;
/// else
/// *string_p = g_strdup (value->data[0].v_pointer);
/// ]|
/// And an illustrative version of lcopy_value() for
/// reference-counted types:
/// |[<!-- language="C" -->
/// GObject **object_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (object_p != NULL,
/// g_strdup_printf ("object location passed as NULL"));
/// if (!value->data[0].v_pointer)
/// *object_p = NULL;
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) // always honour
/// *object_p = value->data[0].v_pointer;
/// else
/// *object_p = g_object_ref (value->data[0].v_pointer);
/// return NULL;
/// ]|
///
/// The #GTypeValueTable provides the functions required by the #GValue
/// implementation, to serve as a container for values of a type.
final class _GTypeValueTable extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue> value)>>
      value_init;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue> value)>>
      value_free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue> src_value,
              ffi.Pointer<GValue> dest_value)>> value_copy;

  external ffi
      .Pointer<ffi.NativeFunction<gpointer Function(ffi.Pointer<GValue> value)>>
      value_peek_pointer;

  external ffi.Pointer<gchar> collect_format;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GValue> value,
              guint n_collect_values,
              ffi.Pointer<GTypeCValue> collect_values,
              guint collect_flags)>> collect_value;

  external ffi.Pointer<gchar> lcopy_format;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GValue> value,
              guint n_collect_values,
              ffi.Pointer<GTypeCValue> collect_values,
              guint collect_flags)>> lcopy_value;
}

typedef GValue = _GValue;
typedef GTypeCValue = _GTypeCValue;

/// GTypeFundamentalInfo:
/// @type_flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type
///
/// A structure that provides information to the type system which is
/// used specifically for managing fundamental types.
final class _GTypeFundamentalInfo extends ffi.Struct {
  @ffi.Int32()
  external int type_flags;
}

/// GTypeFundamentalFlags:
/// @G_TYPE_FLAG_CLASSED: Indicates a classed type
/// @G_TYPE_FLAG_INSTANTIATABLE: Indicates an instantiatable type (implies classed)
/// @G_TYPE_FLAG_DERIVABLE: Indicates a flat derivable type
/// @G_TYPE_FLAG_DEEP_DERIVABLE: Indicates a deep derivable type (implies derivable)
///
/// Bit masks used to check or determine specific characteristics of a
/// fundamental type.
abstract class GTypeFundamentalFlags {
  static const int G_TYPE_FLAG_CLASSED = 1;
  static const int G_TYPE_FLAG_INSTANTIATABLE = 2;
  static const int G_TYPE_FLAG_DERIVABLE = 4;
  static const int G_TYPE_FLAG_DEEP_DERIVABLE = 8;
}

/// GInterfaceInfo:
/// @interface_init: location of the interface initialization function
/// @interface_finalize: location of the interface finalization function
/// @interface_data: user-supplied data passed to the interface init/finalize functions
///
/// A structure that provides information to the type system which is
/// used specifically for managing interface types.
final class _GInterfaceInfo extends ffi.Struct {
  external GInterfaceInitFunc interface_init;

  external GInterfaceFinalizeFunc interface_finalize;

  external gpointer interface_data;
}

/// GInterfaceInitFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to initialize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to initialize a new
/// interface.
///
/// This function should initialize all internal data and* allocate any
/// resources required by the interface.
///
/// The members of @iface_data are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInterfaceInitFunc
    = ffi.Pointer<ffi.NativeFunction<GInterfaceInitFuncFunction>>;
typedef GInterfaceInitFuncFunction = ffi.Void Function(
    gpointer g_iface, gpointer iface_data);
typedef DartGInterfaceInitFuncFunction = void Function(
    gpointer g_iface, gpointer iface_data);

/// GInterfaceFinalizeFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to finalize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to finalize an interface.
///
/// This function should destroy any internal data and release any resources
/// allocated by the corresponding GInterfaceInitFunc() function.
typedef GInterfaceFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GInterfaceFinalizeFuncFunction>>;
typedef GInterfaceFinalizeFuncFunction = ffi.Void Function(
    gpointer g_iface, gpointer iface_data);
typedef DartGInterfaceFinalizeFuncFunction = void Function(
    gpointer g_iface, gpointer iface_data);

/// GTypeQuery:
/// @type: the #GType value of the type
/// @type_name: the name of the type
/// @class_size: the size of the class structure
/// @instance_size: the size of the instance structure
///
/// A structure holding information for a specific type.
///
/// See also: g_type_query()
final class _GTypeQuery extends ffi.Struct {
  @GType()
  external int type;

  external ffi.Pointer<gchar> type_name;

  @guint()
  external int class_size;

  @guint()
  external int instance_size;
}

/// GTypeDebugFlags:
/// @G_TYPE_DEBUG_NONE: Print no messages
/// @G_TYPE_DEBUG_OBJECTS: Print messages about object bookkeeping
/// @G_TYPE_DEBUG_SIGNALS: Print messages about signal emissions
/// @G_TYPE_DEBUG_MASK: Mask covering all debug flags
/// @G_TYPE_DEBUG_INSTANCE_COUNT: Keep a count of instances of each type
///
/// These flags used to be passed to g_type_init_with_debug_flags() which
/// is now deprecated.
///
/// If you need to enable debugging features, use the GOBJECT_DEBUG
/// environment variable.
///
/// Deprecated: 2.36: g_type_init() is now done automatically
abstract class GTypeDebugFlags {
  static const int G_TYPE_DEBUG_NONE = 0;
  static const int G_TYPE_DEBUG_OBJECTS = 1;
  static const int G_TYPE_DEBUG_SIGNALS = 2;
  static const int G_TYPE_DEBUG_INSTANCE_COUNT = 4;
  static const int G_TYPE_DEBUG_MASK = 7;
}

typedef GTypeQuery = _GTypeQuery;

/// GTypeFlags:
/// @G_TYPE_FLAG_ABSTRACT: Indicates an abstract type. No instances can be
/// created for an abstract type
/// @G_TYPE_FLAG_VALUE_ABSTRACT: Indicates an abstract value type, i.e. a type
/// that introduces a value table, but can't be used for
/// g_value_init()
/// @G_TYPE_FLAG_FINAL: Indicates a final type. A final type is a non-derivable
/// leaf node in a deep derivable type hierarchy tree. Since: 2.70
///
/// Bit masks used to check or determine characteristics of a type.
abstract class GTypeFlags {
  static const int G_TYPE_FLAG_ABSTRACT = 16;
  static const int G_TYPE_FLAG_VALUE_ABSTRACT = 32;
  static const int G_TYPE_FLAG_FINAL = 64;
}

typedef GTypeInfo = _GTypeInfo;
typedef GTypePlugin = _GTypePlugin;
typedef GTypeFundamentalInfo = _GTypeFundamentalInfo;
typedef GInterfaceInfo = _GInterfaceInfo;

/// GTypeClassCacheFunc:
/// @cache_data: data that was given to the g_type_add_class_cache_func() call
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure which is
/// unreferenced
///
/// A callback function which is called when the reference count of a class
/// drops to zero.
///
/// It may use g_type_class_ref() to prevent the class from being freed. You
/// should not call g_type_class_unref() from a #GTypeClassCacheFunc function
/// to prevent infinite recursion, use g_type_class_unref_uncached() instead.
///
/// The functions have to check the class id passed in to figure
/// whether they actually want to cache the class of this type, since all
/// classes are routed through the same #GTypeClassCacheFunc chain.
///
/// Returns: %TRUE to stop further #GTypeClassCacheFuncs from being
/// called, %FALSE to continue
typedef GTypeClassCacheFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeClassCacheFuncFunction>>;
typedef GTypeClassCacheFuncFunction = gboolean Function(
    gpointer cache_data, ffi.Pointer<GTypeClass> g_class);
typedef DartGTypeClassCacheFuncFunction = Dartgint Function(
    gpointer cache_data, ffi.Pointer<GTypeClass> g_class);

/// GTypeInterfaceCheckFunc:
/// @check_data: data passed to g_type_add_interface_check()
/// @g_iface: (type GObject.TypeInterface): the interface that has been
/// initialized
///
/// A callback called after an interface vtable is initialized.
///
/// See g_type_add_interface_check().
///
/// Since: 2.4
typedef GTypeInterfaceCheckFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeInterfaceCheckFuncFunction>>;
typedef GTypeInterfaceCheckFuncFunction = ffi.Void Function(
    gpointer check_data, gpointer g_iface);
typedef DartGTypeInterfaceCheckFuncFunction = void Function(
    gpointer check_data, gpointer g_iface);

/// GValueTransform:
/// @src_value: Source value.
/// @dest_value: Target value.
///
/// The type of value transformation functions which can be registered with
/// g_value_register_transform_func().
///
/// @dest_value will be initialized to the correct destination type.
typedef GValueTransform
    = ffi.Pointer<ffi.NativeFunction<GValueTransformFunction>>;
typedef GValueTransformFunction = ffi.Void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);
typedef DartGValueTransformFunction = void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);

/// GParamFlags:
/// @G_PARAM_READABLE: the parameter is readable
/// @G_PARAM_WRITABLE: the parameter is writable
/// @G_PARAM_READWRITE: alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE
/// @G_PARAM_CONSTRUCT: the parameter will be set upon object construction
/// @G_PARAM_CONSTRUCT_ONLY: the parameter can only be set upon object construction
/// @G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())
/// strict validation is not required
/// @G_PARAM_STATIC_NAME: the string used as name when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_NICK: the string used as nick when constructing the
/// parameter is guaranteed to remain valid and
/// unmmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_BLURB: the string used as blurb when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_EXPLICIT_NOTIFY: calls to g_object_set_property() for this
/// property will not automatically result in a "notify" signal being
/// emitted: the implementation must call g_object_notify() themselves
/// in case the property actually changes.  Since: 2.42.
/// @G_PARAM_PRIVATE: internal
/// @G_PARAM_DEPRECATED: the parameter is deprecated and will be removed
/// in a future version. A warning will be generated if it is used
/// while running with G_ENABLE_DIAGNOSTIC=1.
/// Since 2.26
///
/// Through the #GParamFlags flag values, certain aspects of parameters
/// can be configured.
///
/// See also: %G_PARAM_STATIC_STRINGS
abstract class GParamFlags {
  static const int G_PARAM_READABLE = 1;
  static const int G_PARAM_WRITABLE = 2;
  static const int G_PARAM_READWRITE = 3;
  static const int G_PARAM_CONSTRUCT = 4;
  static const int G_PARAM_CONSTRUCT_ONLY = 8;
  static const int G_PARAM_LAX_VALIDATION = 16;
  static const int G_PARAM_STATIC_NAME = 32;
  static const int G_PARAM_PRIVATE = 32;
  static const int G_PARAM_STATIC_NICK = 64;
  static const int G_PARAM_STATIC_BLURB = 128;
  static const int G_PARAM_EXPLICIT_NOTIFY = 1073741824;
  static const int G_PARAM_DEPRECATED = -2147483648;
}

/// GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param)
/// @g_type_instance: private #GTypeInstance portion
/// @name: name of this parameter: always an interned string
/// @flags: #GParamFlags flags for this parameter
/// @value_type: the #GValue type for this parameter
/// @owner_type: #GType type that uses (introduces) this parameter
///
/// All other fields of the GParamSpec struct are private and
/// should not be used directly.
final class _GParamSpec extends ffi.Struct {
  external GTypeInstance g_type_instance;

  external ffi.Pointer<gchar> name;

  @ffi.Int32()
  external int flags;

  @GType()
  external int value_type;

  @GType()
  external int owner_type;

  external ffi.Pointer<gchar> _nick;

  external ffi.Pointer<gchar> _blurb;

  external ffi.Pointer<GData> qdata;

  @guint()
  external int ref_count;

  @guint()
  external int param_id;
}

/// GParamSpecClass:
/// @g_type_class: the parent class
/// @value_type: the #GValue type for this parameter
/// @finalize: The instance finalization function (optional), should chain
/// up to the finalize method of the parent class.
/// @value_set_default: Resets a @value to the default value for this type
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by this type (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to this type
/// (recommended, the default is memcmp()), see g_param_values_cmp().
///
/// The class structure for the GParamSpec type.
/// Normally, GParamSpec classes are filled by
/// g_param_type_register_static().
final class _GParamSpecClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @GType()
  external int value_type;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GParamSpec> pspec,
              ffi.Pointer<GValue> value1,
              ffi.Pointer<GValue> value2)>> values_cmp;

  @ffi.Array.multi([4])
  external ffi.Array<gpointer> dummy;
}

typedef GParamSpec = _GParamSpec;

/// GParameter:
/// @name: the parameter name
/// @value: the parameter value
///
/// The GParameter struct is an auxiliary structure used
/// to hand parameter name/value pairs to g_object_newv().
///
/// Deprecated: 2.54: This type is not introspectable.
final class _GParameter extends ffi.Struct {
  external ffi.Pointer<gchar> name;

  external GValue value;
}

final class _GParamSpecPool extends ffi.Opaque {}

/// GParamSpecTypeInfo:
/// @instance_size: Size of the instance (object) structure.
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
/// @instance_init: Location of the instance initialization function (optional).
/// @value_type: The #GType of values conforming to this #GParamSpec
/// @finalize: The instance finalization function (optional).
/// @value_set_default: Resets a @value to the default value for @pspec
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by @pspec (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to @pspec
/// (recommended, the default is memcmp()), see g_param_values_cmp().
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a parameter's class and
/// instances thereof.
///
/// The initialized structure is passed to the g_param_type_register_static()
/// The type system will perform a deep copy of this structure, so its memory
/// does not need to be persistent across invocation of
/// g_param_type_register_static().
final class _GParamSpecTypeInfo extends ffi.Struct {
  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      instance_init;

  @GType()
  external int value_type;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GParamSpec> pspec,
              ffi.Pointer<GValue> value1,
              ffi.Pointer<GValue> value2)>> values_cmp;
}

typedef GParamSpecTypeInfo = _GParamSpecTypeInfo;
typedef GParamSpecPool = _GParamSpecPool;

/// GClosure:
/// @in_marshal: Indicates whether the closure is currently being invoked with
/// g_closure_invoke()
/// @is_invalid: Indicates whether the closure has been invalidated by
/// g_closure_invalidate()
///
/// A #GClosure represents a callback supplied by the programmer.
final class _GClosure extends ffi.Opaque {}

final class _GClosureNotifyData extends ffi.Struct {
  external gpointer data;

  external GClosureNotify notify;
}

/// GClosureNotify:
/// @data: data specified when registering the notification callback
/// @closure: the #GClosure on which the notification is emitted
///
/// The type used for the various notification callbacks which can be registered
/// on closures.
typedef GClosureNotify
    = ffi.Pointer<ffi.NativeFunction<GClosureNotifyFunction>>;
typedef GClosureNotifyFunction = ffi.Void Function(
    gpointer data, ffi.Pointer<GClosure> closure);
typedef DartGClosureNotifyFunction = void Function(
    gpointer data, ffi.Pointer<GClosure> closure);
typedef GClosure = _GClosure;

final class _GCClosure extends ffi.Opaque {}

/// GCallback:
///
/// The type used for callback functions in structure definitions and function
/// signatures.
///
/// This doesn't mean that all callback functions must take no  parameters and
/// return void. The required signature of a callback function is determined by
/// the context in which is used (e.g. the signal to which it is connected).
///
/// Use G_CALLBACK() to cast the callback function to a #GCallback.
typedef GCallback = ffi.Pointer<ffi.NativeFunction<GCallbackFunction>>;
typedef GCallbackFunction = ffi.Void Function();
typedef DartGCallbackFunction = void Function();

/// GClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @n_param_values: the length of the @param_values array
/// @param_values: (array length=n_param_values): an array of
/// #GValues holding the arguments on which to invoke the
/// callback of @closure
/// @invocation_hint: (nullable): the invocation hint given as the
/// last argument to g_closure_invoke()
/// @marshal_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
///
/// The type used for marshaller functions.
typedef GClosureMarshal
    = ffi.Pointer<ffi.NativeFunction<GClosureMarshalFunction>>;
typedef GClosureMarshalFunction = ffi.Void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    guint n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data);
typedef DartGClosureMarshalFunction = void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    Dartguint n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer invocation_hint,
    gpointer marshal_data);

/// GSignalQuery:
/// @signal_id: The signal id of the signal being queried, or 0 if the
/// signal to be queried was unknown.
/// @signal_name: The signal name.
/// @itype: The interface/instance type that this signal can be emitted for.
/// @signal_flags: The signal flags as passed in to g_signal_new().
/// @return_type: The return type for user callbacks.
/// @n_params: The number of parameters that user callbacks take.
/// @param_types: (array length=n_params): The individual parameter types for
/// user callbacks, note that the effective callback signature is:
/// |[<!-- language="C" -->
/// @return_type callback (#gpointer     data1,
/// [param_types param_names,]
/// gpointer     data2);
/// ]|
///
/// A structure holding in-depth information for a specific signal.
///
/// See also: g_signal_query()
final class _GSignalQuery extends ffi.Struct {
  @guint()
  external int signal_id;

  external ffi.Pointer<gchar> signal_name;

  @GType()
  external int itype;

  @ffi.Int32()
  external int signal_flags;

  @GType()
  external int return_type;

  @guint()
  external int n_params;

  external ffi.Pointer<GType> param_types;
}

/// GSignalFlags:
/// @G_SIGNAL_RUN_FIRST: Invoke the object method handler in the first emission stage.
/// @G_SIGNAL_RUN_LAST: Invoke the object method handler in the third emission stage.
/// @G_SIGNAL_RUN_CLEANUP: Invoke the object method handler in the last emission stage.
/// @G_SIGNAL_NO_RECURSE: Signals being emitted for an object while currently being in
/// emission for this very object will not be emitted recursively,
/// but instead cause the first emission to be restarted.
/// @G_SIGNAL_DETAILED: This signal supports "::detail" appendices to the signal name
/// upon handler connections and emissions.
/// @G_SIGNAL_ACTION: Action signals are signals that may freely be emitted on alive
/// objects from user code via g_signal_emit() and friends, without
/// the need of being embedded into extra code that performs pre or
/// post emission adjustments on the object. They can also be thought
/// of as object methods which can be called generically by
/// third-party code.
/// @G_SIGNAL_NO_HOOKS: No emissions hooks are supported for this signal.
/// @G_SIGNAL_MUST_COLLECT: Varargs signal emission will always collect the
/// arguments, even if there are no signal handlers connected.  Since 2.30.
/// @G_SIGNAL_DEPRECATED: The signal is deprecated and will be removed
/// in a future version. A warning will be generated if it is connected while
/// running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.
/// @G_SIGNAL_ACCUMULATOR_FIRST_RUN: Only used in #GSignalAccumulator accumulator
/// functions for the #GSignalInvocationHint::run_type field to mark the first
/// call to the accumulator function for a signal emission.  Since 2.68.
///
/// The signal flags are used to specify a signal's behaviour.
abstract class GSignalFlags {
  static const int G_SIGNAL_RUN_FIRST = 1;
  static const int G_SIGNAL_RUN_LAST = 2;
  static const int G_SIGNAL_RUN_CLEANUP = 4;
  static const int G_SIGNAL_NO_RECURSE = 8;
  static const int G_SIGNAL_DETAILED = 16;
  static const int G_SIGNAL_ACTION = 32;
  static const int G_SIGNAL_NO_HOOKS = 64;
  static const int G_SIGNAL_MUST_COLLECT = 128;
  static const int G_SIGNAL_DEPRECATED = 256;
  static const int G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072;
}

/// GSignalInvocationHint:
/// @signal_id: The signal id of the signal invoking the callback
/// @detail: The detail passed on for this emission
/// @run_type: The stage the signal emission is currently in, this
/// field will contain one of %G_SIGNAL_RUN_FIRST,
/// %G_SIGNAL_RUN_LAST or %G_SIGNAL_RUN_CLEANUP and %G_SIGNAL_ACCUMULATOR_FIRST_RUN.
/// %G_SIGNAL_ACCUMULATOR_FIRST_RUN is only set for the first run of the accumulator
/// function for a signal emission.
///
/// The #GSignalInvocationHint structure is used to pass on additional information
/// to callbacks during a signal emission.
final class _GSignalInvocationHint extends ffi.Struct {
  @guint()
  external int signal_id;

  @GQuark()
  external int detail;

  @ffi.Int32()
  external int run_type;
}

/// GConnectFlags:
/// @G_CONNECT_AFTER: whether the handler should be called before or after the
/// default handler of the signal.
/// @G_CONNECT_SWAPPED: whether the instance and data should be swapped when
/// calling the handler; see g_signal_connect_swapped() for an example.
///
/// The connection flags are used to specify the behaviour of a signal's
/// connection.
abstract class GConnectFlags {
  static const int G_CONNECT_AFTER = 1;
  static const int G_CONNECT_SWAPPED = 2;
}

/// GSignalMatchType:
/// @G_SIGNAL_MATCH_ID: The signal id must be equal.
/// @G_SIGNAL_MATCH_DETAIL: The signal detail must be equal.
/// @G_SIGNAL_MATCH_CLOSURE: The closure must be the same.
/// @G_SIGNAL_MATCH_FUNC: The C closure callback must be the same.
/// @G_SIGNAL_MATCH_DATA: The closure data must be the same.
/// @G_SIGNAL_MATCH_UNBLOCKED: Only unblocked signals may be matched.
///
/// The match types specify what g_signal_handlers_block_matched(),
/// g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
/// match signals by.
abstract class GSignalMatchType {
  static const int G_SIGNAL_MATCH_ID = 1;
  static const int G_SIGNAL_MATCH_DETAIL = 2;
  static const int G_SIGNAL_MATCH_CLOSURE = 4;
  static const int G_SIGNAL_MATCH_FUNC = 8;
  static const int G_SIGNAL_MATCH_DATA = 16;
  static const int G_SIGNAL_MATCH_UNBLOCKED = 32;
}

/// GSignalAccumulator:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @return_accu: Accumulator to collect callback return values in, this
/// is the return value of the current signal emission.
/// @handler_return: A #GValue holding the return value of the signal handler.
/// @data: Callback data that was specified when creating the signal.
///
/// The signal accumulator is a special callback function that can be used
/// to collect return values of the various callbacks that are called
/// during a signal emission.
///
/// The signal accumulator is specified at signal creation time, if it is
/// left %NULL, no accumulation of callback return values is performed.
/// The return value of signal emissions is then the value returned by the
/// last callback.
///
/// Returns: The accumulator function returns whether the signal emission
/// should be aborted. Returning %TRUE will continue with
/// the signal emission. Returning %FALSE will abort the current emission.
/// Since 2.62, returning %FALSE will skip to the CLEANUP stage. In this case,
/// emission will occur as normal in the CLEANUP stage and the handler's
/// return value will be accumulated.
typedef GSignalAccumulator
    = ffi.Pointer<ffi.NativeFunction<GSignalAccumulatorFunction>>;
typedef GSignalAccumulatorFunction = gboolean Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer data);
typedef DartGSignalAccumulatorFunction = Dartgint Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    gpointer data);
typedef GSignalInvocationHint = _GSignalInvocationHint;

/// GSignalCMarshaller:
///
/// This is the signature of marshaller functions, required to marshall
/// arrays of parameter values to signal emissions into C language callback
/// invocations.
///
/// It is merely an alias to #GClosureMarshal since the #GClosure mechanism
/// takes over responsibility of actual function invocation for the signal
/// system.
typedef GSignalCMarshaller = GClosureMarshal;

/// GSignalCVaMarshaller:
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GSignalCVaMarshaller = GVaClosureMarshal;

/// GVaClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @instance: (type GObject.TypeInstance): the instance on which the closure is
/// invoked.
/// @args: va_list of arguments to be passed to the closure.
/// @marshal_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
/// @n_params: the length of the @param_types array
/// @param_types: (array length=n_params): the #GType of each argument from
/// @args.
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GVaClosureMarshal
    = ffi.Pointer<ffi.NativeFunction<GVaClosureMarshalFunction>>;
typedef GVaClosureMarshalFunction = ffi.Void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    ffi.Int n_params,
    ffi.Pointer<GType> param_types);
typedef DartGVaClosureMarshalFunction = void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    gpointer instance,
    ffi.Pointer<__va_list_tag> args,
    gpointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types);
typedef GSignalQuery = _GSignalQuery;

/// GSignalEmissionHook:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @n_param_values: the number of parameters to the function, including
/// the instance on which the signal was emitted.
/// @param_values: (array length=n_param_values): the instance on which
/// the signal was emitted, followed by the parameters of the emission.
/// @data: user data associated with the hook.
///
/// A simple function pointer to get invoked when the signal is emitted.
///
/// Emission hooks allow you to tie a hook to the signal type, so that it will
/// trap all emissions of that signal, from any object.
///
/// You may not attach these to signals created with the %G_SIGNAL_NO_HOOKS flag.
///
/// Returns: whether it wants to stay connected. If it returns %FALSE, the signal
/// hook is disconnected (and destroyed).
typedef GSignalEmissionHook
    = ffi.Pointer<ffi.NativeFunction<GSignalEmissionHookFunction>>;
typedef GSignalEmissionHookFunction = gboolean Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    guint n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer data);
typedef DartGSignalEmissionHookFunction = Dartgint Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    Dartguint n_param_values,
    ffi.Pointer<GValue> param_values,
    gpointer data);

/// GBoxedCopyFunc:
/// @boxed: (not nullable): The boxed structure to be copied.
///
/// This function is provided by the user and should produce a copy
/// of the passed in boxed structure.
///
/// Returns: (not nullable): The newly created copy of the boxed structure.
typedef GBoxedCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GBoxedCopyFuncFunction>>;
typedef GBoxedCopyFuncFunction = gpointer Function(gpointer boxed);

/// GBoxedFreeFunc:
/// @boxed: (not nullable): The boxed structure to be freed.
///
/// This function is provided by the user and should free the boxed
/// structure passed.
typedef GBoxedFreeFunc
    = ffi.Pointer<ffi.NativeFunction<GBoxedFreeFuncFunction>>;
typedef GBoxedFreeFuncFunction = ffi.Void Function(gpointer boxed);
typedef DartGBoxedFreeFuncFunction = void Function(gpointer boxed);

/// GObject:
///
/// The base object type.
///
/// All the fields in the `GObject` structure are private to the implementation
/// and should never be accessed directly.
///
/// Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the
/// alignment of the largest basic GLib type (typically this is #guint64 or
/// #gdouble). If you need larger alignment for an element in a #GObject, you
/// should allocate it on the heap (aligned), or arrange for your #GObject to be
/// appropriately padded. This guarantee applies to the #GObject (or derived)
/// struct, the #GObjectClass (or derived) struct, and any private data allocated
/// by G_ADD_PRIVATE().
final class _GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @guint()
  external int ref_count;

  external ffi.Pointer<GData> qdata;
}

/// GObjectClass:
/// @g_type_class: the parent class
/// @constructor: the @constructor function is called by g_object_new () to
/// complete the object initialization after all the construction properties are
/// set. The first thing a @constructor implementation must do is chain up to the
/// @constructor of the parent class. Overriding @constructor should be rarely
/// needed, e.g. to handle construct properties, or to implement singletons.
/// @set_property: the generic setter for all properties of this type. Should be
/// overridden for every type with properties. If implementations of
/// @set_property don't emit property change notification explicitly, this will
/// be done implicitly by the type system. However, if the notify signal is
/// emitted explicitly, the type system will not emit it a second time.
/// @get_property: the generic getter for all properties of this type. Should be
/// overridden for every type with properties.
/// @dispose: the @dispose function is supposed to drop all references to other
/// objects, but keep the instance otherwise intact, so that client method
/// invocations still work. It may be run multiple times (due to reference
/// loops). Before returning, @dispose should chain up to the @dispose method
/// of the parent class.
/// @finalize: instance finalization function, should finish the finalization of
/// the instance begun in @dispose and chain up to the @finalize method of the
/// parent class.
/// @dispatch_properties_changed: emits property change notification for a bunch
/// of properties. Overriding @dispatch_properties_changed should be rarely
/// needed.
/// @notify: the class closure for the notify signal
/// @constructed: the @constructed function is called by g_object_new() as the
/// final step of the object creation process.  At the point of the call, all
/// construction properties have been set on the object.  The purpose of this
/// call is to allow for object initialisation steps that can only be performed
/// after construction properties have been set.  @constructed implementors
/// should chain up to the @constructed call of their parent class to allow it
/// to complete its initialisation.
///
/// The class structure for the GObject type.
///
/// |[<!-- language="C" -->
/// // Example of implementing a singleton using a constructor.
/// static MySingleton *the_singleton = NULL;
///
/// static GObject*
/// my_singleton_constructor (GType                  type,
/// guint                  n_construct_params,
/// GObjectConstructParam *construct_params)
/// {
/// GObject *object;
///
/// if (!the_singleton)
/// {
/// object = G_OBJECT_CLASS (parent_class)->constructor (type,
/// n_construct_params,
/// construct_params);
/// the_singleton = MY_SINGLETON (object);
/// }
/// else
/// object = g_object_ref (G_OBJECT (the_singleton));
///
/// return object;
/// }
/// ]|
final class _GObjectClass extends ffi.Struct {
  external GTypeClass g_type_class;

  external ffi.Pointer<GSList> construct_properties;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  GType type,
                  guint n_construct_properties,
                  ffi.Pointer<GObjectConstructParam> construct_properties)>>
      constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> set_property;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> get_property;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      dispose;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject> object, guint n_pspecs,
                  ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs)>>
      dispatch_properties_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GObject> object, ffi.Pointer<GParamSpec> pspec)>>
      notify;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      constructed;

  @gsize()
  external int flags;

  @ffi.Array.multi([6])
  external ffi.Array<gpointer> pdummy;
}

typedef GObject = _GObject;
typedef GObjectConstructParam = _GObjectConstructParam;

/// GObjectConstructParam:
/// @pspec: the #GParamSpec of the construct parameter
/// @value: the value to set the parameter to
///
/// The GObjectConstructParam struct is an auxiliary structure used to hand
/// #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.
final class _GObjectConstructParam extends ffi.Struct {
  external ffi.Pointer<GParamSpec> pspec;

  external ffi.Pointer<GValue> value;
}

typedef GObjectClass = _GObjectClass;
typedef GParameter = _GParameter;

/// GWeakNotify:
/// @data: data that was provided when the weak reference was established
/// @where_the_object_was: the object being disposed
///
/// A #GWeakNotify function can be added to an object as a callback that gets
/// triggered when the object is finalized.
///
/// Since the object is already being disposed when the #GWeakNotify is called,
/// there's not much you could do with the object, apart from e.g. using its
/// address as hash-index or the like.
///
/// In particular, this means it’s invalid to call g_object_ref(),
/// g_weak_ref_init(), g_weak_ref_set(), g_object_add_toggle_ref(),
/// g_object_weak_ref(), g_object_add_weak_pointer() or any function which calls
/// them on the object from this callback.
typedef GWeakNotify = ffi.Pointer<ffi.NativeFunction<GWeakNotifyFunction>>;
typedef GWeakNotifyFunction = ffi.Void Function(
    gpointer data, ffi.Pointer<GObject> where_the_object_was);
typedef DartGWeakNotifyFunction = void Function(
    gpointer data, ffi.Pointer<GObject> where_the_object_was);

/// GToggleNotify:
/// @data: Callback data passed to g_object_add_toggle_ref()
/// @object: The object on which g_object_add_toggle_ref() was called.
/// @is_last_ref: %TRUE if the toggle reference is now the
/// last reference to the object. %FALSE if the toggle
/// reference was the last reference and there are now other
/// references.
///
/// A callback function used for notification when the state
/// of a toggle reference changes.
///
/// See also: g_object_add_toggle_ref()
typedef GToggleNotify = ffi.Pointer<ffi.NativeFunction<GToggleNotifyFunction>>;
typedef GToggleNotifyFunction = ffi.Void Function(
    gpointer data, ffi.Pointer<GObject> object, gboolean is_last_ref);
typedef DartGToggleNotifyFunction = void Function(
    gpointer data, ffi.Pointer<GObject> object, Dartgint is_last_ref);

final class GWeakRef extends ffi.Struct {
  external UnnamedUnion5 priv;
}

final class UnnamedUnion5 extends ffi.Union {
  external gpointer p;
}

final class _GBinding extends ffi.Opaque {}

/// GBindingFlags:
/// @G_BINDING_DEFAULT: The default binding; if the source property
/// changes, the target property is updated with its value.
/// @G_BINDING_BIDIRECTIONAL: Bidirectional binding; if either the
/// property of the source or the property of the target changes,
/// the other is updated.
/// @G_BINDING_SYNC_CREATE: Synchronize the values of the source and
/// target properties when creating the binding; the direction of
/// the synchronization is always from the source to the target.
/// @G_BINDING_INVERT_BOOLEAN: If the two properties being bound are
/// booleans, setting one to %TRUE will result in the other being
/// set to %FALSE and vice versa. This flag will only work for
/// boolean properties, and cannot be used when passing custom
/// transformation functions to g_object_bind_property_full().
///
/// Flags to be passed to g_object_bind_property() or
/// g_object_bind_property_full().
///
/// This enumeration can be extended at later date.
///
/// Since: 2.26
abstract class GBindingFlags {
  static const int G_BINDING_DEFAULT = 0;
  static const int G_BINDING_BIDIRECTIONAL = 1;
  static const int G_BINDING_SYNC_CREATE = 2;
  static const int G_BINDING_INVERT_BOOLEAN = 4;
}

/// GBinding:
///
/// GBinding is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.26
typedef GBinding = _GBinding;

/// GBindingTransformFunc:
/// @binding: a #GBinding
/// @from_value: the #GValue containing the value to transform
/// @to_value: the #GValue in which to store the transformed value
/// @user_data: data passed to the transform function
///
/// A function to be called to transform @from_value to @to_value.
///
/// If this is the @transform_to function of a binding, then @from_value
/// is the @source_property on the @source object, and @to_value is the
/// @target_property on the @target object. If this is the
/// @transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
/// then those roles are reversed.
///
/// Returns: %TRUE if the transformation was successful, and %FALSE
/// otherwise
///
/// Since: 2.26
typedef GBindingTransformFunc
    = ffi.Pointer<ffi.NativeFunction<GBindingTransformFuncFunction>>;
typedef GBindingTransformFuncFunction = gboolean Function(
    ffi.Pointer<GBinding> binding,
    ffi.Pointer<GValue> from_value,
    ffi.Pointer<GValue> to_value,
    gpointer user_data);
typedef DartGBindingTransformFuncFunction = Dartgint Function(
    ffi.Pointer<GBinding> binding,
    ffi.Pointer<GValue> from_value,
    ffi.Pointer<GValue> to_value,
    gpointer user_data);

final class _GBindingGroup extends ffi.Opaque {}

/// GBindingGroup:
///
/// GBindingGroup is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.72
typedef GBindingGroup = _GBindingGroup;

/// GEnumClass:
/// @g_type_class: the parent class
/// @minimum: the smallest possible value.
/// @maximum: the largest possible value.
/// @n_values: the number of possible values.
/// @values: an array of #GEnumValue structs describing the
/// individual values.
///
/// The class of an enumeration type holds information about its
/// possible values.
final class _GEnumClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @guint()
  external int n_values;

  external ffi.Pointer<GEnumValue> values;
}

typedef GEnumValue = _GEnumValue;

/// GEnumValue:
/// @value: the enum value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single enum value, its name, and its
/// nickname.
final class _GEnumValue extends ffi.Struct {
  @gint()
  external int value;

  external ffi.Pointer<gchar> value_name;

  external ffi.Pointer<gchar> value_nick;
}

/// GFlagsClass:
/// @g_type_class: the parent class
/// @mask: a mask covering all possible values.
/// @n_values: the number of possible values.
/// @values: an array of #GFlagsValue structs describing the
/// individual values.
///
/// The class of a flags type holds information about its
/// possible values.
final class _GFlagsClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @guint()
  external int mask;

  @guint()
  external int n_values;

  external ffi.Pointer<GFlagsValue> values;
}

typedef GFlagsValue = _GFlagsValue;

/// GFlagsValue:
/// @value: the flags value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single flags value, its name, and its
/// nickname.
final class _GFlagsValue extends ffi.Struct {
  @guint()
  external int value;

  external ffi.Pointer<gchar> value_name;

  external ffi.Pointer<gchar> value_nick;
}

typedef GEnumClass = _GEnumClass;
typedef GFlagsClass = _GFlagsClass;

/// GParamSpecChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for character properties.
final class _GParamSpecChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint8()
  external int minimum;

  @gint8()
  external int maximum;

  @gint8()
  external int default_value;
}

typedef gint8 = ffi.SignedChar;
typedef Dartgint8 = int;

/// GParamSpecUChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned character properties.
final class _GParamSpecUChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint8()
  external int minimum;

  @guint8()
  external int maximum;

  @guint8()
  external int default_value;
}

/// GParamSpecBoolean:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for boolean properties.
final class _GParamSpecBoolean extends ffi.Struct {
  external GParamSpec parent_instance;

  @gboolean()
  external int default_value;
}

/// GParamSpecInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for integer properties.
final class _GParamSpecInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @gint()
  external int default_value;
}

/// GParamSpecUInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned integer properties.
final class _GParamSpecUInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint()
  external int minimum;

  @guint()
  external int maximum;

  @guint()
  external int default_value;
}

/// GParamSpecLong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for long integer properties.
final class _GParamSpecLong extends ffi.Struct {
  external GParamSpec parent_instance;

  @glong()
  external int minimum;

  @glong()
  external int maximum;

  @glong()
  external int default_value;
}

/// GParamSpecULong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned long integer properties.
final class _GParamSpecULong extends ffi.Struct {
  external GParamSpec parent_instance;

  @gulong()
  external int minimum;

  @gulong()
  external int maximum;

  @gulong()
  external int default_value;
}

/// GParamSpecInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for 64bit integer properties.
final class _GParamSpecInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint64()
  external int minimum;

  @gint64()
  external int maximum;

  @gint64()
  external int default_value;
}

/// GParamSpecUInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned 64bit integer properties.
final class _GParamSpecUInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint64()
  external int minimum;

  @guint64()
  external int maximum;

  @guint64()
  external int default_value;
}

/// GParamSpecUnichar:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unichar (unsigned integer) properties.
final class _GParamSpecUnichar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gunichar()
  external int default_value;
}

/// GParamSpecEnum:
/// @parent_instance: private #GParamSpec portion
/// @enum_class: the #GEnumClass for the enum
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for enum
/// properties.
final class _GParamSpecEnum extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GEnumClass> enum_class;

  @gint()
  external int default_value;
}

/// GParamSpecFlags:
/// @parent_instance: private #GParamSpec portion
/// @flags_class: the #GFlagsClass for the flags
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for flags
/// properties.
final class _GParamSpecFlags extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GFlagsClass> flags_class;

  @guint()
  external int default_value;
}

/// GParamSpecFloat:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-30.
///
/// A #GParamSpec derived structure that contains the meta data for float properties.
final class _GParamSpecFloat extends ffi.Struct {
  external GParamSpec parent_instance;

  @gfloat()
  external double minimum;

  @gfloat()
  external double maximum;

  @gfloat()
  external double default_value;

  @gfloat()
  external double epsilon;
}

/// GParamSpecDouble:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-90.
///
/// A #GParamSpec derived structure that contains the meta data for double properties.
final class _GParamSpecDouble extends ffi.Struct {
  external GParamSpec parent_instance;

  @gdouble()
  external double minimum;

  @gdouble()
  external double maximum;

  @gdouble()
  external double default_value;

  @gdouble()
  external double epsilon;
}

/// GParamSpecString:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
/// @cset_first: a string containing the allowed values for the first byte
/// @cset_nth: a string containing the allowed values for the subsequent bytes
/// @substitutor: the replacement byte for bytes which don't match @cset_first or @cset_nth.
/// @null_fold_if_empty: replace empty string by %NULL
/// @ensure_non_null: replace %NULL strings by an empty string
///
/// A #GParamSpec derived structure that contains the meta data for string
/// properties.
final class _GParamSpecString extends ffi.Opaque {}

/// GParamSpecParam:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for %G_TYPE_PARAM
/// properties.
final class _GParamSpecParam extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecBoxed:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for boxed properties.
final class _GParamSpecBoxed extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecPointer:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for pointer properties.
final class _GParamSpecPointer extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecValueArray:
/// @parent_instance: private #GParamSpec portion
/// @element_spec: a #GParamSpec describing the elements contained in arrays of this property, may be %NULL
/// @fixed_n_elements: if greater than 0, arrays of this property will always have this many elements
///
/// A #GParamSpec derived structure that contains the meta data for #GValueArray properties.
final class _GParamSpecValueArray extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> element_spec;

  @guint()
  external int fixed_n_elements;
}

/// GParamSpecObject:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for object properties.
final class _GParamSpecObject extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecOverride:
///
/// A #GParamSpec derived structure that redirects operations to
/// other types of #GParamSpec.
///
/// All operations other than getting or setting the value are redirected,
/// including accessing the nick and blurb, validating a value, and so
/// forth.
///
/// See g_param_spec_get_redirect_target() for retrieving the overridden
/// property. #GParamSpecOverride is used in implementing
/// g_object_class_override_property(), and will not be directly useful
/// unless you are implementing a new base type similar to GObject.
///
/// Since: 2.4
final class _GParamSpecOverride extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> overridden;
}

/// GParamSpecGType:
/// @parent_instance: private #GParamSpec portion
/// @is_a_type: a #GType whose subtypes can occur as values
///
/// A #GParamSpec derived structure that contains the meta data for #GType properties.
///
/// Since: 2.10
final class _GParamSpecGType extends ffi.Struct {
  external GParamSpec parent_instance;

  @GType()
  external int is_a_type;
}

/// GParamSpecVariant:
/// @parent_instance: private #GParamSpec portion
/// @type: a #GVariantType, or %NULL
/// @default_value: a #GVariant, or %NULL
///
/// A #GParamSpec derived structure that contains the meta data for #GVariant properties.
///
/// When comparing values with g_param_values_cmp(), scalar values with the same
/// type will be compared with g_variant_compare(). Other non-%NULL variants will
/// be checked for equality with g_variant_equal(), and their sort order is
/// otherwise undefined. %NULL is ordered before non-%NULL variants. Two %NULL
/// values compare equal.
///
/// Since: 2.26
final class _GParamSpecVariant extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GVariantType> type;

  external ffi.Pointer<GVariant> default_value;

  @ffi.Array.multi([4])
  external ffi.Array<gpointer> padding;
}

final class _GSignalGroup extends ffi.Opaque {}

/// GSignalGroup:
///
/// #GSignalGroup is an opaque structure whose members
/// cannot be accessed directly.
///
/// Since: 2.72
typedef GSignalGroup = _GSignalGroup;

/// GTypeModule:
/// @name: the name of the module
///
/// The members of the GTypeModule structure should not
/// be accessed directly, except for the @name field.
final class _GTypeModule extends ffi.Struct {
  external GObject parent_instance;

  @guint()
  external int use_count;

  external ffi.Pointer<GSList> type_infos;

  external ffi.Pointer<GSList> interface_infos;

  external ffi.Pointer<gchar> name;
}

/// GTypeModuleClass:
/// @parent_class: the parent class
/// @load: loads the module and registers one or more types using
/// g_type_module_register_type().
/// @unload: unloads the module
///
/// In order to implement dynamic loading of types based on #GTypeModule,
/// the @load and @unload functions in #GTypeModuleClass must be implemented.
final class _GTypeModuleClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi
      .NativeFunction<gboolean Function(ffi.Pointer<GTypeModule> module)>> load;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule> module)>>
      unload;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved4;
}

typedef GTypeModule = _GTypeModule;

/// GTypePlugin:
///
/// The GTypePlugin typedef is used as a placeholder
/// for objects that implement the GTypePlugin interface.
/// /
/// /**
/// GTypePluginClass:
/// @use_plugin: Increases the use count of the plugin.
/// @unuse_plugin: Decreases the use count of the plugin.
/// @complete_type_info: Fills in the #GTypeInfo and
/// #GTypeValueTable structs for the type. The structs are initialized
/// with `memset(s, 0, sizeof (s))` before calling this function.
/// @complete_interface_info: Fills in missing parts of the #GInterfaceInfo
/// for the interface. The structs is initialized with
/// `memset(s, 0, sizeof (s))` before calling this function.
///
/// The #GTypePlugin interface is used by the type system in order to handle
/// the lifecycle of dynamically loaded types.
final class _GTypePluginClass extends ffi.Struct {
  external GTypeInterface base_iface;

  external GTypePluginUse use_plugin;

  external GTypePluginUnuse unuse_plugin;

  external GTypePluginCompleteTypeInfo complete_type_info;

  external GTypePluginCompleteInterfaceInfo complete_interface_info;
}

typedef GTypeInterface = _GTypeInterface;

/// GTypePluginUse:
/// @plugin: the #GTypePlugin whose use count should be increased
///
/// The type of the @use_plugin function of #GTypePluginClass, which gets called
/// to increase the use count of @plugin.
typedef GTypePluginUse
    = ffi.Pointer<ffi.NativeFunction<GTypePluginUseFunction>>;
typedef GTypePluginUseFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin);
typedef DartGTypePluginUseFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin);

/// GTypePluginUnuse:
/// @plugin: the #GTypePlugin whose use count should be decreased
///
/// The type of the @unuse_plugin function of #GTypePluginClass.
typedef GTypePluginUnuse
    = ffi.Pointer<ffi.NativeFunction<GTypePluginUnuseFunction>>;
typedef GTypePluginUnuseFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin);
typedef DartGTypePluginUnuseFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin);

/// GTypePluginCompleteTypeInfo:
/// @plugin: the #GTypePlugin
/// @g_type: the #GType whose info is completed
/// @info: the #GTypeInfo struct to fill in
/// @value_table: the #GTypeValueTable to fill in
///
/// The type of the @complete_type_info function of #GTypePluginClass.
typedef GTypePluginCompleteTypeInfo
    = ffi.Pointer<ffi.NativeFunction<GTypePluginCompleteTypeInfoFunction>>;
typedef GTypePluginCompleteTypeInfoFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin,
    GType g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table);
typedef DartGTypePluginCompleteTypeInfoFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin,
    Dartgsize g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table);

/// GTypePluginCompleteInterfaceInfo:
/// @plugin: the #GTypePlugin
/// @instance_type: the #GType of an instantiatable type to which the interface
/// is added
/// @interface_type: the #GType of the interface whose info is completed
/// @info: the #GInterfaceInfo to fill in
///
/// The type of the @complete_interface_info function of #GTypePluginClass.
typedef GTypePluginCompleteInterfaceInfo
    = ffi.Pointer<ffi.NativeFunction<GTypePluginCompleteInterfaceInfoFunction>>;
typedef GTypePluginCompleteInterfaceInfoFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin,
    GType instance_type,
    GType interface_type,
    ffi.Pointer<GInterfaceInfo> info);
typedef DartGTypePluginCompleteInterfaceInfoFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin,
    Dartgsize instance_type,
    Dartgsize interface_type,
    ffi.Pointer<GInterfaceInfo> info);

/// GValueArray:
/// @n_values: number of values contained in the array
/// @values: array of values
///
/// A #GValueArray contains an array of #GValue elements.
final class _GValueArray extends ffi.Struct {
  @guint()
  external int n_values;

  external ffi.Pointer<GValue> values;

  @guint()
  external int n_prealloced;
}

typedef GValueArray = _GValueArray;

/// GAppInfoCreateFlags:
/// @G_APP_INFO_CREATE_NONE: No flags.
/// @G_APP_INFO_CREATE_NEEDS_TERMINAL: Application opens in a terminal window.
/// @G_APP_INFO_CREATE_SUPPORTS_URIS: Application supports URI arguments.
/// @G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: Application supports startup notification. Since 2.26
///
/// Flags used when creating a #GAppInfo.
abstract class GAppInfoCreateFlags {
  static const int G_APP_INFO_CREATE_NONE = 0;
  static const int G_APP_INFO_CREATE_NEEDS_TERMINAL = 1;
  static const int G_APP_INFO_CREATE_SUPPORTS_URIS = 2;
  static const int G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4;
}

/// GConverterFlags:
/// @G_CONVERTER_NO_FLAGS: No flags.
/// @G_CONVERTER_INPUT_AT_END: At end of input data
/// @G_CONVERTER_FLUSH: Flush data
///
/// Flags used when calling a g_converter_convert().
///
/// Since: 2.24
abstract class GConverterFlags {
  static const int G_CONVERTER_NO_FLAGS = 0;
  static const int G_CONVERTER_INPUT_AT_END = 1;
  static const int G_CONVERTER_FLUSH = 2;
}

/// GConverterResult:
/// @G_CONVERTER_ERROR: There was an error during conversion.
/// @G_CONVERTER_CONVERTED: Some data was consumed or produced
/// @G_CONVERTER_FINISHED: The conversion is finished
/// @G_CONVERTER_FLUSHED: Flushing is finished
///
/// Results returned from g_converter_convert().
///
/// Since: 2.24
abstract class GConverterResult {
  static const int G_CONVERTER_ERROR = 0;
  static const int G_CONVERTER_CONVERTED = 1;
  static const int G_CONVERTER_FINISHED = 2;
  static const int G_CONVERTER_FLUSHED = 3;
}

/// GDataStreamByteOrder:
/// @G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN: Selects Big Endian byte order.
/// @G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN: Selects Little Endian byte order.
/// @G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN: Selects endianness based on host machine's architecture.
///
/// #GDataStreamByteOrder is used to ensure proper endianness of streaming data sources
/// across various machine architectures.
abstract class GDataStreamByteOrder {
  static const int G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0;
  static const int G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1;
  static const int G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2;
}

/// GDataStreamNewlineType:
/// @G_DATA_STREAM_NEWLINE_TYPE_LF: Selects "LF" line endings, common on most modern UNIX platforms.
/// @G_DATA_STREAM_NEWLINE_TYPE_CR: Selects "CR" line endings.
/// @G_DATA_STREAM_NEWLINE_TYPE_CR_LF: Selects "CR, LF" line ending, common on Microsoft Windows.
/// @G_DATA_STREAM_NEWLINE_TYPE_ANY: Automatically try to handle any line ending type.
///
/// #GDataStreamNewlineType is used when checking for or setting the line endings for a given file.
abstract class GDataStreamNewlineType {
  static const int G_DATA_STREAM_NEWLINE_TYPE_LF = 0;
  static const int G_DATA_STREAM_NEWLINE_TYPE_CR = 1;
  static const int G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2;
  static const int G_DATA_STREAM_NEWLINE_TYPE_ANY = 3;
}

/// GFileAttributeType:
/// @G_FILE_ATTRIBUTE_TYPE_INVALID: indicates an invalid or uninitialized type.
/// @G_FILE_ATTRIBUTE_TYPE_STRING: a null terminated UTF8 string.
/// @G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: a zero terminated string of non-zero bytes.
/// @G_FILE_ATTRIBUTE_TYPE_BOOLEAN: a boolean value.
/// @G_FILE_ATTRIBUTE_TYPE_UINT32: an unsigned 4-byte/32-bit integer.
/// @G_FILE_ATTRIBUTE_TYPE_INT32: a signed 4-byte/32-bit integer.
/// @G_FILE_ATTRIBUTE_TYPE_UINT64: an unsigned 8-byte/64-bit integer.
/// @G_FILE_ATTRIBUTE_TYPE_INT64: a signed 8-byte/64-bit integer.
/// @G_FILE_ATTRIBUTE_TYPE_OBJECT: a #GObject.
/// @G_FILE_ATTRIBUTE_TYPE_STRINGV: a %NULL terminated char **. Since 2.22
///
/// The data types for file attributes.
abstract class GFileAttributeType {
  static const int G_FILE_ATTRIBUTE_TYPE_INVALID = 0;
  static const int G_FILE_ATTRIBUTE_TYPE_STRING = 1;
  static const int G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2;
  static const int G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3;
  static const int G_FILE_ATTRIBUTE_TYPE_UINT32 = 4;
  static const int G_FILE_ATTRIBUTE_TYPE_INT32 = 5;
  static const int G_FILE_ATTRIBUTE_TYPE_UINT64 = 6;
  static const int G_FILE_ATTRIBUTE_TYPE_INT64 = 7;
  static const int G_FILE_ATTRIBUTE_TYPE_OBJECT = 8;
  static const int G_FILE_ATTRIBUTE_TYPE_STRINGV = 9;
}

/// GFileAttributeInfoFlags:
/// @G_FILE_ATTRIBUTE_INFO_NONE: no flags set.
/// @G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: copy the attribute values when the file is copied.
/// @G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: copy the attribute values when the file is moved.
///
/// Flags specifying the behaviour of an attribute.
abstract class GFileAttributeInfoFlags {
  static const int G_FILE_ATTRIBUTE_INFO_NONE = 0;
  static const int G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1;
  static const int G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2;
}

/// GFileAttributeStatus:
/// @G_FILE_ATTRIBUTE_STATUS_UNSET: Attribute value is unset (empty).
/// @G_FILE_ATTRIBUTE_STATUS_SET: Attribute value is set.
/// @G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: Indicates an error in setting the value.
///
/// Used by g_file_set_attributes_from_info() when setting file attributes.
abstract class GFileAttributeStatus {
  static const int G_FILE_ATTRIBUTE_STATUS_UNSET = 0;
  static const int G_FILE_ATTRIBUTE_STATUS_SET = 1;
  static const int G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2;
}

/// GFileQueryInfoFlags:
/// @G_FILE_QUERY_INFO_NONE: No flags set.
/// @G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: Don't follow symlinks.
///
/// Flags used when querying a #GFileInfo.
abstract class GFileQueryInfoFlags {
  static const int G_FILE_QUERY_INFO_NONE = 0;
  static const int G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1;
}

/// GFileCreateFlags:
/// @G_FILE_CREATE_NONE: No flags set.
/// @G_FILE_CREATE_PRIVATE: Create a file that can only be
/// accessed by the current user.
/// @G_FILE_CREATE_REPLACE_DESTINATION: Replace the destination
/// as if it didn't exist before. Don't try to keep any old
/// permissions, replace instead of following links. This
/// is generally useful if you're doing a "copy over"
/// rather than a "save new version of" replace operation.
/// You can think of it as "unlink destination" before
/// writing to it, although the implementation may not
/// be exactly like that. This flag can only be used with
/// g_file_replace() and its variants, including g_file_replace_contents().
/// Since 2.20
///
/// Flags used when an operation may create a file.
abstract class GFileCreateFlags {
  static const int G_FILE_CREATE_NONE = 0;
  static const int G_FILE_CREATE_PRIVATE = 1;
  static const int G_FILE_CREATE_REPLACE_DESTINATION = 2;
}

/// GFileMeasureFlags:
/// @G_FILE_MEASURE_NONE: No flags set.
/// @G_FILE_MEASURE_REPORT_ANY_ERROR: Report any error encountered
/// while traversing the directory tree.  Normally errors are only
/// reported for the toplevel file.
/// @G_FILE_MEASURE_APPARENT_SIZE: Tally usage based on apparent file
/// sizes.  Normally, the block-size is used, if available, as this is a
/// more accurate representation of disk space used.
/// Compare with `du --apparent-size`.
/// @G_FILE_MEASURE_NO_XDEV: Do not cross mount point boundaries.
/// Compare with `du -x`.
///
/// Flags that can be used with g_file_measure_disk_usage().
///
/// Since: 2.38
abstract class GFileMeasureFlags {
  static const int G_FILE_MEASURE_NONE = 0;
  static const int G_FILE_MEASURE_REPORT_ANY_ERROR = 2;
  static const int G_FILE_MEASURE_APPARENT_SIZE = 4;
  static const int G_FILE_MEASURE_NO_XDEV = 8;
}

/// GMountMountFlags:
/// @G_MOUNT_MOUNT_NONE: No flags set.
///
/// Flags used when mounting a mount.
abstract class GMountMountFlags {
  static const int G_MOUNT_MOUNT_NONE = 0;
}

/// GMountUnmountFlags:
/// @G_MOUNT_UNMOUNT_NONE: No flags set.
/// @G_MOUNT_UNMOUNT_FORCE: Unmount even if there are outstanding
/// file operations on the mount.
///
/// Flags used when an unmounting a mount.
abstract class GMountUnmountFlags {
  static const int G_MOUNT_UNMOUNT_NONE = 0;
  static const int G_MOUNT_UNMOUNT_FORCE = 1;
}

/// GDriveStartFlags:
/// @G_DRIVE_START_NONE: No flags set.
///
/// Flags used when starting a drive.
///
/// Since: 2.22
abstract class GDriveStartFlags {
  static const int G_DRIVE_START_NONE = 0;
}

/// GDriveStartStopType:
/// @G_DRIVE_START_STOP_TYPE_UNKNOWN: Unknown or drive doesn't support
/// start/stop.
/// @G_DRIVE_START_STOP_TYPE_SHUTDOWN: The stop method will physically
/// shut down the drive and e.g. power down the port the drive is
/// attached to.
/// @G_DRIVE_START_STOP_TYPE_NETWORK: The start/stop methods are used
/// for connecting/disconnect to the drive over the network.
/// @G_DRIVE_START_STOP_TYPE_MULTIDISK: The start/stop methods will
/// assemble/disassemble a virtual drive from several physical
/// drives.
/// @G_DRIVE_START_STOP_TYPE_PASSWORD: The start/stop methods will
/// unlock/lock the disk (for example using the ATA <quote>SECURITY
/// UNLOCK DEVICE</quote> command)
///
/// Enumeration describing how a drive can be started/stopped.
///
/// Since: 2.22
abstract class GDriveStartStopType {
  static const int G_DRIVE_START_STOP_TYPE_UNKNOWN = 0;
  static const int G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1;
  static const int G_DRIVE_START_STOP_TYPE_NETWORK = 2;
  static const int G_DRIVE_START_STOP_TYPE_MULTIDISK = 3;
  static const int G_DRIVE_START_STOP_TYPE_PASSWORD = 4;
}

/// GFileCopyFlags:
/// @G_FILE_COPY_NONE: No flags set.
/// @G_FILE_COPY_OVERWRITE: Overwrite any existing files
/// @G_FILE_COPY_BACKUP: Make a backup of any existing files.
/// @G_FILE_COPY_NOFOLLOW_SYMLINKS: Don't follow symlinks.
/// @G_FILE_COPY_ALL_METADATA: Copy all file metadata instead of just default set used for copy (see #GFileInfo).
/// @G_FILE_COPY_NO_FALLBACK_FOR_MOVE: Don't use copy and delete fallback if native move not supported.
/// @G_FILE_COPY_TARGET_DEFAULT_PERMS: Leaves target file with default perms, instead of setting the source file perms.
///
/// Flags used when copying or moving files.
abstract class GFileCopyFlags {
  static const int G_FILE_COPY_NONE = 0;
  static const int G_FILE_COPY_OVERWRITE = 1;
  static const int G_FILE_COPY_BACKUP = 2;
  static const int G_FILE_COPY_NOFOLLOW_SYMLINKS = 4;
  static const int G_FILE_COPY_ALL_METADATA = 8;
  static const int G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16;
  static const int G_FILE_COPY_TARGET_DEFAULT_PERMS = 32;
}

/// GFileMonitorFlags:
/// @G_FILE_MONITOR_NONE: No flags set.
/// @G_FILE_MONITOR_WATCH_MOUNTS: Watch for mount events.
/// @G_FILE_MONITOR_SEND_MOVED: Pair DELETED and CREATED events caused
/// by file renames (moves) and send a single G_FILE_MONITOR_EVENT_MOVED
/// event instead (NB: not supported on all backends; the default
/// behaviour -without specifying this flag- is to send single DELETED
/// and CREATED events).  Deprecated since 2.46: use
/// %G_FILE_MONITOR_WATCH_MOVES instead.
/// @G_FILE_MONITOR_WATCH_HARD_LINKS: Watch for changes to the file made
/// via another hard link. Since 2.36.
/// @G_FILE_MONITOR_WATCH_MOVES: Watch for rename operations on a
/// monitored directory.  This causes %G_FILE_MONITOR_EVENT_RENAMED,
/// %G_FILE_MONITOR_EVENT_MOVED_IN and %G_FILE_MONITOR_EVENT_MOVED_OUT
/// events to be emitted when possible.  Since: 2.46.
///
/// Flags used to set what a #GFileMonitor will watch for.
abstract class GFileMonitorFlags {
  static const int G_FILE_MONITOR_NONE = 0;
  static const int G_FILE_MONITOR_WATCH_MOUNTS = 1;
  static const int G_FILE_MONITOR_SEND_MOVED = 2;
  static const int G_FILE_MONITOR_WATCH_HARD_LINKS = 4;
  static const int G_FILE_MONITOR_WATCH_MOVES = 8;
}

/// GFileType:
/// @G_FILE_TYPE_UNKNOWN: File's type is unknown.
/// @G_FILE_TYPE_REGULAR: File handle represents a regular file.
/// @G_FILE_TYPE_DIRECTORY: File handle represents a directory.
/// @G_FILE_TYPE_SYMBOLIC_LINK: File handle represents a symbolic link
/// (Unix systems).
/// @G_FILE_TYPE_SPECIAL: File is a "special" file, such as a socket, fifo,
/// block device, or character device.
/// @G_FILE_TYPE_SHORTCUT: File is a shortcut (Windows systems).
/// @G_FILE_TYPE_MOUNTABLE: File is a mountable location.
///
/// Indicates the file's on-disk type.
///
/// On Windows systems a file will never have %G_FILE_TYPE_SYMBOLIC_LINK type;
/// use #GFileInfo and %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK to determine
/// whether a file is a symlink or not. This is due to the fact that NTFS does
/// not have a single filesystem object type for symbolic links - it has
/// files that symlink to files, and directories that symlink to directories.
/// #GFileType enumeration cannot precisely represent this important distinction,
/// which is why all Windows symlinks will continue to be reported as
/// %G_FILE_TYPE_REGULAR or %G_FILE_TYPE_DIRECTORY.
abstract class GFileType {
  static const int G_FILE_TYPE_UNKNOWN = 0;
  static const int G_FILE_TYPE_REGULAR = 1;
  static const int G_FILE_TYPE_DIRECTORY = 2;
  static const int G_FILE_TYPE_SYMBOLIC_LINK = 3;
  static const int G_FILE_TYPE_SPECIAL = 4;
  static const int G_FILE_TYPE_SHORTCUT = 5;
  static const int G_FILE_TYPE_MOUNTABLE = 6;
}

/// GFilesystemPreviewType:
/// @G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: Only preview files if user has explicitly requested it.
/// @G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: Preview files if user has requested preview of "local" files.
/// @G_FILESYSTEM_PREVIEW_TYPE_NEVER: Never preview files.
///
/// Indicates a hint from the file system whether files should be
/// previewed in a file manager. Returned as the value of the key
/// %G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW.
abstract class GFilesystemPreviewType {
  static const int G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0;
  static const int G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1;
  static const int G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2;
}

/// GFileMonitorEvent:
/// @G_FILE_MONITOR_EVENT_CHANGED: a file changed.
/// @G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT: a hint that this was probably the last change in a set of changes.
/// @G_FILE_MONITOR_EVENT_DELETED: a file was deleted.
/// @G_FILE_MONITOR_EVENT_CREATED: a file was created.
/// @G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED: a file attribute was changed.
/// @G_FILE_MONITOR_EVENT_PRE_UNMOUNT: the file location will soon be unmounted.
/// @G_FILE_MONITOR_EVENT_UNMOUNTED: the file location was unmounted.
/// @G_FILE_MONITOR_EVENT_MOVED: the file was moved -- only sent if the
/// (deprecated) %G_FILE_MONITOR_SEND_MOVED flag is set
/// @G_FILE_MONITOR_EVENT_RENAMED: the file was renamed within the
/// current directory -- only sent if the %G_FILE_MONITOR_WATCH_MOVES
/// flag is set.  Since: 2.46.
/// @G_FILE_MONITOR_EVENT_MOVED_IN: the file was moved into the
/// monitored directory from another location -- only sent if the
/// %G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.46.
/// @G_FILE_MONITOR_EVENT_MOVED_OUT: the file was moved out of the
/// monitored directory to another location -- only sent if the
/// %G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.46
///
/// Specifies what type of event a monitor event is.
abstract class GFileMonitorEvent {
  static const int G_FILE_MONITOR_EVENT_CHANGED = 0;
  static const int G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1;
  static const int G_FILE_MONITOR_EVENT_DELETED = 2;
  static const int G_FILE_MONITOR_EVENT_CREATED = 3;
  static const int G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4;
  static const int G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5;
  static const int G_FILE_MONITOR_EVENT_UNMOUNTED = 6;
  static const int G_FILE_MONITOR_EVENT_MOVED = 7;
  static const int G_FILE_MONITOR_EVENT_RENAMED = 8;
  static const int G_FILE_MONITOR_EVENT_MOVED_IN = 9;
  static const int G_FILE_MONITOR_EVENT_MOVED_OUT = 10;
}

/// GIOErrorEnum:
/// @G_IO_ERROR_FAILED: Generic error condition for when an operation fails
/// and no more specific #GIOErrorEnum value is defined.
/// @G_IO_ERROR_NOT_FOUND: File not found.
/// @G_IO_ERROR_EXISTS: File already exists.
/// @G_IO_ERROR_IS_DIRECTORY: File is a directory.
/// @G_IO_ERROR_NOT_DIRECTORY: File is not a directory.
/// @G_IO_ERROR_NOT_EMPTY: File is a directory that isn't empty.
/// @G_IO_ERROR_NOT_REGULAR_FILE: File is not a regular file.
/// @G_IO_ERROR_NOT_SYMBOLIC_LINK: File is not a symbolic link.
/// @G_IO_ERROR_NOT_MOUNTABLE_FILE: File cannot be mounted.
/// @G_IO_ERROR_FILENAME_TOO_LONG: Filename is too many characters.
/// @G_IO_ERROR_INVALID_FILENAME: Filename is invalid or contains invalid characters.
/// @G_IO_ERROR_TOO_MANY_LINKS: File contains too many symbolic links.
/// @G_IO_ERROR_NO_SPACE: No space left on drive.
/// @G_IO_ERROR_INVALID_ARGUMENT: Invalid argument.
/// @G_IO_ERROR_PERMISSION_DENIED: Permission denied.
/// @G_IO_ERROR_NOT_SUPPORTED: Operation (or one of its parameters) not supported
/// @G_IO_ERROR_NOT_MOUNTED: File isn't mounted.
/// @G_IO_ERROR_ALREADY_MOUNTED: File is already mounted.
/// @G_IO_ERROR_CLOSED: File was closed.
/// @G_IO_ERROR_CANCELLED: Operation was cancelled. See #GCancellable.
/// @G_IO_ERROR_PENDING: Operations are still pending.
/// @G_IO_ERROR_READ_ONLY: File is read only.
/// @G_IO_ERROR_CANT_CREATE_BACKUP: Backup couldn't be created.
/// @G_IO_ERROR_WRONG_ETAG: File's Entity Tag was incorrect.
/// @G_IO_ERROR_TIMED_OUT: Operation timed out.
/// @G_IO_ERROR_WOULD_RECURSE: Operation would be recursive.
/// @G_IO_ERROR_BUSY: File is busy.
/// @G_IO_ERROR_WOULD_BLOCK: Operation would block.
/// @G_IO_ERROR_HOST_NOT_FOUND: Host couldn't be found (remote operations).
/// @G_IO_ERROR_WOULD_MERGE: Operation would merge files.
/// @G_IO_ERROR_FAILED_HANDLED: Operation failed and a helper program has
/// already interacted with the user. Do not display any error dialog.
/// @G_IO_ERROR_TOO_MANY_OPEN_FILES: The current process has too many files
/// open and can't open any more. Duplicate descriptors do count toward
/// this limit. Since 2.20
/// @G_IO_ERROR_NOT_INITIALIZED: The object has not been initialized. Since 2.22
/// @G_IO_ERROR_ADDRESS_IN_USE: The requested address is already in use. Since 2.22
/// @G_IO_ERROR_PARTIAL_INPUT: Need more input to finish operation. Since 2.24
/// @G_IO_ERROR_INVALID_DATA: The input data was invalid. Since 2.24
/// @G_IO_ERROR_DBUS_ERROR: A remote object generated an error that
/// doesn't correspond to a locally registered #GError error
/// domain. Use g_dbus_error_get_remote_error() to extract the D-Bus
/// error name and g_dbus_error_strip_remote_error() to fix up the
/// message so it matches what was received on the wire. Since 2.26.
/// @G_IO_ERROR_HOST_UNREACHABLE: Host unreachable. Since 2.26
/// @G_IO_ERROR_NETWORK_UNREACHABLE: Network unreachable. Since 2.26
/// @G_IO_ERROR_CONNECTION_REFUSED: Connection refused. Since 2.26
/// @G_IO_ERROR_PROXY_FAILED: Connection to proxy server failed. Since 2.26
/// @G_IO_ERROR_PROXY_AUTH_FAILED: Proxy authentication failed. Since 2.26
/// @G_IO_ERROR_PROXY_NEED_AUTH: Proxy server needs authentication. Since 2.26
/// @G_IO_ERROR_PROXY_NOT_ALLOWED: Proxy connection is not allowed by ruleset.
/// Since 2.26
/// @G_IO_ERROR_BROKEN_PIPE: Broken pipe. Since 2.36
/// @G_IO_ERROR_CONNECTION_CLOSED: Connection closed by peer. Note that this
/// is the same code as %G_IO_ERROR_BROKEN_PIPE; before 2.44 some
/// "connection closed" errors returned %G_IO_ERROR_BROKEN_PIPE, but others
/// returned %G_IO_ERROR_FAILED. Now they should all return the same
/// value, which has this more logical name. Since 2.44.
/// @G_IO_ERROR_NOT_CONNECTED: Transport endpoint is not connected. Since 2.44
/// @G_IO_ERROR_MESSAGE_TOO_LARGE: Message too large. Since 2.48.
///
/// Error codes returned by GIO functions.
///
/// Note that this domain may be extended in future GLib releases. In
/// general, new error codes either only apply to new APIs, or else
/// replace %G_IO_ERROR_FAILED in cases that were not explicitly
/// distinguished before. You should therefore avoid writing code like
/// |[<!-- language="C" -->
/// if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_FAILED))
/// {
/// // Assume that this is EPRINTERONFIRE
/// ...
/// }
/// ]|
/// but should instead treat all unrecognized error codes the same as
/// %G_IO_ERROR_FAILED.
///
/// See also #GPollableReturn for a cheaper way of returning
/// %G_IO_ERROR_WOULD_BLOCK to callers without allocating a #GError.
abstract class GIOErrorEnum {
  static const int G_IO_ERROR_FAILED = 0;
  static const int G_IO_ERROR_NOT_FOUND = 1;
  static const int G_IO_ERROR_EXISTS = 2;
  static const int G_IO_ERROR_IS_DIRECTORY = 3;
  static const int G_IO_ERROR_NOT_DIRECTORY = 4;
  static const int G_IO_ERROR_NOT_EMPTY = 5;
  static const int G_IO_ERROR_NOT_REGULAR_FILE = 6;
  static const int G_IO_ERROR_NOT_SYMBOLIC_LINK = 7;
  static const int G_IO_ERROR_NOT_MOUNTABLE_FILE = 8;
  static const int G_IO_ERROR_FILENAME_TOO_LONG = 9;
  static const int G_IO_ERROR_INVALID_FILENAME = 10;
  static const int G_IO_ERROR_TOO_MANY_LINKS = 11;
  static const int G_IO_ERROR_NO_SPACE = 12;
  static const int G_IO_ERROR_INVALID_ARGUMENT = 13;
  static const int G_IO_ERROR_PERMISSION_DENIED = 14;
  static const int G_IO_ERROR_NOT_SUPPORTED = 15;
  static const int G_IO_ERROR_NOT_MOUNTED = 16;
  static const int G_IO_ERROR_ALREADY_MOUNTED = 17;
  static const int G_IO_ERROR_CLOSED = 18;
  static const int G_IO_ERROR_CANCELLED = 19;
  static const int G_IO_ERROR_PENDING = 20;
  static const int G_IO_ERROR_READ_ONLY = 21;
  static const int G_IO_ERROR_CANT_CREATE_BACKUP = 22;
  static const int G_IO_ERROR_WRONG_ETAG = 23;
  static const int G_IO_ERROR_TIMED_OUT = 24;
  static const int G_IO_ERROR_WOULD_RECURSE = 25;
  static const int G_IO_ERROR_BUSY = 26;
  static const int G_IO_ERROR_WOULD_BLOCK = 27;
  static const int G_IO_ERROR_HOST_NOT_FOUND = 28;
  static const int G_IO_ERROR_WOULD_MERGE = 29;
  static const int G_IO_ERROR_FAILED_HANDLED = 30;
  static const int G_IO_ERROR_TOO_MANY_OPEN_FILES = 31;
  static const int G_IO_ERROR_NOT_INITIALIZED = 32;
  static const int G_IO_ERROR_ADDRESS_IN_USE = 33;
  static const int G_IO_ERROR_PARTIAL_INPUT = 34;
  static const int G_IO_ERROR_INVALID_DATA = 35;
  static const int G_IO_ERROR_DBUS_ERROR = 36;
  static const int G_IO_ERROR_HOST_UNREACHABLE = 37;
  static const int G_IO_ERROR_NETWORK_UNREACHABLE = 38;
  static const int G_IO_ERROR_CONNECTION_REFUSED = 39;
  static const int G_IO_ERROR_PROXY_FAILED = 40;
  static const int G_IO_ERROR_PROXY_AUTH_FAILED = 41;
  static const int G_IO_ERROR_PROXY_NEED_AUTH = 42;
  static const int G_IO_ERROR_PROXY_NOT_ALLOWED = 43;
  static const int G_IO_ERROR_BROKEN_PIPE = 44;
  static const int G_IO_ERROR_CONNECTION_CLOSED = 44;
  static const int G_IO_ERROR_NOT_CONNECTED = 45;
  static const int G_IO_ERROR_MESSAGE_TOO_LARGE = 46;
}

/// GAskPasswordFlags:
/// @G_ASK_PASSWORD_NEED_PASSWORD: operation requires a password.
/// @G_ASK_PASSWORD_NEED_USERNAME: operation requires a username.
/// @G_ASK_PASSWORD_NEED_DOMAIN: operation requires a domain.
/// @G_ASK_PASSWORD_SAVING_SUPPORTED: operation supports saving settings.
/// @G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: operation supports anonymous users.
/// @G_ASK_PASSWORD_TCRYPT: operation takes TCRYPT parameters (Since: 2.58)
///
/// #GAskPasswordFlags are used to request specific information from the
/// user, or to notify the user of their choices in an authentication
/// situation.
abstract class GAskPasswordFlags {
  static const int G_ASK_PASSWORD_NEED_PASSWORD = 1;
  static const int G_ASK_PASSWORD_NEED_USERNAME = 2;
  static const int G_ASK_PASSWORD_NEED_DOMAIN = 4;
  static const int G_ASK_PASSWORD_SAVING_SUPPORTED = 8;
  static const int G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16;
  static const int G_ASK_PASSWORD_TCRYPT = 32;
}

/// GPasswordSave:
/// @G_PASSWORD_SAVE_NEVER: never save a password.
/// @G_PASSWORD_SAVE_FOR_SESSION: save a password for the session.
/// @G_PASSWORD_SAVE_PERMANENTLY: save a password permanently.
///
/// #GPasswordSave is used to indicate the lifespan of a saved password.
///
/// #Gvfs stores passwords in the Gnome keyring when this flag allows it
/// to, and later retrieves it again from there.
abstract class GPasswordSave {
  static const int G_PASSWORD_SAVE_NEVER = 0;
  static const int G_PASSWORD_SAVE_FOR_SESSION = 1;
  static const int G_PASSWORD_SAVE_PERMANENTLY = 2;
}

/// GMountOperationResult:
/// @G_MOUNT_OPERATION_HANDLED: The request was fulfilled and the
/// user specified data is now available
/// @G_MOUNT_OPERATION_ABORTED: The user requested the mount operation
/// to be aborted
/// @G_MOUNT_OPERATION_UNHANDLED: The request was unhandled (i.e. not
/// implemented)
///
/// #GMountOperationResult is returned as a result when a request for
/// information is send by the mounting operation.
abstract class GMountOperationResult {
  static const int G_MOUNT_OPERATION_HANDLED = 0;
  static const int G_MOUNT_OPERATION_ABORTED = 1;
  static const int G_MOUNT_OPERATION_UNHANDLED = 2;
}

/// GOutputStreamSpliceFlags:
/// @G_OUTPUT_STREAM_SPLICE_NONE: Do not close either stream.
/// @G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: Close the source stream after
/// the splice.
/// @G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: Close the target stream after
/// the splice.
///
/// GOutputStreamSpliceFlags determine how streams should be spliced.
abstract class GOutputStreamSpliceFlags {
  static const int G_OUTPUT_STREAM_SPLICE_NONE = 0;
  static const int G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1;
  static const int G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2;
}

/// GIOStreamSpliceFlags:
/// @G_IO_STREAM_SPLICE_NONE: Do not close either stream.
/// @G_IO_STREAM_SPLICE_CLOSE_STREAM1: Close the first stream after
/// the splice.
/// @G_IO_STREAM_SPLICE_CLOSE_STREAM2: Close the second stream after
/// the splice.
/// @G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: Wait for both splice operations to finish
/// before calling the callback.
///
/// GIOStreamSpliceFlags determine how streams should be spliced.
///
/// Since: 2.28
abstract class GIOStreamSpliceFlags {
  static const int G_IO_STREAM_SPLICE_NONE = 0;
  static const int G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1;
  static const int G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2;
  static const int G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4;
}

/// GEmblemOrigin:
/// @G_EMBLEM_ORIGIN_UNKNOWN: Emblem of unknown origin
/// @G_EMBLEM_ORIGIN_DEVICE: Emblem adds device-specific information
/// @G_EMBLEM_ORIGIN_LIVEMETADATA: Emblem depicts live metadata, such as "readonly"
/// @G_EMBLEM_ORIGIN_TAG: Emblem comes from a user-defined tag, e.g. set by nautilus (in the future)
///
/// GEmblemOrigin is used to add information about the origin of the emblem
/// to #GEmblem.
///
/// Since: 2.18
abstract class GEmblemOrigin {
  static const int G_EMBLEM_ORIGIN_UNKNOWN = 0;
  static const int G_EMBLEM_ORIGIN_DEVICE = 1;
  static const int G_EMBLEM_ORIGIN_LIVEMETADATA = 2;
  static const int G_EMBLEM_ORIGIN_TAG = 3;
}

/// GResolverError:
/// @G_RESOLVER_ERROR_NOT_FOUND: the requested name/address/service was not
/// found
/// @G_RESOLVER_ERROR_TEMPORARY_FAILURE: the requested information could not
/// be looked up due to a network error or similar problem
/// @G_RESOLVER_ERROR_INTERNAL: unknown error
///
/// An error code used with %G_RESOLVER_ERROR in a #GError returned
/// from a #GResolver routine.
///
/// Since: 2.22
abstract class GResolverError {
  static const int G_RESOLVER_ERROR_NOT_FOUND = 0;
  static const int G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1;
  static const int G_RESOLVER_ERROR_INTERNAL = 2;
}

/// GResolverRecordType:
/// @G_RESOLVER_RECORD_SRV: look up DNS SRV records for a domain
/// @G_RESOLVER_RECORD_MX: look up DNS MX records for a domain
/// @G_RESOLVER_RECORD_TXT: look up DNS TXT records for a name
/// @G_RESOLVER_RECORD_SOA: look up DNS SOA records for a zone
/// @G_RESOLVER_RECORD_NS: look up DNS NS records for a domain
///
/// The type of record that g_resolver_lookup_records() or
/// g_resolver_lookup_records_async() should retrieve. The records are returned
/// as lists of #GVariant tuples. Each record type has different values in
/// the variant tuples returned.
///
/// %G_RESOLVER_RECORD_SRV records are returned as variants with the signature
/// `(qqqs)`, containing a `guint16` with the priority, a `guint16` with the
/// weight, a `guint16` with the port, and a string of the hostname.
///
/// %G_RESOLVER_RECORD_MX records are returned as variants with the signature
/// `(qs)`, representing a `guint16` with the preference, and a string containing
/// the mail exchanger hostname.
///
/// %G_RESOLVER_RECORD_TXT records are returned as variants with the signature
/// `(as)`, representing an array of the strings in the text record. Note: Most TXT
/// records only contain a single string, but
/// [RFC 1035](https://tools.ietf.org/html/rfc1035#section-3.3.14) does allow a
/// record to contain multiple strings. The RFC which defines the interpretation
/// of a specific TXT record will likely require concatenation of multiple
/// strings if they are present, as with
/// [RFC 7208](https://tools.ietf.org/html/rfc7208#section-3.3).
///
/// %G_RESOLVER_RECORD_SOA records are returned as variants with the signature
/// `(ssuuuuu)`, representing a string containing the primary name server, a
/// string containing the administrator, the serial as a `guint32`, the refresh
/// interval as a `guint32`, the retry interval as a `guint32`, the expire timeout
/// as a `guint32`, and the TTL as a `guint32`.
///
/// %G_RESOLVER_RECORD_NS records are returned as variants with the signature
/// `(s)`, representing a string of the hostname of the name server.
///
/// Since: 2.34
abstract class GResolverRecordType {
  static const int G_RESOLVER_RECORD_SRV = 1;
  static const int G_RESOLVER_RECORD_MX = 2;
  static const int G_RESOLVER_RECORD_TXT = 3;
  static const int G_RESOLVER_RECORD_SOA = 4;
  static const int G_RESOLVER_RECORD_NS = 5;
}

/// GResourceError:
/// @G_RESOURCE_ERROR_NOT_FOUND: no file was found at the requested path
/// @G_RESOURCE_ERROR_INTERNAL: unknown error
///
/// An error code used with %G_RESOURCE_ERROR in a #GError returned
/// from a #GResource routine.
///
/// Since: 2.32
abstract class GResourceError {
  static const int G_RESOURCE_ERROR_NOT_FOUND = 0;
  static const int G_RESOURCE_ERROR_INTERNAL = 1;
}

/// GResourceFlags:
/// @G_RESOURCE_FLAGS_NONE: No flags set.
/// @G_RESOURCE_FLAGS_COMPRESSED: The file is compressed.
///
/// GResourceFlags give information about a particular file inside a resource
/// bundle.
///
/// Since: 2.32
abstract class GResourceFlags {
  static const int G_RESOURCE_FLAGS_NONE = 0;
  static const int G_RESOURCE_FLAGS_COMPRESSED = 1;
}

/// GResourceLookupFlags:
/// @G_RESOURCE_LOOKUP_FLAGS_NONE: No flags set.
///
/// GResourceLookupFlags determine how resource path lookups are handled.
///
/// Since: 2.32
abstract class GResourceLookupFlags {
  static const int G_RESOURCE_LOOKUP_FLAGS_NONE = 0;
}

/// GSocketFamily:
/// @G_SOCKET_FAMILY_INVALID: no address family
/// @G_SOCKET_FAMILY_IPV4: the IPv4 family
/// @G_SOCKET_FAMILY_IPV6: the IPv6 family
/// @G_SOCKET_FAMILY_UNIX: the UNIX domain family
///
/// The protocol family of a #GSocketAddress. (These values are
/// identical to the system defines %AF_INET, %AF_INET6 and %AF_UNIX,
/// if available.)
///
/// Since: 2.22
abstract class GSocketFamily {
  static const int G_SOCKET_FAMILY_INVALID = 0;
  static const int G_SOCKET_FAMILY_UNIX = 1;
  static const int G_SOCKET_FAMILY_IPV4 = 2;
  static const int G_SOCKET_FAMILY_IPV6 = 10;
}

/// GSocketType:
/// @G_SOCKET_TYPE_INVALID: Type unknown or wrong
/// @G_SOCKET_TYPE_STREAM: Reliable connection-based byte streams (e.g. TCP).
/// @G_SOCKET_TYPE_DATAGRAM: Connectionless, unreliable datagram passing.
/// (e.g. UDP)
/// @G_SOCKET_TYPE_SEQPACKET: Reliable connection-based passing of datagrams
/// of fixed maximum length (e.g. SCTP).
///
/// Flags used when creating a #GSocket. Some protocols may not implement
/// all the socket types.
///
/// Since: 2.22
abstract class GSocketType {
  static const int G_SOCKET_TYPE_INVALID = 0;
  static const int G_SOCKET_TYPE_STREAM = 1;
  static const int G_SOCKET_TYPE_DATAGRAM = 2;
  static const int G_SOCKET_TYPE_SEQPACKET = 3;
}

/// GSocketMsgFlags:
/// @G_SOCKET_MSG_NONE: No flags.
/// @G_SOCKET_MSG_OOB: Request to send/receive out of band data.
/// @G_SOCKET_MSG_PEEK: Read data from the socket without removing it from
/// the queue.
/// @G_SOCKET_MSG_DONTROUTE: Don't use a gateway to send out the packet,
/// only send to hosts on directly connected networks.
///
/// Flags used in g_socket_receive_message() and g_socket_send_message().
/// The flags listed in the enum are some commonly available flags, but the
/// values used for them are the same as on the platform, and any other flags
/// are passed in/out as is. So to use a platform specific flag, just include
/// the right system header and pass in the flag.
///
/// Since: 2.22
abstract class GSocketMsgFlags {
  static const int G_SOCKET_MSG_NONE = 0;
  static const int G_SOCKET_MSG_OOB = 1;
  static const int G_SOCKET_MSG_PEEK = 2;
  static const int G_SOCKET_MSG_DONTROUTE = 4;
}

/// GSocketProtocol:
/// @G_SOCKET_PROTOCOL_UNKNOWN: The protocol type is unknown
/// @G_SOCKET_PROTOCOL_DEFAULT: The default protocol for the family/type
/// @G_SOCKET_PROTOCOL_TCP: TCP over IP
/// @G_SOCKET_PROTOCOL_UDP: UDP over IP
/// @G_SOCKET_PROTOCOL_SCTP: SCTP over IP
///
/// A protocol identifier is specified when creating a #GSocket, which is a
/// family/type specific identifier, where 0 means the default protocol for
/// the particular family/type.
///
/// This enum contains a set of commonly available and used protocols. You
/// can also pass any other identifiers handled by the platform in order to
/// use protocols not listed here.
///
/// Since: 2.22
abstract class GSocketProtocol {
  static const int G_SOCKET_PROTOCOL_UNKNOWN = -1;
  static const int G_SOCKET_PROTOCOL_DEFAULT = 0;
  static const int G_SOCKET_PROTOCOL_TCP = 6;
  static const int G_SOCKET_PROTOCOL_UDP = 17;
  static const int G_SOCKET_PROTOCOL_SCTP = 132;
}

/// GZlibCompressorFormat:
/// @G_ZLIB_COMPRESSOR_FORMAT_ZLIB: deflate compression with zlib header
/// @G_ZLIB_COMPRESSOR_FORMAT_GZIP: gzip file format
/// @G_ZLIB_COMPRESSOR_FORMAT_RAW: deflate compression with no header
///
/// Used to select the type of data format to use for #GZlibDecompressor
/// and #GZlibCompressor.
///
/// Since: 2.24
abstract class GZlibCompressorFormat {
  static const int G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0;
  static const int G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1;
  static const int G_ZLIB_COMPRESSOR_FORMAT_RAW = 2;
}

/// GUnixSocketAddressType:
/// @G_UNIX_SOCKET_ADDRESS_INVALID: invalid
/// @G_UNIX_SOCKET_ADDRESS_ANONYMOUS: anonymous
/// @G_UNIX_SOCKET_ADDRESS_PATH: a filesystem path
/// @G_UNIX_SOCKET_ADDRESS_ABSTRACT: an abstract name
/// @G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED: an abstract name, 0-padded
/// to the full length of a unix socket name
///
/// The type of name used by a #GUnixSocketAddress.
/// %G_UNIX_SOCKET_ADDRESS_PATH indicates a traditional unix domain
/// socket bound to a filesystem path. %G_UNIX_SOCKET_ADDRESS_ANONYMOUS
/// indicates a socket not bound to any name (eg, a client-side socket,
/// or a socket created with socketpair()).
///
/// For abstract sockets, there are two incompatible ways of naming
/// them; the man pages suggest using the entire `struct sockaddr_un`
/// as the name, padding the unused parts of the %sun_path field with
/// zeroes; this corresponds to %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED.
/// However, many programs instead just use a portion of %sun_path, and
/// pass an appropriate smaller length to bind() or connect(). This is
/// %G_UNIX_SOCKET_ADDRESS_ABSTRACT.
///
/// Since: 2.26
abstract class GUnixSocketAddressType {
  static const int G_UNIX_SOCKET_ADDRESS_INVALID = 0;
  static const int G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1;
  static const int G_UNIX_SOCKET_ADDRESS_PATH = 2;
  static const int G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3;
  static const int G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4;
}

/// GBusType:
/// @G_BUS_TYPE_STARTER: An alias for the message bus that activated the process, if any.
/// @G_BUS_TYPE_NONE: Not a message bus.
/// @G_BUS_TYPE_SYSTEM: The system-wide message bus.
/// @G_BUS_TYPE_SESSION: The login session message bus.
///
/// An enumeration for well-known message buses.
///
/// Since: 2.26
abstract class GBusType {
  static const int G_BUS_TYPE_STARTER = -1;
  static const int G_BUS_TYPE_NONE = 0;
  static const int G_BUS_TYPE_SYSTEM = 1;
  static const int G_BUS_TYPE_SESSION = 2;
}

/// GBusNameOwnerFlags:
/// @G_BUS_NAME_OWNER_FLAGS_NONE: No flags set.
/// @G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: Allow another message bus connection to claim the name.
/// @G_BUS_NAME_OWNER_FLAGS_REPLACE: If another message bus connection owns the name and have
/// specified %G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT, then take the name from the other connection.
/// @G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE: If another message bus connection owns the name, immediately
/// return an error from g_bus_own_name() rather than entering the waiting queue for that name. (Since 2.54)
///
/// Flags used in g_bus_own_name().
///
/// Since: 2.26
abstract class GBusNameOwnerFlags {
  static const int G_BUS_NAME_OWNER_FLAGS_NONE = 0;
  static const int G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1;
  static const int G_BUS_NAME_OWNER_FLAGS_REPLACE = 2;
  static const int G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = 4;
}

/// GBusNameWatcherFlags:
/// @G_BUS_NAME_WATCHER_FLAGS_NONE: No flags set.
/// @G_BUS_NAME_WATCHER_FLAGS_AUTO_START: If no-one owns the name when
/// beginning to watch the name, ask the bus to launch an owner for the
/// name.
///
/// Flags used in g_bus_watch_name().
///
/// Since: 2.26
abstract class GBusNameWatcherFlags {
  static const int G_BUS_NAME_WATCHER_FLAGS_NONE = 0;
  static const int G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1;
}

/// GDBusProxyFlags:
/// @G_DBUS_PROXY_FLAGS_NONE: No flags set.
/// @G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: Don't load properties.
/// @G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: Don't connect to signals on the remote object.
/// @G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: If the proxy is for a well-known name,
/// do not ask the bus to launch an owner during proxy initialization or a method call.
/// This flag is only meaningful in proxies for well-known names.
/// @G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: If set, the property value for any __invalidated property__ will be (asynchronously) retrieved upon receiving the [`PropertiesChanged`](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties) D-Bus signal and the property will not cause emission of the #GDBusProxy::g-properties-changed signal. When the value is received the #GDBusProxy::g-properties-changed signal is emitted for the property along with the retrieved value. Since 2.32.
/// @G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION: If the proxy is for a well-known name,
/// do not ask the bus to launch an owner during proxy initialization, but allow it to be
/// autostarted by a method call. This flag is only meaningful in proxies for well-known names,
/// and only if %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START is not also specified.
/// @G_DBUS_PROXY_FLAGS_NO_MATCH_RULE: Don't actually send the AddMatch D-Bus
/// call for this signal subscription. This gives you more control
/// over which match rules you add (but you must add them manually). (Since: 2.72)
///
/// Flags used when constructing an instance of a #GDBusProxy derived class.
///
/// Since: 2.26
abstract class GDBusProxyFlags {
  static const int G_DBUS_PROXY_FLAGS_NONE = 0;
  static const int G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1;
  static const int G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2;
  static const int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4;
  static const int G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8;
  static const int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16;
  static const int G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = 32;
}

/// GDBusError:
/// @G_DBUS_ERROR_FAILED:
/// A generic error; "something went wrong" - see the error message for
/// more.
/// @G_DBUS_ERROR_NO_MEMORY:
/// There was not enough memory to complete an operation.
/// @G_DBUS_ERROR_SERVICE_UNKNOWN:
/// The bus doesn't know how to launch a service to supply the bus name
/// you wanted.
/// @G_DBUS_ERROR_NAME_HAS_NO_OWNER:
/// The bus name you referenced doesn't exist (i.e. no application owns
/// it).
/// @G_DBUS_ERROR_NO_REPLY:
/// No reply to a message expecting one, usually means a timeout occurred.
/// @G_DBUS_ERROR_IO_ERROR:
/// Something went wrong reading or writing to a socket, for example.
/// @G_DBUS_ERROR_BAD_ADDRESS:
/// A D-Bus bus address was malformed.
/// @G_DBUS_ERROR_NOT_SUPPORTED:
/// Requested operation isn't supported (like ENOSYS on UNIX).
/// @G_DBUS_ERROR_LIMITS_EXCEEDED:
/// Some limited resource is exhausted.
/// @G_DBUS_ERROR_ACCESS_DENIED:
/// Security restrictions don't allow doing what you're trying to do.
/// @G_DBUS_ERROR_AUTH_FAILED:
/// Authentication didn't work.
/// @G_DBUS_ERROR_NO_SERVER:
/// Unable to connect to server (probably caused by ECONNREFUSED on a
/// socket).
/// @G_DBUS_ERROR_TIMEOUT:
/// Certain timeout errors, possibly ETIMEDOUT on a socket.  Note that
/// %G_DBUS_ERROR_NO_REPLY is used for message reply timeouts. Warning:
/// this is confusingly-named given that %G_DBUS_ERROR_TIMED_OUT also
/// exists. We can't fix it for compatibility reasons so just be
/// careful.
/// @G_DBUS_ERROR_NO_NETWORK:
/// No network access (probably ENETUNREACH on a socket).
/// @G_DBUS_ERROR_ADDRESS_IN_USE:
/// Can't bind a socket since its address is in use (i.e. EADDRINUSE).
/// @G_DBUS_ERROR_DISCONNECTED:
/// The connection is disconnected and you're trying to use it.
/// @G_DBUS_ERROR_INVALID_ARGS:
/// Invalid arguments passed to a method call.
/// @G_DBUS_ERROR_FILE_NOT_FOUND:
/// Missing file.
/// @G_DBUS_ERROR_FILE_EXISTS:
/// Existing file and the operation you're using does not silently overwrite.
/// @G_DBUS_ERROR_UNKNOWN_METHOD:
/// Method name you invoked isn't known by the object you invoked it on.
/// @G_DBUS_ERROR_UNKNOWN_OBJECT:
/// Object you invoked a method on isn't known. Since 2.42
/// @G_DBUS_ERROR_UNKNOWN_INTERFACE:
/// Interface you invoked a method on isn't known by the object. Since 2.42
/// @G_DBUS_ERROR_UNKNOWN_PROPERTY:
/// Property you tried to access isn't known by the object. Since 2.42
/// @G_DBUS_ERROR_PROPERTY_READ_ONLY:
/// Property you tried to set is read-only. Since 2.42
/// @G_DBUS_ERROR_TIMED_OUT:
/// Certain timeout errors, e.g. while starting a service. Warning: this is
/// confusingly-named given that %G_DBUS_ERROR_TIMEOUT also exists. We
/// can't fix it for compatibility reasons so just be careful.
/// @G_DBUS_ERROR_MATCH_RULE_NOT_FOUND:
/// Tried to remove or modify a match rule that didn't exist.
/// @G_DBUS_ERROR_MATCH_RULE_INVALID:
/// The match rule isn't syntactically valid.
/// @G_DBUS_ERROR_SPAWN_EXEC_FAILED:
/// While starting a new process, the exec() call failed.
/// @G_DBUS_ERROR_SPAWN_FORK_FAILED:
/// While starting a new process, the fork() call failed.
/// @G_DBUS_ERROR_SPAWN_CHILD_EXITED:
/// While starting a new process, the child exited with a status code.
/// @G_DBUS_ERROR_SPAWN_CHILD_SIGNALED:
/// While starting a new process, the child exited on a signal.
/// @G_DBUS_ERROR_SPAWN_FAILED:
/// While starting a new process, something went wrong.
/// @G_DBUS_ERROR_SPAWN_SETUP_FAILED:
/// We failed to setup the environment correctly.
/// @G_DBUS_ERROR_SPAWN_CONFIG_INVALID:
/// We failed to setup the config parser correctly.
/// @G_DBUS_ERROR_SPAWN_SERVICE_INVALID:
/// Bus name was not valid.
/// @G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND:
/// Service file not found in system-services directory.
/// @G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID:
/// Permissions are incorrect on the setuid helper.
/// @G_DBUS_ERROR_SPAWN_FILE_INVALID:
/// Service file invalid (Name, User or Exec missing).
/// @G_DBUS_ERROR_SPAWN_NO_MEMORY:
/// Tried to get a UNIX process ID and it wasn't available.
/// @G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN:
/// Tried to get a UNIX process ID and it wasn't available.
/// @G_DBUS_ERROR_INVALID_SIGNATURE:
/// A type signature is not valid.
/// @G_DBUS_ERROR_INVALID_FILE_CONTENT:
/// A file contains invalid syntax or is otherwise broken.
/// @G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN:
/// Asked for SELinux security context and it wasn't available.
/// @G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN:
/// Asked for ADT audit data and it wasn't available.
/// @G_DBUS_ERROR_OBJECT_PATH_IN_USE:
/// There's already an object with the requested object path.
///
/// Error codes for the %G_DBUS_ERROR error domain.
///
/// Since: 2.26
abstract class GDBusError {
  static const int G_DBUS_ERROR_FAILED = 0;
  static const int G_DBUS_ERROR_NO_MEMORY = 1;
  static const int G_DBUS_ERROR_SERVICE_UNKNOWN = 2;
  static const int G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3;
  static const int G_DBUS_ERROR_NO_REPLY = 4;
  static const int G_DBUS_ERROR_IO_ERROR = 5;
  static const int G_DBUS_ERROR_BAD_ADDRESS = 6;
  static const int G_DBUS_ERROR_NOT_SUPPORTED = 7;
  static const int G_DBUS_ERROR_LIMITS_EXCEEDED = 8;
  static const int G_DBUS_ERROR_ACCESS_DENIED = 9;
  static const int G_DBUS_ERROR_AUTH_FAILED = 10;
  static const int G_DBUS_ERROR_NO_SERVER = 11;
  static const int G_DBUS_ERROR_TIMEOUT = 12;
  static const int G_DBUS_ERROR_NO_NETWORK = 13;
  static const int G_DBUS_ERROR_ADDRESS_IN_USE = 14;
  static const int G_DBUS_ERROR_DISCONNECTED = 15;
  static const int G_DBUS_ERROR_INVALID_ARGS = 16;
  static const int G_DBUS_ERROR_FILE_NOT_FOUND = 17;
  static const int G_DBUS_ERROR_FILE_EXISTS = 18;
  static const int G_DBUS_ERROR_UNKNOWN_METHOD = 19;
  static const int G_DBUS_ERROR_TIMED_OUT = 20;
  static const int G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21;
  static const int G_DBUS_ERROR_MATCH_RULE_INVALID = 22;
  static const int G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23;
  static const int G_DBUS_ERROR_SPAWN_FORK_FAILED = 24;
  static const int G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25;
  static const int G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26;
  static const int G_DBUS_ERROR_SPAWN_FAILED = 27;
  static const int G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28;
  static const int G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29;
  static const int G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30;
  static const int G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31;
  static const int G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32;
  static const int G_DBUS_ERROR_SPAWN_FILE_INVALID = 33;
  static const int G_DBUS_ERROR_SPAWN_NO_MEMORY = 34;
  static const int G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35;
  static const int G_DBUS_ERROR_INVALID_SIGNATURE = 36;
  static const int G_DBUS_ERROR_INVALID_FILE_CONTENT = 37;
  static const int G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38;
  static const int G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39;
  static const int G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40;
  static const int G_DBUS_ERROR_UNKNOWN_OBJECT = 41;
  static const int G_DBUS_ERROR_UNKNOWN_INTERFACE = 42;
  static const int G_DBUS_ERROR_UNKNOWN_PROPERTY = 43;
  static const int G_DBUS_ERROR_PROPERTY_READ_ONLY = 44;
}

/// GDBusConnectionFlags:
/// @G_DBUS_CONNECTION_FLAGS_NONE: No flags set.
/// @G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: Perform authentication against server.
/// @G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: Perform authentication against client.
/// @G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: When
/// authenticating as a server, allow the anonymous authentication
/// method.
/// @G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION: Pass this flag if connecting to a peer that is a
/// message bus. This means that the Hello() method will be invoked as part of the connection setup.
/// @G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING: If set, processing of D-Bus messages is
/// delayed until g_dbus_connection_start_message_processing() is called.
/// @G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER: When authenticating
/// as a server, require the UID of the peer to be the same as the UID of the server. (Since: 2.68)
///
/// Flags used when creating a new #GDBusConnection.
///
/// Since: 2.26
abstract class GDBusConnectionFlags {
  static const int G_DBUS_CONNECTION_FLAGS_NONE = 0;
  static const int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1;
  static const int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2;
  static const int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4;
  static const int G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8;
  static const int G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16;
  static const int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER =
      32;
}

/// GDBusCapabilityFlags:
/// @G_DBUS_CAPABILITY_FLAGS_NONE: No flags set.
/// @G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: The connection
/// supports exchanging UNIX file descriptors with the remote peer.
///
/// Capabilities negotiated with the remote peer.
///
/// Since: 2.26
abstract class GDBusCapabilityFlags {
  static const int G_DBUS_CAPABILITY_FLAGS_NONE = 0;
  static const int G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1;
}

/// GDBusCallFlags:
/// @G_DBUS_CALL_FLAGS_NONE: No flags set.
/// @G_DBUS_CALL_FLAGS_NO_AUTO_START: The bus must not launch
/// an owner for the destination name in response to this method
/// invocation.
/// @G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: the caller is prepared to
/// wait for interactive authorization. Since 2.46.
///
/// Flags used in g_dbus_connection_call() and similar APIs.
///
/// Since: 2.26
abstract class GDBusCallFlags {
  static const int G_DBUS_CALL_FLAGS_NONE = 0;
  static const int G_DBUS_CALL_FLAGS_NO_AUTO_START = 1;
  static const int G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2;
}

/// GDBusMessageType:
/// @G_DBUS_MESSAGE_TYPE_INVALID: Message is of invalid type.
/// @G_DBUS_MESSAGE_TYPE_METHOD_CALL: Method call.
/// @G_DBUS_MESSAGE_TYPE_METHOD_RETURN: Method reply.
/// @G_DBUS_MESSAGE_TYPE_ERROR: Error reply.
/// @G_DBUS_MESSAGE_TYPE_SIGNAL: Signal emission.
///
/// Message types used in #GDBusMessage.
///
/// Since: 2.26
abstract class GDBusMessageType {
  static const int G_DBUS_MESSAGE_TYPE_INVALID = 0;
  static const int G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1;
  static const int G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2;
  static const int G_DBUS_MESSAGE_TYPE_ERROR = 3;
  static const int G_DBUS_MESSAGE_TYPE_SIGNAL = 4;
}

/// GDBusMessageFlags:
/// @G_DBUS_MESSAGE_FLAGS_NONE: No flags set.
/// @G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: A reply is not expected.
/// @G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: The bus must not launch an
/// owner for the destination name in response to this message.
/// @G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: If set on a method
/// call, this flag means that the caller is prepared to wait for interactive
/// authorization. Since 2.46.
///
/// Message flags used in #GDBusMessage.
///
/// Since: 2.26
abstract class GDBusMessageFlags {
  static const int G_DBUS_MESSAGE_FLAGS_NONE = 0;
  static const int G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1;
  static const int G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2;
  static const int G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4;
}

/// GDBusMessageHeaderField:
/// @G_DBUS_MESSAGE_HEADER_FIELD_INVALID: Not a valid header field.
/// @G_DBUS_MESSAGE_HEADER_FIELD_PATH: The object path.
/// @G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE: The interface name.
/// @G_DBUS_MESSAGE_HEADER_FIELD_MEMBER: The method or signal name.
/// @G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME: The name of the error that occurred.
/// @G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL: The serial number the message is a reply to.
/// @G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION: The name the message is intended for.
/// @G_DBUS_MESSAGE_HEADER_FIELD_SENDER: Unique name of the sender of the message (filled in by the bus).
/// @G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE: The signature of the message body.
/// @G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS: The number of UNIX file descriptors that accompany the message.
///
/// Header fields used in #GDBusMessage.
///
/// Since: 2.26
abstract class GDBusMessageHeaderField {
  static const int G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8;
  static const int G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9;
}

/// GDBusPropertyInfoFlags:
/// @G_DBUS_PROPERTY_INFO_FLAGS_NONE: No flags set.
/// @G_DBUS_PROPERTY_INFO_FLAGS_READABLE: Property is readable.
/// @G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: Property is writable.
///
/// Flags describing the access control of a D-Bus property.
///
/// Since: 2.26
abstract class GDBusPropertyInfoFlags {
  static const int G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0;
  static const int G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1;
  static const int G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2;
}

/// GDBusSubtreeFlags:
/// @G_DBUS_SUBTREE_FLAGS_NONE: No flags set.
/// @G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: Method calls to objects not in the enumerated range
/// will still be dispatched. This is useful if you want
/// to dynamically spawn objects in the subtree.
///
/// Flags passed to g_dbus_connection_register_subtree().
///
/// Since: 2.26
abstract class GDBusSubtreeFlags {
  static const int G_DBUS_SUBTREE_FLAGS_NONE = 0;
  static const int G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1;
}

/// GDBusServerFlags:
/// @G_DBUS_SERVER_FLAGS_NONE: No flags set.
/// @G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: All #GDBusServer::new-connection
/// signals will run in separated dedicated threads (see signal for
/// details).
/// @G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: Allow the anonymous
/// authentication method.
/// @G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER: Require the UID of the
/// peer to be the same as the UID of the server when authenticating. (Since: 2.68)
///
/// Flags used when creating a #GDBusServer.
///
/// Since: 2.26
abstract class GDBusServerFlags {
  static const int G_DBUS_SERVER_FLAGS_NONE = 0;
  static const int G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1;
  static const int G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2;
  static const int G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 4;
}

/// GDBusSignalFlags:
/// @G_DBUS_SIGNAL_FLAGS_NONE: No flags set.
/// @G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: Don't actually send the AddMatch
/// D-Bus call for this signal subscription.  This gives you more control
/// over which match rules you add (but you must add them manually).
/// @G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: Match first arguments that
/// contain a bus or interface name with the given namespace.
/// @G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: Match first arguments that
/// contain an object path that is either equivalent to the given path,
/// or one of the paths is a subpath of the other.
///
/// Flags used when subscribing to signals via g_dbus_connection_signal_subscribe().
///
/// Since: 2.26
abstract class GDBusSignalFlags {
  static const int G_DBUS_SIGNAL_FLAGS_NONE = 0;
  static const int G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1;
  static const int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2;
  static const int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 4;
}

/// GDBusSendMessageFlags:
/// @G_DBUS_SEND_MESSAGE_FLAGS_NONE: No flags set.
/// @G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: Do not automatically
/// assign a serial number from the #GDBusConnection object when
/// sending a message.
///
/// Flags used when sending #GDBusMessages on a #GDBusConnection.
///
/// Since: 2.26
abstract class GDBusSendMessageFlags {
  static const int G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0;
  static const int G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1;
}

/// GCredentialsType:
/// @G_CREDENTIALS_TYPE_INVALID: Indicates an invalid native credential type.
/// @G_CREDENTIALS_TYPE_LINUX_UCRED: The native credentials type is a `struct ucred`.
/// @G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED: The native credentials type is a `struct cmsgcred`.
/// @G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED: The native credentials type is a `struct sockpeercred`. Added in 2.30.
/// @G_CREDENTIALS_TYPE_SOLARIS_UCRED: The native credentials type is a `ucred_t`. Added in 2.40.
/// @G_CREDENTIALS_TYPE_NETBSD_UNPCBID: The native credentials type is a `struct unpcbid`. Added in 2.42.
/// @G_CREDENTIALS_TYPE_APPLE_XUCRED: The native credentials type is a `struct xucred`. Added in 2.66.
/// @G_CREDENTIALS_TYPE_WIN32_PID: The native credentials type is a PID `DWORD`. Added in 2.72.
///
/// Enumeration describing different kinds of native credential types.
///
/// Since: 2.26
abstract class GCredentialsType {
  static const int G_CREDENTIALS_TYPE_INVALID = 0;
  static const int G_CREDENTIALS_TYPE_LINUX_UCRED = 1;
  static const int G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2;
  static const int G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3;
  static const int G_CREDENTIALS_TYPE_SOLARIS_UCRED = 4;
  static const int G_CREDENTIALS_TYPE_NETBSD_UNPCBID = 5;
  static const int G_CREDENTIALS_TYPE_APPLE_XUCRED = 6;
  static const int G_CREDENTIALS_TYPE_WIN32_PID = 7;
}

/// GDBusMessageByteOrder:
/// @G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: The byte order is big endian.
/// @G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: The byte order is little endian.
///
/// Enumeration used to describe the byte order of a D-Bus message.
///
/// Since: 2.26
abstract class GDBusMessageByteOrder {
  static const int G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66;
  static const int G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108;
}

/// GApplicationFlags:
/// @G_APPLICATION_FLAGS_NONE: Default
/// @G_APPLICATION_IS_SERVICE: Run as a service. In this mode, registration
/// fails if the service is already running, and the application
/// will initially wait up to 10 seconds for an initial activation
/// message to arrive.
/// @G_APPLICATION_IS_LAUNCHER: Don't try to become the primary instance.
/// @G_APPLICATION_HANDLES_OPEN: This application handles opening files (in
/// the primary instance). Note that this flag only affects the default
/// implementation of local_command_line(), and has no effect if
/// %G_APPLICATION_HANDLES_COMMAND_LINE is given.
/// See g_application_run() for details.
/// @G_APPLICATION_HANDLES_COMMAND_LINE: This application handles command line
/// arguments (in the primary instance). Note that this flag only affect
/// the default implementation of local_command_line().
/// See g_application_run() for details.
/// @G_APPLICATION_SEND_ENVIRONMENT: Send the environment of the
/// launching process to the primary instance. Set this flag if your
/// application is expected to behave differently depending on certain
/// environment variables. For instance, an editor might be expected
/// to use the `GIT_COMMITTER_NAME` environment variable
/// when editing a git commit message. The environment is available
/// to the #GApplication::command-line signal handler, via
/// g_application_command_line_getenv().
/// @G_APPLICATION_NON_UNIQUE: Make no attempts to do any of the typical
/// single-instance application negotiation, even if the application
/// ID is given.  The application neither attempts to become the
/// owner of the application ID nor does it check if an existing
/// owner already exists.  Everything occurs in the local process.
/// Since: 2.30.
/// @G_APPLICATION_CAN_OVERRIDE_APP_ID: Allow users to override the
/// application ID from the command line with `--gapplication-app-id`.
/// Since: 2.48
/// @G_APPLICATION_ALLOW_REPLACEMENT: Allow another instance to take over
/// the bus name. Since: 2.60
/// @G_APPLICATION_REPLACE: Take over from another instance. This flag is
/// usually set by passing `--gapplication-replace` on the commandline.
/// Since: 2.60
///
/// Flags used to define the behaviour of a #GApplication.
///
/// Since: 2.28
abstract class GApplicationFlags {
  static const int G_APPLICATION_FLAGS_NONE = 0;
  static const int G_APPLICATION_IS_SERVICE = 1;
  static const int G_APPLICATION_IS_LAUNCHER = 2;
  static const int G_APPLICATION_HANDLES_OPEN = 4;
  static const int G_APPLICATION_HANDLES_COMMAND_LINE = 8;
  static const int G_APPLICATION_SEND_ENVIRONMENT = 16;
  static const int G_APPLICATION_NON_UNIQUE = 32;
  static const int G_APPLICATION_CAN_OVERRIDE_APP_ID = 64;
  static const int G_APPLICATION_ALLOW_REPLACEMENT = 128;
  static const int G_APPLICATION_REPLACE = 256;
}

/// GTlsError:
/// @G_TLS_ERROR_UNAVAILABLE: No TLS provider is available
/// @G_TLS_ERROR_MISC: Miscellaneous TLS error
/// @G_TLS_ERROR_BAD_CERTIFICATE: The certificate presented could not
/// be parsed or failed validation.
/// @G_TLS_ERROR_NOT_TLS: The TLS handshake failed because the
/// peer does not seem to be a TLS server.
/// @G_TLS_ERROR_HANDSHAKE: The TLS handshake failed because the
/// peer's certificate was not acceptable.
/// @G_TLS_ERROR_CERTIFICATE_REQUIRED: The TLS handshake failed because
/// the server requested a client-side certificate, but none was
/// provided. See g_tls_connection_set_certificate().
/// @G_TLS_ERROR_EOF: The TLS connection was closed without proper
/// notice, which may indicate an attack. See
/// g_tls_connection_set_require_close_notify().
/// @G_TLS_ERROR_INAPPROPRIATE_FALLBACK: The TLS handshake failed
/// because the client sent the fallback SCSV, indicating a protocol
/// downgrade attack. Since: 2.60
/// @G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD: The certificate failed
/// to load because a password was incorrect. Since: 2.72
///
/// An error code used with %G_TLS_ERROR in a #GError returned from a
/// TLS-related routine.
///
/// Since: 2.28
abstract class GTlsError {
  static const int G_TLS_ERROR_UNAVAILABLE = 0;
  static const int G_TLS_ERROR_MISC = 1;
  static const int G_TLS_ERROR_BAD_CERTIFICATE = 2;
  static const int G_TLS_ERROR_NOT_TLS = 3;
  static const int G_TLS_ERROR_HANDSHAKE = 4;
  static const int G_TLS_ERROR_CERTIFICATE_REQUIRED = 5;
  static const int G_TLS_ERROR_EOF = 6;
  static const int G_TLS_ERROR_INAPPROPRIATE_FALLBACK = 7;
  static const int G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD = 8;
}

/// GTlsCertificateFlags:
/// @G_TLS_CERTIFICATE_UNKNOWN_CA: The signing certificate authority is
/// not known.
/// @G_TLS_CERTIFICATE_BAD_IDENTITY: The certificate does not match the
/// expected identity of the site that it was retrieved from.
/// @G_TLS_CERTIFICATE_NOT_ACTIVATED: The certificate's activation time
/// is still in the future
/// @G_TLS_CERTIFICATE_EXPIRED: The certificate has expired
/// @G_TLS_CERTIFICATE_REVOKED: The certificate has been revoked
/// according to the #GTlsConnection's certificate revocation list.
/// @G_TLS_CERTIFICATE_INSECURE: The certificate's algorithm is
/// considered insecure.
/// @G_TLS_CERTIFICATE_GENERIC_ERROR: Some other error occurred validating
/// the certificate
/// @G_TLS_CERTIFICATE_VALIDATE_ALL: the combination of all of the above
/// flags
///
/// A set of flags describing TLS certification validation. This can be
/// used to describe why a particular certificate was rejected (for
/// example, in #GTlsConnection::accept-certificate).
///
/// GLib guarantees that if certificate verification fails, at least one
/// flag will be set, but it does not guarantee that all possible flags
/// will be set. Accordingly, you may not safely decide to ignore any
/// particular type of error. For example, it would be incorrect to mask
/// %G_TLS_CERTIFICATE_EXPIRED if you want to allow expired certificates,
/// because this could potentially be the only error flag set even if
/// other problems exist with the certificate.
///
/// Since: 2.28
abstract class GTlsCertificateFlags {
  static const int G_TLS_CERTIFICATE_UNKNOWN_CA = 1;
  static const int G_TLS_CERTIFICATE_BAD_IDENTITY = 2;
  static const int G_TLS_CERTIFICATE_NOT_ACTIVATED = 4;
  static const int G_TLS_CERTIFICATE_EXPIRED = 8;
  static const int G_TLS_CERTIFICATE_REVOKED = 16;
  static const int G_TLS_CERTIFICATE_INSECURE = 32;
  static const int G_TLS_CERTIFICATE_GENERIC_ERROR = 64;
  static const int G_TLS_CERTIFICATE_VALIDATE_ALL = 127;
}

/// GTlsAuthenticationMode:
/// @G_TLS_AUTHENTICATION_NONE: client authentication not required
/// @G_TLS_AUTHENTICATION_REQUESTED: client authentication is requested
/// @G_TLS_AUTHENTICATION_REQUIRED: client authentication is required
///
/// The client authentication mode for a #GTlsServerConnection.
///
/// Since: 2.28
abstract class GTlsAuthenticationMode {
  static const int G_TLS_AUTHENTICATION_NONE = 0;
  static const int G_TLS_AUTHENTICATION_REQUESTED = 1;
  static const int G_TLS_AUTHENTICATION_REQUIRED = 2;
}

/// GTlsChannelBindingType:
/// @G_TLS_CHANNEL_BINDING_TLS_UNIQUE:
/// [`tls-unique`](https://tools.ietf.org/html/rfc5929#section-3) binding
/// type
/// @G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT:
/// [`tls-server-end-point`](https://tools.ietf.org/html/rfc5929#section-4)
/// binding type
///
/// The type of TLS channel binding data to retrieve from #GTlsConnection
/// or #GDtlsConnection, as documented by RFC 5929. The
/// [`tls-unique-for-telnet`](https://tools.ietf.org/html/rfc5929#section-5)
/// binding type is not currently implemented.
///
/// Since: 2.66
abstract class GTlsChannelBindingType {
  static const int G_TLS_CHANNEL_BINDING_TLS_UNIQUE = 0;
  static const int G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT = 1;
}

/// GTlsChannelBindingError:
/// @G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED: Either entire binding
/// retrieval facility or specific binding type is not implemented in the
/// TLS backend.
/// @G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE: The handshake is not yet
/// complete on the connection which is a strong requirement for any existing
/// binding type.
/// @G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE: Handshake is complete but
/// binding data is not available. That normally indicates the TLS
/// implementation failed to provide the binding data. For example, some
/// implementations do not provide a peer certificate for resumed connections.
/// @G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED: Binding type is not supported
/// on the current connection. This error could be triggered when requesting
/// `tls-server-end-point` binding data for a certificate which has no hash
/// function or uses multiple hash functions.
/// @G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR: Any other backend error
/// preventing binding data retrieval.
///
/// An error code used with %G_TLS_CHANNEL_BINDING_ERROR in a #GError to
/// indicate a TLS channel binding retrieval error.
///
/// Since: 2.66
abstract class GTlsChannelBindingError {
  static const int G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED = 0;
  static const int G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE = 1;
  static const int G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE = 2;
  static const int G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED = 3;
  static const int G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR = 4;
}

/// GTlsRehandshakeMode:
/// @G_TLS_REHANDSHAKE_NEVER: Never allow rehandshaking
/// @G_TLS_REHANDSHAKE_SAFELY: Allow safe rehandshaking only
/// @G_TLS_REHANDSHAKE_UNSAFELY: Allow unsafe rehandshaking
///
/// When to allow rehandshaking. See
/// g_tls_connection_set_rehandshake_mode().
///
/// Since: 2.28
///
/// Deprecated: 2.60. Changing the rehandshake mode is no longer
/// required for compatibility. Also, rehandshaking has been removed
/// from the TLS protocol in TLS 1.3.
abstract class GTlsRehandshakeMode {
  static const int G_TLS_REHANDSHAKE_NEVER = 0;
  static const int G_TLS_REHANDSHAKE_SAFELY = 1;
  static const int G_TLS_REHANDSHAKE_UNSAFELY = 2;
}

/// GTlsPasswordFlags:
/// @G_TLS_PASSWORD_NONE: No flags
/// @G_TLS_PASSWORD_RETRY: The password was wrong, and the user should retry.
/// @G_TLS_PASSWORD_MANY_TRIES: Hint to the user that the password has been
/// wrong many times, and the user may not have many chances left.
/// @G_TLS_PASSWORD_FINAL_TRY: Hint to the user that this is the last try to get
/// this password right.
/// @G_TLS_PASSWORD_PKCS11_USER: For PKCS #11, the user PIN is required.
/// Since: 2.70.
/// @G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER: For PKCS #11, the security officer
/// PIN is required. Since: 2.70.
/// @G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC: For PKCS #11, the context-specific
/// PIN is required. Since: 2.70.
///
/// Various flags for the password.
///
/// Since: 2.30
abstract class _GTlsPasswordFlags {
  static const int G_TLS_PASSWORD_NONE = 0;
  static const int G_TLS_PASSWORD_RETRY = 2;
  static const int G_TLS_PASSWORD_MANY_TRIES = 4;
  static const int G_TLS_PASSWORD_FINAL_TRY = 8;
  static const int G_TLS_PASSWORD_PKCS11_USER = 16;
  static const int G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 32;
  static const int G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 64;
}

/// GTlsInteractionResult:
/// @G_TLS_INTERACTION_UNHANDLED: The interaction was unhandled (i.e. not
/// implemented).
/// @G_TLS_INTERACTION_HANDLED: The interaction completed, and resulting data
/// is available.
/// @G_TLS_INTERACTION_FAILED: The interaction has failed, or was cancelled.
/// and the operation should be aborted.
///
/// #GTlsInteractionResult is returned by various functions in #GTlsInteraction
/// when finishing an interaction request.
///
/// Since: 2.30
abstract class GTlsInteractionResult {
  static const int G_TLS_INTERACTION_UNHANDLED = 0;
  static const int G_TLS_INTERACTION_HANDLED = 1;
  static const int G_TLS_INTERACTION_FAILED = 2;
}

/// GDBusInterfaceSkeletonFlags:
/// @G_DBUS_INTERFACE_SKELETON_FLAGS_NONE: No flags set.
/// @G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD: Each method invocation is handled in
/// a thread dedicated to the invocation. This means that the method implementation can use blocking IO
/// without blocking any other part of the process. It also means that the method implementation must
/// use locking to access data structures used by other threads.
///
/// Flags describing the behavior of a #GDBusInterfaceSkeleton instance.
///
/// Since: 2.30
abstract class GDBusInterfaceSkeletonFlags {
  static const int G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0;
  static const int
      G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1;
}

/// GDBusObjectManagerClientFlags:
/// @G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE: No flags set.
/// @G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START: If not set and the
/// manager is for a well-known name, then request the bus to launch
/// an owner for the name if no-one owns the name. This flag can only
/// be used in managers for well-known names.
///
/// Flags used when constructing a #GDBusObjectManagerClient.
///
/// Since: 2.30
abstract class GDBusObjectManagerClientFlags {
  static const int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0;
  static const int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1;
}

/// GTlsDatabaseVerifyFlags:
/// @G_TLS_DATABASE_VERIFY_NONE: No verification flags
///
/// Flags for g_tls_database_verify_chain().
///
/// Since: 2.30
abstract class GTlsDatabaseVerifyFlags {
  static const int G_TLS_DATABASE_VERIFY_NONE = 0;
}

/// GTlsDatabaseLookupFlags:
/// @G_TLS_DATABASE_LOOKUP_NONE: No lookup flags
/// @G_TLS_DATABASE_LOOKUP_KEYPAIR: Restrict lookup to certificates that have
/// a private key.
///
/// Flags for g_tls_database_lookup_certificate_for_handle(),
/// g_tls_database_lookup_certificate_issuer(),
/// and g_tls_database_lookup_certificates_issued_by().
///
/// Since: 2.30
abstract class GTlsDatabaseLookupFlags {
  static const int G_TLS_DATABASE_LOOKUP_NONE = 0;
  static const int G_TLS_DATABASE_LOOKUP_KEYPAIR = 1;
}

/// GTlsCertificateRequestFlags:
/// @G_TLS_CERTIFICATE_REQUEST_NONE: No flags
///
/// Flags for g_tls_interaction_request_certificate(),
/// g_tls_interaction_request_certificate_async(), and
/// g_tls_interaction_invoke_request_certificate().
///
/// Since: 2.40
abstract class GTlsCertificateRequestFlags {
  static const int G_TLS_CERTIFICATE_REQUEST_NONE = 0;
}

/// GTlsProtocolVersion:
/// @G_TLS_PROTOCOL_VERSION_UNKNOWN: No protocol version or unknown protocol version
/// @G_TLS_PROTOCOL_VERSION_SSL_3_0: SSL 3.0, which is insecure and should not be used
/// @G_TLS_PROTOCOL_VERSION_TLS_1_0: TLS 1.0, which is insecure and should not be used
/// @G_TLS_PROTOCOL_VERSION_TLS_1_1: TLS 1.1, which is insecure and should not be used
/// @G_TLS_PROTOCOL_VERSION_TLS_1_2: TLS 1.2, defined by [RFC 5246](https://datatracker.ietf.org/doc/html/rfc5246)
/// @G_TLS_PROTOCOL_VERSION_TLS_1_3: TLS 1.3, defined by [RFC 8446](https://datatracker.ietf.org/doc/html/rfc8446)
/// @G_TLS_PROTOCOL_VERSION_DTLS_1_0: DTLS 1.0, which is insecure and should not be used
/// @G_TLS_PROTOCOL_VERSION_DTLS_1_2: DTLS 1.2, defined by [RFC 6347](https://datatracker.ietf.org/doc/html/rfc6347)
///
/// The TLS or DTLS protocol version used by a #GTlsConnection or
/// #GDtlsConnection. The integer values of these versions are sequential
/// to ensure newer known protocol versions compare greater than older
/// known versions. Any known DTLS protocol version will compare greater
/// than any SSL or TLS protocol version. The protocol version may be
/// %G_TLS_PROTOCOL_VERSION_UNKNOWN if the TLS backend supports a newer
/// protocol version that GLib does not yet know about. This means that
/// it's possible for an unknown DTLS protocol version to compare less
/// than the TLS protocol versions.
///
/// Since: 2.70
abstract class GTlsProtocolVersion {
  static const int G_TLS_PROTOCOL_VERSION_UNKNOWN = 0;
  static const int G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1;
  static const int G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2;
  static const int G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3;
  static const int G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4;
  static const int G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5;
  static const int G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201;
  static const int G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202;
}

/// GIOModuleScopeFlags:
/// @G_IO_MODULE_SCOPE_NONE: No module scan flags
/// @G_IO_MODULE_SCOPE_BLOCK_DUPLICATES: When using this scope to load or
/// scan modules, automatically block a modules which has the same base
/// basename as previously loaded module.
///
/// Flags for use with g_io_module_scope_new().
///
/// Since: 2.30
abstract class GIOModuleScopeFlags {
  static const int G_IO_MODULE_SCOPE_NONE = 0;
  static const int G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1;
}

/// GSocketClientEvent:
/// @G_SOCKET_CLIENT_RESOLVING: The client is doing a DNS lookup.
/// @G_SOCKET_CLIENT_RESOLVED: The client has completed a DNS lookup.
/// @G_SOCKET_CLIENT_CONNECTING: The client is connecting to a remote
/// host (either a proxy or the destination server).
/// @G_SOCKET_CLIENT_CONNECTED: The client has connected to a remote
/// host.
/// @G_SOCKET_CLIENT_PROXY_NEGOTIATING: The client is negotiating
/// with a proxy to connect to the destination server.
/// @G_SOCKET_CLIENT_PROXY_NEGOTIATED: The client has negotiated
/// with the proxy server.
/// @G_SOCKET_CLIENT_TLS_HANDSHAKING: The client is performing a
/// TLS handshake.
/// @G_SOCKET_CLIENT_TLS_HANDSHAKED: The client has performed a
/// TLS handshake.
/// @G_SOCKET_CLIENT_COMPLETE: The client is done with a particular
/// #GSocketConnectable.
///
/// Describes an event occurring on a #GSocketClient. See the
/// #GSocketClient::event signal for more details.
///
/// Additional values may be added to this type in the future.
///
/// Since: 2.32
abstract class GSocketClientEvent {
  static const int G_SOCKET_CLIENT_RESOLVING = 0;
  static const int G_SOCKET_CLIENT_RESOLVED = 1;
  static const int G_SOCKET_CLIENT_CONNECTING = 2;
  static const int G_SOCKET_CLIENT_CONNECTED = 3;
  static const int G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4;
  static const int G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5;
  static const int G_SOCKET_CLIENT_TLS_HANDSHAKING = 6;
  static const int G_SOCKET_CLIENT_TLS_HANDSHAKED = 7;
  static const int G_SOCKET_CLIENT_COMPLETE = 8;
}

/// GSocketListenerEvent:
/// @G_SOCKET_LISTENER_BINDING: The listener is about to bind a socket.
/// @G_SOCKET_LISTENER_BOUND: The listener has bound a socket.
/// @G_SOCKET_LISTENER_LISTENING: The listener is about to start
/// listening on this socket.
/// @G_SOCKET_LISTENER_LISTENED: The listener is now listening on
/// this socket.
///
/// Describes an event occurring on a #GSocketListener. See the
/// #GSocketListener::event signal for more details.
///
/// Additional values may be added to this type in the future.
///
/// Since: 2.46
abstract class GSocketListenerEvent {
  static const int G_SOCKET_LISTENER_BINDING = 0;
  static const int G_SOCKET_LISTENER_BOUND = 1;
  static const int G_SOCKET_LISTENER_LISTENING = 2;
  static const int G_SOCKET_LISTENER_LISTENED = 3;
}

/// GTestDBusFlags:
/// @G_TEST_DBUS_NONE: No flags.
///
/// Flags to define future #GTestDBus behaviour.
///
/// Since: 2.34
abstract class GTestDBusFlags {
  static const int G_TEST_DBUS_NONE = 0;
}

/// GSubprocessFlags:
/// @G_SUBPROCESS_FLAGS_NONE: No flags.
/// @G_SUBPROCESS_FLAGS_STDIN_PIPE: create a pipe for the stdin of the
/// spawned process that can be accessed with
/// g_subprocess_get_stdin_pipe().
/// @G_SUBPROCESS_FLAGS_STDIN_INHERIT: stdin is inherited from the
/// calling process.
/// @G_SUBPROCESS_FLAGS_STDOUT_PIPE: create a pipe for the stdout of the
/// spawned process that can be accessed with
/// g_subprocess_get_stdout_pipe().
/// @G_SUBPROCESS_FLAGS_STDOUT_SILENCE: silence the stdout of the spawned
/// process (ie: redirect to `/dev/null`).
/// @G_SUBPROCESS_FLAGS_STDERR_PIPE: create a pipe for the stderr of the
/// spawned process that can be accessed with
/// g_subprocess_get_stderr_pipe().
/// @G_SUBPROCESS_FLAGS_STDERR_SILENCE: silence the stderr of the spawned
/// process (ie: redirect to `/dev/null`).
/// @G_SUBPROCESS_FLAGS_STDERR_MERGE: merge the stderr of the spawned
/// process with whatever the stdout happens to be.  This is a good way
/// of directing both streams to a common log file, for example.
/// @G_SUBPROCESS_FLAGS_INHERIT_FDS: spawned processes will inherit the
/// file descriptors of their parent, unless those descriptors have
/// been explicitly marked as close-on-exec.  This flag has no effect
/// over the "standard" file descriptors (stdin, stdout, stderr).
/// @G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP: if path searching is
/// needed when spawning the subprocess, use the `PATH` in the launcher
/// environment. (Since: 2.72)
///
/// Flags to define the behaviour of a #GSubprocess.
///
/// Note that the default for stdin is to redirect from `/dev/null`.  For
/// stdout and stderr the default are for them to inherit the
/// corresponding descriptor from the calling process.
///
/// Note that it is a programmer error to mix 'incompatible' flags.  For
/// example, you may not request both %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
/// %G_SUBPROCESS_FLAGS_STDOUT_SILENCE.
///
/// Since: 2.40
abstract class GSubprocessFlags {
  static const int G_SUBPROCESS_FLAGS_NONE = 0;
  static const int G_SUBPROCESS_FLAGS_STDIN_PIPE = 1;
  static const int G_SUBPROCESS_FLAGS_STDIN_INHERIT = 2;
  static const int G_SUBPROCESS_FLAGS_STDOUT_PIPE = 4;
  static const int G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 8;
  static const int G_SUBPROCESS_FLAGS_STDERR_PIPE = 16;
  static const int G_SUBPROCESS_FLAGS_STDERR_SILENCE = 32;
  static const int G_SUBPROCESS_FLAGS_STDERR_MERGE = 64;
  static const int G_SUBPROCESS_FLAGS_INHERIT_FDS = 128;
  static const int G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = 256;
}

/// GNotificationPriority:
/// @G_NOTIFICATION_PRIORITY_LOW: for notifications that do not require
/// immediate attention - typically used for contextual background
/// information, such as contact birthdays or local weather
/// @G_NOTIFICATION_PRIORITY_NORMAL: the default priority, to be used for the
/// majority of notifications (for example email messages, software updates,
/// completed download/sync operations)
/// @G_NOTIFICATION_PRIORITY_HIGH: for events that require more attention,
/// usually because responses are time-sensitive (for example chat and SMS
/// messages or alarms)
/// @G_NOTIFICATION_PRIORITY_URGENT: for urgent notifications, or notifications
/// that require a response in a short space of time (for example phone calls
/// or emergency warnings)
///
/// Priority levels for #GNotifications.
///
/// Since: 2.42
abstract class GNotificationPriority {
  static const int G_NOTIFICATION_PRIORITY_NORMAL = 0;
  static const int G_NOTIFICATION_PRIORITY_LOW = 1;
  static const int G_NOTIFICATION_PRIORITY_HIGH = 2;
  static const int G_NOTIFICATION_PRIORITY_URGENT = 3;
}

/// GNetworkConnectivity:
/// @G_NETWORK_CONNECTIVITY_LOCAL: The host is not configured with a
/// route to the Internet; it may or may not be connected to a local
/// network.
/// @G_NETWORK_CONNECTIVITY_LIMITED: The host is connected to a network, but
/// does not appear to be able to reach the full Internet, perhaps
/// due to upstream network problems.
/// @G_NETWORK_CONNECTIVITY_PORTAL: The host is behind a captive portal and
/// cannot reach the full Internet.
/// @G_NETWORK_CONNECTIVITY_FULL: The host is connected to a network, and
/// appears to be able to reach the full Internet.
///
/// The host's network connectivity state, as reported by #GNetworkMonitor.
///
/// Since: 2.44
abstract class GNetworkConnectivity {
  static const int G_NETWORK_CONNECTIVITY_LOCAL = 1;
  static const int G_NETWORK_CONNECTIVITY_LIMITED = 2;
  static const int G_NETWORK_CONNECTIVITY_PORTAL = 3;
  static const int G_NETWORK_CONNECTIVITY_FULL = 4;
}

/// GPollableReturn:
/// @G_POLLABLE_RETURN_FAILED: Generic error condition for when an operation fails.
/// @G_POLLABLE_RETURN_OK: The operation was successfully finished.
/// @G_POLLABLE_RETURN_WOULD_BLOCK: The operation would block.
///
/// Return value for various IO operations that signal errors via the
/// return value and not necessarily via a #GError.
///
/// This enum exists to be able to return errors to callers without having to
/// allocate a #GError. Allocating #GErrors can be quite expensive for
/// regularly happening errors like %G_IO_ERROR_WOULD_BLOCK.
///
/// In case of %G_POLLABLE_RETURN_FAILED a #GError should be set for the
/// operation to give details about the error that happened.
///
/// Since: 2.60
abstract class GPollableReturn {
  static const int G_POLLABLE_RETURN_FAILED = 0;
  static const int G_POLLABLE_RETURN_OK = 1;
  static const int G_POLLABLE_RETURN_WOULD_BLOCK = -27;
}

/// GMemoryMonitorWarningLevel:
/// @G_MEMORY_MONITOR_WARNING_LEVEL_LOW: Memory on the device is low, processes
/// should free up unneeded resources (for example, in-memory caches) so they can
/// be used elsewhere.
/// @G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM: Same as @G_MEMORY_MONITOR_WARNING_LEVEL_LOW
/// but the device has even less free memory, so processes should try harder to free
/// up unneeded resources. If your process does not need to stay running, it is a
/// good time for it to quit.
/// @G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL: The system will soon start terminating
/// processes to reclaim memory, including background processes.
///
/// Memory availability warning levels.
///
/// Note that because new values might be added, it is recommended that applications check
/// #GMemoryMonitorWarningLevel as ranges, for example:
/// |[<!-- language="C" -->
/// if (warning_level > G_MEMORY_MONITOR_WARNING_LEVEL_LOW)
/// drop_caches ();
/// ]|
///
/// Since: 2.64
abstract class GMemoryMonitorWarningLevel {
  static const int G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50;
  static const int G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100;
  static const int G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255;
}

/// GAppLaunchContext:
///
/// Integrating the launch with the launching application. This is used to
/// handle for instance startup notification and launching the new application
/// on the same screen as the launching window.
final class _GAppLaunchContext extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GAppLaunchContextPrivate> priv;
}

typedef GAppLaunchContextPrivate = _GAppLaunchContextPrivate;

final class _GAppLaunchContextPrivate extends ffi.Opaque {}

final class _GAppInfo extends ffi.Opaque {}

final class _GAsyncResult extends ffi.Opaque {}

final class _GAsyncInitable extends ffi.Opaque {}

final class _GBufferedInputStream extends ffi.Struct {
  external GFilterInputStream parent_instance;

  external ffi.Pointer<GBufferedInputStreamPrivate> priv;
}

typedef GFilterInputStream = _GFilterInputStream;

final class _GFilterInputStream extends ffi.Struct {
  external GInputStream parent_instance;

  external ffi.Pointer<GInputStream> base_stream;
}

typedef GInputStream = _GInputStream;

final class _GInputStream extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GInputStreamPrivate> priv;
}

typedef GInputStreamPrivate = _GInputStreamPrivate;

final class _GInputStreamPrivate extends ffi.Opaque {}

typedef GBufferedInputStreamPrivate = _GBufferedInputStreamPrivate;

final class _GBufferedInputStreamPrivate extends ffi.Opaque {}

final class _GBufferedOutputStream extends ffi.Struct {
  external GFilterOutputStream parent_instance;

  external ffi.Pointer<GBufferedOutputStreamPrivate> priv;
}

typedef GFilterOutputStream = _GFilterOutputStream;

final class _GFilterOutputStream extends ffi.Struct {
  external GOutputStream parent_instance;

  external ffi.Pointer<GOutputStream> base_stream;
}

typedef GOutputStream = _GOutputStream;

final class _GOutputStream extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GOutputStreamPrivate> priv;
}

typedef GOutputStreamPrivate = _GOutputStreamPrivate;

final class _GOutputStreamPrivate extends ffi.Opaque {}

typedef GBufferedOutputStreamPrivate = _GBufferedOutputStreamPrivate;

final class _GBufferedOutputStreamPrivate extends ffi.Opaque {}

final class _GCancellable extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GCancellablePrivate> priv;
}

typedef GCancellablePrivate = _GCancellablePrivate;

final class _GCancellablePrivate extends ffi.Opaque {}

final class _GCharsetConverter extends ffi.Opaque {}

final class _GConverter extends ffi.Opaque {}

final class _GConverterInputStream extends ffi.Struct {
  external GFilterInputStream parent_instance;

  external ffi.Pointer<GConverterInputStreamPrivate> priv;
}

typedef GConverterInputStreamPrivate = _GConverterInputStreamPrivate;

final class _GConverterInputStreamPrivate extends ffi.Opaque {}

final class _GConverterOutputStream extends ffi.Struct {
  external GFilterOutputStream parent_instance;

  external ffi.Pointer<GConverterOutputStreamPrivate> priv;
}

typedef GConverterOutputStreamPrivate = _GConverterOutputStreamPrivate;

final class _GConverterOutputStreamPrivate extends ffi.Opaque {}

final class _GDatagramBased extends ffi.Opaque {}

final class _GDataInputStream extends ffi.Struct {
  external GBufferedInputStream parent_instance;

  external ffi.Pointer<GDataInputStreamPrivate> priv;
}

typedef GBufferedInputStream = _GBufferedInputStream;
typedef GDataInputStreamPrivate = _GDataInputStreamPrivate;

final class _GDataInputStreamPrivate extends ffi.Opaque {}

final class _GSimplePermission extends ffi.Opaque {}

final class _GZlibCompressor extends ffi.Opaque {}

final class _GZlibDecompressor extends ffi.Opaque {}

/// GSimpleActionGroup:
///
/// The #GSimpleActionGroup structure contains private data and should only be accessed using the provided API.
///
/// Since: 2.28
final class _GSimpleActionGroup extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSimpleActionGroupPrivate> priv;
}

typedef GSimpleActionGroupPrivate = _GSimpleActionGroupPrivate;

final class _GSimpleActionGroupPrivate extends ffi.Opaque {}

final class _GRemoteActionGroup extends ffi.Opaque {}

final class _GDBusActionGroup extends ffi.Opaque {}

final class _GActionMap extends ffi.Opaque {}

final class _GActionGroup extends ffi.Opaque {}

final class _GPropertyAction extends ffi.Opaque {}

final class _GSimpleAction extends ffi.Opaque {}

final class _GAction extends ffi.Opaque {}

final class _GApplication extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GApplicationPrivate> priv;
}

typedef GApplicationPrivate = _GApplicationPrivate;

final class _GApplicationPrivate extends ffi.Opaque {}

final class _GApplicationCommandLine extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GApplicationCommandLinePrivate> priv;
}

typedef GApplicationCommandLinePrivate = _GApplicationCommandLinePrivate;

final class _GApplicationCommandLinePrivate extends ffi.Opaque {}

final class _GSettingsBackend extends ffi.Opaque {}

final class _GSettings extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSettingsPrivate> priv;
}

typedef GSettingsPrivate = _GSettingsPrivate;

final class _GSettingsPrivate extends ffi.Opaque {}

final class _GPermission extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GPermissionPrivate> priv;
}

typedef GPermissionPrivate = _GPermissionPrivate;

final class _GPermissionPrivate extends ffi.Opaque {}

final class _GMenuModel extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GMenuModelPrivate> priv;
}

typedef GMenuModelPrivate = _GMenuModelPrivate;

final class _GMenuModelPrivate extends ffi.Opaque {}

final class _GNotification extends ffi.Opaque {}

final class _GDrive extends ffi.Opaque {}

final class _GFileEnumerator extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GFileEnumeratorPrivate> priv;
}

typedef GFileEnumeratorPrivate = _GFileEnumeratorPrivate;

final class _GFileEnumeratorPrivate extends ffi.Opaque {}

/// GFileMonitor:
///
/// Watches for changes to a file.
final class _GFileMonitor extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GFileMonitorPrivate> priv;
}

typedef GFileMonitorPrivate = _GFileMonitorPrivate;

final class _GFileMonitorPrivate extends ffi.Opaque {}

final class _GFile extends ffi.Opaque {}

final class _GFileInfo extends ffi.Opaque {}

final class _GFileAttributeMatcher extends ffi.Opaque {}

/// GFileAttributeInfo:
/// @name: the name of the attribute.
/// @type: the #GFileAttributeType type of the attribute.
/// @flags: a set of #GFileAttributeInfoFlags.
///
/// Information about a specific attribute.
final class _GFileAttributeInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int flags;
}

/// GFileAttributeInfoList:
/// @infos: an array of #GFileAttributeInfos.
/// @n_infos: the number of values in the array.
///
/// Acts as a lightweight registry for possible valid file attributes.
/// The registry stores Key-Value pair formats as #GFileAttributeInfos.
final class _GFileAttributeInfoList extends ffi.Struct {
  external ffi.Pointer<GFileAttributeInfo> infos;

  @ffi.Int()
  external int n_infos;
}

typedef GFileAttributeInfo = _GFileAttributeInfo;

final class _GFileDescriptorBased extends ffi.Opaque {}

final class _GFileInputStream extends ffi.Struct {
  external GInputStream parent_instance;

  external ffi.Pointer<GFileInputStreamPrivate> priv;
}

typedef GFileInputStreamPrivate = _GFileInputStreamPrivate;

final class _GFileInputStreamPrivate extends ffi.Opaque {}

final class _GFileOutputStream extends ffi.Struct {
  external GOutputStream parent_instance;

  external ffi.Pointer<GFileOutputStreamPrivate> priv;
}

typedef GFileOutputStreamPrivate = _GFileOutputStreamPrivate;

final class _GFileOutputStreamPrivate extends ffi.Opaque {}

final class _GFileIOStream extends ffi.Struct {
  external GIOStream parent_instance;

  external ffi.Pointer<GFileIOStreamPrivate> priv;
}

typedef GIOStream = _GIOStream;

/// GIOStream:
///
/// Base class for read-write streams.
final class _GIOStream extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GIOStreamPrivate> priv;
}

typedef GIOStreamPrivate = _GIOStreamPrivate;

final class _GIOStreamPrivate extends ffi.Opaque {}

typedef GFileIOStreamPrivate = _GFileIOStreamPrivate;

final class _GFileIOStreamPrivate extends ffi.Opaque {}

final class _GFileIcon extends ffi.Opaque {}

final class _GFilenameCompleter extends ffi.Opaque {}

final class _GIcon extends ffi.Opaque {}

final class _GInetAddress extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GInetAddressPrivate> priv;
}

typedef GInetAddressPrivate = _GInetAddressPrivate;

final class _GInetAddressPrivate extends ffi.Opaque {}

final class _GInetAddressMask extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GInetAddressMaskPrivate> priv;
}

typedef GInetAddressMaskPrivate = _GInetAddressMaskPrivate;

final class _GInetAddressMaskPrivate extends ffi.Opaque {}

final class _GInetSocketAddress extends ffi.Struct {
  external GSocketAddress parent_instance;

  external ffi.Pointer<GInetSocketAddressPrivate> priv;
}

typedef GSocketAddress = _GSocketAddress;

final class _GSocketAddress extends ffi.Struct {
  external GObject parent_instance;
}

typedef GInetSocketAddressPrivate = _GInetSocketAddressPrivate;

final class _GInetSocketAddressPrivate extends ffi.Opaque {}

final class _GNativeSocketAddress extends ffi.Struct {
  external GSocketAddress parent_instance;

  external ffi.Pointer<GNativeSocketAddressPrivate> priv;
}

typedef GNativeSocketAddressPrivate = _GNativeSocketAddressPrivate;

final class _GNativeSocketAddressPrivate extends ffi.Opaque {}

final class _GInitable extends ffi.Opaque {}

final class _GIOModule extends ffi.Opaque {}

final class _GIOExtensionPoint extends ffi.Opaque {}

final class _GIOExtension extends ffi.Opaque {}

final class _GIOSchedulerJob extends ffi.Opaque {}

final class _GIOStreamAdapter extends ffi.Opaque {}

final class _GLoadableIcon extends ffi.Opaque {}

final class _GBytesIcon extends ffi.Opaque {}

final class _GMemoryInputStream extends ffi.Struct {
  external GInputStream parent_instance;

  external ffi.Pointer<GMemoryInputStreamPrivate> priv;
}

typedef GMemoryInputStreamPrivate = _GMemoryInputStreamPrivate;

final class _GMemoryInputStreamPrivate extends ffi.Opaque {}

final class _GMemoryOutputStream extends ffi.Struct {
  external GOutputStream parent_instance;

  external ffi.Pointer<GMemoryOutputStreamPrivate> priv;
}

typedef GMemoryOutputStreamPrivate = _GMemoryOutputStreamPrivate;

final class _GMemoryOutputStreamPrivate extends ffi.Opaque {}

final class _GMount extends ffi.Opaque {}

final class _GMountOperation extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GMountOperationPrivate> priv;
}

typedef GMountOperationPrivate = _GMountOperationPrivate;

final class _GMountOperationPrivate extends ffi.Opaque {}

final class _GNetworkAddress extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GNetworkAddressPrivate> priv;
}

typedef GNetworkAddressPrivate = _GNetworkAddressPrivate;

final class _GNetworkAddressPrivate extends ffi.Opaque {}

final class _GNetworkMonitor extends ffi.Opaque {}

final class _GNetworkService extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GNetworkServicePrivate> priv;
}

typedef GNetworkServicePrivate = _GNetworkServicePrivate;

final class _GNetworkServicePrivate extends ffi.Opaque {}

final class _GSimpleIOStream extends ffi.Opaque {}

final class _GPollableInputStream extends ffi.Opaque {}

final class _GPollableOutputStream extends ffi.Opaque {}

final class _GResolver extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GResolverPrivate> priv;
}

typedef GResolverPrivate = _GResolverPrivate;

final class _GResolverPrivate extends ffi.Opaque {}

final class _GResource extends ffi.Opaque {}

final class _GSeekable extends ffi.Opaque {}

final class _GSimpleAsyncResult extends ffi.Opaque {}

final class _GSocket extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSocketPrivate> priv;
}

typedef GSocketPrivate = _GSocketPrivate;

final class _GSocketPrivate extends ffi.Opaque {}

final class _GSocketControlMessage extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSocketControlMessagePrivate> priv;
}

typedef GSocketControlMessagePrivate = _GSocketControlMessagePrivate;

final class _GSocketControlMessagePrivate extends ffi.Opaque {}

final class _GSocketClient extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSocketClientPrivate> priv;
}

typedef GSocketClientPrivate = _GSocketClientPrivate;

final class _GSocketClientPrivate extends ffi.Opaque {}

final class _GSocketConnection extends ffi.Struct {
  external GIOStream parent_instance;

  external ffi.Pointer<GSocketConnectionPrivate> priv;
}

typedef GSocketConnectionPrivate = _GSocketConnectionPrivate;

final class _GSocketConnectionPrivate extends ffi.Opaque {}

final class _GSocketListener extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSocketListenerPrivate> priv;
}

typedef GSocketListenerPrivate = _GSocketListenerPrivate;

final class _GSocketListenerPrivate extends ffi.Opaque {}

final class _GSocketService extends ffi.Struct {
  external GSocketListener parent_instance;

  external ffi.Pointer<GSocketServicePrivate> priv;
}

/// GSocketListener:
///
/// A helper class for network servers to listen for and accept connections.
///
/// Since: 2.22
typedef GSocketListener = _GSocketListener;
typedef GSocketServicePrivate = _GSocketServicePrivate;

final class _GSocketServicePrivate extends ffi.Opaque {}

final class _GSocketAddressEnumerator extends ffi.Struct {
  external GObject parent_instance;
}

final class _GSocketConnectable extends ffi.Opaque {}

final class _GSrvTarget extends ffi.Opaque {}

final class _GTask extends ffi.Opaque {}

final class _GTcpConnection extends ffi.Struct {
  external GSocketConnection parent_instance;

  external ffi.Pointer<GTcpConnectionPrivate> priv;
}

/// GSocketConnection:
///
/// A socket connection GIOStream object for connection-oriented sockets.
///
/// Since: 2.22
typedef GSocketConnection = _GSocketConnection;
typedef GTcpConnectionPrivate = _GTcpConnectionPrivate;

final class _GTcpConnectionPrivate extends ffi.Opaque {}

final class _GTcpWrapperConnection extends ffi.Struct {
  external GTcpConnection parent_instance;

  external ffi.Pointer<GTcpWrapperConnectionPrivate> priv;
}

/// GTcpConnection:
///
/// A #GSocketConnection for TCP/IP connections.
///
/// Since: 2.22
typedef GTcpConnection = _GTcpConnection;
typedef GTcpWrapperConnectionPrivate = _GTcpWrapperConnectionPrivate;

final class _GTcpWrapperConnectionPrivate extends ffi.Opaque {}

final class _GThreadedSocketService extends ffi.Struct {
  external GSocketService parent_instance;

  external ffi.Pointer<GThreadedSocketServicePrivate> priv;
}

/// GSocketService:
///
/// A helper class for handling accepting incoming connections in the
/// glib mainloop.
///
/// Since: 2.22
typedef GSocketService = _GSocketService;
typedef GThreadedSocketServicePrivate = _GThreadedSocketServicePrivate;

final class _GThreadedSocketServicePrivate extends ffi.Opaque {}

final class _GDtlsConnection extends ffi.Opaque {}

final class _GDtlsClientConnection extends ffi.Opaque {}

final class _GDtlsServerConnection extends ffi.Opaque {}

final class _GThemedIcon extends ffi.Opaque {}

final class _GTlsCertificate extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GTlsCertificatePrivate> priv;
}

typedef GTlsCertificatePrivate = _GTlsCertificatePrivate;

final class _GTlsCertificatePrivate extends ffi.Opaque {}

final class _GTlsClientConnection extends ffi.Opaque {}

final class _GTlsConnection extends ffi.Struct {
  external GIOStream parent_instance;

  external ffi.Pointer<GTlsConnectionPrivate> priv;
}

typedef GTlsConnectionPrivate = _GTlsConnectionPrivate;

final class _GTlsConnectionPrivate extends ffi.Opaque {}

final class _GTlsDatabase extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GTlsDatabasePrivate> priv;
}

typedef GTlsDatabasePrivate = _GTlsDatabasePrivate;

final class _GTlsDatabasePrivate extends ffi.Opaque {}

final class _GTlsFileDatabase extends ffi.Opaque {}

final class _GTlsInteraction extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GTlsInteractionPrivate> priv;
}

typedef GTlsInteractionPrivate = _GTlsInteractionPrivate;

final class _GTlsInteractionPrivate extends ffi.Opaque {}

final class _GTlsPassword extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GTlsPasswordPrivate> priv;
}

typedef GTlsPasswordPrivate = _GTlsPasswordPrivate;

final class _GTlsPasswordPrivate extends ffi.Opaque {}

final class _GTlsServerConnection extends ffi.Opaque {}

final class _GVfs extends ffi.Struct {
  external GObject parent_instance;
}

final class _GProxyResolver extends ffi.Opaque {}

final class _GProxy extends ffi.Opaque {}

final class _GProxyAddress extends ffi.Struct {
  external GInetSocketAddress parent_instance;

  external ffi.Pointer<GProxyAddressPrivate> priv;
}

typedef GInetSocketAddress = _GInetSocketAddress;
typedef GProxyAddressPrivate = _GProxyAddressPrivate;

final class _GProxyAddressPrivate extends ffi.Opaque {}

final class _GProxyAddressEnumerator extends ffi.Struct {
  external GSocketAddressEnumerator parent_instance;

  external ffi.Pointer<GProxyAddressEnumeratorPrivate> priv;
}

typedef GSocketAddressEnumerator = _GSocketAddressEnumerator;
typedef GProxyAddressEnumeratorPrivate = _GProxyAddressEnumeratorPrivate;

final class _GProxyAddressEnumeratorPrivate extends ffi.Opaque {}

final class _GVolume extends ffi.Opaque {}

final class _GVolumeMonitor extends ffi.Struct {
  external GObject parent_instance;

  external gpointer priv;
}

final class _GInputVector extends ffi.Struct {
  external gpointer buffer;

  @gsize()
  external int size;
}

final class _GInputMessage extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<GSocketAddress>> address;

  external ffi.Pointer<GInputVector> vectors;

  @guint()
  external int num_vectors;

  @gsize()
  external int bytes_received;

  @gint()
  external int flags;

  external ffi.Pointer<ffi.Pointer<ffi.Pointer<GSocketControlMessage>>>
      control_messages;

  external ffi.Pointer<guint> num_control_messages;
}

/// GInputVector:
/// @buffer: Pointer to a buffer where data will be written.
/// @size: the available size in @buffer.
///
/// Structure used for scatter/gather data input.
/// You generally pass in an array of #GInputVectors
/// and the operation will store the read data starting in the
/// first buffer, switching to the next as needed.
///
/// Since: 2.22
typedef GInputVector = _GInputVector;

/// GSocketControlMessage:
///
/// Base class for socket-type specific control messages that can be sent and
/// received over #GSocket.
typedef GSocketControlMessage = _GSocketControlMessage;

final class _GOutputVector extends ffi.Struct {
  external gconstpointer buffer;

  @gsize()
  external int size;
}

final class _GOutputMessage extends ffi.Struct {
  external ffi.Pointer<GSocketAddress> address;

  external ffi.Pointer<GOutputVector> vectors;

  @guint()
  external int num_vectors;

  @guint()
  external int bytes_sent;

  external ffi.Pointer<ffi.Pointer<GSocketControlMessage>> control_messages;

  @guint()
  external int num_control_messages;
}

/// GOutputVector:
/// @buffer: Pointer to a buffer of data to read.
/// @size: the size of @buffer.
///
/// Structure used for scatter/gather data output.
/// You generally pass in an array of #GOutputVectors
/// and the operation will use all the buffers as if they were
/// one buffer.
///
/// Since: 2.22
typedef GOutputVector = _GOutputVector;

final class _GCredentials extends ffi.Opaque {}

final class _GUnixCredentialsMessage extends ffi.Opaque {}

final class _GUnixFDList extends ffi.Opaque {}

final class _GDBusMessage extends ffi.Opaque {}

final class _GDBusConnection extends ffi.Opaque {}

/// GDBusProxy:
///
/// The #GDBusProxy structure contains only private data and
/// should only be accessed using the provided API.
///
/// Since: 2.26
final class _GDBusProxy extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusProxyPrivate> priv;
}

typedef GDBusProxyPrivate = _GDBusProxyPrivate;

final class _GDBusProxyPrivate extends ffi.Opaque {}

final class _GDBusMethodInvocation extends ffi.Opaque {}

final class _GDBusServer extends ffi.Opaque {}

final class _GDBusAuthObserver extends ffi.Opaque {}

/// GDBusErrorEntry:
/// @error_code: An error code.
/// @dbus_error_name: The D-Bus error name to associate with @error_code.
///
/// Struct used in g_dbus_error_register_error_domain().
///
/// Since: 2.26
final class _GDBusErrorEntry extends ffi.Struct {
  @gint()
  external int error_code;

  external ffi.Pointer<gchar> dbus_error_name;
}

/// GDBusInterfaceVTable:
/// @method_call: Function for handling incoming method calls.
/// @get_property: Function for getting a property.
/// @set_property: Function for setting a property.
///
/// Virtual table for handling properties and method calls for a D-Bus
/// interface.
///
/// Since 2.38, if you want to handle getting/setting D-Bus properties
/// asynchronously, give %NULL as your get_property() or set_property()
/// function. The D-Bus call will be directed to your @method_call function,
/// with the provided @interface_name set to "org.freedesktop.DBus.Properties".
///
/// Ownership of the #GDBusMethodInvocation object passed to the
/// method_call() function is transferred to your handler; you must
/// call one of the methods of #GDBusMethodInvocation to return a reply
/// (possibly empty), or an error. These functions also take ownership
/// of the passed-in invocation object, so unless the invocation
/// object has otherwise been referenced, it will be then be freed.
/// Calling one of these functions may be done within your
/// method_call() implementation but it also can be done at a later
/// point to handle the method asynchronously.
///
/// The usual checks on the validity of the calls is performed. For
/// `Get` calls, an error is automatically returned if the property does
/// not exist or the permissions do not allow access. The same checks are
/// performed for `Set` calls, and the provided value is also checked for
/// being the correct type.
///
/// For both `Get` and `Set` calls, the #GDBusMethodInvocation
/// passed to the @method_call handler can be queried with
/// g_dbus_method_invocation_get_property_info() to get a pointer
/// to the #GDBusPropertyInfo of the property.
///
/// If you have readable properties specified in your interface info,
/// you must ensure that you either provide a non-%NULL @get_property()
/// function or provide implementations of both the `Get` and `GetAll`
/// methods on org.freedesktop.DBus.Properties interface in your @method_call
/// function. Note that the required return type of the `Get` call is
/// `(v)`, not the type of the property. `GetAll` expects a return value
/// of type `a{sv}`.
///
/// If you have writable properties specified in your interface info,
/// you must ensure that you either provide a non-%NULL @set_property()
/// function or provide an implementation of the `Set` call. If implementing
/// the call, you must return the value of type %G_VARIANT_TYPE_UNIT.
///
/// Since: 2.26
final class _GDBusInterfaceVTable extends ffi.Struct {
  external GDBusInterfaceMethodCallFunc method_call;

  external GDBusInterfaceGetPropertyFunc get_property;

  external GDBusInterfaceSetPropertyFunc set_property;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

/// GDBusInterfaceMethodCallFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that the method was invoked on.
/// @interface_name: The D-Bus interface name the method was invoked on.
/// @method_name: The name of the method that was invoked.
/// @parameters: A #GVariant tuple with parameters.
/// @invocation: (transfer full): A #GDBusMethodInvocation object that must be used to return a value or error.
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_object().
///
/// The type of the @method_call function in #GDBusInterfaceVTable.
///
/// Since: 2.26
typedef GDBusInterfaceMethodCallFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusInterfaceMethodCallFuncFunction>>;
typedef GDBusInterfaceMethodCallFuncFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GDBusMethodInvocation> invocation,
    gpointer user_data);
typedef DartGDBusInterfaceMethodCallFuncFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> method_name,
    ffi.Pointer<GVariant> parameters,
    ffi.Pointer<GDBusMethodInvocation> invocation,
    gpointer user_data);
typedef GDBusConnection = _GDBusConnection;
typedef GDBusMethodInvocation = _GDBusMethodInvocation;

/// GDBusInterfaceGetPropertyFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that the method was invoked on.
/// @interface_name: The D-Bus interface name for the property.
/// @property_name: The name of the property to get the value of.
/// @error: Return location for error.
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_object().
///
/// The type of the @get_property function in #GDBusInterfaceVTable.
///
/// Returns: A #GVariant with the value for @property_name or %NULL if
/// @error is set. If the returned #GVariant is floating, it is
/// consumed - otherwise its reference count is decreased by one.
///
/// Since: 2.26
typedef GDBusInterfaceGetPropertyFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusInterfaceGetPropertyFuncFunction>>;
typedef GDBusInterfaceGetPropertyFuncFunction = ffi.Pointer<GVariant> Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<ffi.Pointer<GError>> error,
    gpointer user_data);

/// GDBusInterfaceSetPropertyFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that the method was invoked on.
/// @interface_name: The D-Bus interface name for the property.
/// @property_name: The name of the property to get the value of.
/// @value: The value to set the property to.
/// @error: Return location for error.
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_object().
///
/// The type of the @set_property function in #GDBusInterfaceVTable.
///
/// Returns: %TRUE if the property was set to @value, %FALSE if @error is set.
///
/// Since: 2.26
typedef GDBusInterfaceSetPropertyFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusInterfaceSetPropertyFuncFunction>>;
typedef GDBusInterfaceSetPropertyFuncFunction = gboolean Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GVariant> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
    gpointer user_data);
typedef DartGDBusInterfaceSetPropertyFuncFunction = Dartgint Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> property_name,
    ffi.Pointer<GVariant> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
    gpointer user_data);

/// GDBusSubtreeVTable:
/// @enumerate: Function for enumerating child nodes.
/// @introspect: Function for introspecting a child node.
/// @dispatch: Function for dispatching a remote call on a child node.
///
/// Virtual table for handling subtrees registered with g_dbus_connection_register_subtree().
///
/// Since: 2.26
final class _GDBusSubtreeVTable extends ffi.Struct {
  external GDBusSubtreeEnumerateFunc enumerate;

  external GDBusSubtreeIntrospectFunc introspect;

  external GDBusSubtreeDispatchFunc dispatch;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

/// GDBusSubtreeEnumerateFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that was registered with g_dbus_connection_register_subtree().
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
///
/// The type of the @enumerate function in #GDBusSubtreeVTable.
///
/// This function is called when generating introspection data and also
/// when preparing to dispatch incoming messages in the event that the
/// %G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is not
/// specified (ie: to verify that the object path is valid).
///
/// Hierarchies are not supported; the items that you return should not
/// contain the `/` character.
///
/// The return value will be freed with g_strfreev().
///
/// Returns: (array zero-terminated=1) (transfer full): A newly allocated array of strings for node names that are children of @object_path.
///
/// Since: 2.26
typedef GDBusSubtreeEnumerateFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusSubtreeEnumerateFuncFunction>>;
typedef GDBusSubtreeEnumerateFuncFunction
    = ffi.Pointer<ffi.Pointer<gchar>> Function(
        ffi.Pointer<GDBusConnection> connection,
        ffi.Pointer<gchar> sender,
        ffi.Pointer<gchar> object_path,
        gpointer user_data);

/// GDBusSubtreeIntrospectFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that was registered with g_dbus_connection_register_subtree().
/// @node: A node that is a child of @object_path (relative to @object_path) or %NULL for the root of the subtree.
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
///
/// The type of the @introspect function in #GDBusSubtreeVTable.
///
/// Subtrees are flat.  @node, if non-%NULL, is always exactly one
/// segment of the object path (ie: it never contains a slash).
///
/// This function should return %NULL to indicate that there is no object
/// at this node.
///
/// If this function returns non-%NULL, the return value is expected to
/// be a %NULL-terminated array of pointers to #GDBusInterfaceInfo
/// structures describing the interfaces implemented by @node.  This
/// array will have g_dbus_interface_info_unref() called on each item
/// before being freed with g_free().
///
/// The difference between returning %NULL and an array containing zero
/// items is that the standard DBus interfaces will returned to the
/// remote introspector in the empty array case, but not in the %NULL
/// case.
///
/// Returns: (array zero-terminated=1) (nullable) (transfer full): A %NULL-terminated array of pointers to #GDBusInterfaceInfo, or %NULL.
///
/// Since: 2.26
typedef GDBusSubtreeIntrospectFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusSubtreeIntrospectFuncFunction>>;
typedef GDBusSubtreeIntrospectFuncFunction
    = ffi.Pointer<ffi.Pointer<GDBusInterfaceInfo>> Function(
        ffi.Pointer<GDBusConnection> connection,
        ffi.Pointer<gchar> sender,
        ffi.Pointer<gchar> object_path,
        ffi.Pointer<gchar> node,
        gpointer user_data);
typedef GDBusInterfaceInfo = _GDBusInterfaceInfo;

/// GDBusInterfaceInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @name: The name of the D-Bus interface, e.g. "org.freedesktop.DBus.Properties".
/// @methods: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusMethodInfo structures or %NULL if there are no methods.
/// @signals: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusSignalInfo structures or %NULL if there are no signals.
/// @properties: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusPropertyInfo structures or %NULL if there are no properties.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about a D-Bus interface.
///
/// Since: 2.26
final class _GDBusInterfaceInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<ffi.Pointer<GDBusMethodInfo>> methods;

  external ffi.Pointer<ffi.Pointer<GDBusSignalInfo>> signals;

  external ffi.Pointer<ffi.Pointer<GDBusPropertyInfo>> properties;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

typedef GDBusMethodInfo = _GDBusMethodInfo;

/// GDBusMethodInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @name: The name of the D-Bus method, e.g. @RequestName.
/// @in_args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no in arguments.
/// @out_args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no out arguments.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about a method on an D-Bus interface.
///
/// Since: 2.26
final class _GDBusMethodInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<ffi.Pointer<GDBusArgInfo>> in_args;

  external ffi.Pointer<ffi.Pointer<GDBusArgInfo>> out_args;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

typedef GDBusArgInfo = _GDBusArgInfo;

/// GDBusArgInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @name: Name of the argument, e.g. @unix_user_id.
/// @signature: D-Bus signature of the argument (a single complete type).
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about an argument for a method or a signal.
///
/// Since: 2.26
final class _GDBusArgInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<gchar> signature;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

typedef GDBusAnnotationInfo = _GDBusAnnotationInfo;

/// GDBusAnnotationInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @key: The name of the annotation, e.g. "org.freedesktop.DBus.Deprecated".
/// @value: The value of the annotation.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about an annotation.
///
/// Since: 2.26
final class _GDBusAnnotationInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> key;

  external ffi.Pointer<gchar> value;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo1>> annotations;
}

typedef GDBusAnnotationInfo1 = _GDBusAnnotationInfo;
typedef GDBusSignalInfo = _GDBusSignalInfo;

/// GDBusSignalInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @name: The name of the D-Bus signal, e.g. "NameOwnerChanged".
/// @args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no arguments.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about a signal on a D-Bus interface.
///
/// Since: 2.26
final class _GDBusSignalInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<ffi.Pointer<GDBusArgInfo>> args;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

typedef GDBusPropertyInfo = _GDBusPropertyInfo;

/// GDBusPropertyInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @name: The name of the D-Bus property, e.g. "SupportedFilesystems".
/// @signature: The D-Bus signature of the property (a single complete type).
/// @flags: Access control flags for the property.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about a D-Bus property on a D-Bus interface.
///
/// Since: 2.26
final class _GDBusPropertyInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> name;

  external ffi.Pointer<gchar> signature;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

/// GDBusSubtreeDispatchFunc:
/// @connection: A #GDBusConnection.
/// @sender: The unique bus name of the remote caller.
/// @object_path: The object path that was registered with g_dbus_connection_register_subtree().
/// @interface_name: The D-Bus interface name that the method call or property access is for.
/// @node: A node that is a child of @object_path (relative to @object_path) or %NULL for the root of the subtree.
/// @out_user_data: (nullable) (not optional): Return location for user data to pass to functions in the returned #GDBusInterfaceVTable.
/// @user_data: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
///
/// The type of the @dispatch function in #GDBusSubtreeVTable.
///
/// Subtrees are flat.  @node, if non-%NULL, is always exactly one
/// segment of the object path (ie: it never contains a slash).
///
/// Returns: (nullable): A #GDBusInterfaceVTable or %NULL if you don't want to handle the methods.
///
/// Since: 2.26
typedef GDBusSubtreeDispatchFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusSubtreeDispatchFuncFunction>>;
typedef GDBusSubtreeDispatchFuncFunction
    = ffi.Pointer<GDBusInterfaceVTable> Function(
        ffi.Pointer<GDBusConnection> connection,
        ffi.Pointer<gchar> sender,
        ffi.Pointer<gchar> object_path,
        ffi.Pointer<gchar> interface_name,
        ffi.Pointer<gchar> node,
        ffi.Pointer<gpointer> out_user_data,
        gpointer user_data);
typedef GDBusInterfaceVTable = _GDBusInterfaceVTable;

/// GDBusNodeInfo:
/// @ref_count: The reference count or -1 if statically allocated.
/// @path: The path of the node or %NULL if omitted. Note that this may be a relative path. See the D-Bus specification for more details.
/// @interfaces: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusInterfaceInfo structures or %NULL if there are no interfaces.
/// @nodes: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusNodeInfo structures or %NULL if there are no nodes.
/// @annotations: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
///
/// Information about nodes in a remote object hierarchy.
///
/// Since: 2.26
final class _GDBusNodeInfo extends ffi.Struct {
  @gint()
  external int ref_count;

  external ffi.Pointer<gchar> path;

  external ffi.Pointer<ffi.Pointer<GDBusInterfaceInfo>> interfaces;

  external ffi.Pointer<ffi.Pointer<GDBusNodeInfo>> nodes;

  external ffi.Pointer<ffi.Pointer<GDBusAnnotationInfo>> annotations;
}

typedef GDBusNodeInfo = _GDBusNodeInfo;

final class _GDBusInterface extends ffi.Opaque {}

/// GDBusInterfaceSkeleton:
///
/// The #GDBusInterfaceSkeleton structure contains private data and should
/// only be accessed using the provided API.
///
/// Since: 2.30
final class _GDBusInterfaceSkeleton extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusInterfaceSkeletonPrivate> priv;
}

typedef GDBusInterfaceSkeletonPrivate = _GDBusInterfaceSkeletonPrivate;

final class _GDBusInterfaceSkeletonPrivate extends ffi.Opaque {}

final class _GDBusObject extends ffi.Opaque {}

/// GDBusObjectSkeleton:
///
/// The #GDBusObjectSkeleton structure contains private data and should only be
/// accessed using the provided API.
///
/// Since: 2.30
final class _GDBusObjectSkeleton extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusObjectSkeletonPrivate> priv;
}

typedef GDBusObjectSkeletonPrivate = _GDBusObjectSkeletonPrivate;

final class _GDBusObjectSkeletonPrivate extends ffi.Opaque {}

/// GDBusObjectProxy:
///
/// The #GDBusObjectProxy structure contains private data and should
/// only be accessed using the provided API.
///
/// Since: 2.30
final class _GDBusObjectProxy extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusObjectProxyPrivate> priv;
}

typedef GDBusObjectProxyPrivate = _GDBusObjectProxyPrivate;

final class _GDBusObjectProxyPrivate extends ffi.Opaque {}

final class _GDBusObjectManager extends ffi.Opaque {}

/// GDBusObjectManagerClient:
///
/// The #GDBusObjectManagerClient structure contains private data and should
/// only be accessed using the provided API.
///
/// Since: 2.30
final class _GDBusObjectManagerClient extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusObjectManagerClientPrivate> priv;
}

typedef GDBusObjectManagerClientPrivate = _GDBusObjectManagerClientPrivate;

final class _GDBusObjectManagerClientPrivate extends ffi.Opaque {}

/// GDBusObjectManagerServer:
///
/// The #GDBusObjectManagerServer structure contains private data and should
/// only be accessed using the provided API.
///
/// Since: 2.30
final class _GDBusObjectManagerServer extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GDBusObjectManagerServerPrivate> priv;
}

typedef GDBusObjectManagerServerPrivate = _GDBusObjectManagerServerPrivate;

final class _GDBusObjectManagerServerPrivate extends ffi.Opaque {}

final class _GTestDBus extends ffi.Opaque {}

final class _GSubprocess extends ffi.Opaque {}

final class _GSubprocessLauncher extends ffi.Opaque {}

final class _GActionInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GAction> action)>> get_name;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GVariantType> Function(ffi.Pointer<GAction> action)>>
      get_parameter_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GVariantType> Function(ffi.Pointer<GAction> action)>>
      get_state_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GAction> action)>>
      get_state_hint;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAction> action)>>
      get_enabled;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<GAction> action)>>
      get_state;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GAction> action, ffi.Pointer<GVariant> value)>>
      change_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAction> action,
              ffi.Pointer<GVariant> parameter)>> activate;
}

typedef GAction = _GAction;

final class _GActionGroupInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> has_action;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GActionGroup> action_group)>> list_actions;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> get_action_enabled;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> get_action_parameter_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> get_action_state_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> get_action_state_hint;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> get_action_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<GVariant> value)>> change_action_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<GVariant> parameter)>> activate_action;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> action_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name)>> action_removed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name,
              gboolean enabled)>> action_enabled_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<GVariant> state)>> action_state_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GActionGroup> action_group,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<gboolean> enabled,
              ffi.Pointer<ffi.Pointer<GVariantType>> parameter_type,
              ffi.Pointer<ffi.Pointer<GVariantType>> state_type,
              ffi.Pointer<ffi.Pointer<GVariant>> state_hint,
              ffi.Pointer<ffi.Pointer<GVariant>> state)>> query_action;
}

typedef GActionGroup = _GActionGroup;

final class _GActionMapInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GAction> Function(ffi.Pointer<GActionMap> action_map,
              ffi.Pointer<gchar> action_name)>> lookup_action;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionMap> action_map,
              ffi.Pointer<GAction> action)>> add_action;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GActionMap> action_map,
              ffi.Pointer<gchar> action_name)>> remove_action;
}

typedef GActionMap = _GActionMap;

final class _GActionEntry extends ffi.Struct {
  external ffi.Pointer<gchar> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAction> action,
              ffi.Pointer<GVariant> parameter, gpointer user_data)>> activate;

  external ffi.Pointer<gchar> parameter_type;

  external ffi.Pointer<gchar> state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSimpleAction> action,
              ffi.Pointer<GVariant> value, gpointer user_data)>> change_state;

  @ffi.Array.multi([3])
  external ffi.Array<gsize> padding;
}

typedef GSimpleAction = _GSimpleAction;
typedef GActionEntry = _GActionEntry;

final class _GAppLaunchContextClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<GAppInfo> info,
              ffi.Pointer<GList> files)>> get_display;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<GAppInfo> info,
              ffi.Pointer<GList> files)>> get_startup_notify_id;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<ffi.Char> startup_notify_id)>> launch_failed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<GAppInfo> info,
              ffi.Pointer<GVariant> platform_data)>> launched;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<GAppInfo> info,
              ffi.Pointer<GVariant> platform_data)>> launch_started;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;
}

typedef GAppLaunchContext = _GAppLaunchContext;
typedef GAppInfo = _GAppInfo;

final class _GAppInfoIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GAppInfo> Function(ffi.Pointer<GAppInfo> appinfo)>> dup;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAppInfo> appinfo1,
              ffi.Pointer<GAppInfo> appinfo2)>> equal;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_id;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_name;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_description;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_executable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<GAppInfo> appinfo)>> get_icon;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<GList> files,
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<ffi.Pointer<GError>> error)>> launch;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      supports_uris;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      supports_files;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<GList> uris,
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<ffi.Pointer<GError>> error)>> launch_uris;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      should_show;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<ffi.Char> content_type,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_as_default_for_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GAppInfo> appinfo,
                  ffi.Pointer<ffi.Char> extension1,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      set_as_default_for_extension;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<ffi.Char> content_type,
              ffi.Pointer<ffi.Pointer<GError>> error)>> add_supports_type;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      can_remove_supports_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<ffi.Char> content_type,
              ffi.Pointer<ffi.Pointer<GError>> error)>> remove_supports_type;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      can_delete;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GAppInfo> appinfo)>>
      do_delete;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_commandline;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GAppInfo> appinfo)>>
      get_display_name;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GAppInfo> appinfo,
                  ffi.Pointer<ffi.Char> content_type,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      set_as_last_used_for_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GAppInfo> appinfo)>> get_supported_types;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<GList> uris,
              ffi.Pointer<GAppLaunchContext> context,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> launch_uris_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAppInfo> appinfo,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> launch_uris_finish;
}

typedef GIcon = _GIcon;
typedef GCancellable = _GCancellable;

/// GAsyncReadyCallback:
/// @source_object: (nullable): the object the asynchronous operation was started with.
/// @res: a #GAsyncResult.
/// @user_data: user data passed to the callback.
///
/// Type definition for a function that will be called back when an asynchronous
/// operation within GIO has been completed. #GAsyncReadyCallback
/// callbacks from #GTask are guaranteed to be invoked in a later
/// iteration of the
/// [thread-default main context][g-main-context-push-thread-default]
/// where the #GTask was created. All other users of
/// #GAsyncReadyCallback must likewise call it asynchronously in a
/// later iteration of the main context.
///
/// The asynchronous operation is guaranteed to have held a reference to
/// @source_object from the time when the `*_async()` function was called, until
/// after this callback returns.
typedef GAsyncReadyCallback
    = ffi.Pointer<ffi.NativeFunction<GAsyncReadyCallbackFunction>>;
typedef GAsyncReadyCallbackFunction = ffi.Void Function(
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<GAsyncResult> res,
    gpointer user_data);
typedef DartGAsyncReadyCallbackFunction = void Function(
    ffi.Pointer<GObject> source_object,
    ffi.Pointer<GAsyncResult> res,
    gpointer user_data);
typedef GAsyncResult = _GAsyncResult;

final class _GAppInfoMonitor extends ffi.Opaque {}

typedef GAppInfoMonitor = _GAppInfoMonitor;

final class _GApplicationClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application)>> startup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application)>> activate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GApplication> application,
              ffi.Pointer<ffi.Pointer<GFile>> files,
              gint n_files,
              ffi.Pointer<gchar> hint)>> open;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GApplication> application,
              ffi.Pointer<GApplicationCommandLine> command_line)>> command_line;

  /// GApplicationClass::local_command_line:
  /// @application: a #GApplication
  /// @arguments: (inout) (array zero-terminated=1): array of command line arguments
  /// @exit_status: (out): exit status to fill after processing the command line.
  ///
  /// This virtual function is always invoked in the local instance. It
  /// gets passed a pointer to a %NULL-terminated copy of @argv and is
  /// expected to remove arguments that it handled (shifting up remaining
  /// arguments).
  ///
  /// The last argument to local_command_line() is a pointer to the @status
  /// variable which can used to set the exit status that is returned from
  /// g_application_run().
  ///
  /// See g_application_run() for more details on #GApplication startup.
  ///
  /// Returns: %TRUE if the commandline has been completely handled
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GApplication> application,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<gchar>>> arguments,
              ffi.Pointer<ffi.Int> exit_status)>> local_command_line;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application,
              ffi.Pointer<GVariant> platform_data)>> before_emit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application,
              ffi.Pointer<GVariant> platform_data)>> after_emit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application,
              ffi.Pointer<GVariantBuilder> builder)>> add_platform_data;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GApplication> application)>>
      quit_mainloop;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GApplication> application)>>
      run_mainloop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplication> application)>> shutdown;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GApplication> application,
              ffi.Pointer<GDBusConnection> connection,
              ffi.Pointer<gchar> object_path,
              ffi.Pointer<ffi.Pointer<GError>> error)>> dbus_register;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GApplication> application,
              ffi.Pointer<GDBusConnection> connection,
              ffi.Pointer<gchar> object_path)>> dbus_unregister;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GApplication> application,
              ffi.Pointer<GVariantDict> options)>> handle_local_options;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GApplication> application)>> name_lost;

  @ffi.Array.multi([7])
  external ffi.Array<gpointer> padding;
}

typedef GApplication = _GApplication;

/// GFile:
///
/// A handle to an object implementing the #GFileIface interface.
/// Generally stores a location within the file system. Handles do not
/// necessarily represent files or directories that currently exist.
typedef GFile = _GFile;
typedef GApplicationCommandLine = _GApplicationCommandLine;
typedef GNotification = _GNotification;

final class _GApplicationCommandLineClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplicationCommandLine> cmdline,
              ffi.Pointer<gchar> message)>> print_literal;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GApplicationCommandLine> cmdline,
              ffi.Pointer<gchar> message)>> printerr_literal;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GApplicationCommandLine> cmdline)>> get_stdin;

  @ffi.Array.multi([11])
  external ffi.Array<gpointer> padding;
}

/// GInitableIface:
/// @g_iface: The parent interface.
/// @init: Initializes the object.
///
/// Provides an interface for initializing object such that initialization
/// may fail.
///
/// Since: 2.22
final class _GInitableIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GInitable> initable,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> init;
}

typedef GInitable = _GInitable;

/// GAsyncInitableIface:
/// @g_iface: The parent interface.
/// @init_async: Starts initialization of the object.
/// @init_finish: Finishes initialization of the object.
///
/// Provides an interface for asynchronous initializing object such that
/// initialization may fail.
///
/// Since: 2.22
final class _GAsyncInitableIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncInitable> initable,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> init_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAsyncInitable> initable,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> init_finish;
}

typedef GAsyncInitable = _GAsyncInitable;

/// GAsyncResultIface:
/// @g_iface: The parent interface.
/// @get_user_data: Gets the user data passed to the callback.
/// @get_source_object: Gets the source object that issued the asynchronous operation.
/// @is_tagged: Checks if a result is tagged with a particular source.
///
/// Interface definition for #GAsyncResult.
final class _GAsyncResultIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<gpointer Function(ffi.Pointer<GAsyncResult> res)>>
      get_user_data;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(ffi.Pointer<GAsyncResult> res)>>
      get_source_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAsyncResult> res, gpointer source_tag)>> is_tagged;
}

final class _GInputStreamClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> read_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream> stream,
              gsize count,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> skip;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> read_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> read_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream> stream,
              gsize count,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> skip_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> skip_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> close_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GInputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

final class _GFilterInputStreamClass extends ffi.Struct {
  external GInputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;
}

/// GInputStream:
///
/// Base class for streaming input operations.
typedef GInputStreamClass = _GInputStreamClass;

final class _GBufferedInputStreamClass extends ffi.Struct {
  external GFilterInputStreamClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GBufferedInputStream> stream,
              gssize count,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> fill;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBufferedInputStream> stream,
              gssize count,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> fill_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GBufferedInputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> fill_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GFilterInputStream:
///
/// A base class for all input streams that work on an underlying stream.
typedef GFilterInputStreamClass = _GFilterInputStreamClass;

final class _GOutputStreamClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> write_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GInputStream> source,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> splice;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> flush;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> write_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> write_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GInputStream> source,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> splice_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> splice_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> flush_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> flush_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> close_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GOutputVector> vectors,
              gsize n_vectors,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> writev_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GOutputVector> vectors,
              gsize n_vectors,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> writev_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<ffi.Pointer<GError>> error)>> writev_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved8;
}

final class _GFilterOutputStreamClass extends ffi.Struct {
  external GOutputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;
}

/// GOutputStream:
///
/// Base class for writing output.
///
/// All classes derived from GOutputStream should implement synchronous
/// writing, splicing, flushing and closing streams, but may implement
/// asynchronous versions.
typedef GOutputStreamClass = _GOutputStreamClass;

final class _GBufferedOutputStreamClass extends ffi.Struct {
  external GFilterOutputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;
}

/// GFilterOutputStream:
///
/// A base class for all output streams that work on an underlying stream.
typedef GFilterOutputStreamClass = _GFilterOutputStreamClass;
typedef GBufferedOutputStream = _GBufferedOutputStream;
typedef GBytesIcon = _GBytesIcon;

final class _GCancellableClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCancellable> cancellable)>> cancelled;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GConverterIface:
/// @g_iface: The parent interface.
/// @convert: Converts data.
/// @reset: Reverts the internal state of the converter to its initial state.
///
/// Provides an interface for converting data from one type
/// to another type. The conversion can be stateful
/// and may fail at any place.
///
/// Since: 2.24
final class _GConverterIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GConverter> converter,
              ffi.Pointer<ffi.Void> inbuf,
              gsize inbuf_size,
              ffi.Pointer<ffi.Void> outbuf,
              gsize outbuf_size,
              ffi.Int32 flags,
              ffi.Pointer<gsize> bytes_read,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<ffi.Pointer<GError>> error)>> convert;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GConverter> converter)>>
      reset;
}

typedef GConverter = _GConverter;

final class _GCharsetConverterClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GCharsetConverter = _GCharsetConverter;

final class _GConverterInputStreamClass extends ffi.Struct {
  external GFilterInputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

typedef GConverterInputStream = _GConverterInputStream;

final class _GConverterOutputStreamClass extends ffi.Struct {
  external GFilterOutputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

typedef GConverterOutputStream = _GConverterOutputStream;

final class _GCredentialsClass extends ffi.Opaque {}

typedef GCredentials = _GCredentials;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;
typedef uid_t = __uid_t;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;

/// GDatagramBasedInterface:
/// @g_iface: The parent interface.
/// @receive_messages: Virtual method for g_datagram_based_receive_messages().
/// @send_messages: Virtual method for g_datagram_based_send_messages().
/// @create_source: Virtual method for g_datagram_based_create_source().
/// @condition_check: Virtual method for g_datagram_based_condition_check().
/// @condition_wait: Virtual method for
/// g_datagram_based_condition_wait().
///
/// Provides an interface for socket-like objects which have datagram semantics,
/// following the Berkeley sockets API. The interface methods are thin wrappers
/// around the corresponding virtual methods, and no pre-processing of inputs is
/// implemented — so implementations of this API must handle all functionality
/// documented in the interface methods.
///
/// Since: 2.48
final class _GDatagramBasedInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDatagramBased> datagram_based,
              ffi.Pointer<GInputMessage> messages,
              guint num_messages,
              gint flags,
              gint64 timeout,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> receive_messages;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDatagramBased> datagram_based,
              ffi.Pointer<GOutputMessage> messages,
              guint num_messages,
              gint flags,
              gint64 timeout,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> send_messages;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GDatagramBased> datagram_based,
              ffi.Int32 condition,
              ffi.Pointer<GCancellable> cancellable)>> create_source;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GDatagramBased> datagram_based,
              ffi.Int32 condition)>> condition_check;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDatagramBased> datagram_based,
              ffi.Int32 condition,
              gint64 timeout,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> condition_wait;
}

typedef GDatagramBased = _GDatagramBased;

/// GInputMessage:
/// @address: (optional) (out) (transfer full): return location
/// for a #GSocketAddress, or %NULL
/// @vectors: (array length=num_vectors) (out): pointer to an
/// array of input vectors
/// @num_vectors: the number of input vectors pointed to by @vectors
/// @bytes_received: (out): will be set to the number of bytes that have been
/// received
/// @flags: (out): collection of #GSocketMsgFlags for the received message,
/// outputted by the call
/// @control_messages: (array length=num_control_messages) (optional)
/// (out) (transfer full): return location for a
/// caller-allocated array of #GSocketControlMessages, or %NULL
/// @num_control_messages: (out) (optional): return location for the number of
/// elements in @control_messages
///
/// Structure used for scatter/gather data input when receiving multiple
/// messages or packets in one go. You generally pass in an array of empty
/// #GInputVectors and the operation will use all the buffers as if they
/// were one buffer, and will set @bytes_received to the total number of bytes
/// received across all #GInputVectors.
///
/// This structure closely mirrors `struct mmsghdr` and `struct msghdr` from
/// the POSIX sockets API (see `man 2 recvmmsg`).
///
/// If @address is non-%NULL then it is set to the source address the message
/// was received from, and the caller must free it afterwards.
///
/// If @control_messages is non-%NULL then it is set to an array of control
/// messages received with the message (if any), and the caller must free it
/// afterwards. @num_control_messages is set to the number of elements in
/// this array, which may be zero.
///
/// Flags relevant to this message will be returned in @flags. For example,
/// `MSG_EOR` or `MSG_TRUNC`.
///
/// Since: 2.48
typedef GInputMessage = _GInputMessage;

/// GOutputMessage:
/// @address: (nullable): a #GSocketAddress, or %NULL
/// @vectors: pointer to an array of output vectors
/// @num_vectors: the number of output vectors pointed to by @vectors.
/// @bytes_sent: initialize to 0. Will be set to the number of bytes
/// that have been sent
/// @control_messages: (array length=num_control_messages) (nullable): a pointer
/// to an array of #GSocketControlMessages, or %NULL.
/// @num_control_messages: number of elements in @control_messages.
///
/// Structure used for scatter/gather data output when sending multiple
/// messages or packets in one go. You generally pass in an array of
/// #GOutputVectors and the operation will use all the buffers as if they
/// were one buffer.
///
/// If @address is %NULL then the message is sent to the default receiver
/// (as previously set by g_socket_connect()).
///
/// Since: 2.44
typedef GOutputMessage = _GOutputMessage;

final class _GDataInputStreamClass extends ffi.Struct {
  external GBufferedInputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GBufferedInputStream:
///
/// Implements #GFilterInputStream with a sized input buffer.
typedef GBufferedInputStreamClass = _GBufferedInputStreamClass;
typedef GDataInputStream = _GDataInputStream;

final class _GDataOutputStream extends ffi.Struct {
  external GFilterOutputStream parent_instance;

  external ffi.Pointer<GDataOutputStreamPrivate> priv;
}

typedef GDataOutputStreamPrivate = _GDataOutputStreamPrivate;

final class _GDataOutputStreamPrivate extends ffi.Opaque {}

final class _GDataOutputStreamClass extends ffi.Struct {
  external GFilterOutputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GDataOutputStream:
///
/// An implementation of #GBufferedOutputStream that allows for high-level
/// data manipulation of arbitrary data (including binary operations).
typedef GDataOutputStream = _GDataOutputStream;
typedef GDBusActionGroup = _GDBusActionGroup;
typedef GDBusAuthObserver = _GDBusAuthObserver;
typedef GDBusMessage = _GDBusMessage;
typedef GUnixFDList = _GUnixFDList;
typedef GDBusSubtreeVTable = _GDBusSubtreeVTable;

/// GDBusSignalCallback:
/// @connection: A #GDBusConnection.
/// @sender_name: (nullable): The unique bus name of the sender of the signal,
/// or %NULL on a peer-to-peer D-Bus connection.
/// @object_path: The object path that the signal was emitted on.
/// @interface_name: The name of the interface.
/// @signal_name: The name of the signal.
/// @parameters: A #GVariant tuple with parameters for the signal.
/// @user_data: User data passed when subscribing to the signal.
///
/// Signature for callback function used in g_dbus_connection_signal_subscribe().
///
/// Since: 2.26
typedef GDBusSignalCallback
    = ffi.Pointer<ffi.NativeFunction<GDBusSignalCallbackFunction>>;
typedef GDBusSignalCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> signal_name,
    ffi.Pointer<GVariant> parameters,
    gpointer user_data);
typedef DartGDBusSignalCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> sender_name,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    ffi.Pointer<gchar> signal_name,
    ffi.Pointer<GVariant> parameters,
    gpointer user_data);

/// GDBusMessageFilterFunction:
/// @connection: (transfer none): A #GDBusConnection.
/// @message: (transfer full): A locked #GDBusMessage that the filter function takes ownership of.
/// @incoming: %TRUE if it is a message received from the other peer, %FALSE if it is
/// a message to be sent to the other peer.
/// @user_data: User data passed when adding the filter.
///
/// Signature for function used in g_dbus_connection_add_filter().
///
/// A filter function is passed a #GDBusMessage and expected to return
/// a #GDBusMessage too. Passive filter functions that don't modify the
/// message can simply return the @message object:
/// |[
/// static GDBusMessage *
/// passive_filter (GDBusConnection *connection
/// GDBusMessage    *message,
/// gboolean         incoming,
/// gpointer         user_data)
/// {
/// // inspect @message
/// return message;
/// }
/// ]|
/// Filter functions that wants to drop a message can simply return %NULL:
/// |[
/// static GDBusMessage *
/// drop_filter (GDBusConnection *connection
/// GDBusMessage    *message,
/// gboolean         incoming,
/// gpointer         user_data)
/// {
/// if (should_drop_message)
/// {
/// g_object_unref (message);
/// message = NULL;
/// }
/// return message;
/// }
/// ]|
/// Finally, a filter function may modify a message by copying it:
/// |[
/// static GDBusMessage *
/// modifying_filter (GDBusConnection *connection
/// GDBusMessage    *message,
/// gboolean         incoming,
/// gpointer         user_data)
/// {
/// GDBusMessage *copy;
/// GError *error;
///
/// error = NULL;
/// copy = g_dbus_message_copy (message, &error);
/// // handle @error being set
/// g_object_unref (message);
///
/// // modify @copy
///
/// return copy;
/// }
/// ]|
/// If the returned #GDBusMessage is different from @message and cannot
/// be sent on @connection (it could use features, such as file
/// descriptors, not compatible with @connection), then a warning is
/// logged to standard error. Applications can
/// check this ahead of time using g_dbus_message_to_blob() passing a
/// #GDBusCapabilityFlags value obtained from @connection.
///
/// Returns: (transfer full) (nullable): A #GDBusMessage that will be freed with
/// g_object_unref() or %NULL to drop the message. Passive filter
/// functions can simply return the passed @message object.
///
/// Since: 2.26
typedef GDBusMessageFilterFunction
    = ffi.Pointer<ffi.NativeFunction<GDBusMessageFilterFunctionFunction>>;
typedef GDBusMessageFilterFunctionFunction = ffi.Pointer<GDBusMessage> Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<GDBusMessage> message,
    gboolean incoming,
    gpointer user_data);
typedef DartGDBusMessageFilterFunctionFunction
    = ffi.Pointer<GDBusMessage> Function(
        ffi.Pointer<GDBusConnection> connection,
        ffi.Pointer<GDBusMessage> message,
        Dartgint incoming,
        gpointer user_data);
typedef GDBusErrorEntry = _GDBusErrorEntry;

/// GDBusInterfaceIface:
/// @parent_iface: The parent interface.
/// @get_info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_get_info().
/// @get_object: Gets the enclosing #GDBusObject. See g_dbus_interface_get_object().
/// @set_object: Sets the enclosing #GDBusObject. See g_dbus_interface_set_object().
/// @dup_object: Gets a reference to the enclosing #GDBusObject. See g_dbus_interface_dup_object(). Added in 2.32.
///
/// Base type for D-Bus interfaces.
///
/// Since: 2.30
final class _GDBusInterfaceIface extends ffi.Struct {
  external GTypeInterface parent_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterface> interface_)>> get_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusInterface> interface_)>> get_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusInterface> interface_,
              ffi.Pointer<GDBusObject> object)>> set_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusInterface> interface_)>> dup_object;
}

typedef GDBusInterface = _GDBusInterface;
typedef GDBusObject = _GDBusObject;

/// GDBusInterfaceSkeletonClass:
/// @parent_class: The parent class.
/// @get_info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_skeleton_get_info() for details.
/// @get_vtable: Returns a #GDBusInterfaceVTable. See g_dbus_interface_skeleton_get_vtable() for details.
/// @get_properties: Returns a #GVariant with all properties. See g_dbus_interface_skeleton_get_properties().
/// @flush: Emits outstanding changes, if any. See g_dbus_interface_skeleton_flush().
/// @g_authorize_method: Signal class handler for the #GDBusInterfaceSkeleton::g-authorize-method signal.
///
/// Class structure for #GDBusInterfaceSkeleton.
///
/// Since: 2.30
final class _GDBusInterfaceSkeletonClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceInfo> Function(
              ffi.Pointer<GDBusInterfaceSkeleton> interface_)>> get_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterfaceVTable> Function(
              ffi.Pointer<GDBusInterfaceSkeleton> interface_)>> get_vtable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GDBusInterfaceSkeleton> interface_)>> get_properties;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusInterfaceSkeleton> interface_)>> flush;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> vfunc_padding;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GDBusInterfaceSkeleton> interface_,
                  ffi.Pointer<GDBusMethodInvocation> invocation)>>
      g_authorize_method;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> signal_padding;
}

typedef GDBusInterfaceSkeleton = _GDBusInterfaceSkeleton;

final class _GDBusMenuModel extends ffi.Opaque {}

typedef GDBusMenuModel = _GDBusMenuModel;

/// GBusAcquiredCallback:
/// @connection: The #GDBusConnection to a message bus.
/// @name: The name that is requested to be owned.
/// @user_data: User data passed to g_bus_own_name().
///
/// Invoked when a connection to a message bus has been obtained.
///
/// Since: 2.26
typedef GBusAcquiredCallback
    = ffi.Pointer<ffi.NativeFunction<GBusAcquiredCallbackFunction>>;
typedef GBusAcquiredCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);
typedef DartGBusAcquiredCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);

/// GBusNameAcquiredCallback:
/// @connection: The #GDBusConnection on which to acquired the name.
/// @name: The name being owned.
/// @user_data: User data passed to g_bus_own_name() or g_bus_own_name_on_connection().
///
/// Invoked when the name is acquired.
///
/// Since: 2.26
typedef GBusNameAcquiredCallback
    = ffi.Pointer<ffi.NativeFunction<GBusNameAcquiredCallbackFunction>>;
typedef GBusNameAcquiredCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);
typedef DartGBusNameAcquiredCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);

/// GBusNameLostCallback:
/// @connection: The #GDBusConnection on which to acquire the name or %NULL if
/// the connection was disconnected.
/// @name: The name being owned.
/// @user_data: User data passed to g_bus_own_name() or g_bus_own_name_on_connection().
///
/// Invoked when the name is lost or @connection has been closed.
///
/// Since: 2.26
typedef GBusNameLostCallback
    = ffi.Pointer<ffi.NativeFunction<GBusNameLostCallbackFunction>>;
typedef GBusNameLostCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);
typedef DartGBusNameLostCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);

/// GBusNameAppearedCallback:
/// @connection: The #GDBusConnection the name is being watched on.
/// @name: The name being watched.
/// @name_owner: Unique name of the owner of the name being watched.
/// @user_data: User data passed to g_bus_watch_name().
///
/// Invoked when the name being watched is known to have to have an owner.
///
/// Since: 2.26
typedef GBusNameAppearedCallback
    = ffi.Pointer<ffi.NativeFunction<GBusNameAppearedCallbackFunction>>;
typedef GBusNameAppearedCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> name_owner,
    gpointer user_data);
typedef DartGBusNameAppearedCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    ffi.Pointer<gchar> name_owner,
    gpointer user_data);

/// GBusNameVanishedCallback:
/// @connection: The #GDBusConnection the name is being watched on, or
/// %NULL.
/// @name: The name being watched.
/// @user_data: User data passed to g_bus_watch_name().
///
/// Invoked when the name being watched is known not to have to have an owner.
///
/// This is also invoked when the #GDBusConnection on which the watch was
/// established has been closed.  In that case, @connection will be
/// %NULL.
///
/// Since: 2.26
typedef GBusNameVanishedCallback
    = ffi.Pointer<ffi.NativeFunction<GBusNameVanishedCallbackFunction>>;
typedef GBusNameVanishedCallbackFunction = ffi.Void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);
typedef DartGBusNameVanishedCallbackFunction = void Function(
    ffi.Pointer<GDBusConnection> connection,
    ffi.Pointer<gchar> name,
    gpointer user_data);

/// GDBusObjectIface:
/// @parent_iface: The parent interface.
/// @get_object_path: Returns the object path. See g_dbus_object_get_object_path().
/// @get_interfaces: Returns all interfaces. See g_dbus_object_get_interfaces().
/// @get_interface: Returns an interface by name. See g_dbus_object_get_interface().
/// @interface_added: Signal handler for the #GDBusObject::interface-added signal.
/// @interface_removed: Signal handler for the #GDBusObject::interface-removed signal.
///
/// Base object type for D-Bus objects.
///
/// Since: 2.30
final class _GDBusObjectIface extends ffi.Struct {
  external GTypeInterface parent_iface;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDBusObject> object)>>
      get_object_path;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GDBusObject> object)>>
      get_interfaces;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterface> Function(ffi.Pointer<GDBusObject> object,
              ffi.Pointer<gchar> interface_name)>> get_interface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusObject> object,
              ffi.Pointer<GDBusInterface> interface_)>> interface_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusObject> object,
              ffi.Pointer<GDBusInterface> interface_)>> interface_removed;
}

/// GDBusObjectManagerIface:
/// @parent_iface: The parent interface.
/// @get_object_path: Virtual function for g_dbus_object_manager_get_object_path().
/// @get_objects: Virtual function for g_dbus_object_manager_get_objects().
/// @get_object: Virtual function for g_dbus_object_manager_get_object().
/// @get_interface: Virtual function for g_dbus_object_manager_get_interface().
/// @object_added: Signal handler for the #GDBusObjectManager::object-added signal.
/// @object_removed: Signal handler for the #GDBusObjectManager::object-removed signal.
/// @interface_added: Signal handler for the #GDBusObjectManager::interface-added signal.
/// @interface_removed: Signal handler for the #GDBusObjectManager::interface-removed signal.
///
/// Base type for D-Bus object managers.
///
/// Since: 2.30
final class _GDBusObjectManagerIface extends ffi.Struct {
  external GTypeInterface parent_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GDBusObjectManager> manager)>> get_object_path;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GDBusObjectManager> manager)>> get_objects;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusObject> Function(
              ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<gchar> object_path)>> get_object;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDBusInterface> Function(
              ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<gchar> object_path,
              ffi.Pointer<gchar> interface_name)>> get_interface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<GDBusObject> object)>> object_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<GDBusObject> object)>> object_removed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<GDBusObject> object,
              ffi.Pointer<GDBusInterface> interface_)>> interface_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusObjectManager> manager,
              ffi.Pointer<GDBusObject> object,
              ffi.Pointer<GDBusInterface> interface_)>> interface_removed;
}

typedef GDBusObjectManager = _GDBusObjectManager;

/// GDBusObjectManagerClientClass:
/// @parent_class: The parent class.
/// @interface_proxy_signal: Signal class handler for the #GDBusObjectManagerClient::interface-proxy-signal signal.
/// @interface_proxy_properties_changed: Signal class handler for the #GDBusObjectManagerClient::interface-proxy-properties-changed signal.
///
/// Class structure for #GDBusObjectManagerClient.
///
/// Since: 2.30
final class _GDBusObjectManagerClientClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusObjectManagerClient> manager,
              ffi.Pointer<GDBusObjectProxy> object_proxy,
              ffi.Pointer<GDBusProxy> interface_proxy,
              ffi.Pointer<gchar> sender_name,
              ffi.Pointer<gchar> signal_name,
              ffi.Pointer<GVariant> parameters)>> interface_proxy_signal;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDBusObjectManagerClient> manager,
                  ffi.Pointer<GDBusObjectProxy> object_proxy,
                  ffi.Pointer<GDBusProxy> interface_proxy,
                  ffi.Pointer<GVariant> changed_properties,
                  ffi.Pointer<ffi.Pointer<gchar>> invalidated_properties)>>
      interface_proxy_properties_changed;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

typedef GDBusObjectManagerClient = _GDBusObjectManagerClient;
typedef GDBusObjectProxy = _GDBusObjectProxy;
typedef GDBusProxy = _GDBusProxy;

/// GDBusProxyTypeFunc:
/// @manager: A #GDBusObjectManagerClient.
/// @object_path: The object path of the remote object.
/// @interface_name: (nullable): The interface name of the remote object or %NULL if a #GDBusObjectProxy #GType is requested.
/// @user_data: User data.
///
/// Function signature for a function used to determine the #GType to
/// use for an interface proxy (if @interface_name is not %NULL) or
/// object proxy (if @interface_name is %NULL).
///
/// This function is called in the
/// [thread-default main loop][g-main-context-push-thread-default]
/// that @manager was constructed in.
///
/// Returns: A #GType to use for the remote object. The returned type
/// must be a #GDBusProxy or #GDBusObjectProxy -derived
/// type.
///
/// Since: 2.30
typedef GDBusProxyTypeFunc
    = ffi.Pointer<ffi.NativeFunction<GDBusProxyTypeFuncFunction>>;
typedef GDBusProxyTypeFuncFunction = GType Function(
    ffi.Pointer<GDBusObjectManagerClient> manager,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    gpointer user_data);
typedef DartGDBusProxyTypeFuncFunction = Dartgsize Function(
    ffi.Pointer<GDBusObjectManagerClient> manager,
    ffi.Pointer<gchar> object_path,
    ffi.Pointer<gchar> interface_name,
    gpointer user_data);

/// GDBusObjectManagerServerClass:
/// @parent_class: The parent class.
///
/// Class structure for #GDBusObjectManagerServer.
///
/// Since: 2.30
final class _GDBusObjectManagerServerClass extends ffi.Struct {
  external GObjectClass parent_class;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

typedef GDBusObjectManagerServer = _GDBusObjectManagerServer;
typedef GDBusObjectSkeleton = _GDBusObjectSkeleton;

/// GDBusObjectProxyClass:
/// @parent_class: The parent class.
///
/// Class structure for #GDBusObjectProxy.
///
/// Since: 2.30
final class _GDBusObjectProxyClass extends ffi.Struct {
  external GObjectClass parent_class;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

/// GDBusObjectSkeletonClass:
/// @parent_class: The parent class.
/// @authorize_method: Signal class handler for the #GDBusObjectSkeleton::authorize-method signal.
///
/// Class structure for #GDBusObjectSkeleton.
///
/// Since: 2.30
final class _GDBusObjectSkeletonClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDBusObjectSkeleton> object,
              ffi.Pointer<GDBusInterfaceSkeleton> interface_,
              ffi.Pointer<GDBusMethodInvocation> invocation)>> authorize_method;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

/// GDBusProxyClass:
/// @g_properties_changed: Signal class handler for the #GDBusProxy::g-properties-changed signal.
/// @g_signal: Signal class handler for the #GDBusProxy::g-signal signal.
///
/// Class structure for #GDBusProxy.
///
/// Since: 2.26
final class _GDBusProxyClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GDBusProxy> proxy,
                  ffi.Pointer<GVariant> changed_properties,
                  ffi.Pointer<ffi.Pointer<gchar>> invalidated_properties)>>
      g_properties_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDBusProxy> proxy,
              ffi.Pointer<gchar> sender_name,
              ffi.Pointer<gchar> signal_name,
              ffi.Pointer<GVariant> parameters)>> g_signal;

  @ffi.Array.multi([32])
  external ffi.Array<gpointer> padding;
}

typedef GDBusServer = _GDBusServer;

final class _GDebugController extends ffi.Opaque {}

/// GDebugControllerInterface:
/// @g_iface: The parent interface.
///
/// The virtual function table for #GDebugController.
///
/// Since: 2.72
final class _GDebugControllerInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

typedef GDebugController = _GDebugController;

final class _GDebugControllerDBus extends ffi.Struct {
  external GObject parent_instance;
}

/// GDebugControllerDBusClass:
/// @parent_class: The parent class.
/// @authorize: Default handler for the #GDebugControllerDBus::authorize signal.
///
/// The virtual function table for #GDebugControllerDBus.
///
/// Since: 2.72
final class _GDebugControllerDBusClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDebugControllerDBus> controller,
              ffi.Pointer<GDBusMethodInvocation> invocation)>> authorize;

  @ffi.Array.multi([12])
  external ffi.Array<gpointer> padding;
}

typedef GDebugControllerDBus = _GDebugControllerDBus;

final class _GDriveIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDrive> drive)>>
      changed;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDrive> drive)>>
      disconnected;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDrive> drive)>>
      eject_button;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDrive> drive)>> get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive> drive)>> get_icon;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      has_volumes;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GDrive> drive)>> get_volumes;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      is_media_removable;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      has_media;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      is_media_check_automatic;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      can_eject;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      can_poll_for_media;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive> drive,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDrive> drive,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> eject_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive> drive,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> poll_for_media;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDrive> drive,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> poll_for_media_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GDrive> drive, ffi.Pointer<ffi.Char> kind)>>
      get_identifier;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GDrive> drive)>> enumerate_identifiers;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDrive> drive)>>
      get_start_stop_type;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      can_start;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      can_start_degraded;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive> drive,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDrive> drive,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> start_finish;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      can_stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive> drive,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDrive> drive,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> stop_finish;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDrive> drive)>>
      stop_button;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDrive> drive,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GDrive> drive,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      eject_with_operation_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GDrive> drive)>> get_sort_key;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GIcon> Function(ffi.Pointer<GDrive> drive)>>
      get_symbolic_icon;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDrive> drive)>>
      is_removable;
}

/// GDrive:
///
/// Opaque drive object.
typedef GDrive = _GDrive;
typedef GMountOperation = _GMountOperation;

/// GDtlsConnectionInterface:
/// @g_iface: The parent interface.
/// @accept_certificate: Check whether to accept a certificate.
/// @handshake: Perform a handshake operation.
/// @handshake_async: Start an asynchronous handshake operation.
/// @handshake_finish: Finish an asynchronous handshake operation.
/// @shutdown: Shut down one or both directions of the connection.
/// @shutdown_async: Start an asynchronous shutdown operation.
/// @shutdown_finish: Finish an asynchronous shutdown operation.
/// @set_advertised_protocols: Set APLN protocol list (Since: 2.60)
/// @get_negotiated_protocol: Get ALPN-negotiated protocol (Since: 2.60)
/// @get_binding_data: Retrieve TLS channel binding data (Since: 2.66)
///
/// Virtual method table for a #GDtlsConnection implementation.
///
/// Since: 2.48
final class _GDtlsConnectionInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> connection,
              ffi.Pointer<GTlsCertificate> peer_cert,
              ffi.Int32 errors)>> accept_certificate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> conn,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> handshake;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDtlsConnection> conn,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> handshake_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> conn,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> handshake_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> conn,
              gboolean shutdown_read,
              gboolean shutdown_write,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> shutdown;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDtlsConnection> conn,
              gboolean shutdown_read,
              gboolean shutdown_write,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> shutdown_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> conn,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> shutdown_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GDtlsConnection> conn,
                  ffi.Pointer<ffi.Pointer<gchar>> protocols)>>
      set_advertised_protocols;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GDtlsConnection> conn)>>
      get_negotiated_protocol;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GDtlsConnection> conn,
              ffi.Int32 type,
              ffi.Pointer<GByteArray> data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> get_binding_data;
}

typedef GDtlsConnection = _GDtlsConnection;
typedef GTlsCertificate = _GTlsCertificate;
typedef GTlsDatabase = _GTlsDatabase;
typedef GTlsInteraction = _GTlsInteraction;

/// GDtlsClientConnectionInterface:
/// @g_iface: The parent interface.
///
/// vtable for a #GDtlsClientConnection implementation.
///
/// Since: 2.48
final class _GDtlsClientConnectionInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

typedef GSocketConnectable = _GSocketConnectable;
typedef GDtlsClientConnection = _GDtlsClientConnection;

/// GDtlsServerConnectionInterface:
/// @g_iface: The parent interface.
///
/// vtable for a #GDtlsServerConnection implementation.
///
/// Since: 2.48
final class _GDtlsServerConnectionInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

/// GIconIface:
/// @g_iface: The parent interface.
/// @hash: A hash for a given #GIcon.
/// @equal: Checks if two #GIcons are equal.
/// @to_tokens: Serializes a #GIcon into tokens. The tokens must not
/// contain any whitespace. Don't implement if the #GIcon can't be
/// serialized (Since 2.20).
/// @from_tokens: Constructs a #GIcon from tokens. Set the #GError if
/// the tokens are malformed. Don't implement if the #GIcon can't be
/// serialized (Since 2.20).
/// @serialize: Serializes a #GIcon into a #GVariant. Since: 2.38
///
/// GIconIface is used to implement GIcon types for various
/// different systems. See #GThemedIcon and #GLoadableIcon for
/// examples of how to implement this interface.
final class _GIconIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi
      .Pointer<ffi.NativeFunction<guint Function(ffi.Pointer<GIcon> icon)>>
      hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GIcon> icon1, ffi.Pointer<GIcon> icon2)>> equal;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GIcon> icon,
              ffi.Pointer<GPtrArray> tokens,
              ffi.Pointer<gint> out_version)>> to_tokens;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(
              ffi.Pointer<ffi.Pointer<gchar>> tokens,
              gint num_tokens,
              gint version,
              ffi.Pointer<ffi.Pointer<GError>> error)>> from_tokens;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GIcon> icon)>> serialize;
}

final class _GEmblem extends ffi.Opaque {}

final class _GEmblemClass extends ffi.Opaque {}

/// GEmblem:
///
/// An object for Emblems
typedef GEmblem = _GEmblem;

final class _GEmblemedIcon extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GEmblemedIconPrivate> priv;
}

typedef GEmblemedIconPrivate = _GEmblemedIconPrivate;

final class _GEmblemedIconPrivate extends ffi.Opaque {}

final class _GEmblemedIconClass extends ffi.Struct {
  external GObjectClass parent_class;
}

/// GEmblemedIcon:
///
/// An implementation of #GIcon for icons with emblems.
typedef GEmblemedIcon = _GEmblemedIcon;

/// GFileIface:
/// @g_iface: The parent interface.
/// @dup: Duplicates a #GFile.
/// @hash: Creates a hash of a #GFile.
/// @equal: Checks equality of two given #GFiles.
/// @is_native: Checks to see if a file is native to the system.
/// @has_uri_scheme: Checks to see if a #GFile has a given URI scheme.
/// @get_uri_scheme: Gets the URI scheme for a #GFile.
/// @get_basename: Gets the basename for a given #GFile.
/// @get_path: Gets the current path within a #GFile.
/// @get_uri: Gets a URI for the path within a #GFile.
/// @get_parse_name: Gets the parsed name for the #GFile.
/// @get_parent: Gets the parent directory for the #GFile.
/// @prefix_matches: Checks whether a #GFile contains a specified file.
/// @get_relative_path: Gets the path for a #GFile relative to a given path.
/// @resolve_relative_path: Resolves a relative path for a #GFile to an absolute path.
/// @get_child_for_display_name: Gets the child #GFile for a given display name.
/// @enumerate_children: Gets a #GFileEnumerator with the children of a #GFile.
/// @enumerate_children_async: Asynchronously gets a #GFileEnumerator with the children of a #GFile.
/// @enumerate_children_finish: Finishes asynchronously enumerating the children.
/// @query_info: Gets the #GFileInfo for a #GFile.
/// @query_info_async: Asynchronously gets the #GFileInfo for a #GFile.
/// @query_info_finish: Finishes an asynchronous query info operation.
/// @query_filesystem_info: Gets a #GFileInfo for the file system #GFile is on.
/// @query_filesystem_info_async: Asynchronously gets a #GFileInfo for the file system #GFile is on.
/// @query_filesystem_info_finish: Finishes asynchronously getting the file system info.
/// @find_enclosing_mount: Gets a #GMount for the #GFile.
/// @find_enclosing_mount_async: Asynchronously gets the #GMount for a #GFile.
/// @find_enclosing_mount_finish: Finishes asynchronously getting the volume.
/// @set_display_name: Sets the display name for a #GFile.
/// @set_display_name_async: Asynchronously sets a #GFile's display name.
/// @set_display_name_finish: Finishes asynchronously setting a #GFile's display name.
/// @query_settable_attributes: Returns a list of #GFileAttributeInfos that can be set.
/// @_query_settable_attributes_async: Asynchronously gets a list of #GFileAttributeInfos that can be set.
/// @_query_settable_attributes_finish: Finishes asynchronously querying settable attributes.
/// @query_writable_namespaces: Returns a list of #GFileAttributeInfo namespaces that are writable.
/// @_query_writable_namespaces_async: Asynchronously gets a list of #GFileAttributeInfo namespaces that are writable.
/// @_query_writable_namespaces_finish: Finishes asynchronously querying the writable namespaces.
/// @set_attribute: Sets a #GFileAttributeInfo.
/// @set_attributes_from_info: Sets a #GFileAttributeInfo with information from a #GFileInfo.
/// @set_attributes_async: Asynchronously sets a file's attributes.
/// @set_attributes_finish: Finishes setting a file's attributes asynchronously.
/// @read_fn: Reads a file asynchronously.
/// @read_async: Asynchronously reads a file.
/// @read_finish: Finishes asynchronously reading a file.
/// @append_to: Writes to the end of a file.
/// @append_to_async: Asynchronously writes to the end of a file.
/// @append_to_finish: Finishes an asynchronous file append operation.
/// @create: Creates a new file.
/// @create_async: Asynchronously creates a file.
/// @create_finish: Finishes asynchronously creating a file.
/// @replace: Replaces the contents of a file.
/// @replace_async: Asynchronously replaces the contents of a file.
/// @replace_finish: Finishes asynchronously replacing a file.
/// @delete_file: Deletes a file.
/// @delete_file_async: Asynchronously deletes a file.
/// @delete_file_finish: Finishes an asynchronous delete.
/// @trash: Sends a #GFile to the Trash location.
/// @trash_async: Asynchronously sends a #GFile to the Trash location.
/// @trash_finish: Finishes an asynchronous file trashing operation.
/// @make_directory: Makes a directory.
/// @make_directory_async: Asynchronously makes a directory.
/// @make_directory_finish: Finishes making a directory asynchronously.
/// @make_symbolic_link: (nullable): Makes a symbolic link. %NULL if symbolic
/// links are unsupported.
/// @_make_symbolic_link_async: Asynchronously makes a symbolic link
/// @_make_symbolic_link_finish: Finishes making a symbolic link asynchronously.
/// @copy: (nullable): Copies a file. %NULL if copying is unsupported, which will
/// cause `GFile` to use a fallback copy method where it reads from the
/// source and writes to the destination.
/// @copy_async: Asynchronously copies a file.
/// @copy_finish: Finishes an asynchronous copy operation.
/// @move: Moves a file.
/// @move_async: Asynchronously moves a file. Since: 2.72
/// @move_finish: Finishes an asynchronous move operation. Since: 2.72
/// @mount_mountable: Mounts a mountable object.
/// @mount_mountable_finish: Finishes a mounting operation.
/// @unmount_mountable: Unmounts a mountable object.
/// @unmount_mountable_finish: Finishes an unmount operation.
/// @eject_mountable: Ejects a mountable.
/// @eject_mountable_finish: Finishes an eject operation.
/// @mount_enclosing_volume: Mounts a specified location.
/// @mount_enclosing_volume_finish: Finishes mounting a specified location.
/// @monitor_dir: Creates a #GFileMonitor for the location.
/// @monitor_file: Creates a #GFileMonitor for the location.
/// @open_readwrite: Open file read/write. Since 2.22.
/// @open_readwrite_async: Asynchronously opens file read/write. Since 2.22.
/// @open_readwrite_finish: Finishes an asynchronous open read/write. Since 2.22.
/// @create_readwrite: Creates file read/write. Since 2.22.
/// @create_readwrite_async: Asynchronously creates file read/write. Since 2.22.
/// @create_readwrite_finish: Finishes an asynchronous creates read/write. Since 2.22.
/// @replace_readwrite: Replaces file read/write. Since 2.22.
/// @replace_readwrite_async: Asynchronously replaces file read/write. Since 2.22.
/// @replace_readwrite_finish: Finishes an asynchronous replace read/write. Since 2.22.
/// @start_mountable: Starts a mountable object. Since 2.22.
/// @start_mountable_finish: Finishes a start operation. Since 2.22.
/// @stop_mountable: Stops a mountable. Since 2.22.
/// @stop_mountable_finish: Finishes a stop operation. Since 2.22.
/// @supports_thread_contexts: a boolean that indicates whether the #GFile implementation supports thread-default contexts. Since 2.22.
/// @unmount_mountable_with_operation: Unmounts a mountable object using a #GMountOperation. Since 2.22.
/// @unmount_mountable_with_operation_finish: Finishes an unmount operation using a #GMountOperation. Since 2.22.
/// @eject_mountable_with_operation: Ejects a mountable object using a #GMountOperation. Since 2.22.
/// @eject_mountable_with_operation_finish: Finishes an eject operation using a #GMountOperation. Since 2.22.
/// @poll_mountable: Polls a mountable object for media changes. Since 2.22.
/// @poll_mountable_finish: Finishes a poll operation for media changes. Since 2.22.
/// @measure_disk_usage: Recursively measures the disk usage of @file. Since 2.38
/// @measure_disk_usage_async: Asynchronously recursively measures the disk usage of @file. Since 2.38
/// @measure_disk_usage_finish: Finishes an asynchronous recursive measurement of the disk usage of @file. Since 2.38
///
/// An interface for writing VFS file handles.
final class _GFileIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile> file)>>
      dup;

  external ffi
      .Pointer<ffi.NativeFunction<guint Function(ffi.Pointer<GFile> file)>>
      hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file1, ffi.Pointer<GFile> file2)>> equal;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GFile> file)>>
      is_native;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file, ffi.Pointer<ffi.Char> uri_scheme)>>
      has_uri_scheme;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile> file)>>
      get_uri_scheme;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile> file)>>
      get_basename;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile> file)>> get_path;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile> file)>> get_uri;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GFile> file)>>
      get_parse_name;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer<GFile> Function(ffi.Pointer<GFile> file)>>
      get_parent;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> prefix, ffi.Pointer<GFile> file)>>
      prefix_matches;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GFile> parent, ffi.Pointer<GFile> descendant)>>
      get_relative_path;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> relative_path)>> resolve_relative_path;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<ffi.Char> display_name,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      get_child_for_display_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileEnumerator> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> enumerate_children;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> enumerate_children_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFileEnumerator> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> res,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      enumerate_children_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> query_info_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_filesystem_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> query_filesystem_info_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFileInfo> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> res,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      query_filesystem_info_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GMount> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> find_enclosing_mount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> find_enclosing_mount_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GMount> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> res,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      find_enclosing_mount_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> display_name,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_display_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> display_name,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> set_display_name_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_display_name_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      query_settable_attributes;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _query_settable_attributes_async;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _query_settable_attributes_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFileAttributeInfoList> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      query_writable_namespaces;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _query_writable_namespaces_async;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _query_writable_namespaces_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> attribute,
              ffi.Int32 type,
              gpointer value_p,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_attribute;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GFileInfo> info,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      set_attributes_from_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GFileInfo> info,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> set_attributes_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GFileInfo>> info,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_attributes_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> read_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> read_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> read_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> append_to;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> append_to_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> append_to_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> create;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> create_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> create_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> etag,
              gboolean make_backup,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> replace;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> etag,
              gboolean make_backup,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> replace_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileOutputStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> replace_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> delete_file;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> delete_file_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> delete_file_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> trash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> trash_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> trash_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> make_directory;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> make_directory_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> make_directory_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> symlink_value,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> make_symbolic_link;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _make_symbolic_link_async;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _make_symbolic_link_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> source,
              ffi.Pointer<GFile> destination,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GFileProgressCallback progress_callback,
              gpointer progress_callback_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> copy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> source,
              ffi.Pointer<GFile> destination,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GFileProgressCallback progress_callback,
              gpointer progress_callback_data,
              GAsyncReadyCallback callback,
              gpointer user_data)>> copy_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> copy_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> source,
              ffi.Pointer<GFile> destination,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GFileProgressCallback progress_callback,
              gpointer progress_callback_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> move;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> source,
              ffi.Pointer<GFile> destination,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GFileProgressCallback progress_callback,
              gpointer progress_callback_data,
              GAsyncReadyCallback callback,
              gpointer user_data)>> move_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> move_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> mount_mountable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> mount_mountable_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> unmount_mountable;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      unmount_mountable_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject_mountable;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> eject_mountable_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> location,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> mount_enclosing_volume;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> location,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      mount_enclosing_volume_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileMonitor> Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> monitor_dir;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileMonitor> Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> monitor_file;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> open_readwrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> open_readwrite_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> open_readwrite_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> create_readwrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> create_readwrite_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<GError>> error)>> create_readwrite_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileIOStream> Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> etag,
              gboolean make_backup,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> replace_readwrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<ffi.Char> etag,
              gboolean make_backup,
              ffi.Int32 flags,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> replace_readwrite_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFileIOStream> Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> res,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      replace_readwrite_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> start_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> start_mountable;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> start_mountable_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> stop_mountable;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> stop_mountable_finish;

  @gboolean()
  external int supports_thread_contexts;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> unmount_mountable_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      unmount_mountable_with_operation_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject_mountable_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      eject_mountable_with_operation_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> poll_mountable;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> poll_mountable_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GFileMeasureProgressCallback progress_callback,
              gpointer progress_data,
              ffi.Pointer<guint64> disk_usage,
              ffi.Pointer<guint64> num_dirs,
              ffi.Pointer<guint64> num_files,
              ffi.Pointer<ffi.Pointer<GError>> error)>> measure_disk_usage;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFile> file,
              ffi.Int32 flags,
              gint io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GFileMeasureProgressCallback progress_callback,
              gpointer progress_data,
              GAsyncReadyCallback callback,
              gpointer user_data)>> measure_disk_usage_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GFile> file,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<guint64> disk_usage,
                  ffi.Pointer<guint64> num_dirs,
                  ffi.Pointer<guint64> num_files,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      measure_disk_usage_finish;
}

typedef GFileEnumerator = _GFileEnumerator;
typedef GFileInfo = _GFileInfo;

/// GMount:
///
/// A handle to an object implementing the #GMountIface interface.
typedef GMount = _GMount;
typedef GFileAttributeInfoList = _GFileAttributeInfoList;
typedef GFileInputStream = _GFileInputStream;
typedef GFileOutputStream = _GFileOutputStream;

/// GFileProgressCallback:
/// @current_num_bytes: the current number of bytes in the operation.
/// @total_num_bytes: the total number of bytes in the operation.
/// @user_data: user data passed to the callback.
///
/// When doing file operations that may take a while, such as moving
/// a file or copying a file, a progress callback is used to pass how
/// far along that operation is to the application.
typedef GFileProgressCallback
    = ffi.Pointer<ffi.NativeFunction<GFileProgressCallbackFunction>>;
typedef GFileProgressCallbackFunction = ffi.Void Function(
    goffset current_num_bytes, goffset total_num_bytes, gpointer user_data);
typedef DartGFileProgressCallbackFunction = void Function(
    Dartgint64 current_num_bytes,
    Dartgint64 total_num_bytes,
    gpointer user_data);
typedef GFileMonitor = _GFileMonitor;
typedef GFileIOStream = _GFileIOStream;

/// GFileMeasureProgressCallback:
/// @reporting: %TRUE if more reports will come
/// @current_size: the current cumulative size measurement
/// @num_dirs: the number of directories visited so far
/// @num_files: the number of non-directory files encountered
/// @user_data: the data passed to the original request for this callback
///
/// This callback type is used by g_file_measure_disk_usage() to make
/// periodic progress reports when measuring the amount of disk spaced
/// used by a directory.
///
/// These calls are made on a best-effort basis and not all types of
/// #GFile will support them.  At the minimum, however, one call will
/// always be made immediately.
///
/// In the case that there is no support, @reporting will be set to
/// %FALSE (and the other values undefined) and no further calls will be
/// made.  Otherwise, the @reporting will be %TRUE and the other values
/// all-zeros during the first (immediate) call.  In this way, you can
/// know which type of progress UI to show without a delay.
///
/// For g_file_measure_disk_usage() the callback is made directly.  For
/// g_file_measure_disk_usage_async() the callback is made via the
/// default main context of the calling thread (ie: the same way that the
/// final async result would be reported).
///
/// @current_size is in the same units as requested by the operation (see
/// %G_FILE_MEASURE_APPARENT_SIZE).
///
/// The frequency of the updates is implementation defined, but is
/// ideally about once every 200ms.
///
/// The last progress callback may or may not be equal to the final
/// result.  Always check the async result to get the final value.
///
/// Since: 2.38
typedef GFileMeasureProgressCallback
    = ffi.Pointer<ffi.NativeFunction<GFileMeasureProgressCallbackFunction>>;
typedef GFileMeasureProgressCallbackFunction = ffi.Void Function(
    gboolean reporting,
    guint64 current_size,
    guint64 num_dirs,
    guint64 num_files,
    gpointer user_data);
typedef DartGFileMeasureProgressCallbackFunction = void Function(
    Dartgint reporting,
    Dartguint64 current_size,
    Dartguint64 num_dirs,
    Dartguint64 num_files,
    gpointer user_data);

/// GFileReadMoreCallback:
/// @file_contents: the data as currently read.
/// @file_size: the size of the data currently read.
/// @callback_data: (closure): data passed to the callback.
///
/// When loading the partial contents of a file with g_file_load_partial_contents_async(),
/// it may become necessary to determine if any more data from the file should be loaded.
/// A #GFileReadMoreCallback function facilitates this by returning %TRUE if more data
/// should be read, or %FALSE otherwise.
///
/// Returns: %TRUE if more data should be read back. %FALSE otherwise.
typedef GFileReadMoreCallback
    = ffi.Pointer<ffi.NativeFunction<GFileReadMoreCallbackFunction>>;
typedef GFileReadMoreCallbackFunction = gboolean Function(
    ffi.Pointer<ffi.Char> file_contents,
    goffset file_size,
    gpointer callback_data);
typedef DartGFileReadMoreCallbackFunction = Dartgint Function(
    ffi.Pointer<ffi.Char> file_contents,
    Dartgint64 file_size,
    gpointer callback_data);

final class _GFileEnumeratorClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> next_file;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Int num_files,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> next_files_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> next_files_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> close_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileEnumerator> enumerator,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;
}

final class _GFileIconClass extends ffi.Opaque {}

typedef GFileIcon = _GFileIcon;

final class _GFileInfoClass extends ffi.Opaque {}

/// GFileAttributeMatcher:
///
/// Determines if a string matches a file attribute.
typedef GFileAttributeMatcher = _GFileAttributeMatcher;

final class _GFileInputStreamClass extends ffi.Struct {
  external GInputStreamClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          goffset Function(ffi.Pointer<GFileInputStream> stream)>> tell;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileInputStream> stream)>> can_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileInputStream> stream,
              goffset offset,
              ffi.Int32 type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileInputStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileInputStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> query_info_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileInputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

final class _GIOStreamClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GIOStream> stream)>> get_input_stream;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GOutputStream> Function(
              ffi.Pointer<GIOStream> stream)>> get_output_stream;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GIOStream> stream,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOStream> stream,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> close_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GIOStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> close_finish;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved8;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved9;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved10;
}

final class _GFileIOStreamClass extends ffi.Struct {
  external GIOStreamClass parent_class;

  external ffi.Pointer<
          ffi
          .NativeFunction<goffset Function(ffi.Pointer<GFileIOStream> stream)>>
      tell;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GFileIOStream> stream)>>
      can_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileIOStream> stream,
              goffset offset,
              ffi.Int32 type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> seek;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GFileIOStream> stream)>>
      can_truncate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileIOStream> stream,
              goffset size,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> truncate_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileIOStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileIOStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> query_info_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileIOStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileIOStream> stream)>> get_etag;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

typedef GIOStreamClass = _GIOStreamClass;

final class _GFileMonitorClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileMonitor> monitor,
              ffi.Pointer<GFile> file,
              ffi.Pointer<GFile> other_file,
              ffi.Int32 event_type)>> changed;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GFileMonitor> monitor)>>
      cancel;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

final class _GFilenameCompleterClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GFilenameCompleter> filename_completer)>>
      got_completion_data;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;
}

typedef GFilenameCompleter = _GFilenameCompleter;

final class _GFileOutputStreamClass extends ffi.Struct {
  external GOutputStreamClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          goffset Function(ffi.Pointer<GFileOutputStream> stream)>> tell;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GFileOutputStream> stream)>> can_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileOutputStream> stream,
              goffset offset,
              ffi.Int32 type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> seek;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GFileOutputStream> stream)>>
      can_truncate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GFileOutputStream> stream,
              goffset size,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> truncate_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileOutputStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GFileOutputStream> stream,
              ffi.Pointer<ffi.Char> attributes,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> query_info_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFileInfo> Function(
              ffi.Pointer<GFileOutputStream> stream,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> query_info_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GFileOutputStream> stream)>> get_etag;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

final class _GInetAddressClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GInetAddress> address)>>
      to_string;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<guint8> Function(ffi.Pointer<GInetAddress> address)>>
      to_bytes;
}

typedef GInetAddress = _GInetAddress;

final class _GInetAddressMaskClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GInetAddressMask = _GInetAddressMask;

final class _GSocketAddressClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GSocketAddress> address)>> get_family;

  external ffi.Pointer<
          ffi
          .NativeFunction<gssize Function(ffi.Pointer<GSocketAddress> address)>>
      get_native_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSocketAddress> address,
              gpointer dest,
              gsize destlen,
              ffi.Pointer<ffi.Pointer<GError>> error)>> to_native;
}

final class _GInetSocketAddressClass extends ffi.Struct {
  external GSocketAddressClass parent_class;
}

typedef GSocketAddressClass = _GSocketAddressClass;

/// GModuleFlags:
/// @G_MODULE_BIND_LAZY: specifies that symbols are only resolved when
/// needed. The default action is to bind all symbols when the module
/// is loaded.
/// @G_MODULE_BIND_LOCAL: specifies that symbols in the module should
/// not be added to the global name space. The default action on most
/// platforms is to place symbols in the module in the global name space,
/// which may cause conflicts with existing symbols.
/// @G_MODULE_BIND_MASK: mask for all flags.
///
/// Flags passed to g_module_open().
/// Note that these flags are not supported on all platforms.
abstract class GModuleFlags {
  static const int G_MODULE_BIND_LAZY = 1;
  static const int G_MODULE_BIND_LOCAL = 2;
  static const int G_MODULE_BIND_MASK = 3;
}

final class _GModule extends ffi.Opaque {}

/// GModuleError:
/// @G_MODULE_ERROR_FAILED: there was an error loading or opening a module file
/// @G_MODULE_ERROR_CHECK_FAILED: a module returned an error from its `g_module_check_init()` function
///
/// Errors returned by g_module_open_full().
///
/// Since: 2.70
abstract class GModuleError {
  static const int G_MODULE_ERROR_FAILED = 0;
  static const int G_MODULE_ERROR_CHECK_FAILED = 1;
}

typedef GModule = _GModule;

final class _GIOModuleScope extends ffi.Opaque {}

typedef GIOModuleScope = _GIOModuleScope;

final class _GIOModuleClass extends ffi.Opaque {}

typedef GIOModule = _GIOModule;
typedef GIOExtensionPoint = _GIOExtensionPoint;
typedef GIOExtension = _GIOExtension;

/// GIOSchedulerJobFunc:
/// @job: a #GIOSchedulerJob.
/// @cancellable: optional #GCancellable object, %NULL to ignore.
/// @user_data: the data to pass to callback function
///
/// I/O Job function.
///
/// Long-running jobs should periodically check the @cancellable
/// to see if they have been cancelled.
///
/// Returns: %TRUE if this function should be called again to
/// complete the job, %FALSE if the job is complete (or cancelled)
typedef GIOSchedulerJobFunc
    = ffi.Pointer<ffi.NativeFunction<GIOSchedulerJobFuncFunction>>;
typedef GIOSchedulerJobFuncFunction = gboolean Function(
    ffi.Pointer<GIOSchedulerJob> job,
    ffi.Pointer<GCancellable> cancellable,
    gpointer user_data);
typedef DartGIOSchedulerJobFuncFunction = Dartgint Function(
    ffi.Pointer<GIOSchedulerJob> job,
    ffi.Pointer<GCancellable> cancellable,
    gpointer user_data);

/// GIOSchedulerJob:
///
/// Opaque class for defining and scheduling IO jobs.
typedef GIOSchedulerJob = _GIOSchedulerJob;

final class _GListModel extends ffi.Opaque {}

final class _GListModelInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi
      .Pointer<ffi.NativeFunction<GType Function(ffi.Pointer<GListModel> list)>>
      get_item_type;

  external ffi
      .Pointer<ffi.NativeFunction<guint Function(ffi.Pointer<GListModel> list)>>
      get_n_items;

  external ffi.Pointer<
          ffi.NativeFunction<
              gpointer Function(ffi.Pointer<GListModel> list, guint position)>>
      get_item;
}

typedef GListModel = _GListModel;

final class _GListStore extends ffi.Opaque {}

final class GListStoreClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GListStore = _GListStore;

/// GLoadableIconIface:
/// @g_iface: The parent interface.
/// @load: Loads an icon.
/// @load_async: Loads an icon asynchronously.
/// @load_finish: Finishes an asynchronous icon load.
///
/// Interface for icons that can be loaded as a stream.
final class _GLoadableIconIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GLoadableIcon> icon,
              ffi.Int size,
              ffi.Pointer<ffi.Pointer<ffi.Char>> type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> load;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GLoadableIcon> icon,
              ffi.Int size,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> load_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GInputStream> Function(
              ffi.Pointer<GLoadableIcon> icon,
              ffi.Pointer<GAsyncResult> res,
              ffi.Pointer<ffi.Pointer<ffi.Char>> type,
              ffi.Pointer<ffi.Pointer<GError>> error)>> load_finish;
}

typedef GLoadableIcon = _GLoadableIcon;

final class _GMemoryInputStreamClass extends ffi.Struct {
  external GInputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

typedef GMemoryInputStream = _GMemoryInputStream;

final class _GMemoryMonitor extends ffi.Opaque {}

final class _GMemoryMonitorInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GMemoryMonitor> monitor, ffi.Int32 level)>>
      low_memory_warning;
}

typedef GMemoryMonitor = _GMemoryMonitor;

final class _GMemoryOutputStreamClass extends ffi.Struct {
  external GOutputStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GReallocFunc:
/// @data: memory block to reallocate
/// @size: size to reallocate @data to
///
/// Changes the size of the memory block pointed to by @data to
/// @size bytes.
///
/// The function should have the same semantics as realloc().
///
/// Returns: a pointer to the reallocated memory
typedef GReallocFunc = ffi.Pointer<ffi.NativeFunction<GReallocFuncFunction>>;
typedef GReallocFuncFunction = gpointer Function(gpointer data, gsize size);
typedef DartGReallocFuncFunction = gpointer Function(
    gpointer data, Dartgsize size);
typedef GMemoryOutputStream = _GMemoryOutputStream;

/// GMenuModelClass::get_item_attributes:
/// @model: the #GMenuModel to query
/// @item_index: The #GMenuItem to query
/// @attributes: (out) (element-type utf8 GLib.Variant): Attributes on the item
///
/// Gets all the attributes associated with the item in the menu model.
/// /
/// /**
/// GMenuModelClass::get_item_links:
/// @model: the #GMenuModel to query
/// @item_index: The #GMenuItem to query
/// @links: (out) (element-type utf8 Gio.MenuModel): Links from the item
///
/// Gets all the links associated with the item in the menu model.
final class _GMenuModelClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GMenuModel> model)>>
      is_mutable;

  external ffi
      .Pointer<ffi.NativeFunction<gint Function(ffi.Pointer<GMenuModel> model)>>
      get_n_items;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GMenuModel> model, gint item_index,
                  ffi.Pointer<ffi.Pointer<GHashTable>> attributes)>>
      get_item_attributes;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GMenuAttributeIter> Function(
                  ffi.Pointer<GMenuModel> model, gint item_index)>>
      iterate_item_attributes;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(
                  ffi.Pointer<GMenuModel> model,
                  gint item_index,
                  ffi.Pointer<gchar> attribute,
                  ffi.Pointer<GVariantType> expected_type)>>
      get_item_attribute_value;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMenuModel> model, gint item_index,
              ffi.Pointer<ffi.Pointer<GHashTable>> links)>> get_item_links;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GMenuLinkIter> Function(
                  ffi.Pointer<GMenuModel> model, gint item_index)>>
      iterate_item_links;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GMenuModel> Function(ffi.Pointer<GMenuModel> model,
              gint item_index, ffi.Pointer<gchar> link)>> get_item_link;
}

typedef GMenuModel = _GMenuModel;
typedef GMenuAttributeIter = _GMenuAttributeIter;

final class _GMenuAttributeIter extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GMenuAttributeIterPrivate> priv;
}

typedef GMenuAttributeIterPrivate = _GMenuAttributeIterPrivate;

final class _GMenuAttributeIterPrivate extends ffi.Opaque {}

typedef GMenuLinkIter = _GMenuLinkIter;

final class _GMenuLinkIter extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GMenuLinkIterPrivate> priv;
}

typedef GMenuLinkIterPrivate = _GMenuLinkIterPrivate;

final class _GMenuLinkIterPrivate extends ffi.Opaque {}

final class _GMenuAttributeIterClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMenuAttributeIter> iter,
              ffi.Pointer<ffi.Pointer<gchar>> out_name,
              ffi.Pointer<ffi.Pointer<GVariant>> value)>> get_next;
}

final class _GMenuLinkIterClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMenuLinkIter> iter,
              ffi.Pointer<ffi.Pointer<gchar>> out_link,
              ffi.Pointer<ffi.Pointer<GMenuModel>> value)>> get_next;
}

final class _GMenuItem extends ffi.Opaque {}

final class _GMenu extends ffi.Opaque {}

typedef GMenu = _GMenu;
typedef GMenuItem = _GMenuItem;

/// GMountIface:
/// @g_iface: The parent interface.
/// @changed: Changed signal that is emitted when the mount's state has changed.
/// @unmounted: The unmounted signal that is emitted when the #GMount have been unmounted. If the recipient is holding references to the object they should release them so the object can be finalized.
/// @pre_unmount: The ::pre-unmount signal that is emitted when the #GMount will soon be emitted. If the recipient is somehow holding the mount open by keeping an open file on it it should close the file.
/// @get_root: Gets a #GFile to the root directory of the #GMount.
/// @get_name: Gets a string containing the name of the #GMount.
/// @get_icon: Gets a #GIcon for the #GMount.
/// @get_uuid: Gets the UUID for the #GMount. The reference is typically based on the file system UUID for the mount in question and should be considered an opaque string. Returns %NULL if there is no UUID available.
/// @get_volume: Gets a #GVolume the mount is located on. Returns %NULL if the #GMount is not associated with a #GVolume.
/// @get_drive: Gets a #GDrive the volume of the mount is located on. Returns %NULL if the #GMount is not associated with a #GDrive or a #GVolume. This is convenience method for getting the #GVolume and using that to get the #GDrive.
/// @can_unmount: Checks if a #GMount can be unmounted.
/// @can_eject: Checks if a #GMount can be ejected.
/// @unmount: Starts unmounting a #GMount.
/// @unmount_finish: Finishes an unmounting operation.
/// @eject: Starts ejecting a #GMount.
/// @eject_finish: Finishes an eject operation.
/// @remount: Starts remounting a #GMount.
/// @remount_finish: Finishes a remounting operation.
/// @guess_content_type: Starts guessing the type of the content of a #GMount.
/// See g_mount_guess_content_type() for more information on content
/// type guessing. This operation was added in 2.18.
/// @guess_content_type_finish: Finishes a content type guessing operation. Added in 2.18.
/// @guess_content_type_sync: Synchronous variant of @guess_content_type. Added in 2.18
/// @unmount_with_operation: Starts unmounting a #GMount using a #GMountOperation. Since 2.22.
/// @unmount_with_operation_finish: Finishes an unmounting operation using a #GMountOperation. Since 2.22.
/// @eject_with_operation: Starts ejecting a #GMount using a #GMountOperation. Since 2.22.
/// @eject_with_operation_finish: Finishes an eject operation using a #GMountOperation. Since 2.22.
/// @get_default_location: Gets a #GFile indication a start location that can be use as the entry point for this mount. Since 2.24.
/// @get_sort_key: Gets a key used for sorting #GMount instance or %NULL if no such key exists. Since 2.32.
/// @get_symbolic_icon: Gets a symbolic #GIcon for the #GMount. Since 2.34.
///
/// Interface for implementing operations for mounts.
final class _GMountIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMount> mount)>>
      changed;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMount> mount)>>
      unmounted;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GFile> Function(ffi.Pointer<GMount> mount)>> get_root;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount> mount)>> get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<GMount> mount)>> get_icon;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMount> mount)>> get_uuid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVolume> Function(ffi.Pointer<GMount> mount)>> get_volume;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDrive> Function(ffi.Pointer<GMount> mount)>> get_drive;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMount> mount)>>
      can_unmount;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMount> mount)>>
      can_eject;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> unmount;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMount> mount,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> unmount_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMount> mount,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> eject_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> remount;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMount> mount,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> remount_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              gboolean force_rescan,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> guess_content_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(
                  ffi.Pointer<GMount> mount,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      guess_content_type_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GMount> mount,
              gboolean force_rescan,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> guess_content_type_sync;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMount> mount)>>
      pre_unmount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> unmount_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMount> mount,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      unmount_with_operation_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMount> mount,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMount> mount,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      eject_with_operation_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(ffi.Pointer<GMount> mount)>>
      get_default_location;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(ffi.Pointer<GMount> mount)>> get_sort_key;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GIcon> Function(ffi.Pointer<GMount> mount)>>
      get_symbolic_icon;
}

/// GVolume:
///
/// Opaque mountable volume object.
typedef GVolume = _GVolume;

final class _GMountOperationClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMountOperation> op,
              ffi.Pointer<ffi.Char> message,
              ffi.Pointer<ffi.Char> default_user,
              ffi.Pointer<ffi.Char> default_domain,
              ffi.Int32 flags)>> ask_password;

  /// GMountOperationClass::ask_question:
  /// @op: a #GMountOperation
  /// @message: string containing a message to display to the user
  /// @choices: (array zero-terminated=1) (element-type utf8): an array of
  /// strings for each possible choice
  ///
  /// Virtual implementation of #GMountOperation::ask-question.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMountOperation> op,
              ffi.Pointer<ffi.Char> message,
              ffi.Pointer<ffi.Pointer<ffi.Char>> choices)>> ask_question;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMountOperation> op, ffi.Int32 result)>> reply;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMountOperation> op)>>
      aborted;

  /// GMountOperationClass::show_processes:
  /// @op: a #GMountOperation
  /// @message: string containing a message to display to the user
  /// @processes: (element-type GPid): an array of #GPid for processes blocking
  /// the operation
  /// @choices: (array zero-terminated=1) (element-type utf8): an array of
  /// strings for each possible choice
  ///
  /// Virtual implementation of #GMountOperation::show-processes.
  ///
  /// Since: 2.22
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMountOperation> op,
              ffi.Pointer<gchar> message,
              ffi.Pointer<GArray> processes,
              ffi.Pointer<ffi.Pointer<gchar>> choices)>> show_processes;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMountOperation> op,
              ffi.Pointer<gchar> message,
              gint64 time_left,
              gint64 bytes_left)>> show_unmount_progress;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved8;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved9;
}

final class _GNativeSocketAddressClass extends ffi.Struct {
  external GSocketAddressClass parent_class;
}

final class _GVolumeMonitorClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GVolume> volume)>> volume_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GVolume> volume)>> volume_removed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GVolume> volume)>> volume_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GMount> mount)>> mount_added;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GMount> mount)>> mount_removed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GMount> mount)>> mount_pre_unmount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GMount> mount)>> mount_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GDrive> drive)>> drive_connected;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GDrive> drive)>> drive_disconnected;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GDrive> drive)>> drive_changed;

  external ffi.Pointer<ffi.NativeFunction<gboolean Function()>> is_supported;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GVolumeMonitor> volume_monitor)>>
      get_connected_drives;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GVolumeMonitor> volume_monitor)>> get_volumes;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GVolumeMonitor> volume_monitor)>> get_mounts;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVolume> Function(
              ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<ffi.Char> uuid)>> get_volume_for_uuid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GMount> Function(
              ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<ffi.Char> uuid)>> get_mount_for_uuid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GVolume> Function(ffi.Pointer<GMount> mount,
              ffi.Pointer<GVolumeMonitor> volume_monitor)>> adopt_orphan_mount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GDrive> drive)>> drive_eject_button;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVolumeMonitor> volume_monitor,
              ffi.Pointer<GDrive> drive)>> drive_stop_button;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;
}

typedef GVolumeMonitor = _GVolumeMonitor;

final class _GNativeVolumeMonitor extends ffi.Struct {
  external GVolumeMonitor parent_instance;
}

final class _GNativeVolumeMonitorClass extends ffi.Struct {
  external GVolumeMonitorClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GMount> Function(ffi.Pointer<ffi.Char> mount_path,
              ffi.Pointer<GCancellable> cancellable)>> get_mount_for_mount_path;
}

/// GVolumeMonitor:
///
/// A Volume Monitor that watches for volume events.
typedef GVolumeMonitorClass = _GVolumeMonitorClass;

final class _GNetworkAddressClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GNetworkAddress = _GNetworkAddress;

final class _GNetworkMonitorInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNetworkMonitor> monitor,
              gboolean network_available)>> network_changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GNetworkMonitor> monitor,
              ffi.Pointer<GSocketConnectable> connectable,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> can_reach;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GNetworkMonitor> monitor,
              ffi.Pointer<GSocketConnectable> connectable,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> can_reach_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GNetworkMonitor> monitor,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> can_reach_finish;
}

typedef GNetworkMonitor = _GNetworkMonitor;

final class _GNetworkServiceClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GNetworkService = _GNetworkService;

final class _GPermissionClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> acquire;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> acquire_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> acquire_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> release;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> release_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPermission> permission,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> release_finish;

  @ffi.Array.multi([16])
  external ffi.Array<gpointer> reserved;
}

typedef GPermission = _GPermission;

/// GPollableInputStreamInterface:
/// @g_iface: The parent interface.
/// @can_poll: Checks if the #GPollableInputStream instance is actually pollable
/// @is_readable: Checks if the stream is readable
/// @create_source: Creates a #GSource to poll the stream
/// @read_nonblocking: Does a non-blocking read or returns
/// %G_IO_ERROR_WOULD_BLOCK
///
/// The interface for pollable input streams.
///
/// The default implementation of @can_poll always returns %TRUE.
///
/// The default implementation of @read_nonblocking calls
/// g_pollable_input_stream_is_readable(), and then calls
/// g_input_stream_read() if it returns %TRUE. This means you only need
/// to override it if it is possible that your @is_readable
/// implementation may return %TRUE when the stream is not actually
/// readable.
///
/// Since: 2.28
final class _GPollableInputStreamInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableInputStream> stream)>>
      can_poll;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableInputStream> stream)>>
      is_readable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GPollableInputStream> stream,
              ffi.Pointer<GCancellable> cancellable)>> create_source;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GPollableInputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Pointer<ffi.Pointer<GError>> error)>> read_nonblocking;
}

typedef GPollableInputStream = _GPollableInputStream;

/// GPollableOutputStreamInterface:
/// @g_iface: The parent interface.
/// @can_poll: Checks if the #GPollableOutputStream instance is actually pollable
/// @is_writable: Checks if the stream is writable
/// @create_source: Creates a #GSource to poll the stream
/// @write_nonblocking: Does a non-blocking write or returns
/// %G_IO_ERROR_WOULD_BLOCK
/// @writev_nonblocking: Does a vectored non-blocking write, or returns
/// %G_POLLABLE_RETURN_WOULD_BLOCK
///
/// The interface for pollable output streams.
///
/// The default implementation of @can_poll always returns %TRUE.
///
/// The default implementation of @write_nonblocking calls
/// g_pollable_output_stream_is_writable(), and then calls
/// g_output_stream_write() if it returns %TRUE. This means you only
/// need to override it if it is possible that your @is_writable
/// implementation may return %TRUE when the stream is not actually
/// writable.
///
/// The default implementation of @writev_nonblocking calls
/// g_pollable_output_stream_write_nonblocking() for each vector, and converts
/// its return value and error (if set) to a #GPollableReturn. You should
/// override this where possible to avoid having to allocate a #GError to return
/// %G_IO_ERROR_WOULD_BLOCK.
///
/// Since: 2.28
final class _GPollableOutputStreamInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableOutputStream> stream)>>
      can_poll;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GPollableOutputStream> stream)>>
      is_writable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GPollableOutputStream> stream,
              ffi.Pointer<GCancellable> cancellable)>> create_source;

  external ffi.Pointer<
      ffi.NativeFunction<
          gssize Function(
              ffi.Pointer<GPollableOutputStream> stream,
              ffi.Pointer<ffi.Void> buffer,
              gsize count,
              ffi.Pointer<ffi.Pointer<GError>> error)>> write_nonblocking;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GPollableOutputStream> stream,
              ffi.Pointer<GOutputVector> vectors,
              gsize n_vectors,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<ffi.Pointer<GError>> error)>> writev_nonblocking;
}

typedef GPollableOutputStream = _GPollableOutputStream;

final class _GPowerProfileMonitor extends ffi.Opaque {}

final class _GPowerProfileMonitorInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

typedef GPowerProfileMonitor = _GPowerProfileMonitor;
typedef GPropertyAction = _GPropertyAction;

/// GProxyInterface:
/// @g_iface: The parent interface.
/// @connect: Connect to proxy server and wrap (if required) the #connection
/// to handle payload.
/// @connect_async: Same as connect() but asynchronous.
/// @connect_finish: Returns the result of connect_async()
/// @supports_hostname: Returns whether the proxy supports hostname lookups.
///
/// Provides an interface for handling proxy connection and payload.
///
/// Since: 2.26
final class _GProxyInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GProxy> proxy,
              ffi.Pointer<GIOStream> connection,
              ffi.Pointer<GProxyAddress> proxy_address,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> connect;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GProxy> proxy,
              ffi.Pointer<GIOStream> connection,
              ffi.Pointer<GProxyAddress> proxy_address,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> connect_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIOStream> Function(
              ffi.Pointer<GProxy> proxy,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> connect_finish;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GProxy> proxy)>>
      supports_hostname;
}

typedef GProxy = _GProxy;
typedef GProxyAddress = _GProxyAddress;

final class _GProxyAddressClass extends ffi.Struct {
  external GInetSocketAddressClass parent_class;
}

typedef GInetSocketAddressClass = _GInetSocketAddressClass;

/// GSocketAddressEnumeratorClass:
/// @next: Virtual method for g_socket_address_enumerator_next().
/// @next_async: Virtual method for g_socket_address_enumerator_next_async().
/// @next_finish: Virtual method for g_socket_address_enumerator_next_finish().
///
/// Class structure for #GSocketAddressEnumerator.
final class _GSocketAddressEnumeratorClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocketAddressEnumerator> enumerator,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> next;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketAddressEnumerator> enumerator,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> next_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddress> Function(
              ffi.Pointer<GSocketAddressEnumerator> enumerator,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> next_finish;
}

/// GProxyAddressEnumeratorClass:
///
/// Class structure for #GProxyAddressEnumerator.
final class _GProxyAddressEnumeratorClass extends ffi.Struct {
  external GSocketAddressEnumeratorClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;
}

/// GSocketAddressEnumerator:
///
/// Enumerator type for objects that contain or generate
/// #GSocketAddress instances.
typedef GSocketAddressEnumeratorClass = _GSocketAddressEnumeratorClass;

final class _GProxyResolverInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GProxyResolver> resolver)>>
      is_supported;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GProxyResolver> resolver,
              ffi.Pointer<gchar> uri,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GProxyResolver> resolver,
              ffi.Pointer<gchar> uri,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gchar>> Function(
              ffi.Pointer<GProxyResolver> resolver,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_finish;
}

/// GProxyResolver:
///
/// A helper class to enumerate proxies base on URI.
///
/// Since: 2.26
typedef GProxyResolver = _GProxyResolver;

final class _GRemoteActionGroupInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GRemoteActionGroup> remote,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<GVariant> parameter,
              ffi.Pointer<GVariant> platform_data)>> activate_action_full;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GRemoteActionGroup> remote,
              ffi.Pointer<gchar> action_name,
              ffi.Pointer<GVariant> value,
              ffi.Pointer<GVariant> platform_data)>> change_action_state_full;
}

typedef GRemoteActionGroup = _GRemoteActionGroup;

final class _GResolverClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GResolver> resolver)>>
      reload;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> hostname,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_by_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> hostname,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_by_name_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_by_name_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<GInetAddress> address,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_by_address;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<GInetAddress> address,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_by_address_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(
                  ffi.Pointer<GResolver> resolver,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_by_address_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> rrname,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_service;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> rrname,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_service_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_service_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> rrname,
              ffi.Int32 record_type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_records;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> rrname,
              ffi.Int32 record_type,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_records_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> lookup_records_finish;

  /// GResolverClass::lookup_by_name_with_flags_async:
  /// @resolver: a #GResolver
  /// @hostname: the hostname to resolve
  /// @flags: extra #GResolverNameLookupFlags to modify the lookup
  /// @cancellable: (nullable): a #GCancellable
  /// @callback: (scope async): a #GAsyncReadyCallback to call when completed
  /// @user_data: (closure): data to pass to @callback
  ///
  /// Asynchronous version of GResolverClass::lookup_by_name_with_flags
  ///
  /// GResolverClass::lookup_by_name_with_flags_finish will be called to get
  /// the result.
  ///
  /// Since: 2.60
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GResolver> resolver,
              ffi.Pointer<gchar> hostname,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_by_name_with_flags_async;

  /// GResolverClass::lookup_by_name_with_flags_finish:
  /// @resolver: a #GResolver
  /// @result: a #GAsyncResult
  /// @error: (nullable): a pointer to a %NULL #GError
  ///
  /// Gets the result from GResolverClass::lookup_by_name_with_flags_async
  ///
  /// Returns: (element-type GInetAddress) (transfer full): List of #GInetAddress.
  /// Since: 2.60
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver> resolver,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_by_name_with_flags_finish;

  /// GResolverClass::lookup_by_name_with_flags:
  /// @resolver: a #GResolver
  /// @hostname: the hostname to resolve
  /// @flags: extra #GResolverNameLookupFlags to modify the lookup
  /// @cancellable: (nullable): a #GCancellable
  /// @error: (nullable): a pointer to a %NULL #GError
  ///
  /// This is identical to GResolverClass::lookup_by_name except it takes
  /// @flags which modifies the behavior of the lookup. See #GResolverNameLookupFlags
  /// for more details.
  ///
  /// Returns: (element-type GInetAddress) (transfer full): List of #GInetAddress.
  /// Since: 2.60
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GResolver> resolver,
                  ffi.Pointer<gchar> hostname,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_by_name_with_flags;
}

typedef GResolver = _GResolver;

/// GResolverNameLookupFlags:
/// @G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT: default behavior (same as g_resolver_lookup_by_name())
/// @G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY: only resolve ipv4 addresses
/// @G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY: only resolve ipv6 addresses
///
/// Flags to modify lookup behavior.
///
/// Since: 2.60
abstract class GResolverNameLookupFlags {
  static const int G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0;
  static const int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1;
  static const int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 2;
}

final class _GStaticResource extends ffi.Struct {
  external ffi.Pointer<guint8> data;

  @gsize()
  external int data_len;

  external ffi.Pointer<GResource> resource;

  external ffi.Pointer<GStaticResource> next;

  external gpointer padding;
}

/// GResource:
///
/// A resource bundle.
///
/// Since: 2.32
typedef GResource = _GResource;
typedef GStaticResource = _GStaticResource;

/// GSeekableIface:
/// @g_iface: The parent interface.
/// @tell: Tells the current location within a stream.
/// @can_seek: Checks if seeking is supported by the stream.
/// @seek: Seeks to a location within a stream.
/// @can_truncate: Checks if truncation is supported by the stream.
/// @truncate_fn: Truncates a stream.
///
/// Provides an interface for implementing seekable functionality on I/O Streams.
final class _GSeekableIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<goffset Function(ffi.Pointer<GSeekable> seekable)>>
      tell;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GSeekable> seekable)>>
      can_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSeekable> seekable,
              goffset offset,
              ffi.Int32 type,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> seek;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GSeekable> seekable)>>
      can_truncate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSeekable> seekable,
              goffset offset,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> truncate_fn;
}

typedef GSeekable = _GSeekable;

final class _GSettingsSchemaSource extends ffi.Opaque {}

final class _GSettingsSchema extends ffi.Opaque {}

final class _GSettingsSchemaKey extends ffi.Opaque {}

typedef GSettingsSchemaSource = _GSettingsSchemaSource;
typedef GSettingsSchema = _GSettingsSchema;
typedef GSettingsSchemaKey = _GSettingsSchemaKey;

final class _GSettingsClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSettings> settings, ffi.Pointer<gchar> key)>>
      writable_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSettings> settings, ffi.Pointer<gchar> key)>>
      changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GSettings> settings, GQuark key)>>
      writable_change_event;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSettings> settings,
              ffi.Pointer<GQuark> keys, gint n_keys)>> change_event;

  @ffi.Array.multi([20])
  external ffi.Array<gpointer> padding;
}

typedef GSettings = _GSettings;
typedef GSettingsBackend = _GSettingsBackend;

/// GSettingsBindFlags:
/// @G_SETTINGS_BIND_DEFAULT: Equivalent to `G_SETTINGS_BIND_GET|G_SETTINGS_BIND_SET`
/// @G_SETTINGS_BIND_GET: Update the #GObject property when the setting changes.
/// It is an error to use this flag if the property is not writable.
/// @G_SETTINGS_BIND_SET: Update the setting when the #GObject property changes.
/// It is an error to use this flag if the property is not readable.
/// @G_SETTINGS_BIND_NO_SENSITIVITY: Do not try to bind a "sensitivity" property to the writability of the setting
/// @G_SETTINGS_BIND_GET_NO_CHANGES: When set in addition to %G_SETTINGS_BIND_GET, set the #GObject property
/// value initially from the setting, but do not listen for changes of the setting
/// @G_SETTINGS_BIND_INVERT_BOOLEAN: When passed to g_settings_bind(), uses a pair of mapping functions that invert
/// the boolean value when mapping between the setting and the property.  The setting and property must both
/// be booleans.  You cannot pass this flag to g_settings_bind_with_mapping().
///
/// Flags used when creating a binding. These flags determine in which
/// direction the binding works. The default is to synchronize in both
/// directions.
abstract class GSettingsBindFlags {
  static const int G_SETTINGS_BIND_DEFAULT = 0;
  static const int G_SETTINGS_BIND_GET = 1;
  static const int G_SETTINGS_BIND_SET = 2;
  static const int G_SETTINGS_BIND_NO_SENSITIVITY = 4;
  static const int G_SETTINGS_BIND_GET_NO_CHANGES = 8;
  static const int G_SETTINGS_BIND_INVERT_BOOLEAN = 16;
}

/// GSettingsBindGetMapping:
/// @value: return location for the property value
/// @variant: the #GVariant
/// @user_data: user data that was specified when the binding was created
///
/// The type for the function that is used to convert from #GSettings to
/// an object property. The @value is already initialized to hold values
/// of the appropriate type.
///
/// Returns: %TRUE if the conversion succeeded, %FALSE in case of an error
typedef GSettingsBindGetMapping
    = ffi.Pointer<ffi.NativeFunction<GSettingsBindGetMappingFunction>>;
typedef GSettingsBindGetMappingFunction = gboolean Function(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
    gpointer user_data);
typedef DartGSettingsBindGetMappingFunction = Dartgint Function(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
    gpointer user_data);

/// GSettingsBindSetMapping:
/// @value: a #GValue containing the property value to map
/// @expected_type: the #GVariantType to create
/// @user_data: user data that was specified when the binding was created
///
/// The type for the function that is used to convert an object property
/// value to a #GVariant for storing it in #GSettings.
///
/// Returns: a new #GVariant holding the data from @value,
/// or %NULL in case of an error
typedef GSettingsBindSetMapping
    = ffi.Pointer<ffi.NativeFunction<GSettingsBindSetMappingFunction>>;
typedef GSettingsBindSetMappingFunction = ffi.Pointer<GVariant> Function(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariantType> expected_type,
    gpointer user_data);

/// GSettingsGetMapping:
/// @value: the #GVariant to map, or %NULL
/// @result: (out): the result of the mapping
/// @user_data: (closure): the user data that was passed to
/// g_settings_get_mapped()
///
/// The type of the function that is used to convert from a value stored
/// in a #GSettings to a value that is useful to the application.
///
/// If the value is successfully mapped, the result should be stored at
/// @result and %TRUE returned.  If mapping fails (for example, if @value
/// is not in the right format) then %FALSE should be returned.
///
/// If @value is %NULL then it means that the mapping function is being
/// given a "last chance" to successfully return a valid value.  %TRUE
/// must be returned in this case.
///
/// Returns: %TRUE if the conversion succeeded, %FALSE in case of an error
typedef GSettingsGetMapping
    = ffi.Pointer<ffi.NativeFunction<GSettingsGetMappingFunction>>;
typedef GSettingsGetMappingFunction = gboolean Function(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gpointer> result,
    gpointer user_data);
typedef DartGSettingsGetMappingFunction = Dartgint Function(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gpointer> result,
    gpointer user_data);

final class _GSimpleActionGroupClass extends ffi.Struct {
  external GObjectClass parent_class;

  @ffi.Array.multi([12])
  external ffi.Array<gpointer> padding;
}

typedef GSimpleActionGroup = _GSimpleActionGroup;

final class _GSimpleAsyncResultClass extends ffi.Opaque {}

typedef GSimpleAsyncResult = _GSimpleAsyncResult;

/// GSimpleAsyncThreadFunc:
/// @res: a #GSimpleAsyncResult.
/// @object: a #GObject.
/// @cancellable: optional #GCancellable object, %NULL to ignore.
///
/// Simple thread function that runs an asynchronous operation and
/// checks for cancellation.
typedef GSimpleAsyncThreadFunc
    = ffi.Pointer<ffi.NativeFunction<GSimpleAsyncThreadFuncFunction>>;
typedef GSimpleAsyncThreadFuncFunction = ffi.Void Function(
    ffi.Pointer<GSimpleAsyncResult> res,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GCancellable> cancellable);
typedef DartGSimpleAsyncThreadFuncFunction = void Function(
    ffi.Pointer<GSimpleAsyncResult> res,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GCancellable> cancellable);

final class _GSimpleProxyResolver extends ffi.Struct {
  external GObject parent_instance;

  external ffi.Pointer<GSimpleProxyResolverPrivate> priv;
}

typedef GSimpleProxyResolverPrivate = _GSimpleProxyResolverPrivate;

final class _GSimpleProxyResolverPrivate extends ffi.Opaque {}

final class _GSimpleProxyResolverClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GSimpleProxyResolver:
///
/// A #GProxyResolver implementation for using a fixed set of proxies.
typedef GSimpleProxyResolver = _GSimpleProxyResolver;

final class _GSocketClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved7;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved8;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved9;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved10;
}

/// GSocket:
///
/// A lowlevel network socket object.
///
/// Since: 2.22
typedef GSocket = _GSocket;

final class _GSocketClientClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSocketClient> client,
              ffi.Int32 event,
              ffi.Pointer<GSocketConnectable> connectable,
              ffi.Pointer<GIOStream> connection)>> event;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;
}

/// GSocketClient:
///
/// A helper class for network clients to make connections.
///
/// Since: 2.22
typedef GSocketClient = _GSocketClient;

/// GSocketConnectableIface:
/// @g_iface: The parent interface.
/// @enumerate: Creates a #GSocketAddressEnumerator
/// @proxy_enumerate: Creates a #GProxyAddressEnumerator
/// @to_string: Format the connectable’s address as a string for debugging.
/// Implementing this is optional. (Since: 2.48)
///
/// Provides an interface for returning a #GSocketAddressEnumerator
/// and #GProxyAddressEnumerator
final class _GSocketConnectableIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddressEnumerator> Function(
              ffi.Pointer<GSocketConnectable> connectable)>> enumerate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GSocketAddressEnumerator> Function(
              ffi.Pointer<GSocketConnectable> connectable)>> proxy_enumerate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gchar> Function(
              ffi.Pointer<GSocketConnectable> connectable)>> to_string;
}

final class _GSocketConnectionClass extends ffi.Struct {
  external GIOStreamClass parent_class;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;
}

/// GSocketControlMessageClass:
/// @get_size: gets the size of the message.
/// @get_level: gets the protocol of the message.
/// @get_type: gets the protocol specific type of the message.
/// @serialize: Writes out the message data.
/// @deserialize: Tries to deserialize a message.
///
/// Class structure for #GSocketControlMessage.
final class _GSocketControlMessageClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GSocketControlMessage> message)>> get_size;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<GSocketControlMessage> message)>>
      get_level;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<GSocketControlMessage> message)>>
      get_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GSocketControlMessage> message, gpointer data)>>
      serialize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GSocketControlMessage> Function(
                  ffi.Int level, ffi.Int type, gsize size, gpointer data)>>
      deserialize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

/// GSocketListenerClass:
/// @changed: virtual method called when the set of socket listened to changes
///
/// Class structure for #GSocketListener.
final class _GSocketListenerClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketListener> listener)>> changed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSocketListener> listener,
              ffi.Int32 event, ffi.Pointer<GSocket> socket)>> event;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;
}

/// GSocketServiceClass:
/// @incoming: signal emitted when new connections are accepted
///
/// Class structure for #GSocketService.
final class _GSocketServiceClass extends ffi.Struct {
  external GSocketListenerClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSocketService> service,
              ffi.Pointer<GSocketConnection> connection,
              ffi.Pointer<GObject> source_object)>> incoming;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;
}

typedef GSocketListenerClass = _GSocketListenerClass;
typedef GSrvTarget = _GSrvTarget;

/// GSubprocess:
///
/// A child process.
///
/// Since: 2.40
typedef GSubprocess = _GSubprocess;

/// GSubprocessLauncher:
///
/// Options for launching a child process.
///
/// Since: 2.40
typedef GSubprocessLauncher = _GSubprocessLauncher;

final class _GTaskClass extends ffi.Opaque {}

typedef GTask = _GTask;
typedef GTaskThreadFunc
    = ffi.Pointer<ffi.NativeFunction<GTaskThreadFuncFunction>>;
typedef GTaskThreadFuncFunction = ffi.Void Function(
    ffi.Pointer<GTask> task,
    gpointer source_object,
    gpointer task_data,
    ffi.Pointer<GCancellable> cancellable);
typedef DartGTaskThreadFuncFunction = void Function(
    ffi.Pointer<GTask> task,
    gpointer source_object,
    gpointer task_data,
    ffi.Pointer<GCancellable> cancellable);

final class _GTcpConnectionClass extends ffi.Struct {
  external GSocketConnectionClass parent_class;
}

typedef GSocketConnectionClass = _GSocketConnectionClass;

final class _GTcpWrapperConnectionClass extends ffi.Struct {
  external GTcpConnectionClass parent_class;
}

typedef GTcpConnectionClass = _GTcpConnectionClass;
typedef GTcpWrapperConnection = _GTcpWrapperConnection;
typedef GTestDBus = _GTestDBus;

final class _GThemedIconClass extends ffi.Opaque {}

typedef GThemedIcon = _GThemedIcon;

final class _GThreadedSocketServiceClass extends ffi.Struct {
  external GSocketServiceClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GThreadedSocketService> service,
              ffi.Pointer<GSocketConnection> connection,
              ffi.Pointer<GObject> source_object)>> run;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;
}

typedef GSocketServiceClass = _GSocketServiceClass;

/// GThreadedSocketService:
///
/// A helper class for handling accepting incoming connections in the
/// glib mainloop and handling them in a thread.
///
/// Since: 2.22
typedef GThreadedSocketService = _GThreadedSocketService;

final class _GTlsBackend extends ffi.Opaque {}

/// GTlsBackendInterface:
/// @g_iface: The parent interface.
/// @supports_tls: returns whether the backend supports TLS.
/// @supports_dtls: returns whether the backend supports DTLS
/// @get_default_database: returns a default #GTlsDatabase instance.
/// @get_certificate_type: returns the #GTlsCertificate implementation type
/// @get_client_connection_type: returns the #GTlsClientConnection implementation type
/// @get_server_connection_type: returns the #GTlsServerConnection implementation type
/// @get_file_database_type: returns the #GTlsFileDatabase implementation type.
/// @get_dtls_client_connection_type: returns the #GDtlsClientConnection implementation type
/// @get_dtls_server_connection_type: returns the #GDtlsServerConnection implementation type
///
/// Provides an interface for describing TLS-related types.
///
/// Since: 2.28
final class _GTlsBackendInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GTlsBackend> backend)>>
      supports_tls;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_certificate_type;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_client_connection_type;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_server_connection_type;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_file_database_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GTlsDatabase> Function(
              ffi.Pointer<GTlsBackend> backend)>> get_default_database;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GTlsBackend> backend)>>
      supports_dtls;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_dtls_client_connection_type;

  external ffi.Pointer<ffi.NativeFunction<GType Function()>>
      get_dtls_server_connection_type;
}

typedef GTlsBackend = _GTlsBackend;

final class _GTlsCertificateClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsCertificate> cert,
              ffi.Pointer<GSocketConnectable> identity,
              ffi.Pointer<GTlsCertificate> trusted_ca)>> verify;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

/// GTlsConnectionClass:
/// @parent_class: The parent class.
/// @accept_certificate: Check whether to accept a certificate.
/// @handshake: Perform a handshake operation.
/// @handshake_async: Start an asynchronous handshake operation.
/// @handshake_finish: Finish an asynchronous handshake operation.
/// @get_binding_data: Retrieve TLS channel binding data (Since: 2.66)
/// @get_negotiated_protocol: Get ALPN-negotiated protocol (Since: 2.70)
///
/// The class structure for the #GTlsConnection type.
///
/// Since: 2.28
final class _GTlsConnectionClass extends ffi.Struct {
  external GIOStreamClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection> connection,
              ffi.Pointer<GTlsCertificate> peer_cert,
              ffi.Int32 errors)>> accept_certificate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection> conn,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> handshake;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsConnection> conn,
              ffi.Int io_priority,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> handshake_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection> conn,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> handshake_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTlsConnection> conn,
              ffi.Int32 type,
              ffi.Pointer<GByteArray> data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> get_binding_data;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsConnection> conn)>>
      get_negotiated_protocol;

  @ffi.Array.multi([6])
  external ffi.Array<gpointer> padding;
}

typedef GTlsConnection = _GTlsConnection;

/// GTlsClientConnectionInterface:
/// @g_iface: The parent interface.
/// @copy_session_state: Copies session state from one #GTlsClientConnection to another.
///
/// vtable for a #GTlsClientConnection implementation.
///
/// Since: 2.26
final class _GTlsClientConnectionInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTlsClientConnection> conn,
              ffi.Pointer<GTlsClientConnection> source)>> copy_session_state;
}

typedef GTlsClientConnection = _GTlsClientConnection;

final class _GTlsDatabaseClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<GTlsCertificate> chain,
              ffi.Pointer<gchar> purpose,
              ffi.Pointer<GSocketConnectable> identity,
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> verify_chain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<GTlsCertificate> chain,
              ffi.Pointer<gchar> purpose,
              ffi.Pointer<GSocketConnectable> identity,
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> verify_chain_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> verify_chain_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GTlsCertificate> certificate)>>
      create_certificate_handle;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<gchar> handle,
                  ffi.Pointer<GTlsInteraction> interaction,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificate_for_handle;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<gchar> handle,
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_certificate_for_handle_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificate_for_handle_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GTlsCertificate> certificate,
                  ffi.Pointer<GTlsInteraction> interaction,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificate_issuer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<GTlsCertificate> certificate,
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_certificate_issuer_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GTlsCertificate> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificate_issuer_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GByteArray> issuer_raw_dn,
                  ffi.Pointer<GTlsInteraction> interaction,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificates_issued_by;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsDatabase> self,
              ffi.Pointer<GByteArray> issuer_raw_dn,
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> lookup_certificates_issued_by_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GTlsDatabase> self,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      lookup_certificates_issued_by_finish;

  @ffi.Array.multi([16])
  external ffi.Array<gpointer> padding;
}

/// GTlsFileDatabaseInterface:
/// @g_iface: The parent interface.
///
/// Provides an interface for #GTlsFileDatabase implementations.
final class _GTlsFileDatabaseInterface extends ffi.Struct {
  external GTypeInterface g_iface;

  @ffi.Array.multi([8])
  external ffi.Array<gpointer> padding;
}

final class _GTlsInteractionClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Pointer<GTlsPassword> password,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> ask_password;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Pointer<GTlsPassword> password,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> ask_password_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> ask_password_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Pointer<GTlsConnection> connection,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              ffi.Pointer<ffi.Pointer<GError>> error)>> request_certificate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsInteraction> interaction,
              ffi.Pointer<GTlsConnection> connection,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> request_certificate_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GTlsInteraction> interaction,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      request_certificate_finish;

  @ffi.Array.multi([21])
  external ffi.Array<gpointer> padding;
}

typedef GTlsPassword = _GTlsPassword;

/// GTlsPasswordClass:
/// @get_value: virtual method for g_tls_password_get_value()
/// @set_value: virtual method for g_tls_password_set_value()
/// @get_default_warning: virtual method for g_tls_password_get_warning() if no
/// value has been set using g_tls_password_set_warning()
///
/// Class structure for #GTlsPassword.
final class _GTlsPasswordClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(ffi.Pointer<GTlsPassword> password,
              ffi.Pointer<gsize> length)>> get_value;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTlsPassword> password,
              ffi.Pointer<guchar> value,
              gssize length,
              GDestroyNotify destroy)>> set_value;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GTlsPassword> password)>>
      get_default_warning;

  @ffi.Array.multi([4])
  external ffi.Array<gpointer> padding;
}

/// GTlsServerConnectionInterface:
/// @g_iface: The parent interface.
///
/// vtable for a #GTlsServerConnection implementation.
///
/// Since: 2.26
final class _GTlsServerConnectionInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

final class _GVfsClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVfs> vfs)>>
      is_active;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GVfs> vfs, ffi.Pointer<ffi.Char> path)>>
      get_file_for_path;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GVfs> vfs, ffi.Pointer<ffi.Char> uri)>>
      get_file_for_uri;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<gchar>> Function(ffi.Pointer<GVfs> vfs)>>
      get_supported_uri_schemes;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(
                  ffi.Pointer<GVfs> vfs, ffi.Pointer<ffi.Char> parse_name)>>
      parse_name;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GVfs> vfs,
                  ffi.Pointer<ffi.Char> filename,
                  guint64 device,
                  ffi.Pointer<GFileAttributeMatcher> attribute_matcher,
                  ffi.Pointer<GFileInfo> info,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<gpointer> extra_data,
                  ffi.Pointer<GDestroyNotify> free_extra_data)>>
      local_file_add_info;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GVfs> vfs,
                  ffi.Pointer<GFileAttributeInfoList> list)>>
      add_writable_namespaces;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GVfs> vfs,
                  ffi.Pointer<ffi.Char> filename,
                  ffi.Pointer<GFileInfo> info,
                  ffi.Int32 flags,
                  ffi.Pointer<GCancellable> cancellable,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      local_file_set_attributes;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GVfs> vfs, ffi.Pointer<ffi.Char> filename)>>
      local_file_removed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVfs> vfs, ffi.Pointer<ffi.Char> source,
              ffi.Pointer<ffi.Char> dest)>> local_file_moved;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GIcon> Function(
                  ffi.Pointer<GVfs> vfs, ffi.Pointer<GVariant> value)>>
      deserialize_icon;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved4;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved5;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _g_reserved6;
}

typedef GVfs = _GVfs;

/// GVfsFileLookupFunc:
/// @vfs: a #GVfs
/// @identifier: the identifier to look up a #GFile for. This can either
/// be an URI or a parse name as returned by g_file_get_parse_name()
/// @user_data: user data passed to the function
///
/// This function type is used by g_vfs_register_uri_scheme() to make it
/// possible for a client to associate an URI scheme to a different #GFile
/// implementation.
///
/// The client should return a reference to the new file that has been
/// created for @uri, or %NULL to continue with the default implementation.
///
/// Returns: (transfer full): a #GFile for @identifier.
///
/// Since: 2.50
typedef GVfsFileLookupFunc
    = ffi.Pointer<ffi.NativeFunction<GVfsFileLookupFuncFunction>>;
typedef GVfsFileLookupFuncFunction = ffi.Pointer<GFile> Function(
    ffi.Pointer<GVfs> vfs,
    ffi.Pointer<ffi.Char> identifier,
    gpointer user_data);

final class _GVolumeIface extends ffi.Struct {
  external GTypeInterface g_iface;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVolume> volume)>>
      changed;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVolume> volume)>>
      removed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVolume> volume)>>
      get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume> volume)>> get_icon;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVolume> volume)>>
      get_uuid;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GDrive> Function(ffi.Pointer<GVolume> volume)>> get_drive;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GMount> Function(ffi.Pointer<GVolume> volume)>> get_mount;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume> volume)>>
      can_mount;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume> volume)>>
      can_eject;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume> volume,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> mount_fn;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GVolume> volume,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> mount_finish;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume> volume,
              ffi.Int32 flags,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GVolume> volume,
              ffi.Pointer<GAsyncResult> result,
              ffi.Pointer<ffi.Pointer<GError>> error)>> eject_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GVolume> volume, ffi.Pointer<ffi.Char> kind)>>
      get_identifier;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GVolume> volume)>> enumerate_identifiers;

  external ffi.Pointer<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GVolume> volume)>>
      should_automount;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GFile> Function(ffi.Pointer<GVolume> volume)>>
      get_activation_root;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVolume> volume,
              ffi.Int32 flags,
              ffi.Pointer<GMountOperation> mount_operation,
              ffi.Pointer<GCancellable> cancellable,
              GAsyncReadyCallback callback,
              gpointer user_data)>> eject_with_operation;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GVolume> volume,
                  ffi.Pointer<GAsyncResult> result,
                  ffi.Pointer<ffi.Pointer<GError>> error)>>
      eject_with_operation_finish;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<gchar> Function(ffi.Pointer<GVolume> volume)>>
      get_sort_key;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GIcon> Function(ffi.Pointer<GVolume> volume)>>
      get_symbolic_icon;
}

final class _GZlibCompressorClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GZlibCompressor = _GZlibCompressor;

final class _GZlibDecompressorClass extends ffi.Struct {
  external GObjectClass parent_class;
}

typedef GZlibDecompressor = _GZlibDecompressor;

const int g_macro__has_attribute = 0;

const int g_macro__has_feature = 0;

const int g_macro__has_builtin = 0;

const int g_macro__has_extension = 0;

const String G_GNUC_FUNCTION = '';

const String G_GNUC_PRETTY_FUNCTION = '';

const int G_ANALYZER_ANALYZING = 0;

const String G_STRLOC = '/tmp/ILCRWF/temp_for_macros.hpp:39';

const int FALSE = 0;

const int TRUE = 1;

const int GLIB_VERSION_2_26 = 137728;

const int GLIB_VERSION_2_28 = 138240;

const int GLIB_VERSION_2_30 = 138752;

const int GLIB_VERSION_2_32 = 139264;

const int GLIB_VERSION_2_34 = 139776;

const int GLIB_VERSION_2_36 = 140288;

const int GLIB_VERSION_2_38 = 140800;

const int GLIB_VERSION_2_40 = 141312;

const int GLIB_VERSION_2_42 = 141824;

const int GLIB_VERSION_2_44 = 142336;

const int GLIB_VERSION_2_46 = 142848;

const int GLIB_VERSION_2_48 = 143360;

const int GLIB_VERSION_2_50 = 143872;

const int GLIB_VERSION_2_52 = 144384;

const int GLIB_VERSION_2_54 = 144896;

const int GLIB_VERSION_2_56 = 145408;

const int GLIB_VERSION_2_58 = 145920;

const int GLIB_VERSION_2_60 = 146432;

const int GLIB_VERSION_2_62 = 146944;

const int GLIB_VERSION_2_64 = 147456;

const int GLIB_VERSION_2_66 = 147968;

const int GLIB_VERSION_2_68 = 148480;

const int GLIB_VERSION_2_70 = 148992;

const int GLIB_VERSION_2_72 = 149504;

const int GLIB_VERSION_CUR_STABLE = 149504;

const int GLIB_VERSION_PREV_STABLE = 148992;

const int GLIB_VERSION_MIN_REQUIRED = 149504;

const int GLIB_VERSION_MAX_ALLOWED = 149504;

const int G_MININT8 = -128;

const int G_MAXINT8 = 127;

const int G_MAXUINT8 = 255;

const int G_MININT16 = -32768;

const int G_MAXINT16 = 32767;

const int G_MAXUINT16 = 65535;

const int G_MININT32 = -2147483648;

const int G_MAXINT32 = 2147483647;

const int G_MAXUINT32 = 4294967295;

const int G_MININT64 = -9223372036854775808;

const int G_MAXINT64 = 9223372036854775807;

const int G_MAXUINT64 = -1;

const double G_E = 2.718281828459045;

const double G_LN2 = 0.6931471805599453;

const double G_LN10 = 2.302585092994046;

const double G_PI = 3.141592653589793;

const double G_PI_2 = 1.5707963267948966;

const double G_PI_4 = 0.7853981633974483;

const double G_SQRT2 = 1.4142135623730951;

const int G_LITTLE_ENDIAN = 1234;

const int G_BIG_ENDIAN = 4321;

const int G_PDP_ENDIAN = 3412;

const int G_IEEE754_FLOAT_BIAS = 127;

const int G_IEEE754_DOUBLE_BIAS = 1023;

const double G_LOG_2_BASE_10 = 0.3010299956639812;

const String G_OS_INFO_KEY_NAME = 'NAME';

const String G_OS_INFO_KEY_PRETTY_NAME = 'PRETTY_NAME';

const String G_OS_INFO_KEY_VERSION = 'VERSION';

const String G_OS_INFO_KEY_VERSION_CODENAME = 'VERSION_CODENAME';

const String G_OS_INFO_KEY_VERSION_ID = 'VERSION_ID';

const String G_OS_INFO_KEY_ID = 'ID';

const String G_OS_INFO_KEY_HOME_URL = 'HOME_URL';

const String G_OS_INFO_KEY_DOCUMENTATION_URL = 'DOCUMENTATION_URL';

const String G_OS_INFO_KEY_SUPPORT_URL = 'SUPPORT_URL';

const String G_OS_INFO_KEY_BUG_REPORT_URL = 'BUG_REPORT_URL';

const String G_OS_INFO_KEY_PRIVACY_POLICY_URL = 'PRIVACY_POLICY_URL';

const int G_TIME_SPAN_DAY = 86400000000;

const int G_TIME_SPAN_HOUR = 3600000000;

const int G_TIME_SPAN_MINUTE = 60000000;

const int G_TIME_SPAN_SECOND = 1000000;

const int G_TIME_SPAN_MILLISECOND = 1000;

const int G_DATALIST_FLAGS_MASK = 3;

const int G_DATE_BAD_JULIAN = 0;

const int G_DATE_BAD_DAY = 0;

const int G_DATE_BAD_YEAR = 0;

const int G_MEM_ALIGN = 8;

const int G_HOOK_FLAG_USER_SHIFT = 4;

const int G_PRIORITY_HIGH = -100;

const int G_PRIORITY_DEFAULT = 0;

const int G_PRIORITY_HIGH_IDLE = 100;

const int G_PRIORITY_DEFAULT_IDLE = 200;

const int G_PRIORITY_LOW = 300;

const int G_SOURCE_REMOVE = 0;

const int G_SOURCE_CONTINUE = 1;

const int G_UNICODE_COMBINING_MARK = 10;

const int G_UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;

const String G_KEY_FILE_DESKTOP_GROUP = 'Desktop Entry';

const String G_KEY_FILE_DESKTOP_KEY_TYPE = 'Type';

const String G_KEY_FILE_DESKTOP_KEY_VERSION = 'Version';

const String G_KEY_FILE_DESKTOP_KEY_NAME = 'Name';

const String G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = 'GenericName';

const String G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = 'NoDisplay';

const String G_KEY_FILE_DESKTOP_KEY_COMMENT = 'Comment';

const String G_KEY_FILE_DESKTOP_KEY_ICON = 'Icon';

const String G_KEY_FILE_DESKTOP_KEY_HIDDEN = 'Hidden';

const String G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = 'OnlyShowIn';

const String G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = 'NotShowIn';

const String G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = 'TryExec';

const String G_KEY_FILE_DESKTOP_KEY_EXEC = 'Exec';

const String G_KEY_FILE_DESKTOP_KEY_PATH = 'Path';

const String G_KEY_FILE_DESKTOP_KEY_TERMINAL = 'Terminal';

const String G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = 'MimeType';

const String G_KEY_FILE_DESKTOP_KEY_CATEGORIES = 'Categories';

const String G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = 'StartupNotify';

const String G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = 'StartupWMClass';

const String G_KEY_FILE_DESKTOP_KEY_URL = 'URL';

const String G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = 'DBusActivatable';

const String G_KEY_FILE_DESKTOP_KEY_ACTIONS = 'Actions';

const String G_KEY_FILE_DESKTOP_TYPE_APPLICATION = 'Application';

const String G_KEY_FILE_DESKTOP_TYPE_LINK = 'Link';

const String G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = 'Directory';

const int G_LOG_LEVEL_USER_SHIFT = 8;

const int G_LOG_FATAL_MASK = 5;

const String G_OPTION_REMAINING = '';

const String G_CSET_A_2_Z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

const String G_CSET_a_2_z = 'abcdefghijklmnopqrstuvwxyz';

const String G_CSET_DIGITS = '0123456789';

const String G_CSET_LATINC =
    '\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE';

const String G_CSET_LATINS =
    '\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF';

const String G_STR_DELIMITERS = '_-|> <.';

const int G_ASCII_DTOSTR_BUF_SIZE = 39;

const String G_TEST_OPTION_ISOLATE_DIRS = 'isolate_dirs';

const int G_USEC_PER_SEC = 1000000;

const String G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ':/?#[]@';

const String G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = '!\$&\'()*+,;=';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = '!\$&\'()*+,;=:@';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = '!\$&\'()*+,;=:@/';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = '!\$&\'()*+,;=:';

const int G_ALLOC_ONLY = 1;

const int G_ALLOC_AND_FREE = 2;

const int G_ALLOCATOR_LIST = 1;

const int G_ALLOCATOR_SLIST = 2;

const int G_ALLOCATOR_NODE = 3;

const int G_TYPE_FUNDAMENTAL_MAX = 1020;

const int G_TYPE_INVALID = 0;

const int G_TYPE_NONE = 4;

const int G_TYPE_INTERFACE = 8;

const int G_TYPE_CHAR = 12;

const int G_TYPE_UCHAR = 16;

const int G_TYPE_BOOLEAN = 20;

const int G_TYPE_INT = 24;

const int G_TYPE_UINT = 28;

const int G_TYPE_LONG = 32;

const int G_TYPE_ULONG = 36;

const int G_TYPE_INT64 = 40;

const int G_TYPE_UINT64 = 44;

const int G_TYPE_ENUM = 48;

const int G_TYPE_FLAGS = 52;

const int G_TYPE_FLOAT = 56;

const int G_TYPE_DOUBLE = 60;

const int G_TYPE_STRING = 64;

const int G_TYPE_POINTER = 68;

const int G_TYPE_BOXED = 72;

const int G_TYPE_PARAM = 76;

const int G_TYPE_OBJECT = 80;

const int G_TYPE_VARIANT = 84;

const int G_TYPE_FUNDAMENTAL_SHIFT = 2;

const int G_TYPE_RESERVED_GLIB_FIRST = 22;

const int G_TYPE_RESERVED_GLIB_LAST = 31;

const int G_TYPE_RESERVED_BSE_FIRST = 32;

const int G_TYPE_RESERVED_BSE_LAST = 48;

const int G_TYPE_RESERVED_USER_FIRST = 49;

const int G_TYPE_FLAG_RESERVED_ID_BIT = 1;

const int G_VALUE_NOCOPY_CONTENTS = 134217728;

const int G_VALUE_INTERNED_STRING = 268435456;

const int G_PARAM_STATIC_STRINGS = 224;

const int G_PARAM_MASK = 255;

const int G_PARAM_USER_SHIFT = 8;

const int G_SIGNAL_FLAGS_MASK = 511;

const int G_SIGNAL_MATCH_MASK = 63;

const int G_SIGNAL_TYPE_STATIC_SCOPE = 1;

const int G_DBUS_METHOD_INVOCATION_HANDLED = 1;

const int G_DBUS_METHOD_INVOCATION_UNHANDLED = 0;

const String G_DEBUG_CONTROLLER_EXTENSION_POINT_NAME = 'gio-debug-controller';

const String G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE = 'unix-device';

const String G_FILE_ATTRIBUTE_STANDARD_TYPE = 'standard::type';

const String G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = 'standard::is-hidden';

const String G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = 'standard::is-backup';

const String G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = 'standard::is-symlink';

const String G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = 'standard::is-virtual';

const String G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = 'standard::is-volatile';

const String G_FILE_ATTRIBUTE_STANDARD_NAME = 'standard::name';

const String G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = 'standard::display-name';

const String G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = 'standard::edit-name';

const String G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = 'standard::copy-name';

const String G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = 'standard::description';

const String G_FILE_ATTRIBUTE_STANDARD_ICON = 'standard::icon';

const String G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON =
    'standard::symbolic-icon';

const String G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = 'standard::content-type';

const String G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE =
    'standard::fast-content-type';

const String G_FILE_ATTRIBUTE_STANDARD_SIZE = 'standard::size';

const String G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE =
    'standard::allocated-size';

const String G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET =
    'standard::symlink-target';

const String G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = 'standard::target-uri';

const String G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = 'standard::sort-order';

const String G_FILE_ATTRIBUTE_ETAG_VALUE = 'etag::value';

const String G_FILE_ATTRIBUTE_ID_FILE = 'id::file';

const String G_FILE_ATTRIBUTE_ID_FILESYSTEM = 'id::filesystem';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_READ = 'access::can-read';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = 'access::can-write';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = 'access::can-execute';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = 'access::can-delete';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = 'access::can-trash';

const String G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = 'access::can-rename';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = 'mountable::can-mount';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = 'mountable::can-unmount';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = 'mountable::can-eject';

const String G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = 'mountable::unix-device';

const String G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE =
    'mountable::unix-device-file';

const String G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = 'mountable::hal-udi';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = 'mountable::can-start';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED =
    'mountable::can-start-degraded';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = 'mountable::can-stop';

const String G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE =
    'mountable::start-stop-type';

const String G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = 'mountable::can-poll';

const String G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC =
    'mountable::is-media-check-automatic';

const String G_FILE_ATTRIBUTE_TIME_MODIFIED = 'time::modified';

const String G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = 'time::modified-usec';

const String G_FILE_ATTRIBUTE_TIME_ACCESS = 'time::access';

const String G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = 'time::access-usec';

const String G_FILE_ATTRIBUTE_TIME_CHANGED = 'time::changed';

const String G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = 'time::changed-usec';

const String G_FILE_ATTRIBUTE_TIME_CREATED = 'time::created';

const String G_FILE_ATTRIBUTE_TIME_CREATED_USEC = 'time::created-usec';

const String G_FILE_ATTRIBUTE_UNIX_DEVICE = 'unix::device';

const String G_FILE_ATTRIBUTE_UNIX_INODE = 'unix::inode';

const String G_FILE_ATTRIBUTE_UNIX_MODE = 'unix::mode';

const String G_FILE_ATTRIBUTE_UNIX_NLINK = 'unix::nlink';

const String G_FILE_ATTRIBUTE_UNIX_UID = 'unix::uid';

const String G_FILE_ATTRIBUTE_UNIX_GID = 'unix::gid';

const String G_FILE_ATTRIBUTE_UNIX_RDEV = 'unix::rdev';

const String G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = 'unix::block-size';

const String G_FILE_ATTRIBUTE_UNIX_BLOCKS = 'unix::blocks';

const String G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = 'unix::is-mountpoint';

const String G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = 'dos::is-archive';

const String G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = 'dos::is-system';

const String G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT = 'dos::is-mountpoint';

const String G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG = 'dos::reparse-point-tag';

const String G_FILE_ATTRIBUTE_OWNER_USER = 'owner::user';

const String G_FILE_ATTRIBUTE_OWNER_USER_REAL = 'owner::user-real';

const String G_FILE_ATTRIBUTE_OWNER_GROUP = 'owner::group';

const String G_FILE_ATTRIBUTE_THUMBNAIL_PATH = 'thumbnail::path';

const String G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = 'thumbnail::failed';

const String G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = 'thumbnail::is-valid';

const String G_FILE_ATTRIBUTE_PREVIEW_ICON = 'preview::icon';

const String G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = 'filesystem::size';

const String G_FILE_ATTRIBUTE_FILESYSTEM_FREE = 'filesystem::free';

const String G_FILE_ATTRIBUTE_FILESYSTEM_USED = 'filesystem::used';

const String G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = 'filesystem::type';

const String G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = 'filesystem::readonly';

const String G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW =
    'filesystem::use-preview';

const String G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE = 'filesystem::remote';

const String G_FILE_ATTRIBUTE_GVFS_BACKEND = 'gvfs::backend';

const String G_FILE_ATTRIBUTE_SELINUX_CONTEXT = 'selinux::context';

const String G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = 'trash::item-count';

const String G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = 'trash::orig-path';

const String G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = 'trash::deletion-date';

const String G_FILE_ATTRIBUTE_RECENT_MODIFIED = 'recent::modified';

const String G_MEMORY_MONITOR_EXTENSION_POINT_NAME = 'gio-memory-monitor';

const String G_MENU_ATTRIBUTE_ACTION = 'action';

const String G_MENU_ATTRIBUTE_ACTION_NAMESPACE = 'action-namespace';

const String G_MENU_ATTRIBUTE_TARGET = 'target';

const String G_MENU_ATTRIBUTE_LABEL = 'label';

const String G_MENU_ATTRIBUTE_ICON = 'icon';

const String G_MENU_LINK_SUBMENU = 'submenu';

const String G_MENU_LINK_SECTION = 'section';

const String G_VOLUME_MONITOR_EXTENSION_POINT_NAME = 'gio-volume-monitor';

const String G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME =
    'gio-native-volume-monitor';

const String G_NETWORK_MONITOR_EXTENSION_POINT_NAME = 'gio-network-monitor';

const String G_POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME =
    'gio-power-profile-monitor';

const String G_PROXY_EXTENSION_POINT_NAME = 'gio-proxy';

const String G_PROXY_RESOLVER_EXTENSION_POINT_NAME = 'gio-proxy-resolver';

const String G_TLS_BACKEND_EXTENSION_POINT_NAME = 'gio-tls-backend';

const String G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = '1.3.6.1.5.5.7.3.1';

const String G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = '1.3.6.1.5.5.7.3.2';

const String G_VFS_EXTENSION_POINT_NAME = 'gio-vfs';

const String G_VOLUME_IDENTIFIER_KIND_HAL_UDI = 'hal-udi';

const String G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = 'unix-device';

const String G_VOLUME_IDENTIFIER_KIND_LABEL = 'label';

const String G_VOLUME_IDENTIFIER_KIND_UUID = 'uuid';

const String G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = 'nfs-mount';

const String G_VOLUME_IDENTIFIER_KIND_CLASS = 'class';
